/*Location97*//*Location82*///c8b59d0a-f82c-a376-50f2-72a21b6711b5
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.432, on 2024/01/01 12:00:00.000 AM.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
namespace FuzzTests.n0
{
    #pragma warning disable 8019//Location83
    using Lazinator.Attributes;/*Location84*/
    using Lazinator.Buffers;/*Location85*/
    using Lazinator.Core;/*Location86*/
    using Lazinator.Exceptions;/*Location87*/
    using Lazinator.Support;/*Location88*/
    using static Lazinator.Buffers.WriteUncompressedPrimitives;/*Location89*/
    using System;/*Location90*/
    using System.Buffers;/*Location91*/
    using System.Collections.Generic;/*Location92*/
    using System.Diagnostics;/*Location93*/
    using System.IO;/*Location94*/
    using System.Linq;/*Location95*/
    using System.Runtime.InteropServices;/*Location96*/
    using static Lazinator.Core.LazinatorUtilities;
    #pragma warning restore 8019
    
    [Autogenerated]
    public sealed partial class WorryAllianceClass : ILazinator
    {
        /*Location98*/[DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool IsStruct => false;
        
        /*Location99*//* Property definitions */
        
        /*Location100*/        int _MentalBasketball_ByteIndex;
        /*Location101*/int _MentalBasketball_ByteLength => (int) (LazinatorMemoryStorage.Length - _MentalBasketball_ByteIndex);
        
        /*Location102*/
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        int? _FavoriteVisible;
        public int? FavoriteVisible
        {
            [DebuggerStepThrough]
            get
            {
                return _FavoriteVisible;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                _FavoriteVisible = value;
            }
        }
        /*Location103*/
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        short _WoodPersonality;
        public short WoodPersonality
        {
            [DebuggerStepThrough]
            get
            {
                return _WoodPersonality;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                _WoodPersonality = value;
            }
        }
        /*Location105*/
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RefugeeSmartClass? _MentalBasketball;
        public RefugeeSmartClass? MentalBasketball
        {
            [DebuggerStepThrough]
            get
            {
                if (!_MentalBasketball_Accessed)
                {
                    LazinateMentalBasketball();
                } 
                return _MentalBasketball;
            }
            [DebuggerStepThrough]
            set
            {
                if (_MentalBasketball != null)
                {
                    _MentalBasketball.LazinatorParents = _MentalBasketball.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _MentalBasketball = value;
                _MentalBasketball_Accessed = true;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _MentalBasketball_Accessed;
        private void LazinateMentalBasketball()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MentalBasketball = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MentalBasketball_ByteIndex, _MentalBasketball_ByteLength, null);if (childData.Length == 0)
                {
                    _MentalBasketball = default;
                }
                else 
                {
                    _MentalBasketball = new RefugeeSmartClass(childData)
                    {
                        LazinatorParents = new LazinatorParentsCollection(this, null)/*Location104*/
                    };
                    
                }
            }
            _MentalBasketball_Accessed = true;
        }
        
        /*Location106*/// DEBUG5
        /*Location115*/
        /* Serialization, deserialization, and object relationships */
        
        public WorryAllianceClass(IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren)
        {
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public WorryAllianceClass(LazinatorMemory serializedBytes, ILazinator? parent = null, IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren, int? lazinatorObjectVersion = null)
        {
            if (lazinatorObjectVersion != null)
            {
                LazinatorObjectVersion = (int) lazinatorObjectVersion;
            }
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
            LazinatorParents = new LazinatorParentsCollection(parent, null);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorParentsCollection LazinatorParents { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool HasChanged { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _IsDirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorMemoryStorage.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _DescendantHasChanged;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _DescendantIsDirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public bool NonBinaryHash32 => false;
        
        void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialReadOnlyMemory.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            int uniqueID = span.ToDecompressedInt32(ref bytesSoFar);
            if (uniqueID != LazinatorUniqueID)
            {
                ThrowHelper.ThrowFormatException();
            }
            
            int lazinatorLibraryVersion = span.ToDecompressedInt32(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt32(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            int totalBytes = ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return totalBytes;
        }
        
        public void SerializeLazinator()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorMemoryStorage.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
                
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(LazinatorSerializationOptions.Default);
            }
            else
            {
                BufferWriter writer = new BufferWriter(LazinatorMemoryStorage.LengthInt ?? 0);
                LazinatorMemoryStorage.WriteToBuffer(ref writer);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public LazinatorMemory SerializeLazinator(in LazinatorSerializationOptions options) 
        {
            if (LazinatorMemoryStorage.IsEmpty || options.IncludeChildrenMode != OriginalIncludeChildrenMode || (options.SerializeDiffs || options.VerifyCleanness || IsDirty || (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(options);
            }
            BufferWriter writer = new BufferWriter(LazinatorMemoryStorage.LengthInt ?? 0);
            LazinatorMemoryStorage.WriteToBuffer(ref writer);
            return writer.LazinatorMemory;
        }
        
        LazinatorMemory EncodeToNewBuffer(in LazinatorSerializationOptions options) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.LengthInt ?? ExpandableBytes.DefaultMinBufferSize;
            BufferWriter writer = new BufferWriter(bufferSize);
            SerializeToExistingBuffer(ref writer, options);
            return writer.LazinatorMemory;
        }
        
        public ILazinator? CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            WorryAllianceClass clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new WorryAllianceClass(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (WorryAllianceClass)AssignCloneProperties(clone, includeChildrenMode)!;
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, this);
                clone = new WorryAllianceClass(bytes);
            }
            return clone;
        }
        
        ILazinator? AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            WorryAllianceClass typedClone = (WorryAllianceClass) clone;
            /*Location108*/typedClone.FavoriteVisible = FavoriteVisible;/*Location107*/
            /*Location110*/typedClone.WoodPersonality = WoodPersonality;/*Location109*/
            /*Location114*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (MentalBasketball == null)
                {
                    typedClone.MentalBasketball = null;/*Location112*//*Location113*/
                }
                else
                {
                    typedClone.MentalBasketball = (RefugeeSmartClass?) MentalBasketball.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer)!;/*Location111*/
                }
            }
            
            return typedClone;
        }
        
        /*Location116*/
        public IEnumerable<ILazinator?> EnumerateLazinatorNodes(Func<ILazinator?, bool>? matchCriterion, bool stopExploringBelowMatch, Func<ILazinator?, bool>? exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location117*/public IEnumerable<(string propertyName, ILazinator? descendant)> EnumerateLazinatorDescendants(Func<ILazinator?, bool>? matchCriterion, bool stopExploringBelowMatch, Func<ILazinator?, bool>? exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location118*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _MentalBasketball_Accessed) && MentalBasketball == null)
            {
                yield return ("MentalBasketball", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && MentalBasketball != null) || (_MentalBasketball_Accessed && _MentalBasketball != null))
                {
                    bool isMatch_MentalBasketball = matchCriterion == null || matchCriterion(MentalBasketball);
                    bool shouldExplore_MentalBasketball = exploreCriterion == null || exploreCriterion(MentalBasketball);
                    if (isMatch_MentalBasketball)
                    {
                        yield return ("MentalBasketball", MentalBasketball);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_MentalBasketball) && shouldExplore_MentalBasketball)
                    {
                        foreach (var toYield in MentalBasketball!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("MentalBasketball" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            /*Location119*/yield break;
        }
        /*Location120*/
        
        public IEnumerable<(string propertyName, object? descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location121*/yield return ("FavoriteVisible", (object?)FavoriteVisible);
            /*Location122*/yield return ("WoodPersonality", (object?)WoodPersonality);
            /*Location123*/yield break;
        }
        /*Location124*/
        public ILazinator? ForEachLazinator(Func<ILazinator?, ILazinator?>? changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location125*/if ((!exploreOnlyDeserializedChildren && MentalBasketball != null) || (_MentalBasketball_Accessed && _MentalBasketball != null))
            {
                _MentalBasketball = (RefugeeSmartClass?) _MentalBasketball!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!;
            }
            /*Location126*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location127*/
        public void FreeInMemoryObjects()
        {
            _MentalBasketball = default;
            _MentalBasketball_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location128*/
        /* Conversion */
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int LazinatorUniqueID => 10001;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool ContainsOpenGenericParameters => false;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorGenericIDType LazinatorGenericID => default;
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location129*/int ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialReadOnlyMemory.Span;
            ConvertFromBytesForPrimitiveProperties(span, includeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            int lengthForLengths = 0;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                lengthForLengths += 4;
            }
            int totalChildrenSize = ConvertFromBytesForChildLengths(span, includeChildrenMode, serializedVersionNumber, bytesSoFar + lengthForLengths, ref bytesSoFar);
            return bytesSoFar + totalChildrenSize;
        }
        
        /*Location130*/void ConvertFromBytesForPrimitiveProperties(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            /*Location131*/_FavoriteVisible = span.ToDecompressedNullableInt32(ref bytesSoFar);
            /*Location132*/_WoodPersonality = span.ToDecompressedInt16(ref bytesSoFar);
            /*Location133*/        }
            
            /*Location134*/int ConvertFromBytesForChildLengths(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, int indexOfFirstChild, ref int bytesSoFar)
            {
                int totalChildrenBytes = 0;
                /*Location135*/_MentalBasketball_ByteIndex = indexOfFirstChild + totalChildrenBytes;
                /*Location136*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                {
                    totalChildrenBytes += span.ToInt32(ref bytesSoFar);
                }
                /*Location137*/return totalChildrenBytes;
            }
            
            /*Location138*/public void SerializeToExistingBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options)
            {
                /*Location139*/int startPosition = writer.ActiveMemoryPosition;
                WritePropertiesIntoBuffer(ref writer, options, true);
                /*Location140*/if (options.UpdateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.ActiveMemoryPosition - startPosition, options.IncludeChildrenMode, false);
                    /*Location141*/}
                    /*Location142*/}
                    /*Location143*/
                    public void UpdateStoredBuffer(ref BufferWriter writer, long startPosition, long length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location144*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location145*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location146*/}
                                /*Location147*//*Location148*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location149*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location150*/}
                            /*Location151*/
                            void UpdateDeserializedChildren(ref BufferWriter writer, long startPosition)
                            {
                                /*Location152*/if (_MentalBasketball_Accessed && _MentalBasketball != null)
                                {
                                    MentalBasketball!.UpdateStoredBuffer(ref writer, startPosition + _MentalBasketball_ByteIndex, _MentalBasketball_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                /*Location153*/
                            }
                            
                            /*Location154*/
                            void WritePropertiesIntoBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options, bool includeUniqueID)
                            {
                                int startPosition = writer.ActiveMemoryPosition;
                                /*Location155*/if (includeUniqueID)
                                {
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                }
                                
                                /*Location156*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                writer.Write((byte)options.IncludeChildrenMode);
                                /*Location157*/// write properties
                                /*Location158*/
                                WritePrimitivePropertiesIntoBuffer(ref writer, options, includeUniqueID);
                                int lengthForLengths = 0;
                                if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                {
                                    lengthForLengths += 4;
                                }
                                
                                var previousLengthsPosition = writer.SetLengthsPosition(lengthForLengths);
                                WriteChildrenPropertiesIntoBuffer(ref writer, options, includeUniqueID, startPosition);
                                writer.ResetLengthsPosition(previousLengthsPosition);
                                /*Location159*//*Location160*/
                            }
                            /*Location161*/
                            void WritePrimitivePropertiesIntoBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options, bool includeUniqueID)
                            {
                                /*Location162*/CompressedIntegralTypes.WriteCompressedNullableInt(ref writer, _FavoriteVisible);
                                /*Location163*/CompressedIntegralTypes.WriteCompressedShort(ref writer, _WoodPersonality);
                                /*Location164*/}/*Location165*//*Location166*/
                                void WriteChildrenPropertiesIntoBuffer(ref BufferWriter writer, LazinatorSerializationOptions options, bool includeUniqueID, int startOfObjectPosition)
                                {
                                    /*Location167*/if (options.SplittingPossible)
                                    {
                                        options = options.WithoutSplittingPossible();
                                    }
                                    /*Location168*/int startOfChildPosition = 0;
                                    /*Location169*/int lengthValue = 0;
                                    /*Location170*/startOfChildPosition = writer.ActiveMemoryPosition;
                                    /*Location171*/if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_MentalBasketball_Accessed)
                                        {
                                            var deserialized = MentalBasketball;
                                        }
                                        WriteChild(ref writer, ref _MentalBasketball, options, _MentalBasketball_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _MentalBasketball_ByteIndex, _MentalBasketball_ByteLength, null), this);
                                        lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                                        if (lengthValue > int.MaxValue)
                                        {
                                            ThrowHelper.ThrowTooLargeException(int.MaxValue);
                                        }
                                        writer.RecordLength((int) lengthValue);
                                    }
                                    /*Location172*/if (options.UpdateStoredBuffer)
                                    {
                                        _MentalBasketball_ByteIndex = startOfChildPosition - startOfObjectPosition;
                                        
                                    }
                                    /*Location173*/
                                    /*Location174*/}/*Location175*//*Location176*/
                                }
                            }
                            #nullable restore
