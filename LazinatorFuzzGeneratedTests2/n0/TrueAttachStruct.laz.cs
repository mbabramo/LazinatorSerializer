/*Location470*//*Location455*///663300e8-08fd-cb88-0520-3bfaa3fe76bb
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.432, on 2024/01/01 12:00:00.000 AM.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
namespace FuzzTests.n0
{
    #pragma warning disable 8019//Location456
    using Lazinator.Attributes;/*Location457*/
    using Lazinator.Buffers;/*Location458*/
    using Lazinator.Core;/*Location459*/
    using Lazinator.Exceptions;/*Location460*/
    using Lazinator.Support;/*Location461*/
    using static Lazinator.Buffers.WriteUncompressedPrimitives;/*Location462*/
    using System;/*Location463*/
    using System.Buffers;/*Location464*/
    using System.Collections.Generic;/*Location465*/
    using System.Diagnostics;/*Location466*/
    using System.IO;/*Location467*/
    using System.Linq;/*Location468*/
    using System.Runtime.InteropServices;/*Location469*/
    using static Lazinator.Core.LazinatorUtilities;
    #pragma warning restore 8019
    
    [Autogenerated]
    public partial struct TrueAttachStruct : ILazinator
    {
        /*Location471*/[DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool IsStruct => true;
        
        /*Location472*//* Property definitions */
        
        /*Location473*/        int _FlowStranger_ByteIndex;
        /*Location474*/int _FlowStranger_ByteLength => (int) (LazinatorMemoryStorage.Length - _FlowStranger_ByteIndex);
        
        /*Location475*/
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        sbyte? _BottomOpinion;
        public sbyte? BottomOpinion
        {
            [DebuggerStepThrough]
            get
            {
                return _BottomOpinion;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                _BottomOpinion = value;
            }
        }
        /*Location476*/
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        sbyte? _PresidentMusic;
        public sbyte? PresidentMusic
        {
            [DebuggerStepThrough]
            get
            {
                return _PresidentMusic;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                _PresidentMusic = value;
            }
        }
        /*Location477*/
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        DateTime _VisitorWooden;
        public DateTime VisitorWooden
        {
            [DebuggerStepThrough]
            get
            {
                return _VisitorWooden;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                _VisitorWooden = value;
            }
        }
        /*Location478*/
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RefugeeSmartClass _FlowStranger;
        public RefugeeSmartClass FlowStranger
        {
            [DebuggerStepThrough]
            get
            {
                
                return _FlowStranger!;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _FlowStranger = value;
            }
        }
        
        /*Location479*/// DEBUG5
        /*Location488*/
        /* Serialization, deserialization, and object relationships */
        
        public TrueAttachStruct(RefugeeSmartClass flowStranger, IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren) : this()
        {
            _FlowStranger = flowStranger;
            
            if (flowStranger == null)
            {
                throw new ArgumentNullException("flowStranger");
            }
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public TrueAttachStruct(LazinatorMemory serializedBytes, ILazinator? parent = null, IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren, int? lazinatorObjectVersion = null) : this()
        {
            if (lazinatorObjectVersion != null)
            {
                LazinatorObjectVersion = (int) lazinatorObjectVersion;
            }
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
            LazinatorParents = new LazinatorParentsCollection(parent, null);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;LazinatorMemory childData;
            
            childData = GetChildSlice(LazinatorMemoryStorage, _FlowStranger_ByteIndex, _FlowStranger_ByteLength, null);
            _FlowStranger = DeserializationFactory.Instance.CreateBaseOrDerivedType(10000, (c, p) => new RefugeeSmartClass(c, p), childData); 
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorParentsCollection LazinatorParents { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool HasChanged { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _IsDirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _DescendantHasChanged;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged || (true && (FlowStranger.HasChanged || FlowStranger.DescendantHasChanged));
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _DescendantIsDirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty || (true && (FlowStranger.IsDirty || FlowStranger.DescendantIsDirty));
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public bool NonBinaryHash32 => false;
        
        void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialReadOnlyMemory.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            int uniqueID = span.ToDecompressedInt32(ref bytesSoFar);
            if (uniqueID != LazinatorUniqueID)
            {
                ThrowHelper.ThrowFormatException();
            }
            
            int lazinatorLibraryVersion = span.ToDecompressedInt32(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt32(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            int totalBytes = ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return totalBytes;
        }
        
        public void SerializeLazinator()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorMemoryStorage.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
                
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(LazinatorSerializationOptions.Default);
            }
            else
            {
                BufferWriter writer = new BufferWriter(LazinatorMemoryStorage.LengthInt ?? 0);
                LazinatorMemoryStorage.WriteToBuffer(ref writer);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public LazinatorMemory SerializeLazinator(in LazinatorSerializationOptions options) 
        {
            if (LazinatorMemoryStorage.IsEmpty || options.IncludeChildrenMode != OriginalIncludeChildrenMode || (options.SerializeDiffs || options.VerifyCleanness || IsDirty || (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(options);
            }
            BufferWriter writer = new BufferWriter(LazinatorMemoryStorage.LengthInt ?? 0);
            LazinatorMemoryStorage.WriteToBuffer(ref writer);
            return writer.LazinatorMemory;
        }
        
        LazinatorMemory EncodeToNewBuffer(in LazinatorSerializationOptions options) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.LengthInt ?? ExpandableBytes.DefaultMinBufferSize;
            BufferWriter writer = new BufferWriter(bufferSize);
            SerializeToExistingBuffer(ref writer, options);
            return writer.LazinatorMemory;
        }
        
        public ILazinator? CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            TrueAttachStruct clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new TrueAttachStruct(FlowStranger, includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (TrueAttachStruct)AssignCloneProperties(clone, includeChildrenMode)!;
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, this);
                clone = new TrueAttachStruct(bytes);
            }
            return clone;
        }
        
        ILazinator? AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            TrueAttachStruct typedClone = (TrueAttachStruct) clone;
            /*Location481*/typedClone.BottomOpinion = BottomOpinion;/*Location480*/
            /*Location483*/typedClone.PresidentMusic = PresidentMusic;/*Location482*/
            /*Location485*/typedClone.VisitorWooden = VisitorWooden;/*Location484*/
            /*Location487*/typedClone.FlowStranger = (RefugeeSmartClass) FlowStranger.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer)!;/*Location486*/
            
            typedClone.IsDirty = false;
            return typedClone;
        }
        
        /*Location489*/
        public IEnumerable<ILazinator?> EnumerateLazinatorNodes(Func<ILazinator?, bool>? matchCriterion, bool stopExploringBelowMatch, Func<ILazinator?, bool>? exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location490*/public IEnumerable<(string propertyName, ILazinator? descendant)> EnumerateLazinatorDescendants(Func<ILazinator?, bool>? matchCriterion, bool stopExploringBelowMatch, Func<ILazinator?, bool>? exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location491*/if (enumerateNulls && FlowStranger == null)
            {
                yield return ("FlowStranger", default);
            }
            else
            {
                bool isMatch_FlowStranger = matchCriterion == null || matchCriterion(FlowStranger);
                bool shouldExplore_FlowStranger = exploreCriterion == null || exploreCriterion(FlowStranger);
                if (isMatch_FlowStranger)
                {
                    yield return ("FlowStranger", FlowStranger);
                }
                if ((!stopExploringBelowMatch || !isMatch_FlowStranger) && shouldExplore_FlowStranger)
                {
                    foreach (var toYield in FlowStranger!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                    {
                        yield return ("FlowStranger" + "." + toYield.propertyName, toYield.descendant);
                    }
                }
            }
            /*Location492*/yield break;
        }
        /*Location493*/
        
        public IEnumerable<(string propertyName, object? descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location494*/yield return ("BottomOpinion", (object?)BottomOpinion);
            /*Location495*/yield return ("PresidentMusic", (object?)PresidentMusic);
            /*Location496*/yield return ("VisitorWooden", (object?)VisitorWooden);
            /*Location497*/yield break;
        }
        /*Location498*/
        public ILazinator? ForEachLazinator(Func<ILazinator?, ILazinator?>? changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location499*/_FlowStranger = (RefugeeSmartClass) _FlowStranger!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!;
            /*Location500*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location501*/
        public void FreeInMemoryObjects()
        {
            
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location502*/
        /* Conversion */
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int LazinatorUniqueID => 10006;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool ContainsOpenGenericParameters => false;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorGenericIDType LazinatorGenericID => default;
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _LazinatorObjectVersionChanged;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _LazinatorObjectVersionOverride;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int LazinatorObjectVersion
        {
            get => _LazinatorObjectVersionChanged ? _LazinatorObjectVersionOverride : 0;
            set
            {
                _LazinatorObjectVersionOverride = value;
                _LazinatorObjectVersionChanged = true;
            }
        }
        
        
        /*Location503*/int ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialReadOnlyMemory.Span;
            ConvertFromBytesForPrimitiveProperties(span, includeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            int lengthForLengths = 4;
            int totalChildrenSize = ConvertFromBytesForChildLengths(span, includeChildrenMode, serializedVersionNumber, bytesSoFar + lengthForLengths, ref bytesSoFar);
            return bytesSoFar + totalChildrenSize;
        }
        
        /*Location504*/void ConvertFromBytesForPrimitiveProperties(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            /*Location505*/_BottomOpinion = span.ToDecompressedNullableSByte(ref bytesSoFar);
            /*Location506*/_PresidentMusic = span.ToDecompressedNullableSByte(ref bytesSoFar);
            /*Location507*/_VisitorWooden = span.ToDecompressedDateTime(ref bytesSoFar);
            /*Location508*/        }
            
            /*Location509*/int ConvertFromBytesForChildLengths(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, int indexOfFirstChild, ref int bytesSoFar)
            {
                int totalChildrenBytes = 0;
                /*Location510*/_FlowStranger_ByteIndex = indexOfFirstChild + totalChildrenBytes;
                /*Location511*/totalChildrenBytes += span.ToInt32(ref bytesSoFar);
                /*Location512*/return totalChildrenBytes;
            }
            
            /*Location513*/public void SerializeToExistingBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options)
            {
                /*Location514*/int startPosition = writer.ActiveMemoryPosition;
                WritePropertiesIntoBuffer(ref writer, options, true);
                /*Location515*/if (options.UpdateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.ActiveMemoryPosition - startPosition, options.IncludeChildrenMode, false);
                    /*Location516*/}
                    /*Location517*/}
                    /*Location518*/
                    public void UpdateStoredBuffer(ref BufferWriter writer, long startPosition, long length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location519*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location520*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location521*/}
                                /*Location522*//*Location523*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location524*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location525*/}
                            /*Location526*/
                            void UpdateDeserializedChildren(ref BufferWriter writer, long startPosition)
                            {
                                /*Location527*/FlowStranger!.UpdateStoredBuffer(ref writer, startPosition + _FlowStranger_ByteIndex, _FlowStranger_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
                                /*Location528*/
                            }
                            
                            /*Location529*/
                            void WritePropertiesIntoBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options, bool includeUniqueID)
                            {
                                int startPosition = writer.ActiveMemoryPosition;
                                /*Location530*/if (includeUniqueID)
                                {
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                }
                                
                                /*Location531*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                writer.Write((byte)options.IncludeChildrenMode);
                                /*Location532*/// write properties
                                /*Location533*/
                                WritePrimitivePropertiesIntoBuffer(ref writer, options, includeUniqueID);
                                int lengthForLengths = 4;
                                
                                var previousLengthsPosition = writer.SetLengthsPosition(lengthForLengths);
                                WriteChildrenPropertiesIntoBuffer(ref writer, options, includeUniqueID, startPosition);
                                writer.ResetLengthsPosition(previousLengthsPosition);
                                /*Location534*//*Location535*/
                            }
                            /*Location536*/
                            void WritePrimitivePropertiesIntoBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options, bool includeUniqueID)
                            {
                                /*Location537*/CompressedIntegralTypes.WriteCompressedNullableSByte(ref writer, _BottomOpinion);
                                /*Location538*/CompressedIntegralTypes.WriteCompressedNullableSByte(ref writer, _PresidentMusic);
                                /*Location539*/CompressedIntegralTypes.WriteCompressedDateTime(ref writer, _VisitorWooden);
                                /*Location540*/}/*Location541*//*Location542*/
                                void WriteChildrenPropertiesIntoBuffer(ref BufferWriter writer, LazinatorSerializationOptions options, bool includeUniqueID, int startOfObjectPosition)
                                {
                                    /*Location543*/if (options.SplittingPossible)
                                    {
                                        options = options.WithoutSplittingPossible();
                                    }
                                    /*Location544*/int startOfChildPosition = 0;
                                    /*Location545*/int lengthValue = 0;
                                    /*Location546*/startOfChildPosition = writer.ActiveMemoryPosition;
                                    /*Location547*/
                                    var serializedBytesCopy = LazinatorMemoryStorage;
                                    var byteIndexCopy = _FlowStranger_ByteIndex;
                                    var byteLengthCopy = _FlowStranger_ByteLength;
                                    WriteChild(ref writer, ref _FlowStranger!, options, true, () => GetChildSlice(serializedBytesCopy, byteIndexCopy, byteLengthCopy, null), null);
                                    lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                                    if (lengthValue > int.MaxValue)
                                    {
                                        ThrowHelper.ThrowTooLargeException(int.MaxValue);
                                    }
                                    writer.RecordLength((int) lengthValue);
                                    /*Location548*/if (options.UpdateStoredBuffer)
                                    {
                                        _FlowStranger_ByteIndex = startOfChildPosition - startOfObjectPosition;
                                        
                                    }
                                    /*Location549*/
                                    /*Location550*/}/*Location551*//*Location552*/
                                }
                            }
                            #nullable restore
