/*Location192*//*Location177*///88f8cf2b-a157-0509-d654-306652838a1b
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.432, on 2024/01/01 12:00:00.000 AM.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
namespace FuzzTests.n0
{
    #pragma warning disable 8019//Location178
    using Lazinator.Attributes;/*Location179*/
    using Lazinator.Buffers;/*Location180*/
    using Lazinator.Core;/*Location181*/
    using Lazinator.Exceptions;/*Location182*/
    using Lazinator.Support;/*Location183*/
    using static Lazinator.Buffers.WriteUncompressedPrimitives;/*Location184*/
    using System;/*Location185*/
    using System.Buffers;/*Location186*/
    using System.Collections.Generic;/*Location187*/
    using System.Diagnostics;/*Location188*/
    using System.IO;/*Location189*/
    using System.Linq;/*Location190*/
    using System.Runtime.InteropServices;/*Location191*/
    using static Lazinator.Core.LazinatorUtilities;
    #pragma warning restore 8019
    
    [Autogenerated]
    public sealed partial class TimeShellClass : RefugeeSmartClass, ILazinator
    {
        /*Location193*//* Property definitions */
        
        
        /*Location194*/
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        char _HappyRecall;
        public char HappyRecall
        {
            [DebuggerStepThrough]
            get
            {
                return _HappyRecall;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                _HappyRecall = value;
            }
        }
        /*Location195*/// DEBUG5
        /*Location198*/        /* Clone overrides */
        
        public TimeShellClass(IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren) : base(originalIncludeChildrenMode)
        {
        }
        
        public TimeShellClass(LazinatorMemory serializedBytes, ILazinator? parent = null, IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren, int? lazinatorObjectVersion = null) : base(serializedBytes, parent, originalIncludeChildrenMode, lazinatorObjectVersion)
        {
        }
        
        public override ILazinator? CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            TimeShellClass clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new TimeShellClass(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (TimeShellClass)AssignCloneProperties(clone, includeChildrenMode)!;
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, this);
                clone = new TimeShellClass(bytes);
            }
            return clone;
        }
        
        protected override ILazinator? AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            base.AssignCloneProperties(clone, includeChildrenMode);
            TimeShellClass typedClone = (TimeShellClass) clone;
            /*Location197*/typedClone.HappyRecall = HappyRecall;/*Location196*/
            
            return typedClone;
        }
        
        /* Properties */
        /*Location199*/
        public override IEnumerable<(string propertyName, ILazinator? descendant)> EnumerateLazinatorDescendants(Func<ILazinator?, bool>? matchCriterion, bool stopExploringBelowMatch, Func<ILazinator?, bool>? exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            foreach (var inheritedYield in base.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
            {
                yield return inheritedYield;
            }
            /*Location200*/yield break;
        }
        /*Location201*/
        
        public override IEnumerable<(string propertyName, object? descendant)> EnumerateNonLazinatorProperties()
        {
            foreach (var inheritedYield in base.EnumerateNonLazinatorProperties())
            {
                yield return inheritedYield;
            }
            /*Location202*/yield return ("HappyRecall", (object?)HappyRecall);
            /*Location203*/yield break;
        }
        /*Location204*/
        public override ILazinator? ForEachLazinator(Func<ILazinator?, ILazinator?>? changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            base.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, false);
            /*Location205*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location206*/
        public override void FreeInMemoryObjects()
        {
            base.FreeInMemoryObjects();
            
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location207*/
        /* Conversion */
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override int LazinatorUniqueID => 10002;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override bool ContainsOpenGenericParameters => false;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override LazinatorGenericIDType LazinatorGenericID => default;
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location208*/protected override int ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialReadOnlyMemory.Span;
            ConvertFromBytesForPrimitiveProperties(span, includeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            int lengthForLengths = 0;
            int totalChildrenSize = ConvertFromBytesForChildLengths(span, includeChildrenMode, serializedVersionNumber, bytesSoFar + lengthForLengths, ref bytesSoFar);
            return bytesSoFar + totalChildrenSize;
        }
        
        /*Location209*/protected override void ConvertFromBytesForPrimitiveProperties(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            base.ConvertFromBytesForPrimitiveProperties(span, OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            /*Location210*/_HappyRecall = span.ToChar(ref bytesSoFar);
            /*Location211*/        }
            
            /*Location212*/protected override int ConvertFromBytesForChildLengths(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, int indexOfFirstChild, ref int bytesSoFar)
            {
                int totalChildrenBytes = 0;
                totalChildrenBytes = base.ConvertFromBytesForChildLengths(span, OriginalIncludeChildrenMode, serializedVersionNumber, indexOfFirstChild, ref bytesSoFar);
                /*Location213*/return totalChildrenBytes;
            }
            
            /*Location214*/public override void SerializeToExistingBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options)
            {
                /*Location215*/int startPosition = writer.ActiveMemoryPosition;
                WritePropertiesIntoBuffer(ref writer, options, true);
                /*Location216*/if (options.UpdateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.ActiveMemoryPosition - startPosition, options.IncludeChildrenMode, false);
                    /*Location217*/}
                    /*Location218*/}
                    /*Location219*/
                    public override void UpdateStoredBuffer(ref BufferWriter writer, long startPosition, long length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location220*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location221*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location222*/}
                                /*Location223*//*Location224*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location225*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location226*/}
                            /*Location227*/
                            protected override void UpdateDeserializedChildren(ref BufferWriter writer, long startPosition)
                            {
                                base.UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location228*/
                            }
                            
                            /*Location229*/
                            protected override void WritePropertiesIntoBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options, bool includeUniqueID)
                            {
                                int startPosition = writer.ActiveMemoryPosition;
                                /*Location230*/if (includeUniqueID)
                                {
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                }
                                
                                /*Location231*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                writer.Write((byte)options.IncludeChildrenMode);
                                /*Location232*/// write properties
                                /*Location233*/
                                WritePrimitivePropertiesIntoBuffer(ref writer, options, includeUniqueID);
                                int lengthForLengths = 0;
                                
                                var previousLengthsPosition = writer.SetLengthsPosition(lengthForLengths);
                                WriteChildrenPropertiesIntoBuffer(ref writer, options, includeUniqueID, startPosition);
                                writer.ResetLengthsPosition(previousLengthsPosition);
                                /*Location234*//*Location235*/
                            }
                            /*Location236*/
                            protected override void WritePrimitivePropertiesIntoBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options, bool includeUniqueID)
                            {
                                base.WritePrimitivePropertiesIntoBuffer(ref writer, options, includeUniqueID);
                                /*Location237*/EncodeCharAndString.WriteCharInTwoBytes(ref writer, _HappyRecall);
                                /*Location238*/}/*Location239*//*Location240*/
                                protected override void WriteChildrenPropertiesIntoBuffer(ref BufferWriter writer, LazinatorSerializationOptions options, bool includeUniqueID, int startOfObjectPosition)
                                {
                                    base.WriteChildrenPropertiesIntoBuffer(ref writer, options, includeUniqueID, startOfObjectPosition);
                                    /*Location241*/
                                    /*Location242*/}/*Location243*//*Location244*/
                                }
                            }
                            #nullable restore
