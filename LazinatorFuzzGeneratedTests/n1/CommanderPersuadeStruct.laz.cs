//3d769898-7717-e5d5-3131-2055317815e9
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.431, on 2024/01/01 12:00:00.000 AM.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace FuzzTests.n1
{
    #pragma warning disable 8019
    using Lazinator.Attributes;
    using Lazinator.Buffers;
    using Lazinator.Core;
    using Lazinator.Exceptions;
    using Lazinator.Support;
    using static Lazinator.Buffers.WriteUncompressedPrimitives;
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using static Lazinator.Core.LazinatorUtilities;
    #pragma warning restore 8019
    
    [Autogenerated]
    public partial struct CommanderPersuadeStruct : ILazinator
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool IsStruct => true;
        
        /* Property definitions */
        
        int _LotsPopular_ByteIndex;
        int _PartnerTrip_ByteIndex;
        int _PlaceRecently_ByteIndex;
        int _ThingPressure_ByteIndex;
        int _LotsPopular_ByteLength => _PartnerTrip_ByteIndex - _LotsPopular_ByteIndex;
        int _PartnerTrip_ByteLength => _PlaceRecently_ByteIndex - _PartnerTrip_ByteIndex;
        int _PlaceRecently_ByteLength => _ThingPressure_ByteIndex - _PlaceRecently_ByteIndex;
        int _ThingPressure_ByteLength => (int) (LazinatorMemoryStorage.Length - _ThingPressure_ByteIndex);
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Guid _CustomerConnection;
        public Guid CustomerConnection
        {
            [DebuggerStepThrough]
            get
            {
                return _CustomerConnection;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                _CustomerConnection = value;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint? _MealExpensive;
        public uint? MealExpensive
        {
            [DebuggerStepThrough]
            get
            {
                return _MealExpensive;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                _MealExpensive = value;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        byte _OpinionVictim;
        public byte OpinionVictim
        {
            [DebuggerStepThrough]
            get
            {
                return _OpinionVictim;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                _OpinionVictim = value;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        DateTime? _ReasonableCan;
        public DateTime? ReasonableCan
        {
            [DebuggerStepThrough]
            get
            {
                return _ReasonableCan;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                _ReasonableCan = value;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Guid? _SingerSharp;
        public Guid? SingerSharp
        {
            [DebuggerStepThrough]
            get
            {
                return _SingerSharp;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                _SingerSharp = value;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RefugeeSmartStruct? _LotsPopular;
        public RefugeeSmartStruct? LotsPopular
        {
            [DebuggerStepThrough]
            get
            {
                if (!_LotsPopular_Accessed)
                {
                    LazinateLotsPopular();
                } 
                return _LotsPopular;
            }
            [DebuggerStepThrough]
            set
            {
                
                IsDirty = true;
                DescendantIsDirty = true;
                _LotsPopular = value;
                _LotsPopular_Accessed = true;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _LotsPopular_Accessed;
        private void LazinateLotsPopular()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _LotsPopular = default(RefugeeSmartStruct?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _LotsPopular_ByteIndex, _LotsPopular_ByteLength, null);if (childData.Length == 0)
                {
                    _LotsPopular = default;
                }
                else 
                {
                    _LotsPopular = new RefugeeSmartStruct(childData);
                    
                }
            }
            _LotsPopular_Accessed = true;
        }
        
        public RefugeeSmartStruct? LotsPopular_Copy
        {
            [DebuggerStepThrough]
            get
            {
                if (!_LotsPopular_Accessed)
                {
                    if (LazinatorMemoryStorage.Length == 0)
                    {
                        return null;
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _LotsPopular_ByteIndex, _LotsPopular_ByteLength, null);
                        var toReturn = new RefugeeSmartStruct(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                if (_LotsPopular == null)
                {
                    return null;
                }
                var cleanCopy = _LotsPopular.Value;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TimeShellClass _PartnerTrip;
        public TimeShellClass PartnerTrip
        {
            [DebuggerStepThrough]
            get
            {
                if (!_PartnerTrip_Accessed)
                {
                    LazinatePartnerTrip();
                } 
                return _PartnerTrip;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _PartnerTrip = value;
                _PartnerTrip_Accessed = true;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _PartnerTrip_Accessed;
        private void LazinatePartnerTrip()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _PartnerTrip = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _PartnerTrip_ByteIndex, _PartnerTrip_ByteLength, null);
                _PartnerTrip = DeserializationFactory.Instance.CreateBaseOrDerivedType(10001, (c, p) => new TimeShellClass(c, p), childData); 
            }
            _PartnerTrip_Accessed = true;
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RefugeeSmartStruct _PlaceRecently;
        public RefugeeSmartStruct PlaceRecently
        {
            [DebuggerStepThrough]
            get
            {
                if (!_PlaceRecently_Accessed)
                {
                    LazinatePlaceRecently();
                } 
                return _PlaceRecently;
            }
            [DebuggerStepThrough]
            set
            {
                
                IsDirty = true;
                DescendantIsDirty = true;
                _PlaceRecently = value;
                _PlaceRecently_Accessed = true;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _PlaceRecently_Accessed;
        private void LazinatePlaceRecently()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _PlaceRecently = default(RefugeeSmartStruct);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _PlaceRecently_ByteIndex, _PlaceRecently_ByteLength, null);_PlaceRecently = new RefugeeSmartStruct(childData);
                
            }
            _PlaceRecently_Accessed = true;
        }
        
        public RefugeeSmartStruct PlaceRecently_Copy
        {
            [DebuggerStepThrough]
            get
            {
                if (!_PlaceRecently_Accessed)
                {
                    if (LazinatorMemoryStorage.Length == 0)
                    {
                        return default(RefugeeSmartStruct);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _PlaceRecently_ByteIndex, _PlaceRecently_ByteLength, null);
                        var toReturn = new RefugeeSmartStruct(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                var cleanCopy = _PlaceRecently;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RefugeeSmartStruct _ThingPressure;
        public RefugeeSmartStruct ThingPressure
        {
            [DebuggerStepThrough]
            get
            {
                if (!_ThingPressure_Accessed)
                {
                    LazinateThingPressure();
                } 
                return _ThingPressure;
            }
            [DebuggerStepThrough]
            set
            {
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ThingPressure = value;
                _ThingPressure_Accessed = true;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _ThingPressure_Accessed;
        private void LazinateThingPressure()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _ThingPressure = default(RefugeeSmartStruct);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ThingPressure_ByteIndex, _ThingPressure_ByteLength, null);_ThingPressure = new RefugeeSmartStruct(childData);
                
            }
            _ThingPressure_Accessed = true;
        }
        
        public RefugeeSmartStruct ThingPressure_Copy
        {
            [DebuggerStepThrough]
            get
            {
                if (!_ThingPressure_Accessed)
                {
                    if (LazinatorMemoryStorage.Length == 0)
                    {
                        return default(RefugeeSmartStruct);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ThingPressure_ByteIndex, _ThingPressure_ByteLength, null);
                        var toReturn = new RefugeeSmartStruct(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                var cleanCopy = _ThingPressure;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        /* Serialization, deserialization, and object relationships */
        
        public CommanderPersuadeStruct(IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren) : this()
        {
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public CommanderPersuadeStruct(LazinatorMemory serializedBytes, ILazinator parent = null, IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren, int? lazinatorObjectVersion = null) : this()
        {
            if (lazinatorObjectVersion != null)
            {
                LazinatorObjectVersion = (int) lazinatorObjectVersion;
            }
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
            LazinatorParents = new LazinatorParentsCollection(parent, null);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorParentsCollection LazinatorParents { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool HasChanged { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _IsDirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _DescendantHasChanged;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged || (_LotsPopular_Accessed && (LotsPopular.Value.HasChanged || LotsPopular.Value.DescendantHasChanged)) || (_PartnerTrip_Accessed && _PartnerTrip != null && (PartnerTrip.HasChanged || PartnerTrip.DescendantHasChanged)) || (_PlaceRecently_Accessed && (PlaceRecently.HasChanged || PlaceRecently.DescendantHasChanged)) || (_ThingPressure_Accessed && (ThingPressure.HasChanged || ThingPressure.DescendantHasChanged));
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _DescendantIsDirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty || (_LotsPopular_Accessed && (LotsPopular.Value.IsDirty || LotsPopular.Value.DescendantIsDirty)) || (_PartnerTrip_Accessed && _PartnerTrip != null && (PartnerTrip.IsDirty || PartnerTrip.DescendantIsDirty)) || (_PlaceRecently_Accessed && (PlaceRecently.IsDirty || PlaceRecently.DescendantIsDirty)) || (_ThingPressure_Accessed && (ThingPressure.IsDirty || ThingPressure.DescendantIsDirty));
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public bool NonBinaryHash32 => false;
        
        void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialReadOnlyMemory.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            int uniqueID = span.ToDecompressedInt32(ref bytesSoFar);
            if (uniqueID != LazinatorUniqueID)
            {
                ThrowHelper.ThrowFormatException();
            }
            
            int lazinatorLibraryVersion = span.ToDecompressedInt32(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt32(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            int totalBytes = ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return totalBytes;
        }
        
        public void SerializeLazinator()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorMemoryStorage.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
                
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(LazinatorSerializationOptions.Default);
            }
            else
            {
                BufferWriter writer = new BufferWriter(LazinatorMemoryStorage.LengthInt ?? 0);
                LazinatorMemoryStorage.WriteToBuffer(ref writer);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public LazinatorMemory SerializeLazinator(in LazinatorSerializationOptions options) 
        {
            if (LazinatorMemoryStorage.IsEmpty || options.IncludeChildrenMode != OriginalIncludeChildrenMode || (options.SerializeDiffs || options.VerifyCleanness || IsDirty || (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(options);
            }
            BufferWriter writer = new BufferWriter(LazinatorMemoryStorage.LengthInt ?? 0);
            LazinatorMemoryStorage.WriteToBuffer(ref writer);
            return writer.LazinatorMemory;
        }
        
        LazinatorMemory EncodeToNewBuffer(in LazinatorSerializationOptions options) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.LengthInt ?? ExpandableBytes.DefaultMinBufferSize;
            BufferWriter writer = new BufferWriter(bufferSize);
            SerializeToExistingBuffer(ref writer, options);
            return writer.LazinatorMemory;
        }
        
        public ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            CommanderPersuadeStruct clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new CommanderPersuadeStruct(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (CommanderPersuadeStruct)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, this);
                clone = new CommanderPersuadeStruct(bytes);
            }
            return clone;
        }
        
        ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            CommanderPersuadeStruct typedClone = (CommanderPersuadeStruct) clone;
            typedClone.CustomerConnection = CustomerConnection;
            typedClone.MealExpensive = MealExpensive;
            typedClone.OpinionVictim = OpinionVictim;
            typedClone.ReasonableCan = ReasonableCan;
            typedClone.SingerSharp = SingerSharp;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (LotsPopular == null)
                {
                    typedClone.LotsPopular = null;
                }
                else
                {
                    typedClone.LotsPopular = (RefugeeSmartStruct?) LotsPopular.Value.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (PartnerTrip == null)
                {
                    typedClone.PartnerTrip = null;
                }
                else
                {
                    typedClone.PartnerTrip = (TimeShellClass) PartnerTrip.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.PlaceRecently = (RefugeeSmartStruct) PlaceRecently.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.ThingPressure = (RefugeeSmartStruct) ThingPressure.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            
            typedClone.IsDirty = false;
            return typedClone;
        }
        
        
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        public IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _LotsPopular_Accessed) && LotsPopular == null)
            {
                yield return ("LotsPopular", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && LotsPopular != null) || (_LotsPopular_Accessed && _LotsPopular != null))
                {
                    bool isMatch_LotsPopular = matchCriterion == null || matchCriterion(LotsPopular);
                    bool shouldExplore_LotsPopular = exploreCriterion == null || exploreCriterion(LotsPopular);
                    if (isMatch_LotsPopular)
                    {
                        yield return ("LotsPopular", LotsPopular);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_LotsPopular) && shouldExplore_LotsPopular)
                    {
                        foreach (var toYield in LotsPopular.Value.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("LotsPopular" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _PartnerTrip_Accessed) && PartnerTrip == null)
            {
                yield return ("PartnerTrip", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && PartnerTrip != null) || (_PartnerTrip_Accessed && _PartnerTrip != null))
                {
                    bool isMatch_PartnerTrip = matchCriterion == null || matchCriterion(PartnerTrip);
                    bool shouldExplore_PartnerTrip = exploreCriterion == null || exploreCriterion(PartnerTrip);
                    if (isMatch_PartnerTrip)
                    {
                        yield return ("PartnerTrip", PartnerTrip);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_PartnerTrip) && shouldExplore_PartnerTrip)
                    {
                        foreach (var toYield in PartnerTrip.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("PartnerTrip" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            bool isMatch_PlaceRecently = matchCriterion == null || matchCriterion(PlaceRecently);
            bool shouldExplore_PlaceRecently = exploreCriterion == null || exploreCriterion(PlaceRecently);
            if (isMatch_PlaceRecently)
            {
                yield return ("PlaceRecently", PlaceRecently);
            }
            if ((!stopExploringBelowMatch || !isMatch_PlaceRecently) && shouldExplore_PlaceRecently)
            {
                foreach (var toYield in PlaceRecently.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("PlaceRecently" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            bool isMatch_ThingPressure = matchCriterion == null || matchCriterion(ThingPressure);
            bool shouldExplore_ThingPressure = exploreCriterion == null || exploreCriterion(ThingPressure);
            if (isMatch_ThingPressure)
            {
                yield return ("ThingPressure", ThingPressure);
            }
            if ((!stopExploringBelowMatch || !isMatch_ThingPressure) && shouldExplore_ThingPressure)
            {
                foreach (var toYield in ThingPressure.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("ThingPressure" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            yield break;
        }
        
        
        public IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            yield return ("CustomerConnection", (object)CustomerConnection);
            yield return ("MealExpensive", (object)MealExpensive);
            yield return ("OpinionVictim", (object)OpinionVictim);
            yield return ("ReasonableCan", (object)ReasonableCan);
            yield return ("SingerSharp", (object)SingerSharp);
            yield break;
        }
        
        public ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            if ((!exploreOnlyDeserializedChildren && LotsPopular != null) || (_LotsPopular_Accessed && _LotsPopular != null))
            {
                _LotsPopular = (RefugeeSmartStruct?) _LotsPopular.Value.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && PartnerTrip != null) || (_PartnerTrip_Accessed && _PartnerTrip != null))
            {
                _PartnerTrip = (TimeShellClass) _PartnerTrip.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            var deserialized_PlaceRecently = PlaceRecently;
            _PlaceRecently = (RefugeeSmartStruct) _PlaceRecently.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            var deserialized_ThingPressure = ThingPressure;
            _ThingPressure = (RefugeeSmartStruct) _ThingPressure.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        
        public void FreeInMemoryObjects()
        {
            _LotsPopular = default;
            _PartnerTrip = default;
            _PlaceRecently = default;
            _ThingPressure = default;
            _LotsPopular_Accessed = _PartnerTrip_Accessed = _PlaceRecently_Accessed = _ThingPressure_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        /* Conversion */
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int LazinatorUniqueID => 10002;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool ContainsOpenGenericParameters => false;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorGenericIDType LazinatorGenericID => default;
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _LazinatorObjectVersionChanged;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _LazinatorObjectVersionOverride;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int LazinatorObjectVersion
        {
            get => _LazinatorObjectVersionChanged ? _LazinatorObjectVersionOverride : 0;
            set
            {
                _LazinatorObjectVersionOverride = value;
                _LazinatorObjectVersionChanged = true;
            }
        }
        
        
        int ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialReadOnlyMemory.Span;
            ConvertFromBytesForPrimitiveProperties(span, includeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            int lengthForLengths = 0;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                lengthForLengths += 16;
            }
            int totalChildrenSize = ConvertFromBytesForChildLengths(span, includeChildrenMode, serializedVersionNumber, bytesSoFar + lengthForLengths, ref bytesSoFar);
            return bytesSoFar + totalChildrenSize;
        }
        
        void ConvertFromBytesForPrimitiveProperties(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            _CustomerConnection = span.ToGuid(ref bytesSoFar);
            _MealExpensive = span.ToDecompressedNullableUInt32(ref bytesSoFar);
            _OpinionVictim = span.ToByte(ref bytesSoFar);
            _ReasonableCan = span.ToDecompressedNullableDateTime(ref bytesSoFar);
            _SingerSharp = span.ToNullableGuid(ref bytesSoFar);
        }
        
        int ConvertFromBytesForChildLengths(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, int indexOfFirstChild, ref int bytesSoFar)
        {
            int totalChildrenBytes = 0;
            _LotsPopular_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            _PartnerTrip_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            _PlaceRecently_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            _ThingPressure_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            return totalChildrenBytes;
        }
        
        public void SerializeToExistingBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options)
        {
            int startPosition = writer.ActiveMemoryPosition;
            WritePropertiesIntoBuffer(ref writer, options, true);
            if (options.UpdateStoredBuffer)
            {
                UpdateStoredBuffer(ref writer, startPosition, writer.ActiveMemoryPosition - startPosition, options.IncludeChildrenMode, false);
            }
        }
        
        public void UpdateStoredBuffer(ref BufferWriter writer, long startPosition, long length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
        {
            _IsDirty = false;
            if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                _DescendantIsDirty = false;
                if (updateDeserializedChildren)
                {
                    UpdateDeserializedChildren(ref writer, startPosition);
                }
                
                _LotsPopular_Accessed = false;
                _PlaceRecently_Accessed = false;
                _ThingPressure_Accessed = false;
            }
            else
            {
                ThrowHelper.ThrowCannotUpdateStoredBuffer();
            }
            
            var newBuffer = writer.Slice(startPosition, length);
            LazinatorMemoryStorage = newBuffer;
        }
        
        void UpdateDeserializedChildren(ref BufferWriter writer, long startPosition)
        {
            if (_LotsPopular_Accessed && _LotsPopular != null)
            {
                LotsPopular.Value.UpdateStoredBuffer(ref writer, startPosition + _LotsPopular_ByteIndex, _LotsPopular_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (_PartnerTrip_Accessed && _PartnerTrip != null)
            {
                PartnerTrip.UpdateStoredBuffer(ref writer, startPosition + _PartnerTrip_ByteIndex, _PartnerTrip_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            }
            PlaceRecently.UpdateStoredBuffer(ref writer, startPosition + _PlaceRecently_ByteIndex, _PlaceRecently_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            ThingPressure.UpdateStoredBuffer(ref writer, startPosition + _ThingPressure_ByteIndex, _ThingPressure_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            
        }
        
        
        void WritePropertiesIntoBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options, bool includeUniqueID)
        {
            int startPosition = writer.ActiveMemoryPosition;
            if (includeUniqueID)
            {
                CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
            }
            
            CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
            writer.Write((byte)options.IncludeChildrenMode);
            // write properties
            
            WritePrimitivePropertiesIntoBuffer(ref writer, options, includeUniqueID);
            int lengthForLengths = 0;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                lengthForLengths += 16;
            }
            
            var previousLengthsPosition = writer.SetLengthsPosition(lengthForLengths);
            WriteChildrenPropertiesIntoBuffer(ref writer, options, includeUniqueID, startPosition);
            writer.ResetLengthsPosition(previousLengthsPosition);
            
        }
        
        void WritePrimitivePropertiesIntoBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options, bool includeUniqueID)
        {
            WriteUncompressedPrimitives.WriteGuid(ref writer, _CustomerConnection);
            CompressedIntegralTypes.WriteCompressedNullableUInt(ref writer, _MealExpensive);
            WriteUncompressedPrimitives.WriteByte(ref writer, _OpinionVictim);
            CompressedIntegralTypes.WriteCompressedNullableDateTime(ref writer, _ReasonableCan);
            WriteUncompressedPrimitives.WriteNullableGuid(ref writer, _SingerSharp);
        }
        void WriteChildrenPropertiesIntoBuffer(ref BufferWriter writer, LazinatorSerializationOptions options, bool includeUniqueID, int startOfObjectPosition)
        {
            if (options.SplittingPossible)
            {
                options = options.WithoutSplittingPossible();
            }
            int startOfChildPosition = 0;
            int lengthValue = 0;
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_LotsPopular_Accessed)
                {
                    var deserialized = LotsPopular;
                }
                if (_LotsPopular == null)
                {
                    WriteNullChild_LengthsSeparate(ref writer, false);
                }
                else
                {
                    var serializedBytesCopy = LazinatorMemoryStorage;
                    var byteIndexCopy = _LotsPopular_ByteIndex;
                    var byteLengthCopy = _LotsPopular_ByteLength;
                    var copy = _LotsPopular.Value;
                    WriteChild(ref writer, ref copy, options, _LotsPopular_Accessed, () => GetChildSlice(serializedBytesCopy, byteIndexCopy, byteLengthCopy, null), null);
                    _LotsPopular = copy;
                    lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                    if (lengthValue > int.MaxValue)
                    {
                        ThrowHelper.ThrowTooLargeException(int.MaxValue);
                    }
                    writer.RecordLength((int) lengthValue);
                }
            }
            if (options.UpdateStoredBuffer)
            {
                _LotsPopular_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_PartnerTrip_Accessed)
                {
                    var deserialized = PartnerTrip;
                }
                var serializedBytesCopy = LazinatorMemoryStorage;
                var byteIndexCopy = _PartnerTrip_ByteIndex;
                var byteLengthCopy = _PartnerTrip_ByteLength;
                WriteChild(ref writer, ref _PartnerTrip, options, _PartnerTrip_Accessed, () => GetChildSlice(serializedBytesCopy, byteIndexCopy, byteLengthCopy, null), null);
                lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _PartnerTrip_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_PlaceRecently_Accessed)
                {
                    var deserialized = PlaceRecently;
                }
                var serializedBytesCopy = LazinatorMemoryStorage;
                var byteIndexCopy = _PlaceRecently_ByteIndex;
                var byteLengthCopy = _PlaceRecently_ByteLength;
                WriteChild(ref writer, ref _PlaceRecently, options, _PlaceRecently_Accessed, () => GetChildSlice(serializedBytesCopy, byteIndexCopy, byteLengthCopy, null), null);
                lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _PlaceRecently_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_ThingPressure_Accessed)
                {
                    var deserialized = ThingPressure;
                }
                var serializedBytesCopy = LazinatorMemoryStorage;
                var byteIndexCopy = _ThingPressure_ByteIndex;
                var byteLengthCopy = _ThingPressure_ByteLength;
                WriteChild(ref writer, ref _ThingPressure, options, _ThingPressure_Accessed, () => GetChildSlice(serializedBytesCopy, byteIndexCopy, byteLengthCopy, null), null);
                lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _ThingPressure_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            
        }
    }
}
#nullable restore
