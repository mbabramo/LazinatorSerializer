//4975e0b7-7299-afb5-a351-4b1921315182
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.431, on 2024/01/01 12:00:00.000 AM.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace FuzzTests.n1
{
    #pragma warning disable 8019
    using Lazinator.Attributes;
    using Lazinator.Buffers;
    using Lazinator.Core;
    using Lazinator.Exceptions;
    using Lazinator.Support;
    using static Lazinator.Buffers.WriteUncompressedPrimitives;
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using static Lazinator.Core.LazinatorUtilities;
    #pragma warning restore 8019
    
    [Autogenerated]
    public partial struct ChildPresidentStruct : ILazinator
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool IsStruct => true;
        
        /* Property definitions */
        
        int _FlowStranger_ByteIndex;
        int _LegendMan_ByteIndex;
        int _PrivateMusic_ByteIndex;
        int _TypeCareful_ByteIndex;
        int _FlowStranger_ByteLength => _LegendMan_ByteIndex - _FlowStranger_ByteIndex;
        int _LegendMan_ByteLength => _PrivateMusic_ByteIndex - _LegendMan_ByteIndex;
        int _PrivateMusic_ByteLength => _TypeCareful_ByteIndex - _PrivateMusic_ByteIndex;
        int _TypeCareful_ByteLength => (int) (LazinatorMemoryStorage.Length - _TypeCareful_ByteIndex);
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint _StillOrdinary;
        public uint StillOrdinary
        {
            [DebuggerStepThrough]
            get
            {
                return _StillOrdinary;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                _StillOrdinary = value;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        DateTime _VisitorWooden;
        public DateTime VisitorWooden
        {
            [DebuggerStepThrough]
            get
            {
                return _VisitorWooden;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                _VisitorWooden = value;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RefugeeSmartStruct _FlowStranger;
        public RefugeeSmartStruct FlowStranger
        {
            [DebuggerStepThrough]
            get
            {
                if (!_FlowStranger_Accessed)
                {
                    LazinateFlowStranger();
                } 
                return _FlowStranger;
            }
            [DebuggerStepThrough]
            set
            {
                
                IsDirty = true;
                DescendantIsDirty = true;
                _FlowStranger = value;
                _FlowStranger_Accessed = true;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _FlowStranger_Accessed;
        private void LazinateFlowStranger()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _FlowStranger = default(RefugeeSmartStruct);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _FlowStranger_ByteIndex, _FlowStranger_ByteLength, null);_FlowStranger = new RefugeeSmartStruct(childData);
                
            }
            _FlowStranger_Accessed = true;
        }
        
        public RefugeeSmartStruct FlowStranger_Copy
        {
            [DebuggerStepThrough]
            get
            {
                if (!_FlowStranger_Accessed)
                {
                    if (LazinatorMemoryStorage.Length == 0)
                    {
                        return default(RefugeeSmartStruct);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _FlowStranger_ByteIndex, _FlowStranger_ByteLength, null);
                        var toReturn = new RefugeeSmartStruct(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                var cleanCopy = _FlowStranger;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RefugeeSmartStruct _LegendMan;
        public RefugeeSmartStruct LegendMan
        {
            [DebuggerStepThrough]
            get
            {
                if (!_LegendMan_Accessed)
                {
                    LazinateLegendMan();
                } 
                return _LegendMan;
            }
            [DebuggerStepThrough]
            set
            {
                
                IsDirty = true;
                DescendantIsDirty = true;
                _LegendMan = value;
                _LegendMan_Accessed = true;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _LegendMan_Accessed;
        private void LazinateLegendMan()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _LegendMan = default(RefugeeSmartStruct);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _LegendMan_ByteIndex, _LegendMan_ByteLength, null);_LegendMan = new RefugeeSmartStruct(childData);
                
            }
            _LegendMan_Accessed = true;
        }
        
        public RefugeeSmartStruct LegendMan_Copy
        {
            [DebuggerStepThrough]
            get
            {
                if (!_LegendMan_Accessed)
                {
                    if (LazinatorMemoryStorage.Length == 0)
                    {
                        return default(RefugeeSmartStruct);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _LegendMan_ByteIndex, _LegendMan_ByteLength, null);
                        var toReturn = new RefugeeSmartStruct(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                var cleanCopy = _LegendMan;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        CommanderPersuadeStruct? _PrivateMusic;
        public CommanderPersuadeStruct? PrivateMusic
        {
            [DebuggerStepThrough]
            get
            {
                if (!_PrivateMusic_Accessed)
                {
                    LazinatePrivateMusic();
                } 
                return _PrivateMusic;
            }
            [DebuggerStepThrough]
            set
            {
                
                IsDirty = true;
                DescendantIsDirty = true;
                _PrivateMusic = value;
                _PrivateMusic_Accessed = true;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _PrivateMusic_Accessed;
        private void LazinatePrivateMusic()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _PrivateMusic = default(CommanderPersuadeStruct?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _PrivateMusic_ByteIndex, _PrivateMusic_ByteLength, null);if (childData.Length == 0)
                {
                    _PrivateMusic = default;
                }
                else 
                {
                    _PrivateMusic = new CommanderPersuadeStruct(childData);
                    
                }
            }
            _PrivateMusic_Accessed = true;
        }
        
        public CommanderPersuadeStruct? PrivateMusic_Copy
        {
            [DebuggerStepThrough]
            get
            {
                if (!_PrivateMusic_Accessed)
                {
                    if (LazinatorMemoryStorage.Length == 0)
                    {
                        return null;
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _PrivateMusic_ByteIndex, _PrivateMusic_ByteLength, null);
                        var toReturn = new CommanderPersuadeStruct(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                if (_PrivateMusic == null)
                {
                    return null;
                }
                var cleanCopy = _PrivateMusic.Value;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TimeShellClass _TypeCareful;
        public TimeShellClass TypeCareful
        {
            [DebuggerStepThrough]
            get
            {
                if (!_TypeCareful_Accessed)
                {
                    LazinateTypeCareful();
                } 
                return _TypeCareful;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _TypeCareful = value;
                _TypeCareful_Accessed = true;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _TypeCareful_Accessed;
        private void LazinateTypeCareful()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _TypeCareful = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _TypeCareful_ByteIndex, _TypeCareful_ByteLength, null);
                _TypeCareful = DeserializationFactory.Instance.CreateBaseOrDerivedType(10001, (c, p) => new TimeShellClass(c, p), childData); 
            }
            _TypeCareful_Accessed = true;
        }
        
        
        /* Serialization, deserialization, and object relationships */
        
        public ChildPresidentStruct(IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren) : this()
        {
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public ChildPresidentStruct(LazinatorMemory serializedBytes, ILazinator parent = null, IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren, int? lazinatorObjectVersion = null) : this()
        {
            if (lazinatorObjectVersion != null)
            {
                LazinatorObjectVersion = (int) lazinatorObjectVersion;
            }
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
            LazinatorParents = new LazinatorParentsCollection(parent, null);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorParentsCollection LazinatorParents { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool HasChanged { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _IsDirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _DescendantHasChanged;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged || (_FlowStranger_Accessed && (FlowStranger.HasChanged || FlowStranger.DescendantHasChanged)) || (_LegendMan_Accessed && (LegendMan.HasChanged || LegendMan.DescendantHasChanged)) || (_PrivateMusic_Accessed && (PrivateMusic.Value.HasChanged || PrivateMusic.Value.DescendantHasChanged)) || (_TypeCareful_Accessed && _TypeCareful != null && (TypeCareful.HasChanged || TypeCareful.DescendantHasChanged));
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _DescendantIsDirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty || (_FlowStranger_Accessed && (FlowStranger.IsDirty || FlowStranger.DescendantIsDirty)) || (_LegendMan_Accessed && (LegendMan.IsDirty || LegendMan.DescendantIsDirty)) || (_PrivateMusic_Accessed && (PrivateMusic.Value.IsDirty || PrivateMusic.Value.DescendantIsDirty)) || (_TypeCareful_Accessed && _TypeCareful != null && (TypeCareful.IsDirty || TypeCareful.DescendantIsDirty));
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public bool NonBinaryHash32 => false;
        
        void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialReadOnlyMemory.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            int uniqueID = span.ToDecompressedInt32(ref bytesSoFar);
            if (uniqueID != LazinatorUniqueID)
            {
                ThrowHelper.ThrowFormatException();
            }
            
            int lazinatorLibraryVersion = span.ToDecompressedInt32(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt32(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            int totalBytes = ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return totalBytes;
        }
        
        public void SerializeLazinator()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorMemoryStorage.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
                
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(LazinatorSerializationOptions.Default);
            }
            else
            {
                BufferWriter writer = new BufferWriter(LazinatorMemoryStorage.LengthInt ?? 0);
                LazinatorMemoryStorage.WriteToBuffer(ref writer);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public LazinatorMemory SerializeLazinator(in LazinatorSerializationOptions options) 
        {
            if (LazinatorMemoryStorage.IsEmpty || options.IncludeChildrenMode != OriginalIncludeChildrenMode || (options.SerializeDiffs || options.VerifyCleanness || IsDirty || (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(options);
            }
            BufferWriter writer = new BufferWriter(LazinatorMemoryStorage.LengthInt ?? 0);
            LazinatorMemoryStorage.WriteToBuffer(ref writer);
            return writer.LazinatorMemory;
        }
        
        LazinatorMemory EncodeToNewBuffer(in LazinatorSerializationOptions options) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.LengthInt ?? ExpandableBytes.DefaultMinBufferSize;
            BufferWriter writer = new BufferWriter(bufferSize);
            SerializeToExistingBuffer(ref writer, options);
            return writer.LazinatorMemory;
        }
        
        public ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            ChildPresidentStruct clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new ChildPresidentStruct(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (ChildPresidentStruct)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, this);
                clone = new ChildPresidentStruct(bytes);
            }
            return clone;
        }
        
        ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            ChildPresidentStruct typedClone = (ChildPresidentStruct) clone;
            typedClone.StillOrdinary = StillOrdinary;
            typedClone.VisitorWooden = VisitorWooden;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.FlowStranger = (RefugeeSmartStruct) FlowStranger.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.LegendMan = (RefugeeSmartStruct) LegendMan.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (PrivateMusic == null)
                {
                    typedClone.PrivateMusic = null;
                }
                else
                {
                    typedClone.PrivateMusic = (CommanderPersuadeStruct?) PrivateMusic.Value.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (TypeCareful == null)
                {
                    typedClone.TypeCareful = null;
                }
                else
                {
                    typedClone.TypeCareful = (TimeShellClass) TypeCareful.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            
            typedClone.IsDirty = false;
            return typedClone;
        }
        
        
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        public IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool isMatch_FlowStranger = matchCriterion == null || matchCriterion(FlowStranger);
            bool shouldExplore_FlowStranger = exploreCriterion == null || exploreCriterion(FlowStranger);
            if (isMatch_FlowStranger)
            {
                yield return ("FlowStranger", FlowStranger);
            }
            if ((!stopExploringBelowMatch || !isMatch_FlowStranger) && shouldExplore_FlowStranger)
            {
                foreach (var toYield in FlowStranger.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("FlowStranger" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            bool isMatch_LegendMan = matchCriterion == null || matchCriterion(LegendMan);
            bool shouldExplore_LegendMan = exploreCriterion == null || exploreCriterion(LegendMan);
            if (isMatch_LegendMan)
            {
                yield return ("LegendMan", LegendMan);
            }
            if ((!stopExploringBelowMatch || !isMatch_LegendMan) && shouldExplore_LegendMan)
            {
                foreach (var toYield in LegendMan.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("LegendMan" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _PrivateMusic_Accessed) && PrivateMusic == null)
            {
                yield return ("PrivateMusic", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && PrivateMusic != null) || (_PrivateMusic_Accessed && _PrivateMusic != null))
                {
                    bool isMatch_PrivateMusic = matchCriterion == null || matchCriterion(PrivateMusic);
                    bool shouldExplore_PrivateMusic = exploreCriterion == null || exploreCriterion(PrivateMusic);
                    if (isMatch_PrivateMusic)
                    {
                        yield return ("PrivateMusic", PrivateMusic);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_PrivateMusic) && shouldExplore_PrivateMusic)
                    {
                        foreach (var toYield in PrivateMusic.Value.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("PrivateMusic" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _TypeCareful_Accessed) && TypeCareful == null)
            {
                yield return ("TypeCareful", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && TypeCareful != null) || (_TypeCareful_Accessed && _TypeCareful != null))
                {
                    bool isMatch_TypeCareful = matchCriterion == null || matchCriterion(TypeCareful);
                    bool shouldExplore_TypeCareful = exploreCriterion == null || exploreCriterion(TypeCareful);
                    if (isMatch_TypeCareful)
                    {
                        yield return ("TypeCareful", TypeCareful);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_TypeCareful) && shouldExplore_TypeCareful)
                    {
                        foreach (var toYield in TypeCareful.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("TypeCareful" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            yield break;
        }
        
        
        public IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            yield return ("StillOrdinary", (object)StillOrdinary);
            yield return ("VisitorWooden", (object)VisitorWooden);
            yield break;
        }
        
        public ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            var deserialized_FlowStranger = FlowStranger;
            _FlowStranger = (RefugeeSmartStruct) _FlowStranger.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            var deserialized_LegendMan = LegendMan;
            _LegendMan = (RefugeeSmartStruct) _LegendMan.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            if ((!exploreOnlyDeserializedChildren && PrivateMusic != null) || (_PrivateMusic_Accessed && _PrivateMusic != null))
            {
                _PrivateMusic = (CommanderPersuadeStruct?) _PrivateMusic.Value.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && TypeCareful != null) || (_TypeCareful_Accessed && _TypeCareful != null))
            {
                _TypeCareful = (TimeShellClass) _TypeCareful.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        
        public void FreeInMemoryObjects()
        {
            _FlowStranger = default;
            _LegendMan = default;
            _PrivateMusic = default;
            _TypeCareful = default;
            _FlowStranger_Accessed = _LegendMan_Accessed = _PrivateMusic_Accessed = _TypeCareful_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        /* Conversion */
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int LazinatorUniqueID => 10003;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool ContainsOpenGenericParameters => false;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorGenericIDType LazinatorGenericID => default;
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private bool _LazinatorObjectVersionChanged;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private int _LazinatorObjectVersionOverride;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int LazinatorObjectVersion
        {
            get => _LazinatorObjectVersionChanged ? _LazinatorObjectVersionOverride : 0;
            set
            {
                _LazinatorObjectVersionOverride = value;
                _LazinatorObjectVersionChanged = true;
            }
        }
        
        
        int ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialReadOnlyMemory.Span;
            ConvertFromBytesForPrimitiveProperties(span, includeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            int lengthForLengths = 0;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                lengthForLengths += 16;
            }
            int totalChildrenSize = ConvertFromBytesForChildLengths(span, includeChildrenMode, serializedVersionNumber, bytesSoFar + lengthForLengths, ref bytesSoFar);
            return bytesSoFar + totalChildrenSize;
        }
        
        void ConvertFromBytesForPrimitiveProperties(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            _StillOrdinary = span.ToDecompressedUInt32(ref bytesSoFar);
            _VisitorWooden = span.ToDecompressedDateTime(ref bytesSoFar);
        }
        
        int ConvertFromBytesForChildLengths(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, int indexOfFirstChild, ref int bytesSoFar)
        {
            int totalChildrenBytes = 0;
            _FlowStranger_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            _LegendMan_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            _PrivateMusic_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            _TypeCareful_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            return totalChildrenBytes;
        }
        
        public void SerializeToExistingBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options)
        {
            int startPosition = writer.ActiveMemoryPosition;
            WritePropertiesIntoBuffer(ref writer, options, true);
            if (options.UpdateStoredBuffer)
            {
                UpdateStoredBuffer(ref writer, startPosition, writer.ActiveMemoryPosition - startPosition, options.IncludeChildrenMode, false);
            }
        }
        
        public void UpdateStoredBuffer(ref BufferWriter writer, long startPosition, long length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
        {
            _IsDirty = false;
            if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                _DescendantIsDirty = false;
                if (updateDeserializedChildren)
                {
                    UpdateDeserializedChildren(ref writer, startPosition);
                }
                
                _FlowStranger_Accessed = false;
                _LegendMan_Accessed = false;
                _PrivateMusic_Accessed = false;
            }
            else
            {
                ThrowHelper.ThrowCannotUpdateStoredBuffer();
            }
            
            var newBuffer = writer.Slice(startPosition, length);
            LazinatorMemoryStorage = newBuffer;
        }
        
        void UpdateDeserializedChildren(ref BufferWriter writer, long startPosition)
        {
            FlowStranger.UpdateStoredBuffer(ref writer, startPosition + _FlowStranger_ByteIndex, _FlowStranger_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            LegendMan.UpdateStoredBuffer(ref writer, startPosition + _LegendMan_ByteIndex, _LegendMan_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            if (_PrivateMusic_Accessed && _PrivateMusic != null)
            {
                PrivateMusic.Value.UpdateStoredBuffer(ref writer, startPosition + _PrivateMusic_ByteIndex, _PrivateMusic_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (_TypeCareful_Accessed && _TypeCareful != null)
            {
                TypeCareful.UpdateStoredBuffer(ref writer, startPosition + _TypeCareful_ByteIndex, _TypeCareful_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            }
            
        }
        
        
        void WritePropertiesIntoBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options, bool includeUniqueID)
        {
            int startPosition = writer.ActiveMemoryPosition;
            if (includeUniqueID)
            {
                CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
            }
            
            CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
            writer.Write((byte)options.IncludeChildrenMode);
            // write properties
            
            WritePrimitivePropertiesIntoBuffer(ref writer, options, includeUniqueID);
            int lengthForLengths = 0;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                lengthForLengths += 16;
            }
            
            var previousLengthsPosition = writer.SetLengthsPosition(lengthForLengths);
            WriteChildrenPropertiesIntoBuffer(ref writer, options, includeUniqueID, startPosition);
            writer.ResetLengthsPosition(previousLengthsPosition);
            
        }
        
        void WritePrimitivePropertiesIntoBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options, bool includeUniqueID)
        {
            CompressedIntegralTypes.WriteCompressedUInt(ref writer, _StillOrdinary);
            CompressedIntegralTypes.WriteCompressedDateTime(ref writer, _VisitorWooden);
        }
        void WriteChildrenPropertiesIntoBuffer(ref BufferWriter writer, LazinatorSerializationOptions options, bool includeUniqueID, int startOfObjectPosition)
        {
            if (options.SplittingPossible)
            {
                options = options.WithoutSplittingPossible();
            }
            int startOfChildPosition = 0;
            int lengthValue = 0;
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_FlowStranger_Accessed)
                {
                    var deserialized = FlowStranger;
                }
                var serializedBytesCopy = LazinatorMemoryStorage;
                var byteIndexCopy = _FlowStranger_ByteIndex;
                var byteLengthCopy = _FlowStranger_ByteLength;
                WriteChild(ref writer, ref _FlowStranger, options, _FlowStranger_Accessed, () => GetChildSlice(serializedBytesCopy, byteIndexCopy, byteLengthCopy, null), null);
                lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _FlowStranger_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_LegendMan_Accessed)
                {
                    var deserialized = LegendMan;
                }
                var serializedBytesCopy = LazinatorMemoryStorage;
                var byteIndexCopy = _LegendMan_ByteIndex;
                var byteLengthCopy = _LegendMan_ByteLength;
                WriteChild(ref writer, ref _LegendMan, options, _LegendMan_Accessed, () => GetChildSlice(serializedBytesCopy, byteIndexCopy, byteLengthCopy, null), null);
                lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _LegendMan_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_PrivateMusic_Accessed)
                {
                    var deserialized = PrivateMusic;
                }
                if (_PrivateMusic == null)
                {
                    WriteNullChild_LengthsSeparate(ref writer, false);
                }
                else
                {
                    var serializedBytesCopy = LazinatorMemoryStorage;
                    var byteIndexCopy = _PrivateMusic_ByteIndex;
                    var byteLengthCopy = _PrivateMusic_ByteLength;
                    var copy = _PrivateMusic.Value;
                    WriteChild(ref writer, ref copy, options, _PrivateMusic_Accessed, () => GetChildSlice(serializedBytesCopy, byteIndexCopy, byteLengthCopy, null), null);
                    _PrivateMusic = copy;
                    lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                    if (lengthValue > int.MaxValue)
                    {
                        ThrowHelper.ThrowTooLargeException(int.MaxValue);
                    }
                    writer.RecordLength((int) lengthValue);
                }
            }
            if (options.UpdateStoredBuffer)
            {
                _PrivateMusic_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_TypeCareful_Accessed)
                {
                    var deserialized = TypeCareful;
                }
                var serializedBytesCopy = LazinatorMemoryStorage;
                var byteIndexCopy = _TypeCareful_ByteIndex;
                var byteLengthCopy = _TypeCareful_ByteLength;
                WriteChild(ref writer, ref _TypeCareful, options, _TypeCareful_Accessed, () => GetChildSlice(serializedBytesCopy, byteIndexCopy, byteLengthCopy, null), null);
                lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _TypeCareful_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            
        }
    }
}
#nullable restore
