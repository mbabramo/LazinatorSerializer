//78483076-f237-48be-a07a-ea85062b53c3
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using Lazinator.Buffers; 
using Lazinator.Collections;
using Lazinator.Core; 
using static Lazinator.Core.LazinatorUtilities;
using Lazinator.Exceptions;
using Lazinator.Support;
using Lazinator.Wrappers;

namespace Lazinator.Collections.Avl
{
    public sealed partial class AvlNode<TKey, TValue> : ILazinator
    {
        /* Boilerplate for every non-abstract ILazinator object */
        
        public ILazinator LazinatorParentClass { get; set; }
        
        internal IncludeChildrenMode OriginalIncludeChildrenMode;
        
        public void Deserialize()
        {
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return;
            }

            Debug.WriteLine("Begin deserializing node at " + bytesSoFar); // DEBUG

            int uniqueID = span.ToDecompressedInt(ref bytesSoFar);
            if (uniqueID != LazinatorUniqueID)
            {
                throw new FormatException("Wrong self-serialized type initialized.");
            }
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
        }
        
        public MemoryInBuffer SerializeNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness)
        {
            return EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, true, verifyCleanness, IsDirty, DescendantIsDirty, false, LazinatorObjectBytes, (StreamManuallyDelegate) EncodeToNewBuffer);
        }
        
        internal MemoryInBuffer EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness) => LazinatorUtilities.EncodeToNewBinaryBufferWriter(this, includeChildrenMode, verifyCleanness);
        
        public ILazinator CloneLazinator()
        {
            return CloneLazinator(OriginalIncludeChildrenMode);
        }
        
        public ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode)
        {
            MemoryInBuffer bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, false, IsDirty, DescendantIsDirty, false, LazinatorObjectBytes, (StreamManuallyDelegate)EncodeToNewBuffer);
            var clone = new AvlNode<TKey, TValue>()
            {
                DeserializationFactory = DeserializationFactory,
                LazinatorParentClass = LazinatorParentClass,
                InformParentOfDirtinessDelegate = InformParentOfDirtinessDelegate,
                OriginalIncludeChildrenMode = includeChildrenMode,
                HierarchyBytes = bytes
            };
            return clone;
        }
        
        private bool _IsDirty;
        public bool IsDirty
        {
            get => _IsDirty;
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        InformParentOfDirtiness();
                    }
                }
            }
        }
        
        public InformParentOfDirtinessDelegate InformParentOfDirtinessDelegate { get; set; }
        public void InformParentOfDirtiness()
        {
            if (InformParentOfDirtinessDelegate == null)
            {
                if (LazinatorParentClass != null)
                {
                    LazinatorParentClass.DescendantIsDirty = true;
                }
            }
            else
            InformParentOfDirtinessDelegate();
        }
        
        private bool _DescendantIsDirty;
        public bool DescendantIsDirty
        {
            get => _DescendantIsDirty;
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty && LazinatorParentClass != null)
                    {
                        LazinatorParentClass.DescendantIsDirty = true;
                    }
                }
            }
        }
        
        public DeserializationFactory DeserializationFactory { get; set; }
        
        private MemoryInBuffer _HierarchyBytes;
        public MemoryInBuffer HierarchyBytes
        {
            get => _HierarchyBytes;
            set
            {
                _HierarchyBytes = value;
                LazinatorObjectBytes = value.FilledMemory;
            }
        }
        
        private ReadOnlyMemory<byte> _LazinatorObjectBytes;
        public ReadOnlyMemory<byte> LazinatorObjectBytes
        {
            get => _LazinatorObjectBytes;
            set
            {
                _LazinatorObjectBytes = value;
                Deserialize();
            }
        }
        
        /* Field boilerplate */
        
        internal int _Left_ByteIndex;
        internal int _Right_ByteIndex;
        internal int _Key_ByteIndex;
        internal int _Value_ByteIndex;
        internal int _Left_ByteLength => _Right_ByteIndex - _Left_ByteIndex;
        internal int _Right_ByteLength => _Key_ByteIndex - _Right_ByteIndex;
        internal int _Key_ByteLength => _Value_ByteIndex - _Key_ByteIndex;
        internal int _Value_ByteLength => LazinatorObjectBytes.Length - _Value_ByteIndex;
        
        private int _Balance;
        public int Balance
        {
            get
            {
                return _Balance;
            }
            set
            {
                IsDirty = true;
                _Balance = value;
            }
        }
        public /* DEBUG */ Lazinator.Collections.Avl.AvlNode<TKey, TValue> _Left;
        public Lazinator.Collections.Avl.AvlNode<TKey, TValue> Left
        {
            get
            {
                if (!_Left_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        _Left = default(Lazinator.Collections.Avl.AvlNode<TKey, TValue>);
                    }
                    else
                    {
                        ReadOnlyMemory<byte> childData = GetChildSlice(LazinatorObjectBytes, _Left_ByteIndex, _Left_ByteLength);
                        _Left = new Lazinator.Collections.Avl.AvlNode<TKey, TValue>()
                        {
                            DeserializationFactory = DeserializationFactory,
                            LazinatorParentClass = this,
                            LazinatorObjectBytes = childData,
                        };
                    }
                    _Left_Accessed = true;
                }
                return _Left;
            }
            set
            {
                IsDirty = true;
                _Left = value;
                if (_Left != null)
                {
                    _Left.IsDirty = true;
                }
                _Left_Accessed = true;
            }
        }
        public bool _Left_Accessed;
        public /* DEBUG */ Lazinator.Collections.Avl.AvlNode<TKey, TValue> _Right;
        public Lazinator.Collections.Avl.AvlNode<TKey, TValue> Right
        {
            get
            {
                if (!_Right_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        _Right = default(Lazinator.Collections.Avl.AvlNode<TKey, TValue>);
                    }
                    else
                    {
                        ReadOnlyMemory<byte> childData = GetChildSlice(LazinatorObjectBytes, _Right_ByteIndex, _Right_ByteLength);
                        _Right = new Lazinator.Collections.Avl.AvlNode<TKey, TValue>()
                        {
                            DeserializationFactory = DeserializationFactory,
                            LazinatorParentClass = this,
                            LazinatorObjectBytes = childData,
                        };
                    }
                    _Right_Accessed = true;
                }
                return _Right;
            }
            set
            {
                IsDirty = true;
                _Right = value;
                if (_Right != null)
                {
                    _Right.IsDirty = true;
                }
                _Right_Accessed = true;
            }
        }
        internal bool _Right_Accessed;
        private TKey _Key;
        public TKey Key
        {
            get
            {
                if (!_Key_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        _Key = default(TKey);
                    }
                    else
                    {
                        ReadOnlyMemory<byte> childData = GetChildSlice(LazinatorObjectBytes, _Key_ByteIndex, _Key_ByteLength);
                        _Key = new TKey()
                        {
                            DeserializationFactory = DeserializationFactory,
                            LazinatorParentClass = this,
                            LazinatorObjectBytes = childData,
                        };
                    }
                    _Key_Accessed = true;
                }
                return _Key;
            }
            set
            {
                IsDirty = true;
                _Key = value;
                _Key_Accessed = true;
            }
        }
        internal bool _Key_Accessed;
        private TValue _Value;
        public TValue Value
        {
            get
            {
                if (!_Value_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        _Value = default(TValue);
                    }
                    else
                    {
                        ReadOnlyMemory<byte> childData = GetChildSlice(LazinatorObjectBytes, _Value_ByteIndex, _Value_ByteLength);
                        _Value = new TValue()
                        {
                            DeserializationFactory = DeserializationFactory,
                            LazinatorParentClass = this,
                            LazinatorObjectBytes = childData,
                        };
                    }
                    _Value_Accessed = true;
                }
                return _Value;
            }
            set
            {
                IsDirty = true;
                _Value = value;
                _Value_Accessed = true;
            }
        }
        internal bool _Value_Accessed;
        
        /* Conversion */
        
        public int LazinatorUniqueID => 93;
        
        public int LazinatorObjectVersion { get; set; } = 0;
        
        public void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            Debug.WriteLine($"Balance {bytesSoFar}"); // DEBUG
            _Balance = span.ToDecompressedInt(ref bytesSoFar);
            _Left_ByteIndex = bytesSoFar;
            Debug.WriteLine($"_Left_ByteIndex {_Left_ByteIndex}"); // DEBUG
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren) 
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            _Right_ByteIndex = bytesSoFar;
            Debug.WriteLine($"_Right_ByteIndex {_Right_ByteIndex}"); // DEBUG
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren) 
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            _Key_ByteIndex = bytesSoFar;
            Debug.WriteLine($"_Key_ByteIndex {_Key_ByteIndex}"); // DEBUG
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren) 
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            _Value_ByteIndex = bytesSoFar;
            Debug.WriteLine($"_Value_ByteIndex {_Value_ByteIndex}"); // DEBUG
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren) 
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            Debug.WriteLine($"After value read {bytesSoFar}"); // DEBUG
        }
        
        public void SerializeExistingBuffer(BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness)
        {
            // header information
            Debug.WriteLine($"Begin node {writer.Position}"); // DEBUG
            CompressedIntegralTypes.WriteCompressedInt(writer, LazinatorUniqueID);
            CompressedIntegralTypes.WriteCompressedInt(writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
            CompressedIntegralTypes.WriteCompressedInt(writer, LazinatorObjectVersion);
            writer.Write((byte)includeChildrenMode);
            // write properties
            Debug.WriteLine($"Balance {writer.Position}"); // DEBUG
            CompressedIntegralTypes.WriteCompressedInt(writer, _Balance);
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren) 
            {
                Debug.WriteLine($"Before left {writer.Position}"); // DEBUG
                WriteChildWithLength(writer, _Left, includeChildrenMode, _Left_Accessed, () => GetChildSlice(LazinatorObjectBytes, _Left_ByteIndex, _Left_ByteLength), verifyCleanness);
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren)
            {
                Debug.WriteLine($"Before right {writer.Position}"); // DEBUG
                WriteChildWithLength(writer, _Right, includeChildrenMode, _Right_Accessed, () => GetChildSlice(LazinatorObjectBytes, _Right_ByteIndex, _Right_ByteLength), verifyCleanness);
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren)
            {
                Debug.WriteLine($"Before key {writer.Position}"); // DEBUG
                WriteChildWithLength(writer, _Key, includeChildrenMode, _Key_Accessed, () => GetChildSlice(LazinatorObjectBytes, _Key_ByteIndex, _Key_ByteLength), verifyCleanness);
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren)
            {
                Debug.WriteLine($"Before value {writer.Position}"); // DEBUG
                WriteChildWithLength(writer, _Value, includeChildrenMode, _Value_Accessed, () => GetChildSlice(LazinatorObjectBytes, _Value_ByteIndex, _Value_ByteLength), verifyCleanness);
                Debug.WriteLine($"After value {writer.Position}"); // DEBUG
            }
        }
        
    }
}
