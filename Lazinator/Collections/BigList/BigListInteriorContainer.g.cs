//b91d05ff-5089-c68f-ee05-5e47779e3411
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.357
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lazinator.Collections.BigList
{
    using Lazinator.Attributes;
    using Lazinator.Buffers;
    using Lazinator.Collections;
    using Lazinator.Core;
    using Lazinator.Exceptions;
    using Lazinator.Support;
    using Lazinator.Wrappers;
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class BigListInteriorContainer<T> : ILazinator
    {
        /* Property definitions */
        
        protected int _ChildContainerCounts_ByteIndex;
        protected int _ChildContainerMaxPathToLeaf_ByteIndex;
        protected int _MaxPathToLeaf_ByteIndex;
        protected virtual int _ChildContainerCounts_ByteLength => _ChildContainerMaxPathToLeaf_ByteIndex - _ChildContainerCounts_ByteIndex;
        protected virtual int _ChildContainerMaxPathToLeaf_ByteLength => _MaxPathToLeaf_ByteIndex - _ChildContainerMaxPathToLeaf_ByteIndex;
        private int _BigListInteriorContainer_T_EndByteIndex;
        protected virtual int _MaxPathToLeaf_ByteLength => _BigListInteriorContainer_T_EndByteIndex - _MaxPathToLeaf_ByteIndex;
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected int _BranchingFactor;
        public override int BranchingFactor
        {
            [DebuggerStepThrough]
            get
            {
                return _BranchingFactor;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                _BranchingFactor = value;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected long _Count;
        public override long Count
        {
            [DebuggerStepThrough]
            get
            {
                return _Count;
            }
            [DebuggerStepThrough]
            set
            {
                IsDirty = true;
                _Count = value;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected LazinatorList<WLong> _ChildContainerCounts;
        public LazinatorList<WLong> ChildContainerCounts
        {
            [DebuggerStepThrough]
            get
            {
                if (!_ChildContainerCounts_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        _ChildContainerCounts = default(LazinatorList<WLong>);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ChildContainerCounts_ByteIndex, _ChildContainerCounts_ByteLength, false, false, null);
                        
                        _ChildContainerCounts = DeserializationFactory.Instance.CreateBaseOrDerivedType(51, () => new LazinatorList<WLong>(), childData, this); 
                    }
                    _ChildContainerCounts_Accessed = true;
                } 
                return _ChildContainerCounts;
            }
            [DebuggerStepThrough]
            set
            {
                if (_ChildContainerCounts != null)
                {
                    _ChildContainerCounts.LazinatorParents = _ChildContainerCounts.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ChildContainerCounts = value;
                _ChildContainerCounts_Accessed = true;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _ChildContainerCounts_Accessed;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected LazinatorList<WInt> _ChildContainerMaxPathToLeaf;
        public LazinatorList<WInt> ChildContainerMaxPathToLeaf
        {
            [DebuggerStepThrough]
            get
            {
                if (!_ChildContainerMaxPathToLeaf_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        _ChildContainerMaxPathToLeaf = default(LazinatorList<WInt>);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ChildContainerMaxPathToLeaf_ByteIndex, _ChildContainerMaxPathToLeaf_ByteLength, false, false, null);
                        
                        _ChildContainerMaxPathToLeaf = DeserializationFactory.Instance.CreateBaseOrDerivedType(51, () => new LazinatorList<WInt>(), childData, this); 
                    }
                    _ChildContainerMaxPathToLeaf_Accessed = true;
                } 
                return _ChildContainerMaxPathToLeaf;
            }
            [DebuggerStepThrough]
            set
            {
                if (_ChildContainerMaxPathToLeaf != null)
                {
                    _ChildContainerMaxPathToLeaf.LazinatorParents = _ChildContainerMaxPathToLeaf.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ChildContainerMaxPathToLeaf = value;
                _ChildContainerMaxPathToLeaf_Accessed = true;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _ChildContainerMaxPathToLeaf_Accessed;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected WInt _MaxPathToLeaf;
        public WInt MaxPathToLeaf
        {
            [DebuggerStepThrough]
            get
            {
                if (!_MaxPathToLeaf_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        _MaxPathToLeaf = default(WInt);
                        _MaxPathToLeaf.LazinatorParents = new LazinatorParentsCollection(this);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MaxPathToLeaf_ByteIndex, _MaxPathToLeaf_ByteLength, false, true, null);
                        _MaxPathToLeaf = new WInt()
                        {
                            LazinatorParents = new LazinatorParentsCollection(this)
                        };
                        _MaxPathToLeaf.DeserializeLazinator(childData);
                    }
                    _MaxPathToLeaf_Accessed = true;
                } 
                return _MaxPathToLeaf;
            }
            [DebuggerStepThrough]
            set
            {
                value.LazinatorParents = new LazinatorParentsCollection(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _MaxPathToLeaf = value;
                _MaxPathToLeaf_Accessed = true;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _MaxPathToLeaf_Accessed;
        public WInt MaxPathToLeaf_Copy
        {
            [DebuggerStepThrough]
            get
            {
                if (!_MaxPathToLeaf_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        return default(WInt);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MaxPathToLeaf_ByteIndex, _MaxPathToLeaf_ByteLength, false, true, null);
                        var toReturn = new WInt();
                        toReturn.DeserializeLazinator(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                var cleanCopy = _MaxPathToLeaf;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        /* Serialization, deserialization, and object relationships */
        
        public BigListInteriorContainer() : base()
        {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override LazinatorParentsCollection LazinatorParents { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public override int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public override LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected override LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public override ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            var clone = new BigListInteriorContainer<T>()
            {
                OriginalIncludeChildrenMode = includeChildrenMode
            };
            clone = CompleteClone(this, clone, includeChildrenMode, cloneBufferOptions);
            return clone;
        }
        
        public override ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            BigListInteriorContainer<T> typedClone = (BigListInteriorContainer<T>) clone;
            typedClone.BranchingFactor = BranchingFactor;
            typedClone.Count = Count;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                if (ChildContainerCounts == null)
                {
                    typedClone.ChildContainerCounts = default(LazinatorList<WLong>);
                }
                else
                {
                    typedClone.ChildContainerCounts = (LazinatorList<WLong>) ChildContainerCounts.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                if (ChildContainerMaxPathToLeaf == null)
                {
                    typedClone.ChildContainerMaxPathToLeaf = default(LazinatorList<WInt>);
                }
                else
                {
                    typedClone.ChildContainerMaxPathToLeaf = (LazinatorList<WInt>) ChildContainerMaxPathToLeaf.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                typedClone.MaxPathToLeaf = (WInt) MaxPathToLeaf.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            
            return typedClone;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override bool HasChanged { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _IsDirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _DescendantHasChanged;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _DescendantIsDirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public override void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public override void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public override int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public override bool NonBinaryHash32 => false;
        
        
        public override IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        public override IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ChildContainerCounts_Accessed) && ChildContainerCounts == null)
            {
                yield return ("ChildContainerCounts", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ChildContainerCounts != null) || (_ChildContainerCounts_Accessed && _ChildContainerCounts != null))
                {
                    bool isMatch = matchCriterion == null || matchCriterion(ChildContainerCounts);
                    bool shouldExplore = exploreCriterion == null || exploreCriterion(ChildContainerCounts);
                    if (isMatch)
                    {
                        yield return ("ChildContainerCounts", ChildContainerCounts);
                    }
                    if ((!stopExploringBelowMatch || !isMatch) && shouldExplore)
                    {
                        foreach (var toYield in ChildContainerCounts.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ChildContainerCounts" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ChildContainerMaxPathToLeaf_Accessed) && ChildContainerMaxPathToLeaf == null)
            {
                yield return ("ChildContainerMaxPathToLeaf", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ChildContainerMaxPathToLeaf != null) || (_ChildContainerMaxPathToLeaf_Accessed && _ChildContainerMaxPathToLeaf != null))
                {
                    bool isMatch = matchCriterion == null || matchCriterion(ChildContainerMaxPathToLeaf);
                    bool shouldExplore = exploreCriterion == null || exploreCriterion(ChildContainerMaxPathToLeaf);
                    if (isMatch)
                    {
                        yield return ("ChildContainerMaxPathToLeaf", ChildContainerMaxPathToLeaf);
                    }
                    if ((!stopExploringBelowMatch || !isMatch) && shouldExplore)
                    {
                        foreach (var toYield in ChildContainerMaxPathToLeaf.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ChildContainerMaxPathToLeaf" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if ((!exploreOnlyDeserializedChildren && true) || (true))
            {
                bool isMatch = matchCriterion == null || matchCriterion(MaxPathToLeaf);
                bool shouldExplore = exploreCriterion == null || exploreCriterion(MaxPathToLeaf);
                if (isMatch)
                {
                    yield return ("MaxPathToLeaf", MaxPathToLeaf);
                }
                if ((!stopExploringBelowMatch || !isMatch) && shouldExplore)
                {
                    foreach (var toYield in MaxPathToLeaf.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                    {
                        yield return ("MaxPathToLeaf" + "." + toYield.propertyName, toYield.descendant);
                    }
                }
            }
            yield break;
        }
        
        
        public override IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            yield return ("BranchingFactor", (object)BranchingFactor);
            yield return ("Count", (object)Count);
            yield break;
        }
        
        public override ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            if ((!exploreOnlyDeserializedChildren && ChildContainerCounts != null) || (_ChildContainerCounts_Accessed && _ChildContainerCounts != null))
            {
                _ChildContainerCounts = (LazinatorList<WLong>) _ChildContainerCounts.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && ChildContainerMaxPathToLeaf != null) || (_ChildContainerMaxPathToLeaf_Accessed && _ChildContainerMaxPathToLeaf != null))
            {
                _ChildContainerMaxPathToLeaf = (LazinatorList<WInt>) _ChildContainerMaxPathToLeaf.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && true) || (true))
            {
                var deserialized = MaxPathToLeaf;
                _MaxPathToLeaf = (WInt) _MaxPathToLeaf.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if (changeThisLevel)
            {
                return changeFunc(this);
            }
            return this;
        }
        
        public override void FreeInMemoryObjects()
        {
            _ChildContainerCounts = default;
            _ChildContainerMaxPathToLeaf = default;
            _MaxPathToLeaf = default;
            _ChildContainerCounts_Accessed = _ChildContainerMaxPathToLeaf_Accessed = _MaxPathToLeaf_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        /* Conversion */
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override int LazinatorUniqueID => 121;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override bool ContainsOpenGenericParameters => true;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override LazinatorGenericIDType LazinatorGenericID => LazinatorGenericIDType.GetCachedForType<BigListInteriorContainer<T>>(() => DeserializationFactory.Instance.GetUniqueIDListForGenericType(121, new Type[] { typeof(T) }));
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override int LazinatorObjectVersion { get; set; } = 0;
        
        
        public override void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            _BranchingFactor = span.ToDecompressedInt(ref bytesSoFar);
            _Count = span.ToDecompressedLong(ref bytesSoFar);
            _ChildContainerCounts_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            _ChildContainerMaxPathToLeaf_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            _MaxPathToLeaf_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                bytesSoFar = span.ToByte(ref bytesSoFar) + bytesSoFar;
            }
            _BigListInteriorContainer_T_EndByteIndex = bytesSoFar;
        }
        
        public override void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
            {
                updateStoredBuffer = false;
            }
            int startPosition = writer.Position;
            WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
            if (updateStoredBuffer)
            {
                UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
            }
        }
        
        public override void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
        {
            _IsDirty = false;
            if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                _DescendantIsDirty = false;
                if (updateDeserializedChildren)
                {
                    UpdateDeserializedChildren(ref writer, startPosition);
                }
                
                _MaxPathToLeaf_Accessed = false;
            }
            else
            {
                throw new LazinatorSerializationException("Cannot update stored buffer when serializing only some children.");
            }
            
            var newBuffer = writer.Slice(startPosition, length);
            LazinatorMemoryStorage = newBuffer;
        }
        
        protected override void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
        {
            if (_ChildContainerCounts_Accessed && _ChildContainerCounts != null)
            {
                _ChildContainerCounts.UpdateStoredBuffer(ref writer, startPosition + _ChildContainerCounts_ByteIndex + sizeof(int), _ChildContainerCounts_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (_ChildContainerMaxPathToLeaf_Accessed && _ChildContainerMaxPathToLeaf != null)
            {
                _ChildContainerMaxPathToLeaf.UpdateStoredBuffer(ref writer, startPosition + _ChildContainerMaxPathToLeaf_ByteIndex + sizeof(int), _ChildContainerMaxPathToLeaf_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (true)
            {
                _MaxPathToLeaf.UpdateStoredBuffer(ref writer, startPosition + _MaxPathToLeaf_ByteIndex + sizeof(byte), _MaxPathToLeaf_ByteLength - sizeof(byte), IncludeChildrenMode.IncludeAllChildren, true);
            }
        }
        
        
        protected override void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
        {
            int startPosition = writer.Position;
            int startOfObjectPosition = 0;
            // header information
            if (includeUniqueID)
            {
                if (!ContainsOpenGenericParameters)
                {
                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                }
                else
                {
                    WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                }
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
            writer.Write((byte)includeChildrenMode);
            // write properties
            CompressedIntegralTypes.WriteCompressedInt(ref writer, _BranchingFactor);
            CompressedIntegralTypes.WriteCompressedLong(ref writer, _Count);
            startOfObjectPosition = writer.Position;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ChildContainerCounts_Accessed)
                {
                    var deserialized = ChildContainerCounts;
                }
                WriteChild(ref writer, ref _ChildContainerCounts, includeChildrenMode, _ChildContainerCounts_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ChildContainerCounts_ByteIndex, _ChildContainerCounts_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
            }
            if (updateStoredBuffer)
            {
                _ChildContainerCounts_ByteIndex = startOfObjectPosition - startPosition;
            }
            startOfObjectPosition = writer.Position;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ChildContainerMaxPathToLeaf_Accessed)
                {
                    var deserialized = ChildContainerMaxPathToLeaf;
                }
                WriteChild(ref writer, ref _ChildContainerMaxPathToLeaf, includeChildrenMode, _ChildContainerMaxPathToLeaf_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ChildContainerMaxPathToLeaf_ByteIndex, _ChildContainerMaxPathToLeaf_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
            }
            if (updateStoredBuffer)
            {
                _ChildContainerMaxPathToLeaf_ByteIndex = startOfObjectPosition - startPosition;
            }
            startOfObjectPosition = writer.Position;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MaxPathToLeaf_Accessed)
                {
                    var deserialized = MaxPathToLeaf;
                }
                WriteChild(ref writer, ref _MaxPathToLeaf, includeChildrenMode, _MaxPathToLeaf_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _MaxPathToLeaf_ByteIndex, _MaxPathToLeaf_ByteLength, false, true, null), verifyCleanness, updateStoredBuffer, true, false, this);
            }
            if (updateStoredBuffer)
            {
                _MaxPathToLeaf_ByteIndex = startOfObjectPosition - startPosition;
            }
            if (updateStoredBuffer)
            {
                _BigListInteriorContainer_T_EndByteIndex = writer.Position - startPosition;
            }
        }
        
    }
}
