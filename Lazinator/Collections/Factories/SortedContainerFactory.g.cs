//8a1f793c-4337-8415-10f6-cdefb3c11a0b
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.359
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lazinator.Collections.Factories
{
    using Lazinator.Attributes;
    using Lazinator.Buffers;
    using Lazinator.Core;
    using Lazinator.Exceptions;
    using Lazinator.Support;
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class SortedContainerFactory<T> : ContainerFactory<T>, ILazinator
    {
        /* Property definitions */
        
        protected int _SortedInteriorFactory_ByteIndex;
        private int _SortedContainerFactory_T_EndByteIndex;
        protected virtual int _SortedInteriorFactory_ByteLength => _SortedContainerFactory_T_EndByteIndex - _SortedInteriorFactory_ByteIndex;
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected SortedContainerFactory<T> _SortedInteriorFactory;
        public virtual SortedContainerFactory<T> SortedInteriorFactory
        {
            [DebuggerStepThrough]
            get
            {
                if (!_SortedInteriorFactory_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        _SortedInteriorFactory = default(SortedContainerFactory<T>);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _SortedInteriorFactory_ByteIndex, _SortedInteriorFactory_ByteLength, false, false, null);
                        
                        _SortedInteriorFactory = DeserializationFactory.Instance.CreateBaseOrDerivedType(177, () => new SortedContainerFactory<T>(), childData, this); 
                    }
                    _SortedInteriorFactory_Accessed = true;
                } 
                return _SortedInteriorFactory;
            }
            [DebuggerStepThrough]
            set
            {
                if (_SortedInteriorFactory != null)
                {
                    _SortedInteriorFactory.LazinatorParents = _SortedInteriorFactory.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _SortedInteriorFactory = value;
                _SortedInteriorFactory_Accessed = true;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _SortedInteriorFactory_Accessed;
        /* Clone overrides */
        
        public SortedContainerFactory() : base()
        {
        }
        
        public override ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            var clone = new SortedContainerFactory<T>()
            {
                OriginalIncludeChildrenMode = includeChildrenMode
            };
            clone = CompleteClone(this, clone, includeChildrenMode, cloneBufferOptions);
            return clone;
        }
        
        public override ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            base.AssignCloneProperties(clone, includeChildrenMode);
            SortedContainerFactory<T> typedClone = (SortedContainerFactory<T>) clone;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                if (SortedInteriorFactory == null)
                {
                    typedClone.SortedInteriorFactory = default(SortedContainerFactory<T>);
                }
                else
                {
                    typedClone.SortedInteriorFactory = (SortedContainerFactory<T>) SortedInteriorFactory.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            
            return typedClone;
        }
        
        /* Properties */
        
        public override IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            foreach (var inheritedYield in base.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
            {
                yield return inheritedYield;
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _SortedInteriorFactory_Accessed) && SortedInteriorFactory == null)
            {
                yield return ("SortedInteriorFactory", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && SortedInteriorFactory != null) || (_SortedInteriorFactory_Accessed && _SortedInteriorFactory != null))
                {
                    bool isMatch = matchCriterion == null || matchCriterion(SortedInteriorFactory);
                    bool shouldExplore = exploreCriterion == null || exploreCriterion(SortedInteriorFactory);
                    if (isMatch)
                    {
                        yield return ("SortedInteriorFactory", SortedInteriorFactory);
                    }
                    if ((!stopExploringBelowMatch || !isMatch) && shouldExplore)
                    {
                        foreach (var toYield in SortedInteriorFactory.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("SortedInteriorFactory" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            yield break;
        }
        
        
        public override IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            foreach (var inheritedYield in base.EnumerateNonLazinatorProperties())
            {
                yield return inheritedYield;
            }
            yield break;
        }
        
        public override ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            base.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, false);
            if ((!exploreOnlyDeserializedChildren && SortedInteriorFactory != null) || (_SortedInteriorFactory_Accessed && _SortedInteriorFactory != null))
            {
                _SortedInteriorFactory = (SortedContainerFactory<T>) _SortedInteriorFactory.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if (changeThisLevel)
            {
                return changeFunc(this);
            }
            return this;
        }
        
        public override void FreeInMemoryObjects()
        {
            base.FreeInMemoryObjects();
            _SortedInteriorFactory = default;
            _SortedInteriorFactory_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        /* Conversion */
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override int LazinatorUniqueID => 177;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override bool ContainsOpenGenericParameters => true;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override LazinatorGenericIDType LazinatorGenericID => LazinatorGenericIDType.GetCachedForType<SortedContainerFactory<T>>(() => DeserializationFactory.Instance.GetUniqueIDListForGenericType(177, new Type[] { typeof(T) }));
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override int LazinatorObjectVersion { get; set; } = 0;
        
        
        public override void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            base.ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            _SortedInteriorFactory_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            _SortedContainerFactory_T_EndByteIndex = bytesSoFar;
        }
        
        public override void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
            {
                updateStoredBuffer = false;
            }
            int startPosition = writer.Position;
            WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
            if (updateStoredBuffer)
            {
                UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
            }
        }
        
        public override void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
        {
            _IsDirty = false;
            if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                _DescendantIsDirty = false;
                if (updateDeserializedChildren)
                {
                    UpdateDeserializedChildren(ref writer, startPosition);
                }
                
            }
            else
            {
                throw new LazinatorSerializationException("Cannot update stored buffer when serializing only some children.");
            }
            
            var newBuffer = writer.Slice(startPosition, length);
            LazinatorMemoryStorage = newBuffer;
        }
        
        protected override void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
        {
            base.UpdateDeserializedChildren(ref writer, startPosition);
            if (_SortedInteriorFactory_Accessed && _SortedInteriorFactory != null)
            {
                _SortedInteriorFactory.UpdateStoredBuffer(ref writer, startPosition + _SortedInteriorFactory_ByteIndex + sizeof(int), _SortedInteriorFactory_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
        }
        
        
        protected override void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
        {
            int startPosition = writer.Position;
            int startOfObjectPosition = 0;
            base.WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, includeUniqueID);
            // write properties
            startOfObjectPosition = writer.Position;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_SortedInteriorFactory_Accessed)
                {
                    var deserialized = SortedInteriorFactory;
                }
                WriteChild(ref writer, ref _SortedInteriorFactory, includeChildrenMode, _SortedInteriorFactory_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _SortedInteriorFactory_ByteIndex, _SortedInteriorFactory_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
            }
            if (updateStoredBuffer)
            {
                _SortedInteriorFactory_ByteIndex = startOfObjectPosition - startPosition;
            }
            if (updateStoredBuffer)
            {
                _SortedContainerFactory_T_EndByteIndex = writer.Position - startPosition;
            }
        }
        
    }
}
