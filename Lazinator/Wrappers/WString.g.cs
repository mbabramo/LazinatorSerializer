/*Location10313*//*Location10299*///25a9bb8d-e5a1-af15-87bf-bcd9f58a4e7b
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace Lazinator.Wrappers
{/*Location10300*/
    using Lazinator.Attributes;/*Location10301*/
    using Lazinator.Buffers;/*Location10302*/
    using Lazinator.Core;/*Location10303*/
    using Lazinator.Exceptions;/*Location10304*/
    using Lazinator.Support;/*Location10305*/
    using System;/*Location10306*/
    using System.Buffers;/*Location10307*/
    using System.Collections.Generic;/*Location10308*/
    using System.Diagnostics;/*Location10309*/
    using System.IO;/*Location10310*/
    using System.Linq;/*Location10311*/
    using System.Runtime.InteropServices;/*Location10312*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial struct WString : ILazinator
    {
        /*Location10314*/[DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool IsStruct => true;
        
        /*Location10315*//* Property definitions */
        
        
        /*Location10316*/
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string _WrappedValue;
        public string WrappedValue
        {
            [DebuggerStepThrough]
            get
            {
                return _WrappedValue;
            }
            [DebuggerStepThrough]
            private set
            {
                IsDirty = true;
                _WrappedValue = value;
            }
        }
        /*Location10318*/
        /* Serialization, deserialization, and object relationships */
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorParentsCollection LazinatorParents { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = -1; /* versioning disabled */
            
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren; /* cannot have children */
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            var clone = new WString()
            {
                OriginalIncludeChildrenMode = includeChildrenMode
            };
            clone = CompleteClone(this, clone, includeChildrenMode, cloneBufferOptions);
            return clone;
        }
        
        public ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            WString typedClone = (WString) clone;
            /*Location10317*/typedClone.WrappedValue = WrappedValue;
            
            typedClone.IsDirty = false;
            return typedClone;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool HasChanged { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _IsDirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _DescendantHasChanged;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool _DescendantIsDirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public bool NonBinaryHash32 => true;
        
        /*Location10319*/
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location10320*/public IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location10321*/yield break;
        }
        /*Location10322*/
        
        public IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location10323*/yield return ("WrappedValue", (object)WrappedValue);
            /*Location10324*/yield break;
        }
        /*Location10325*/
        public ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location10326*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location10327*/
        public void FreeInMemoryObjects()
        {
            
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location10328*/
        /* Conversion */
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int LazinatorUniqueID => 24;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        bool ContainsOpenGenericParameters => false;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorGenericIDType LazinatorGenericID => default;
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int LazinatorObjectVersion
        {
            get => -1;
            set => ThrowHelper.ThrowVersioningDisabledException("WString");
        }
        
        
        /*Location10329*/public void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location10330*/_WrappedValue = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            /*Location10331*/        }
            
            /*Location10332*/public void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location10333*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location10334*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, false);
                /*Location10335*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location10336*/}
                    /*Location10337*/}
                    /*Location10338*/
                    public void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location10339*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location10340*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location10341*/}
                                /*Location10342*//*Location10343*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location10344*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location10345*/}
                            /*Location10346*/
                            void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                /*Location10347*/}
                                
                                /*Location10348*/
                                void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    // header information
                                    /*Location10349*/if (includeUniqueID)
                                    {
                                        CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                    }
                                    
                                    /*Location10350*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                    
                                    /*Location10351*/// write properties
                                    /*Location10352*/EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _WrappedValue);
                                    /*Location10353*/}
                                    /*Location10354*/
                                    public WString_RefStruct ToRefStruct()
                                    {
                                        UpdateStoredBuffer();
                                        var clone = new WString_RefStruct()
                                        {
                                            OriginalIncludeChildrenMode = OriginalIncludeChildrenMode,
                                            LazinatorMemoryStorage = LazinatorMemoryStorage
                                        };
                                        clone.Deserialize();
                                        return clone;
                                    }
                                    /*Location10355*/
                                    
                                    
                                    [Autogenerated]
                                    public ref partial struct WString_RefStruct
                                    {
                                        /*Location10356*/[DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        public bool IsStruct => true;
                                        
                                        /*Location10357*/public WString FromRefStruct()
                                        {
                                            UpdateStoredBuffer();
                                            var clone = new WString()
                                            {
                                                OriginalIncludeChildrenMode = OriginalIncludeChildrenMode,
                                                LazinatorMemoryStorage = LazinatorMemoryStorage
                                            };
                                            clone.Deserialize();
                                            return clone;
                                        }
                                        
                                        /*Location10358*//* Property definitions */
                                        
                                        
                                        /*Location10359*/
                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        string _WrappedValue;
                                        public string WrappedValue
                                        {
                                            [DebuggerStepThrough]
                                            get
                                            {
                                                return _WrappedValue;
                                            }
                                            [DebuggerStepThrough]
                                            private set
                                            {
                                                IsDirty = true;
                                                _WrappedValue = value;
                                            }
                                        }
                                        /*Location10360*/
                                        /* Serialization, deserialization, and object relationships */
                                        
                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        public LazinatorParentsCollection LazinatorParents { get; set; }
                                        
                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        public IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
                                        
                                        public int Deserialize()
                                        {
                                            FreeInMemoryObjects();
                                            int bytesSoFar = 0;
                                            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
                                            if (span.Length == 0)
                                            {
                                                return 0;
                                            }
                                            
                                            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            int serializedVersionNumber = -1; /* versioning disabled */
                                            
                                            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren; /* cannot have children */
                                            
                                            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
                                            return bytesSoFar;
                                        }
                                        
                                        public LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
                                        {
                                            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
                                            {
                                                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                            }
                                            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                                            writer.Write(LazinatorMemoryStorage.Span);
                                            return writer.LazinatorMemory;
                                        }
                                        
                                        LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
                                        {
                                            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
                                            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
                                            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                            return writer.LazinatorMemory;
                                        }
                                        
                                        
                                        
                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        public bool HasChanged { get; set; }
                                        
                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        bool _IsDirty;
                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        public bool IsDirty
                                        {
                                            [DebuggerStepThrough]
                                            get => _IsDirty;
                                            [DebuggerStepThrough]
                                            set
                                            {
                                                if (_IsDirty != value)
                                                {
                                                    _IsDirty = value;
                                                    if (_IsDirty)
                                                    {
                                                        LazinatorParents.InformParentsOfDirtiness();
                                                        HasChanged = true;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        bool _DescendantHasChanged;
                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        public bool DescendantHasChanged
                                        {
                                            [DebuggerStepThrough]
                                            get => _DescendantHasChanged;
                                            [DebuggerStepThrough]
                                            set
                                            {
                                                _DescendantHasChanged = value;
                                            }
                                        }
                                        
                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        bool _DescendantIsDirty;
                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        public bool DescendantIsDirty
                                        {
                                            [DebuggerStepThrough]
                                            get => _DescendantIsDirty;
                                            [DebuggerStepThrough]
                                            set
                                            {
                                                if (_DescendantIsDirty != value)
                                                {
                                                    _DescendantIsDirty = value;
                                                    if (_DescendantIsDirty)
                                                    {
                                                        LazinatorParents.InformParentsOfDirtiness();
                                                        _DescendantHasChanged = true;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        public void DeserializeLazinator(LazinatorMemory serializedBytes)
                                        {
                                            LazinatorMemoryStorage = serializedBytes;
                                            int length = Deserialize();
                                            if (length != LazinatorMemoryStorage.Length)
                                            {
                                                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
                                            }
                                        }
                                        
                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        public LazinatorMemory LazinatorMemoryStorage
                                        {
                                            get;
                                            set;
                                        }
                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
                                        
                                        public void UpdateStoredBuffer()
                                        {
                                            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                                            {
                                                return;
                                            }
                                            var previousBuffer = LazinatorMemoryStorage;
                                            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
                                            {
                                                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
                                            }
                                            else
                                            {
                                                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                                                writer.Write(LazinatorMemoryStorage.Span);
                                                LazinatorMemoryStorage = writer.LazinatorMemory;
                                            }
                                            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
                                            if (!LazinatorParents.Any())
                                            {
                                                previousBuffer.Dispose();
                                            }
                                        }
                                        
                                        public int GetByteLength()
                                        {
                                            UpdateStoredBuffer();
                                            return LazinatorObjectBytes.Length;
                                        }
                                        
                                        public bool NonBinaryHash32 => true;
                                        
                                        /*Location10361*/
                                        public void FreeInMemoryObjects()
                                        {
                                            
                                            IsDirty = false;
                                            DescendantIsDirty = false;
                                            HasChanged = false;
                                            DescendantHasChanged = false;
                                        }
                                        /*Location10362*/
                                        /* Conversion */
                                        
                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        public int LazinatorUniqueID => 24;
                                        
                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        bool ContainsOpenGenericParameters => false;
                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        public LazinatorGenericIDType LazinatorGenericID => default;
                                        
                                        
                                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                        public int LazinatorObjectVersion
                                        {
                                            get => -1;
                                            set => ThrowHelper.ThrowVersioningDisabledException("WString");
                                        }
                                        
                                        
                                        /*Location10363*/public void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
                                        {
                                            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
                                            /*Location10364*/_WrappedValue = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
                                            /*Location10365*/        }
                                            
                                            /*Location10366*/public void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                            {
                                                /*Location10367*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                                                {
                                                    updateStoredBuffer = false;
                                                }
                                                /*Location10368*/int startPosition = writer.Position;
                                                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, false);
                                                /*Location10369*/if (updateStoredBuffer)
                                                {
                                                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                                                    /*Location10370*/}
                                                    /*Location10371*/}
                                                    /*Location10372*/
                                                    public void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                                                    {
                                                        /*Location10373*/_IsDirty = false;
                                                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                                                        {
                                                            _DescendantIsDirty = false;/*Location10374*/
                                                            if (updateDeserializedChildren)
                                                            {
                                                                UpdateDeserializedChildren(ref writer, startPosition);
                                                                /*Location10375*/}
                                                                /*Location10376*//*Location10377*/
                                                            }
                                                            else
                                                            {
                                                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                                                            }
                                                            /*Location10378*/
                                                            var newBuffer = writer.Slice(startPosition, length);
                                                            LazinatorMemoryStorage = newBuffer;
                                                            /*Location10379*/}
                                                            /*Location10380*/
                                                            void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                                                            {
                                                                /*Location10381*/}
                                                                
                                                                /*Location10382*/
                                                                void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                                                {
                                                                    // header information
                                                                    /*Location10383*/if (includeUniqueID)
                                                                    {
                                                                        CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                                                    }
                                                                    
                                                                    /*Location10384*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                                                    
                                                                    /*Location10385*/// write properties
                                                                    /*Location10386*/EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _WrappedValue);
                                                                    /*Location10387*/}
                                                                    /*Location10388*/
                                                                }
                                                                /*Location10389*/
                                                            }
                                                        }
