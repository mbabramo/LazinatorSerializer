//d5ddcd3f-60ce-2d48-0a79-74e075f27367
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.399, on 2024/01/21 12:34:05.710 PM.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace Lazinator.Collections.Tree
{
    #pragma warning disable 8019
    using Lazinator.Attributes;
    using Lazinator.Buffers;
    using Lazinator.Core;
    using Lazinator.Exceptions;
    using Lazinator.Support;
    using static Lazinator.Buffers.WriteUncompressedPrimitives;
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using System.Threading.Tasks;
    using static Lazinator.Core.LazinatorUtilities;
    #pragma warning restore 8019
    
    [Autogenerated]
    public partial class LazinatorBinaryTreeNode<T> : ILazinator, ILazinatorAsync
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool IsStruct => false;
        
        /* Property definitions */
        
        protected int _Data_ByteIndex;
        protected int _LeftNode_ByteIndex;
        protected int _RightNode_ByteIndex;
        protected virtual int _Data_ByteLength => _LeftNode_ByteIndex - _Data_ByteIndex;
        protected virtual int _LeftNode_ByteLength => _RightNode_ByteIndex - _LeftNode_ByteIndex;
        private int _LazinatorBinaryTreeNode_T_EndByteIndex;
        protected virtual  int _RightNode_ByteLength => _LazinatorBinaryTreeNode_T_EndByteIndex - _RightNode_ByteIndex;
        protected virtual int _OverallEndByteIndex => _LazinatorBinaryTreeNode_T_EndByteIndex;
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected T _Data;
        public virtual T Data
        {
            [DebuggerStepThrough]
            get
            {
                if (!_Data_Accessed)
                {
                    LazinateData();
                } 
                return _Data;
            }
            [DebuggerStepThrough]
            set
            {
                if (value != null && value.IsStruct)
                {
                    value.LazinatorParents = new LazinatorParentsCollection(this);
                }
                else
                {
                    if (_Data != null)
                    {
                        _Data.LazinatorParents = _Data.LazinatorParents.WithRemoved(this);
                    }
                    if (value != null)
                    {
                        value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                    }
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _Data = value;
                _Data_Accessed = true;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _Data_Accessed;
        private void LazinateData()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _Data = default(T);
                if (_Data != null)
                { // Data is a struct
                    _Data.LazinatorParents = new LazinatorParentsCollection(this);
                }
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _Data_ByteIndex, _Data_ByteLength, null);
                childData.LoadInitialReadOnlyMemory();
                _Data = DeserializationFactory.Instance.CreateBasedOnType<T>(childData, this); 
                childData.ConsiderUnloadInitialReadOnlyMemory();
            }
            _Data_Accessed = true;
        }
        private async Task LazinateDataAsync()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _Data = default(T);
                if (_Data != null)
                { // Data is a struct
                    _Data.LazinatorParents = new LazinatorParentsCollection(this);
                }
            }
            else
            {
                LazinatorMemory childData = await GetChildSliceAsync(LazinatorMemoryStorage, _Data_ByteIndex, _Data_ByteLength, null);
                _Data = DeserializationFactory.Instance.CreateBasedOnType<T>(childData, this); 
                await childData.ConsiderUnloadReadOnlyMemoryAsync();
            }
            _Data_Accessed = true;
        }
        public async ValueTask<T> GetDataAsync()
        {
            if (!_Data_Accessed)
            {
                await LazinateDataAsync();
            } 
            return _Data;
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected LazinatorBinaryTreeNode<T> _LeftNode;
        public virtual LazinatorBinaryTreeNode<T> LeftNode
        {
            [DebuggerStepThrough]
            get
            {
                if (!_LeftNode_Accessed)
                {
                    LazinateLeftNode();
                } 
                return _LeftNode;
            }
            [DebuggerStepThrough]
            set
            {
                if (_LeftNode != null)
                {
                    _LeftNode.LazinatorParents = _LeftNode.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _LeftNode = value;
                _LeftNode_Accessed = true;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _LeftNode_Accessed;
        private void LazinateLeftNode()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _LeftNode = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _LeftNode_ByteIndex, _LeftNode_ByteLength, null);
                childData.LoadInitialReadOnlyMemory();
                _LeftNode = DeserializationFactory.Instance.CreateBaseOrDerivedType(257, (c, p) => new LazinatorBinaryTreeNode<T>(c, p), childData, this); 
                childData.ConsiderUnloadInitialReadOnlyMemory();
            }
            _LeftNode_Accessed = true;
        }
        private async Task LazinateLeftNodeAsync()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _LeftNode = null;
            }
            else
            {
                LazinatorMemory childData = await GetChildSliceAsync(LazinatorMemoryStorage, _LeftNode_ByteIndex, _LeftNode_ByteLength, null);
                _LeftNode = DeserializationFactory.Instance.CreateBaseOrDerivedType(257, (c, p) => new LazinatorBinaryTreeNode<T>(c, p), childData, this); 
                await childData.ConsiderUnloadReadOnlyMemoryAsync();
            }
            _LeftNode_Accessed = true;
        }
        public async ValueTask<LazinatorBinaryTreeNode<T>> GetLeftNodeAsync()
        {
            if (!_LeftNode_Accessed)
            {
                await LazinateLeftNodeAsync();
            } 
            return _LeftNode;
        }
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected LazinatorBinaryTreeNode<T> _RightNode;
        public virtual LazinatorBinaryTreeNode<T> RightNode
        {
            [DebuggerStepThrough]
            get
            {
                if (!_RightNode_Accessed)
                {
                    LazinateRightNode();
                } 
                return _RightNode;
            }
            [DebuggerStepThrough]
            set
            {
                if (_RightNode != null)
                {
                    _RightNode.LazinatorParents = _RightNode.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _RightNode = value;
                _RightNode_Accessed = true;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _RightNode_Accessed;
        private void LazinateRightNode()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _RightNode = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _RightNode_ByteIndex, _RightNode_ByteLength, null);
                childData.LoadInitialReadOnlyMemory();
                _RightNode = DeserializationFactory.Instance.CreateBaseOrDerivedType(257, (c, p) => new LazinatorBinaryTreeNode<T>(c, p), childData, this); 
                childData.ConsiderUnloadInitialReadOnlyMemory();
            }
            _RightNode_Accessed = true;
        }
        private async Task LazinateRightNodeAsync()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _RightNode = null;
            }
            else
            {
                LazinatorMemory childData = await GetChildSliceAsync(LazinatorMemoryStorage, _RightNode_ByteIndex, _RightNode_ByteLength, null);
                _RightNode = DeserializationFactory.Instance.CreateBaseOrDerivedType(257, (c, p) => new LazinatorBinaryTreeNode<T>(c, p), childData, this); 
                await childData.ConsiderUnloadReadOnlyMemoryAsync();
            }
            _RightNode_Accessed = true;
        }
        public async ValueTask<LazinatorBinaryTreeNode<T>> GetRightNodeAsync()
        {
            if (!_RightNode_Accessed)
            {
                await LazinateRightNodeAsync();
            } 
            return _RightNode;
        }
        
        
        /* Serialization, deserialization, and object relationships */
        
        public LazinatorBinaryTreeNode(IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren)
        {
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public LazinatorBinaryTreeNode(LazinatorMemory serializedBytes, ILazinator parent = null, IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren, int? lazinatorObjectVersion = null)
        {
            if (lazinatorObjectVersion != null)
            {
                LazinatorObjectVersion = (int) lazinatorObjectVersion;
            }
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual bool HasChanged { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _IsDirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorMemoryStorage.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _DescendantHasChanged;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _DescendantIsDirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        protected virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        protected virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialReadOnlyMemory.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt32(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt32(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            int totalBytes = ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return _OverallEndByteIndex;
        }
        
        public virtual void SerializeLazinator()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorMemoryStorage.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
                
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(LazinatorSerializationOptions.Default);
            }
            else
            {
                BufferWriter writer = new BufferWriter(LazinatorMemoryStorage.LengthInt ?? 0);
                LazinatorMemoryStorage.WriteToBuffer(ref writer);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        async public virtual ValueTask SerializeLazinatorAsync()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorMemoryStorage.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
                
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = await EncodeToNewBufferAsync(LazinatorSerializationOptions.Default);
            }
            else
            {
                BufferWriterContainer writer = new BufferWriterContainer(LazinatorMemoryStorage.LengthInt ?? 0);
                await LazinatorMemoryStorage.WriteToBufferAsync(writer);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        
        public virtual LazinatorMemory SerializeLazinator(in LazinatorSerializationOptions options) 
        {
            if (LazinatorMemoryStorage.IsEmpty || options.IncludeChildrenMode != OriginalIncludeChildrenMode || (options.SerializeDiffs || options.VerifyCleanness || IsDirty || (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(options);
            }
            BufferWriter writer = options.SerializeDiffs ? new BufferWriter(0, LazinatorMemoryStorage) : new BufferWriter(LazinatorMemoryStorage.LengthInt ?? 0);
            LazinatorMemoryStorage.WriteToBuffer(ref writer);
            return writer.LazinatorMemory;
        }
        async public virtual ValueTask<LazinatorMemory> SerializeLazinatorAsync(LazinatorSerializationOptions options) 
        {
            if (LazinatorMemoryStorage.IsEmpty || options.IncludeChildrenMode != OriginalIncludeChildrenMode || (options.SerializeDiffs || options.VerifyCleanness || IsDirty || (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return await EncodeToNewBufferAsync(options);
            }
            BufferWriterContainer writer = options.SerializeDiffs ? new BufferWriterContainer(0, LazinatorMemoryStorage) : new BufferWriterContainer(LazinatorMemoryStorage.LengthInt ?? 0);
            await LazinatorMemoryStorage.WriteToBufferAsync(writer);
            return writer.LazinatorMemory;
        }
        
        
        protected virtual LazinatorMemory EncodeToNewBuffer(in LazinatorSerializationOptions options) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.LengthInt ?? ExpandableBytes.DefaultMinBufferSize;
            BufferWriter writer = options.SerializeDiffs ? new BufferWriter(0, LazinatorMemoryStorage) : new BufferWriter(bufferSize);
            SerializeToExistingBuffer(ref writer, options);
            return writer.LazinatorMemory;
        }
        async protected virtual ValueTask<LazinatorMemory> EncodeToNewBufferAsync(LazinatorSerializationOptions options) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.LengthInt ?? ExpandableBytes.DefaultMinBufferSize;
            BufferWriterContainer writer = options.SerializeDiffs ? new BufferWriterContainer(0, LazinatorMemoryStorage) : new BufferWriterContainer(bufferSize);
            await SerializeToExistingBufferAsync(writer, options);
            return writer.LazinatorMemory;
        }
        
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            LazinatorBinaryTreeNode<T> clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new LazinatorBinaryTreeNode<T>(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (LazinatorBinaryTreeNode<T>)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, this);
                clone = new LazinatorBinaryTreeNode<T>(bytes);
            }
            return clone;
        }
        async public virtual ValueTask<ILazinator> CloneLazinatorAsync(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            LazinatorBinaryTreeNode<T> clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new LazinatorBinaryTreeNode<T>(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (LazinatorBinaryTreeNode<T>)await AssignClonePropertiesAsync(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = await EncodeOrRecycleToNewBufferAsync(includeChildrenMode, OriginalIncludeChildrenMode, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, this);
                clone = new LazinatorBinaryTreeNode<T>(bytes);
            }
            return (ILazinator)clone;
        }
        
        
        protected virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            LazinatorBinaryTreeNode<T> typedClone = (LazinatorBinaryTreeNode<T>) clone;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (Data == null)
                {
                    typedClone.Data = default(T);
                }
                else
                {
                    typedClone.Data = (T) Data.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (LeftNode == null)
                {
                    typedClone.LeftNode = null;
                }
                else
                {
                    typedClone.LeftNode = (LazinatorBinaryTreeNode<T>) LeftNode.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (RightNode == null)
                {
                    typedClone.RightNode = null;
                }
                else
                {
                    typedClone.RightNode = (LazinatorBinaryTreeNode<T>) RightNode.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            
            return typedClone;
        }
        async protected virtual ValueTask<ILazinator> AssignClonePropertiesAsync(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            LazinatorBinaryTreeNode<T> typedClone = (LazinatorBinaryTreeNode<T>) clone;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((await GetDataAsync()) == null)
                {
                    typedClone.Data = default(T);
                }
                else
                {
                    typedClone.Data = (T) (await GetDataAsync()).CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((await GetLeftNodeAsync()) == null)
                {
                    typedClone.LeftNode = null;
                }
                else
                {
                    typedClone.LeftNode = (LazinatorBinaryTreeNode<T>) (await GetLeftNodeAsync()).CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((await GetRightNodeAsync()) == null)
                {
                    typedClone.RightNode = null;
                }
                else
                {
                    typedClone.RightNode = (LazinatorBinaryTreeNode<T>) (await GetRightNodeAsync()).CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            
            return (ILazinator)typedClone;
        }
        
        
        
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        async public IAsyncEnumerable<ILazinator> EnumerateLazinatorNodesAsync(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                await foreach (var item in EnumerateLazinatorDescendantsAsync(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        
        public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _Data_Accessed) && Data == null)
            {
                yield return ("Data", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && Data != null) || (_Data_Accessed && _Data != null))
                {
                    bool isMatch_Data = matchCriterion == null || matchCriterion(Data);
                    bool shouldExplore_Data = exploreCriterion == null || exploreCriterion(Data);
                    if (isMatch_Data)
                    {
                        yield return ("Data", Data);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_Data) && shouldExplore_Data)
                    {
                        foreach (var toYield in Data.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("Data" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _LeftNode_Accessed) && LeftNode == null)
            {
                yield return ("LeftNode", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && LeftNode != null) || (_LeftNode_Accessed && _LeftNode != null))
                {
                    bool isMatch_LeftNode = matchCriterion == null || matchCriterion(LeftNode);
                    bool shouldExplore_LeftNode = exploreCriterion == null || exploreCriterion(LeftNode);
                    if (isMatch_LeftNode)
                    {
                        yield return ("LeftNode", LeftNode);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_LeftNode) && shouldExplore_LeftNode)
                    {
                        foreach (var toYield in LeftNode.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("LeftNode" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _RightNode_Accessed) && RightNode == null)
            {
                yield return ("RightNode", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && RightNode != null) || (_RightNode_Accessed && _RightNode != null))
                {
                    bool isMatch_RightNode = matchCriterion == null || matchCriterion(RightNode);
                    bool shouldExplore_RightNode = exploreCriterion == null || exploreCriterion(RightNode);
                    if (isMatch_RightNode)
                    {
                        yield return ("RightNode", RightNode);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_RightNode) && shouldExplore_RightNode)
                    {
                        foreach (var toYield in RightNode.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("RightNode" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            yield break;
        }
        async public virtual IAsyncEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendantsAsync(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _Data_Accessed) && (await GetDataAsync()) == null)
            {
                yield return ("Data", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && Data != null) || (_Data_Accessed && _Data != null))
                {
                    bool isMatch_Data = matchCriterion == null || matchCriterion((await GetDataAsync()));
                    bool shouldExplore_Data = exploreCriterion == null || exploreCriterion((await GetDataAsync()));
                    if (isMatch_Data)
                    {
                        yield return ("Data", (await GetDataAsync()));
                    }
                    if ((!stopExploringBelowMatch || !isMatch_Data) && shouldExplore_Data)
                    {
                        foreach (var toYield in (await GetDataAsync()).EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("Data" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _LeftNode_Accessed) && (await GetLeftNodeAsync()) == null)
            {
                yield return ("LeftNode", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && LeftNode != null) || (_LeftNode_Accessed && _LeftNode != null))
                {
                    bool isMatch_LeftNode = matchCriterion == null || matchCriterion((await GetLeftNodeAsync()));
                    bool shouldExplore_LeftNode = exploreCriterion == null || exploreCriterion((await GetLeftNodeAsync()));
                    if (isMatch_LeftNode)
                    {
                        yield return ("LeftNode", (await GetLeftNodeAsync()));
                    }
                    if ((!stopExploringBelowMatch || !isMatch_LeftNode) && shouldExplore_LeftNode)
                    {
                        foreach (var toYield in (await GetLeftNodeAsync()).EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("LeftNode" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _RightNode_Accessed) && (await GetRightNodeAsync()) == null)
            {
                yield return ("RightNode", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && RightNode != null) || (_RightNode_Accessed && _RightNode != null))
                {
                    bool isMatch_RightNode = matchCriterion == null || matchCriterion((await GetRightNodeAsync()));
                    bool shouldExplore_RightNode = exploreCriterion == null || exploreCriterion((await GetRightNodeAsync()));
                    if (isMatch_RightNode)
                    {
                        yield return ("RightNode", (await GetRightNodeAsync()));
                    }
                    if ((!stopExploringBelowMatch || !isMatch_RightNode) && shouldExplore_RightNode)
                    {
                        foreach (var toYield in (await GetRightNodeAsync()).EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("RightNode" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            yield break;
        }
        
        #pragma warning disable CS1998
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            yield break;
        }
        async public virtual IAsyncEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorPropertiesAsync()
        {
            yield break;
        }
        
        #pragma warning restore CS1998
        
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            if ((!exploreOnlyDeserializedChildren && Data != null) || (_Data_Accessed && _Data != null))
            {
                _Data = (T) _Data.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && LeftNode != null) || (_LeftNode_Accessed && _LeftNode != null))
            {
                _LeftNode = (LazinatorBinaryTreeNode<T>) _LeftNode.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && RightNode != null) || (_RightNode_Accessed && _RightNode != null))
            {
                _RightNode = (LazinatorBinaryTreeNode<T>) _RightNode.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        async public virtual ValueTask<ILazinator> ForEachLazinatorAsync(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            if ((!exploreOnlyDeserializedChildren && (await GetDataAsync()) != null) || (_Data_Accessed && _Data != null))
            {
                _Data = (T) _Data.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && (await GetLeftNodeAsync()) != null) || (_LeftNode_Accessed && _LeftNode != null))
            {
                _LeftNode = (LazinatorBinaryTreeNode<T>) _LeftNode.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && (await GetRightNodeAsync()) != null) || (_RightNode_Accessed && _RightNode != null))
            {
                _RightNode = (LazinatorBinaryTreeNode<T>) _RightNode.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if (changeThisLevel && changeFunc != null)
            {
                return (ILazinator)changeFunc(this);
            }
            return (ILazinator)this;
        }
        
        
        public virtual void FreeInMemoryObjects()
        {
            _Data = default;
            _LeftNode = default;
            _RightNode = default;
            _Data_Accessed = _LeftNode_Accessed = _RightNode_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        /* Conversion */
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual int LazinatorUniqueID => 257;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual bool ContainsOpenGenericParameters => true;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual LazinatorGenericIDType LazinatorGenericID => LazinatorGenericIDType.GetCachedForType<LazinatorBinaryTreeNode<T>>(() => DeserializationFactory.Instance.GetUniqueIDListForGenericType(257, new Type[] { typeof(T) }));
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        protected virtual int ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialReadOnlyMemory.Span;
            ConvertFromBytesForPrimitiveProperties(span, includeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            int lengthForLengths = 0;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                lengthForLengths += 12;
            }
            int totalChildrenSize = ConvertFromBytesForChildLengths(span, includeChildrenMode, serializedVersionNumber, bytesSoFar + lengthForLengths, ref bytesSoFar);;
            return bytesSoFar + totalChildrenSize;
        }
        
        protected virtual void ConvertFromBytesForPrimitiveProperties(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
        }
        
        protected virtual int ConvertFromBytesForChildLengths(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, int indexOfFirstChild, ref int bytesSoFar)
        {
            int totalChildrenBytes = 0;
            _Data_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            _LeftNode_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            _RightNode_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            _LazinatorBinaryTreeNode_T_EndByteIndex = indexOfFirstChild + totalChildrenBytes;
            return totalChildrenBytes;
        }
        
        public virtual void SerializeToExistingBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options)
        {
            long startPosition = writer.OverallMemoryPosition;
            WritePropertiesIntoBuffer(ref writer, options, true);
            if (options.UpdateStoredBuffer)
            {
                UpdateStoredBuffer(ref writer, startPosition, writer.OverallMemoryPosition - startPosition, options.IncludeChildrenMode, false);
            }
        }
        async public virtual ValueTask SerializeToExistingBufferAsync(BufferWriterContainer writer, LazinatorSerializationOptions options)
        {
            long startPosition = writer.OverallMemoryPosition;
            await WritePropertiesIntoBufferAsync(writer, options, true);
            if (options.UpdateStoredBuffer)
            {
                UpdateStoredBuffer(ref writer.Writer, startPosition, writer.OverallMemoryPosition - startPosition, options.IncludeChildrenMode, false);
            }
        }
        
        
        public virtual void UpdateStoredBuffer(ref BufferWriter writer, long startPosition, long length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
        {
            _IsDirty = false;
            if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                _DescendantIsDirty = false;
                if (updateDeserializedChildren)
                {
                    UpdateDeserializedChildren(ref writer, startPosition);
                }
                
                if (_Data_Accessed && _Data != null && _Data.IsStruct && (_Data.IsDirty || _Data.DescendantIsDirty))
                {
                    _Data_Accessed = false;
                }
            }
            else
            {
                ThrowHelper.ThrowCannotUpdateStoredBuffer();
            }
            
            var newBuffer = writer.Slice(startPosition, length);
            LazinatorMemoryStorage = newBuffer;
        }
        
        
        protected virtual void UpdateDeserializedChildren(ref BufferWriter writer, long startPosition)
        {
            if (_Data_Accessed && _Data != null)
            {
                Data.UpdateStoredBuffer(ref writer, startPosition + _Data_ByteIndex, _Data_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (_LeftNode_Accessed && _LeftNode != null)
            {
                LeftNode.UpdateStoredBuffer(ref writer, startPosition + _LeftNode_ByteIndex, _LeftNode_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (_RightNode_Accessed && _RightNode != null)
            {
                RightNode.UpdateStoredBuffer(ref writer, startPosition + _RightNode_ByteIndex, _RightNode_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            }
            
        }
        
        
        
        protected virtual void WritePropertiesIntoBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options, bool includeUniqueID)
        {
            long startPosition = writer.OverallMemoryPosition;
            if (includeUniqueID)
            {
                if (!ContainsOpenGenericParameters)
                {
                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                }
                else
                {
                    WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                }
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
            writer.Write((byte)options.IncludeChildrenMode);
            // write properties
            
            
            int lengthForLengths = 0;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                lengthForLengths += 12;
            }
            
            var previousLengthsPosition = writer.SetLengthsPosition(lengthForLengths);
            WriteChildrenPropertiesIntoBuffer(ref writer, options, includeUniqueID, startPosition);
            writer.ResetLengthsPosition(previousLengthsPosition);
            
        }
        async protected virtual ValueTask WritePropertiesIntoBufferAsync(BufferWriterContainer writer, LazinatorSerializationOptions options, bool includeUniqueID)
        {
            long startPosition = writer.OverallMemoryPosition;
            if (includeUniqueID)
            {
                if (!ContainsOpenGenericParameters)
                {
                    CompressedIntegralTypes.WriteCompressedInt(ref writer.Writer, LazinatorUniqueID);
                }
                else
                {
                    WriteLazinatorGenericID(ref writer.Writer, LazinatorGenericID);
                }
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer.Writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
            CompressedIntegralTypes.WriteCompressedInt(ref writer.Writer, LazinatorObjectVersion);
            writer.Write((byte)options.IncludeChildrenMode);
            // write properties
            
            
            int lengthForLengths = 0;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                lengthForLengths += 12;
            }
            
            var previousLengthsPosition = writer.SetLengthsPosition(lengthForLengths);
            await WriteChildrenPropertiesIntoBufferAsync(writer, options, includeUniqueID, startPosition);
            writer.ResetLengthsPosition(previousLengthsPosition);
            
        }
        
        
        protected virtual void WritePrimitivePropertiesIntoBuffer(ref BufferWriter writer, /*<$$ if=async,0 $$>*/in /*<$$/if $$>*//*<$$ if=async,1 $$>*//*<$$/if $$>*/LazinatorSerializationOptions options, bool includeUniqueID)
        {
        }
        protected virtual void WriteChildrenPropertiesIntoBuffer(ref BufferWriter writer, LazinatorSerializationOptions options, bool includeUniqueID, long startOfObjectPosition)
        {
            long startOfChildPosition = 0;
            long lengthValue = 0;
            startOfChildPosition = writer.OverallMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_Data_Accessed)
                {
                    var deserialized = Data;
                }
                WriteChild(ref writer, ref _Data, options, _Data_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _Data_ByteIndex, _Data_ByteLength, null), this);
                lengthValue = writer.OverallMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _Data_ByteIndex = (int) (startOfChildPosition - startOfObjectPosition);
                
            }
            writer.ConsiderSwitchToNextBuffer(ref options);
            startOfChildPosition = writer.OverallMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_LeftNode_Accessed)
                {
                    var deserialized = LeftNode;
                }
                WriteChild(ref writer, ref _LeftNode, options, _LeftNode_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _LeftNode_ByteIndex, _LeftNode_ByteLength, null), this);
                lengthValue = writer.OverallMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _LeftNode_ByteIndex = (int) (startOfChildPosition - startOfObjectPosition);
                
            }
            writer.ConsiderSwitchToNextBuffer(ref options);
            startOfChildPosition = writer.OverallMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_RightNode_Accessed)
                {
                    var deserialized = RightNode;
                }
                WriteChild(ref writer, ref _RightNode, options, _RightNode_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _RightNode_ByteIndex, _RightNode_ByteLength, null), this);
                lengthValue = writer.OverallMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _RightNode_ByteIndex = (int) (startOfChildPosition - startOfObjectPosition);
                
            }
            if (options.UpdateStoredBuffer)
            {
                _LazinatorBinaryTreeNode_T_EndByteIndex = (int) (writer.ActiveMemoryPosition - startOfObjectPosition);
            }
            
        }
        async protected virtual ValueTask WriteChildrenPropertiesIntoBufferAsync(BufferWriterContainer writer, LazinatorSerializationOptions options, bool includeUniqueID, long startOfObjectPosition)
        {
            long startOfChildPosition = 0;
            long lengthValue = 0;
            startOfChildPosition = writer.Writer.OverallMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_Data_Accessed)
                {
                    var deserialized = (await GetDataAsync());
                }
                await WriteNonAsyncChildAsync(writer, _Data, options, _Data_Accessed, async () => await GetChildSliceAsync(LazinatorMemoryStorage, _Data_ByteIndex, _Data_ByteLength, null), this);
                lengthValue = writer.OverallMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _Data_ByteIndex = (int) (startOfChildPosition - startOfObjectPosition);
                
            }
            writer.ConsiderSwitchToNextBuffer(ref options);
            startOfChildPosition = writer.Writer.OverallMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_LeftNode_Accessed)
                {
                    var deserialized = (await GetLeftNodeAsync());
                }
                await WriteNonAsyncChildAsync(writer, _LeftNode, options, _LeftNode_Accessed, async () => await GetChildSliceAsync(LazinatorMemoryStorage, _LeftNode_ByteIndex, _LeftNode_ByteLength, null), this);
                lengthValue = writer.OverallMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _LeftNode_ByteIndex = (int) (startOfChildPosition - startOfObjectPosition);
                
            }
            writer.ConsiderSwitchToNextBuffer(ref options);
            startOfChildPosition = writer.Writer.OverallMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_RightNode_Accessed)
                {
                    var deserialized = (await GetRightNodeAsync());
                }
                await WriteNonAsyncChildAsync(writer, _RightNode, options, _RightNode_Accessed, async () => await GetChildSliceAsync(LazinatorMemoryStorage, _RightNode_ByteIndex, _RightNode_ByteLength, null), this);
                lengthValue = writer.OverallMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _RightNode_ByteIndex = (int) (startOfChildPosition - startOfObjectPosition);
                
            }
            if (options.UpdateStoredBuffer)
            {
                _LazinatorBinaryTreeNode_T_EndByteIndex = (int) (writer.ActiveMemoryPosition - startOfObjectPosition);
            }
            
        }
        
    }
}
#nullable restore
