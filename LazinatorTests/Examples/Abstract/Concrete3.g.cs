/*Location2778*//*Location2763*///3d6ff8f3-3fa4-9774-d05b-69c24310ef13
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.Abstract
{/*Location2764*/
    using Lazinator.Attributes;/*Location2765*/
    using Lazinator.Buffers;/*Location2766*/
    using Lazinator.Core;/*Location2767*/
    using Lazinator.Exceptions;/*Location2768*/
    using Lazinator.Support;/*Location2769*/
    using LazinatorTests.Examples;/*Location2770*/
    using System;/*Location2771*/
    using System.Buffers;/*Location2772*/
    using System.Collections.Generic;/*Location2773*/
    using System.Diagnostics;/*Location2774*/
    using System.IO;/*Location2775*/
    using System.Linq;/*Location2776*/
    using System.Runtime.InteropServices;/*Location2777*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class Concrete3 : ILazinator
    {
        /*Location2779*//* Property definitions */
        
        /*Location2780*/        protected int _IntList3_ByteIndex;
        /*Location2781*/protected override int _Example2_ByteLength => _Example3_ByteIndex - _Example2_ByteIndex;
        /*Location2782*/protected override int _Example3_ByteLength => _IntList1_ByteIndex - _Example3_ByteIndex;
        /*Location2783*/protected override int _IntList1_ByteLength => _IntList2_ByteIndex - _IntList1_ByteIndex;
        /*Location2784*/protected override int _IntList2_ByteLength => _IntList3_ByteIndex - _IntList2_ByteIndex;
        /*Location2785*/private int _Concrete3_EndByteIndex;
        /*Location2786*/protected virtual int _IntList3_ByteLength => _Concrete3_EndByteIndex - _IntList3_ByteIndex;
        
        /*Location2787*/
        protected string _String1;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override string String1
        {
            get
            {
                return _String1;
            }
            set
            {
                IsDirty = true;
                _String1 = value;
            }
        }
        /*Location2788*/
        protected string _String2;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override string String2
        {
            get
            {
                return _String2;
            }
            set
            {
                IsDirty = true;
                _String2 = value;
            }
        }
        /*Location2789*/
        protected string _String3;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string String3
        {
            get
            {
                return _String3;
            }
            set
            {
                IsDirty = true;
                _String3 = value;
            }
        }
        /*Location2790*/
        protected Example _Example2;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override Example Example2
        {
            get
            {
                if (!_Example2_Accessed)
                {
                    Lazinate_Example2();
                } 
                return _Example2;
            }
            set
            {
                if (_Example2 != null)
                {
                    _Example2.LazinatorParents = _Example2.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _Example2 = value;
                _Example2_Accessed = true;
            }
        }
        private void Lazinate_Example2()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _Example2 = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _Example2_ByteIndex, _Example2_ByteLength, false, false, null);
                
                _Example2 = DeserializationFactory.Instance.CreateBaseOrDerivedType(1012, (c, p) => new Example(c, p), childData, this); 
            }
            
            _Example2_Accessed = true;
        }
        
        /*Location2791*/
        protected Example _Example3;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override Example Example3
        {
            get
            {
                if (!_Example3_Accessed)
                {
                    Lazinate_Example3();
                } 
                return _Example3;
            }
            set
            {
                if (_Example3 != null)
                {
                    _Example3.LazinatorParents = _Example3.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _Example3 = value;
                _Example3_Accessed = true;
            }
        }
        private void Lazinate_Example3()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _Example3 = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _Example3_ByteIndex, _Example3_ByteLength, false, false, null);
                
                _Example3 = DeserializationFactory.Instance.CreateBaseOrDerivedType(1012, (c, p) => new Example(c, p), childData, this); 
            }
            
            _Example3_Accessed = true;
        }
        
        /*Location2792*/
        protected List<int> _IntList1;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override List<int> IntList1
        {
            get
            {
                if (!_IntList1_Accessed)
                {
                    Lazinate_IntList1();
                }
                IsDirty = true; 
                return _IntList1;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _IntList1 = value;
                _IntList1_Accessed = true;
            }
        }
        private void Lazinate_IntList1()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _IntList1 = default(List<int>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _IntList1_ByteIndex, _IntList1_ByteLength, false, false, null);
                _IntList1 = ConvertFromBytes_List_Gint_g(childData);
            }
            
            _IntList1_Accessed = true;
        }
        
        /*Location2793*/
        protected List<int> _IntList2;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override List<int> IntList2
        {
            get
            {
                if (!_IntList2_Accessed)
                {
                    Lazinate_IntList2();
                }
                IsDirty = true; 
                return _IntList2;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _IntList2 = value;
                _IntList2_Accessed = true;
            }
        }
        private void Lazinate_IntList2()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _IntList2 = default(List<int>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _IntList2_ByteIndex, _IntList2_ByteLength, false, false, null);
                _IntList2 = ConvertFromBytes_List_Gint_g(childData);
            }
            
            _IntList2_Accessed = true;
        }
        
        /*Location2794*/
        protected List<int> _IntList3;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<int> IntList3
        {
            get
            {
                if (!_IntList3_Accessed)
                {
                    Lazinate_IntList3();
                }
                IsDirty = true; 
                return _IntList3;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _IntList3 = value;
                _IntList3_Accessed = true;
            }
        }
        protected bool _IntList3_Accessed;
        private void Lazinate_IntList3()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _IntList3 = default(List<int>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _IntList3_ByteIndex, _IntList3_ByteLength, false, false, null);
                _IntList3 = ConvertFromBytes_List_Gint_g(childData);
            }
            
            _IntList3_Accessed = true;
        }
        
        /*Location2803*/
        /* Serialization, deserialization, and object relationships */
        
        public Concrete3(LazinatorConstructorEnum constructorEnum)
        {
        }
        
        public Concrete3(LazinatorMemory serializedBytes, ILazinator parent = null)
        {
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public override LazinatorParentsCollection LazinatorParents { get; set; }
        
        public override IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public override int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public override LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected override LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public override ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            var clone = new Concrete3(LazinatorConstructorEnum.LazinatorConstructor)
            {
                OriginalIncludeChildrenMode = includeChildrenMode
            };
            clone = CompleteClone(this, clone, includeChildrenMode, cloneBufferOptions);
            return clone;
        }
        
        public override ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            Concrete3 typedClone = (Concrete3) clone;
            /*Location2795*/typedClone.String1 = String1;
            /*Location2796*/typedClone.String2 = String2;
            /*Location2797*/typedClone.String3 = String3;
            /*Location2798*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (Example2 == null)
                {
                    typedClone.Example2 = null;
                }
                else
                {
                    typedClone.Example2 = (Example) Example2.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location2799*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (Example3 == null)
                {
                    typedClone.Example3 = null;
                }
                else
                {
                    typedClone.Example3 = (Example) Example3.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location2800*/typedClone.IntList1 = CloneOrChange_List_Gint_g(IntList1, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2801*/typedClone.IntList2 = CloneOrChange_List_Gint_g(IntList2, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2802*/typedClone.IntList3 = CloneOrChange_List_Gint_g(IntList3, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        public override bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public override bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public override bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public override bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public override void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public override LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected override ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public override void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public override int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public override bool NonBinaryHash32 => false;
        
        /*Location2804*/
        public override IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location2805*/public override IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location2806*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _Example2_Accessed) && Example2 == null)
            {
                yield return ("Example2", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && Example2 != null) || (_Example2_Accessed && _Example2 != null))
                {
                    bool isMatch_Example2 = matchCriterion == null || matchCriterion(Example2);
                    bool shouldExplore_Example2 = exploreCriterion == null || exploreCriterion(Example2);
                    if (isMatch_Example2)
                    {
                        yield return ("Example2", Example2);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_Example2) && shouldExplore_Example2)
                    {
                        foreach (var toYield in Example2.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("Example2" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location2807*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _Example3_Accessed) && Example3 == null)
            {
                yield return ("Example3", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && Example3 != null) || (_Example3_Accessed && _Example3 != null))
                {
                    bool isMatch_Example3 = matchCriterion == null || matchCriterion(Example3);
                    bool shouldExplore_Example3 = exploreCriterion == null || exploreCriterion(Example3);
                    if (isMatch_Example3)
                    {
                        yield return ("Example3", Example3);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_Example3) && shouldExplore_Example3)
                    {
                        foreach (var toYield in Example3.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("Example3" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location2808*/yield break;
        }
        /*Location2809*/
        
        public override IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location2810*/yield return ("String1", (object)String1);
            /*Location2811*/yield return ("String2", (object)String2);
            /*Location2812*/yield return ("String3", (object)String3);
            /*Location2813*/yield return ("IntList1", (object)IntList1);
            /*Location2814*/yield return ("IntList2", (object)IntList2);
            /*Location2815*/yield return ("IntList3", (object)IntList3);
            /*Location2816*/yield break;
        }
        /*Location2817*/
        public override ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location2818*/if ((!exploreOnlyDeserializedChildren && Example2 != null) || (_Example2_Accessed && _Example2 != null))
            {
                _Example2 = (Example) _Example2.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location2819*/if ((!exploreOnlyDeserializedChildren && Example3 != null) || (_Example3_Accessed && _Example3 != null))
            {
                _Example3 = (Example) _Example3.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location2820*/if ((!exploreOnlyDeserializedChildren && IntList1 != null) || (_IntList1_Accessed && _IntList1 != null))
            {
                _IntList1 = (List<int>) CloneOrChange_List_Gint_g(_IntList1, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location2821*/if ((!exploreOnlyDeserializedChildren && IntList2 != null) || (_IntList2_Accessed && _IntList2 != null))
            {
                _IntList2 = (List<int>) CloneOrChange_List_Gint_g(_IntList2, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location2822*/if ((!exploreOnlyDeserializedChildren && IntList3 != null) || (_IntList3_Accessed && _IntList3 != null))
            {
                _IntList3 = (List<int>) CloneOrChange_List_Gint_g(_IntList3, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location2823*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location2824*/
        public override void FreeInMemoryObjects()
        {
            _Example2 = default;
            _Example3 = default;
            _IntList1 = default;
            _IntList2 = default;
            _IntList3 = default;
            _Example2_Accessed = _Example3_Accessed = _IntList1_Accessed = _IntList2_Accessed = _IntList3_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location2825*/
        /* Conversion */
        
        public override int LazinatorUniqueID => 1037;
        
        protected override bool ContainsOpenGenericParameters => false;
        public override LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public override int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location2826*/public override void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location2827*/_String1 = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            /*Location2828*/_String2 = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            /*Location2829*/_String3 = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            /*Location2830*/_Example2_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location2831*/_Example3_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location2832*/_IntList1_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2833*/_IntList2_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2834*/_IntList3_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2835*/_Concrete3_EndByteIndex = bytesSoFar;
            /*Location2836*/        }
            
            /*Location2837*/public override void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location2838*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location2839*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location2840*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location2841*/}
                    /*Location2842*/}
                    /*Location2843*/
                    public override void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location2844*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location2845*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location2846*/}
                                /*Location2847*//*Location2848*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location2849*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location2850*/}
                            /*Location2851*/
                            protected override void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                /*Location2852*/if (_Example2_Accessed && _Example2 != null)
                                {
                                    Example2.UpdateStoredBuffer(ref writer, startPosition + _Example2_ByteIndex + sizeof(int), _Example2_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location2853*/if (_Example3_Accessed && _Example3 != null)
                                {
                                    Example3.UpdateStoredBuffer(ref writer, startPosition + _Example3_ByteIndex + sizeof(int), _Example3_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location2854*/if (_IntList1_Accessed && _IntList1 != null)
                                {
                                    _IntList1 = (List<int>) CloneOrChange_List_Gint_g(_IntList1, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2855*/if (_IntList2_Accessed && _IntList2 != null)
                                {
                                    _IntList2 = (List<int>) CloneOrChange_List_Gint_g(_IntList2, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2856*/if (_IntList3_Accessed && _IntList3 != null)
                                {
                                    _IntList3 = (List<int>) CloneOrChange_List_Gint_g(_IntList3, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2857*/}
                                
                                /*Location2858*/
                                protected override void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    int startPosition = writer.Position;
                                    int startOfObjectPosition = 0;
                                    // header information
                                    /*Location2859*/if (includeUniqueID)
                                    {
                                        if (!ContainsOpenGenericParameters)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                        }
                                        else
                                        {
                                            WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                                        }
                                    }
                                    /*Location2860*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                    writer.Write((byte)includeChildrenMode);
                                    /*Location2861*/// write properties
                                    /*Location2862*/EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _String1);
                                    /*Location2863*/EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _String2);
                                    /*Location2864*/EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _String3);
                                    /*Location2865*/startOfObjectPosition = writer.Position;
                                    /*Location2866*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_Example2_Accessed)
                                        {
                                            var deserialized = Example2;
                                        }
                                        WriteChild(ref writer, ref _Example2, includeChildrenMode, _Example2_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _Example2_ByteIndex, _Example2_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location2867*/if (updateStoredBuffer)
                                    {
                                        _Example2_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2868*/startOfObjectPosition = writer.Position;
                                    /*Location2869*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_Example3_Accessed)
                                        {
                                            var deserialized = Example3;
                                        }
                                        WriteChild(ref writer, ref _Example3, includeChildrenMode, _Example3_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _Example3_ByteIndex, _Example3_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location2870*/if (updateStoredBuffer)
                                    {
                                        _Example3_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2871*/startOfObjectPosition = writer.Position;
                                    /*Location2872*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_IntList1_Accessed)
                                    {
                                        var deserialized = IntList1;
                                    }
                                    /*Location2873*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _IntList1, isBelievedDirty: _IntList1_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _IntList1_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _IntList1_ByteIndex, _IntList1_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_List_Gint_g(ref w, _IntList1,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2874*/if (updateStoredBuffer)
                                    {
                                        _IntList1_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2875*/startOfObjectPosition = writer.Position;
                                    /*Location2876*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_IntList2_Accessed)
                                    {
                                        var deserialized = IntList2;
                                    }
                                    /*Location2877*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _IntList2, isBelievedDirty: _IntList2_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _IntList2_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _IntList2_ByteIndex, _IntList2_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_List_Gint_g(ref w, _IntList2,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2878*/if (updateStoredBuffer)
                                    {
                                        _IntList2_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2879*/startOfObjectPosition = writer.Position;
                                    /*Location2880*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_IntList3_Accessed)
                                    {
                                        var deserialized = IntList3;
                                    }
                                    /*Location2881*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _IntList3, isBelievedDirty: _IntList3_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _IntList3_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _IntList3_ByteIndex, _IntList3_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_List_Gint_g(ref w, _IntList3,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2882*/if (updateStoredBuffer)
                                    {
                                        _IntList3_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2883*/if (updateStoredBuffer)
                                    {
                                        /*Location2884*/_Concrete3_EndByteIndex = writer.Position - startPosition;
                                        /*Location2885*/}
                                        /*Location2886*/}
                                        /*Location2887*/
                                        /* Conversion of supported collections and tuples */
                                        /*Location2888*/
                                        private static List<int> ConvertFromBytes_List_Gint_g(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default(List<int>);
                                            }
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            List<int> collection = new List<int>(collectionLength);
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int item = span.ToDecompressedInt(ref bytesSoFar);
                                                collection.Add(item);
                                            }
                                            
                                            return collection;
                                        }/*Location2889*/
                                        
                                        private static void ConvertToBytes_List_Gint_g(ref BinaryBufferWriter writer, List<int> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(List<int>))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                            int itemToConvertCount = itemToConvert.Count;
                                            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                            {
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert[itemIndex]);
                                            }
                                        }
                                        /*Location2890*/
                                        private static List<int> CloneOrChange_List_Gint_g(List<int> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            if (itemToClone == null)
                                            {
                                                return default;
                                            }
                                            
                                            int collectionLength = itemToClone.Count;
                                            List<int> collection = new List<int>(collectionLength);
                                            int itemToCloneCount = itemToClone.Count;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                var itemCopied = (int) itemToClone[itemIndex];
                                                collection.Add(itemCopied);
                                            }
                                            return collection;
                                        }
                                        /*Location2891*/
                                    }
                                }
