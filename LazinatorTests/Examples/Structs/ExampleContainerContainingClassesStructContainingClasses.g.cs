//12120a4b-71f7-516b-b0fd-69b50c05501f
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.392
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples
{
    using Lazinator.Attributes;
    using Lazinator.Buffers;
    using Lazinator.Core;
    using Lazinator.Exceptions;
    using Lazinator.Support;
    using Lazinator.Wrappers;
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class ExampleContainerContainingClassesStructContainingClasses : ILazinator
    {
        public bool IsStruct => false;
        
        /* Property definitions */
        
        protected int _IntWrapper_ByteIndex;
        protected int _MyExampleStructContainingClasses_ByteIndex;
        protected int _MyHashSetExampleStruct_ByteIndex;
        protected int _MyListExampleStruct_ByteIndex;
        protected int _MyListNullableExampleStruct_ByteIndex;
        protected int _MyListUnwrappedNullableExampleStruct_ByteIndex;
        protected virtual int _IntWrapper_ByteLength => _MyExampleStructContainingClasses_ByteIndex - _IntWrapper_ByteIndex;
        protected virtual int _MyExampleStructContainingClasses_ByteLength => _MyHashSetExampleStruct_ByteIndex - _MyExampleStructContainingClasses_ByteIndex;
        protected virtual int _MyHashSetExampleStruct_ByteLength => _MyListExampleStruct_ByteIndex - _MyHashSetExampleStruct_ByteIndex;
        protected virtual int _MyListExampleStruct_ByteLength => _MyListNullableExampleStruct_ByteIndex - _MyListExampleStruct_ByteIndex;
        protected virtual int _MyListNullableExampleStruct_ByteLength => _MyListUnwrappedNullableExampleStruct_ByteIndex - _MyListNullableExampleStruct_ByteIndex;
        private int _ExampleContainerContainingClassesStructContainingClasses_EndByteIndex;
        protected virtual int _MyListUnwrappedNullableExampleStruct_ByteLength => _ExampleContainerContainingClassesStructContainingClasses_EndByteIndex - _MyListUnwrappedNullableExampleStruct_ByteIndex;
        
        
        protected WInt _IntWrapper;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WInt IntWrapper
        {
            get
            {
                if (!_IntWrapper_Accessed)
                {
                    Lazinate_IntWrapper();
                } 
                return _IntWrapper;
            }
            set
            {
                value.LazinatorParents = new LazinatorParentsCollection(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _IntWrapper = value;
                _IntWrapper_Accessed = true;
            }
        }
        protected bool _IntWrapper_Accessed;
        private void Lazinate_IntWrapper()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _IntWrapper = default(WInt);
                _IntWrapper.LazinatorParents = new LazinatorParentsCollection(this);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _IntWrapper_ByteIndex, _IntWrapper_ByteLength, false, true, null);
                _IntWrapper = new WInt()
                {
                    LazinatorParents = new LazinatorParentsCollection(this)
                };
                _IntWrapper.DeserializeLazinator(childData);
            }
            
            _IntWrapper_Accessed = true;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WInt IntWrapper_Copy
        {
            get
            {
                if (!_IntWrapper_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        return default(WInt);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _IntWrapper_ByteIndex, _IntWrapper_ByteLength, false, true, null);
                        var toReturn = new WInt(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                
                var cleanCopy = _IntWrapper;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        protected ExampleStructContainingClasses _MyExampleStructContainingClasses;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleStructContainingClasses MyExampleStructContainingClasses
        {
            get
            {
                if (!_MyExampleStructContainingClasses_Accessed)
                {
                    Lazinate_MyExampleStructContainingClasses();
                } 
                return _MyExampleStructContainingClasses;
            }
            set
            {
                value.LazinatorParents = new LazinatorParentsCollection(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _MyExampleStructContainingClasses = value;
                _MyExampleStructContainingClasses_Accessed = true;
            }
        }
        protected bool _MyExampleStructContainingClasses_Accessed;
        private void Lazinate_MyExampleStructContainingClasses()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyExampleStructContainingClasses = default(ExampleStructContainingClasses);
                _MyExampleStructContainingClasses.LazinatorParents = new LazinatorParentsCollection(this);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyExampleStructContainingClasses_ByteIndex, _MyExampleStructContainingClasses_ByteLength, false, false, null);
                _MyExampleStructContainingClasses = new ExampleStructContainingClasses()
                {
                    LazinatorParents = new LazinatorParentsCollection(this)
                };
                _MyExampleStructContainingClasses.DeserializeLazinator(childData);
            }
            
            _MyExampleStructContainingClasses_Accessed = true;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleStructContainingClasses MyExampleStructContainingClasses_Copy
        {
            get
            {
                if (!_MyExampleStructContainingClasses_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        return default(ExampleStructContainingClasses);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyExampleStructContainingClasses_ByteIndex, _MyExampleStructContainingClasses_ByteLength, false, false, null);
                        var toReturn = new ExampleStructContainingClasses(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                
                var cleanCopy = _MyExampleStructContainingClasses;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        protected HashSet<ExampleStructContainingClasses> _MyHashSetExampleStruct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public HashSet<ExampleStructContainingClasses> MyHashSetExampleStruct
        {
            get
            {
                if (!_MyHashSetExampleStruct_Accessed)
                {
                    Lazinate_MyHashSetExampleStruct();
                }
                IsDirty = true; 
                return _MyHashSetExampleStruct;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyHashSetExampleStruct = value;
                _MyHashSetExampleStruct_Accessed = true;
            }
        }
        protected bool _MyHashSetExampleStruct_Accessed;
        private void Lazinate_MyHashSetExampleStruct()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyHashSetExampleStruct = default(HashSet<ExampleStructContainingClasses>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyHashSetExampleStruct_ByteIndex, _MyHashSetExampleStruct_ByteLength, false, false, null);
                _MyHashSetExampleStruct = ConvertFromBytes_HashSet_GExampleStructContainingClasses_g(childData);
            }
            
            _MyHashSetExampleStruct_Accessed = true;
        }
        
        
        protected List<ExampleStructContainingClasses> _MyListExampleStruct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<ExampleStructContainingClasses> MyListExampleStruct
        {
            get
            {
                if (!_MyListExampleStruct_Accessed)
                {
                    Lazinate_MyListExampleStruct();
                }
                IsDirty = true; 
                return _MyListExampleStruct;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyListExampleStruct = value;
                _MyListExampleStruct_Accessed = true;
            }
        }
        protected bool _MyListExampleStruct_Accessed;
        private void Lazinate_MyListExampleStruct()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyListExampleStruct = default(List<ExampleStructContainingClasses>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyListExampleStruct_ByteIndex, _MyListExampleStruct_ByteLength, false, false, null);
                _MyListExampleStruct = ConvertFromBytes_List_GExampleStructContainingClasses_g(childData);
            }
            
            _MyListExampleStruct_Accessed = true;
        }
        
        
        protected List<WNullableStruct<ExampleStructContainingClasses>> _MyListNullableExampleStruct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<WNullableStruct<ExampleStructContainingClasses>> MyListNullableExampleStruct
        {
            get
            {
                if (!_MyListNullableExampleStruct_Accessed)
                {
                    Lazinate_MyListNullableExampleStruct();
                }
                IsDirty = true; 
                return _MyListNullableExampleStruct;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyListNullableExampleStruct = value;
                _MyListNullableExampleStruct_Accessed = true;
            }
        }
        protected bool _MyListNullableExampleStruct_Accessed;
        private void Lazinate_MyListNullableExampleStruct()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyListNullableExampleStruct = default(List<WNullableStruct<ExampleStructContainingClasses>>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyListNullableExampleStruct_ByteIndex, _MyListNullableExampleStruct_ByteLength, false, false, null);
                _MyListNullableExampleStruct = ConvertFromBytes_List_GWNullableStruct_GExampleStructContainingClasses_g_g(childData);
            }
            
            _MyListNullableExampleStruct_Accessed = true;
        }
        
        
        protected List<ExampleStructContainingClasses?> _MyListUnwrappedNullableExampleStruct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<ExampleStructContainingClasses?> MyListUnwrappedNullableExampleStruct
        {
            get
            {
                if (!_MyListUnwrappedNullableExampleStruct_Accessed)
                {
                    Lazinate_MyListUnwrappedNullableExampleStruct();
                }
                IsDirty = true; 
                return _MyListUnwrappedNullableExampleStruct;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyListUnwrappedNullableExampleStruct = value;
                _MyListUnwrappedNullableExampleStruct_Accessed = true;
            }
        }
        protected bool _MyListUnwrappedNullableExampleStruct_Accessed;
        private void Lazinate_MyListUnwrappedNullableExampleStruct()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyListUnwrappedNullableExampleStruct = default(List<ExampleStructContainingClasses?>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyListUnwrappedNullableExampleStruct_ByteIndex, _MyListUnwrappedNullableExampleStruct_ByteLength, false, false, null);
                _MyListUnwrappedNullableExampleStruct = ConvertFromBytes_List_GExampleStructContainingClasses_n_g(childData);
            }
            
            _MyListUnwrappedNullableExampleStruct_Accessed = true;
        }
        
        
        /* Serialization, deserialization, and object relationships */
        
        public ExampleContainerContainingClassesStructContainingClasses(IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren)
        {
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public ExampleContainerContainingClassesStructContainingClasses(LazinatorMemory serializedBytes, ILazinator parent = null)
        {
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            ExampleContainerContainingClassesStructContainingClasses clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new ExampleContainerContainingClassesStructContainingClasses(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (ExampleContainerContainingClassesStructContainingClasses)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, false, this);
                clone = new ExampleContainerContainingClassesStructContainingClasses(bytes);
            }
            return clone;
        }
        
        public virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            ExampleContainerContainingClassesStructContainingClasses typedClone = (ExampleContainerContainingClassesStructContainingClasses) clone;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.IntWrapper = (WInt) IntWrapper.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.MyExampleStructContainingClasses = (ExampleStructContainingClasses) MyExampleStructContainingClasses.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            
            typedClone.MyHashSetExampleStruct = CloneOrChange_HashSet_GExampleStructContainingClasses_g(MyHashSetExampleStruct, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyListExampleStruct = CloneOrChange_List_GExampleStructContainingClasses_g(MyListExampleStruct, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyListNullableExampleStruct = CloneOrChange_List_GWNullableStruct_GExampleStructContainingClasses_g_g(MyListNullableExampleStruct, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyListUnwrappedNullableExampleStruct = CloneOrChange_List_GExampleStructContainingClasses_n_g(MyListUnwrappedNullableExampleStruct, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool isMatch_IntWrapper = matchCriterion == null || matchCriterion(IntWrapper);
            bool shouldExplore_IntWrapper = exploreCriterion == null || exploreCriterion(IntWrapper);
            if (isMatch_IntWrapper)
            {
                yield return ("IntWrapper", IntWrapper);
            }
            if ((!stopExploringBelowMatch || !isMatch_IntWrapper) && shouldExplore_IntWrapper)
            {
                foreach (var toYield in IntWrapper.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("IntWrapper" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            bool isMatch_MyExampleStructContainingClasses = matchCriterion == null || matchCriterion(MyExampleStructContainingClasses);
            bool shouldExplore_MyExampleStructContainingClasses = exploreCriterion == null || exploreCriterion(MyExampleStructContainingClasses);
            if (isMatch_MyExampleStructContainingClasses)
            {
                yield return ("MyExampleStructContainingClasses", MyExampleStructContainingClasses);
            }
            if ((!stopExploringBelowMatch || !isMatch_MyExampleStructContainingClasses) && shouldExplore_MyExampleStructContainingClasses)
            {
                foreach (var toYield in MyExampleStructContainingClasses.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("MyExampleStructContainingClasses" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            yield break;
        }
        
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            yield return ("MyHashSetExampleStruct", (object)MyHashSetExampleStruct);
            yield return ("MyListExampleStruct", (object)MyListExampleStruct);
            yield return ("MyListNullableExampleStruct", (object)MyListNullableExampleStruct);
            yield return ("MyListUnwrappedNullableExampleStruct", (object)MyListUnwrappedNullableExampleStruct);
            yield break;
        }
        
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            var deserialized_IntWrapper = IntWrapper;
            _IntWrapper = (WInt) _IntWrapper.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);var deserialized_MyExampleStructContainingClasses = MyExampleStructContainingClasses;
            _MyExampleStructContainingClasses = (ExampleStructContainingClasses) _MyExampleStructContainingClasses.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);if ((!exploreOnlyDeserializedChildren && MyHashSetExampleStruct != null) || (_MyHashSetExampleStruct_Accessed && _MyHashSetExampleStruct != null))
            {
                _MyHashSetExampleStruct = (HashSet<ExampleStructContainingClasses>) CloneOrChange_HashSet_GExampleStructContainingClasses_g(_MyHashSetExampleStruct, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && MyListExampleStruct != null) || (_MyListExampleStruct_Accessed && _MyListExampleStruct != null))
            {
                _MyListExampleStruct = (List<ExampleStructContainingClasses>) CloneOrChange_List_GExampleStructContainingClasses_g(_MyListExampleStruct, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && MyListNullableExampleStruct != null) || (_MyListNullableExampleStruct_Accessed && _MyListNullableExampleStruct != null))
            {
                _MyListNullableExampleStruct = (List<WNullableStruct<ExampleStructContainingClasses>>) CloneOrChange_List_GWNullableStruct_GExampleStructContainingClasses_g_g(_MyListNullableExampleStruct, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && MyListUnwrappedNullableExampleStruct != null) || (_MyListUnwrappedNullableExampleStruct_Accessed && _MyListUnwrappedNullableExampleStruct != null))
            {
                _MyListUnwrappedNullableExampleStruct = (List<ExampleStructContainingClasses?>) CloneOrChange_List_GExampleStructContainingClasses_n_g(_MyListUnwrappedNullableExampleStruct, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        
        public virtual void FreeInMemoryObjects()
        {
            _IntWrapper = default;
            _MyExampleStructContainingClasses = default;
            _MyHashSetExampleStruct = default;
            _MyListExampleStruct = default;
            _MyListNullableExampleStruct = default;
            _MyListUnwrappedNullableExampleStruct = default;
            _IntWrapper_Accessed = _MyExampleStructContainingClasses_Accessed = _MyHashSetExampleStruct_Accessed = _MyListExampleStruct_Accessed = _MyListNullableExampleStruct_Accessed = _MyListUnwrappedNullableExampleStruct_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1017;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            _IntWrapper_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToByte(ref bytesSoFar) + bytesSoFar;
            }
            
            _MyExampleStructContainingClasses_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            _MyHashSetExampleStruct_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _MyListExampleStruct_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _MyListNullableExampleStruct_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _MyListUnwrappedNullableExampleStruct_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _ExampleContainerContainingClassesStructContainingClasses_EndByteIndex = bytesSoFar;
        }
        
        public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
            {
                updateStoredBuffer = false;
            }
            int startPosition = writer.Position;
            WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
            if (updateStoredBuffer)
            {
                UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
            }
        }
        
        public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
        {
            _IsDirty = false;
            if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                _DescendantIsDirty = false;
                if (updateDeserializedChildren)
                {
                    UpdateDeserializedChildren(ref writer, startPosition);
                }
                
                _IntWrapper_Accessed = false;
                _MyExampleStructContainingClasses_Accessed = false;
            }
            else
            {
                ThrowHelper.ThrowCannotUpdateStoredBuffer();
            }
            
            var newBuffer = writer.Slice(startPosition, length);
            LazinatorMemoryStorage = newBuffer;
        }
        
        protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
        {
            IntWrapper.UpdateStoredBuffer(ref writer, startPosition + _IntWrapper_ByteIndex + sizeof(byte), _IntWrapper_ByteLength - sizeof(byte), IncludeChildrenMode.IncludeAllChildren, true);
            MyExampleStructContainingClasses.UpdateStoredBuffer(ref writer, startPosition + _MyExampleStructContainingClasses_ByteIndex + sizeof(int), _MyExampleStructContainingClasses_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            if (_MyHashSetExampleStruct_Accessed && _MyHashSetExampleStruct != null)
            {
                _MyHashSetExampleStruct = (HashSet<ExampleStructContainingClasses>) CloneOrChange_HashSet_GExampleStructContainingClasses_g(_MyHashSetExampleStruct, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_MyListExampleStruct_Accessed && _MyListExampleStruct != null)
            {
                _MyListExampleStruct = (List<ExampleStructContainingClasses>) CloneOrChange_List_GExampleStructContainingClasses_g(_MyListExampleStruct, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_MyListNullableExampleStruct_Accessed && _MyListNullableExampleStruct != null)
            {
                _MyListNullableExampleStruct = (List<WNullableStruct<ExampleStructContainingClasses>>) CloneOrChange_List_GWNullableStruct_GExampleStructContainingClasses_g_g(_MyListNullableExampleStruct, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_MyListUnwrappedNullableExampleStruct_Accessed && _MyListUnwrappedNullableExampleStruct != null)
            {
                _MyListUnwrappedNullableExampleStruct = (List<ExampleStructContainingClasses?>) CloneOrChange_List_GExampleStructContainingClasses_n_g(_MyListUnwrappedNullableExampleStruct, l => l.RemoveBufferInHierarchy(), true);
            }
        }
        
        
        protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
        {
            int startPosition = writer.Position;
            int startOfObjectPosition = 0;
            // header information
            if (includeUniqueID)
            {
                if (!ContainsOpenGenericParameters)
                {
                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                }
                else
                {
                    WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                }
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
            writer.Write((byte)includeChildrenMode);
            // write properties
            startOfObjectPosition = writer.Position;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_IntWrapper_Accessed)
                {
                    var deserialized = IntWrapper;
                }
                WriteChild(ref writer, ref _IntWrapper, includeChildrenMode, _IntWrapper_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _IntWrapper_ByteIndex, _IntWrapper_ByteLength, false, true, null), verifyCleanness, updateStoredBuffer, true, false, this);
            }
            
            if (updateStoredBuffer)
            {
                _IntWrapper_ByteIndex = startOfObjectPosition - startPosition;
            }
            startOfObjectPosition = writer.Position;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyExampleStructContainingClasses_Accessed)
                {
                    var deserialized = MyExampleStructContainingClasses;
                }
                WriteChild(ref writer, ref _MyExampleStructContainingClasses, includeChildrenMode, _MyExampleStructContainingClasses_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _MyExampleStructContainingClasses_ByteIndex, _MyExampleStructContainingClasses_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
            }
            
            if (updateStoredBuffer)
            {
                _MyExampleStructContainingClasses_ByteIndex = startOfObjectPosition - startPosition;
            }
            startOfObjectPosition = writer.Position;
            if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyHashSetExampleStruct_Accessed)
            {
                var deserialized = MyHashSetExampleStruct;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyHashSetExampleStruct, isBelievedDirty: _MyHashSetExampleStruct_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyHashSetExampleStruct_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyHashSetExampleStruct_ByteIndex, _MyHashSetExampleStruct_ByteLength, false, false, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
            ConvertToBytes_HashSet_GExampleStructContainingClasses_g(ref w, _MyHashSetExampleStruct,
            includeChildrenMode, v, updateStoredBuffer));
            if (updateStoredBuffer)
            {
                _MyHashSetExampleStruct_ByteIndex = startOfObjectPosition - startPosition;if (_MyHashSetExampleStruct_Accessed && _MyHashSetExampleStruct != null)
                {
                    _MyHashSetExampleStruct = (HashSet<ExampleStructContainingClasses>) CloneOrChange_HashSet_GExampleStructContainingClasses_g(_MyHashSetExampleStruct, l => l.RemoveBufferInHierarchy(), true);
                }
                
            }
            startOfObjectPosition = writer.Position;
            if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyListExampleStruct_Accessed)
            {
                var deserialized = MyListExampleStruct;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyListExampleStruct, isBelievedDirty: _MyListExampleStruct_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyListExampleStruct_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyListExampleStruct_ByteIndex, _MyListExampleStruct_ByteLength, false, false, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
            ConvertToBytes_List_GExampleStructContainingClasses_g(ref w, _MyListExampleStruct,
            includeChildrenMode, v, updateStoredBuffer));
            if (updateStoredBuffer)
            {
                _MyListExampleStruct_ByteIndex = startOfObjectPosition - startPosition;
            }
            startOfObjectPosition = writer.Position;
            if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyListNullableExampleStruct_Accessed)
            {
                var deserialized = MyListNullableExampleStruct;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyListNullableExampleStruct, isBelievedDirty: _MyListNullableExampleStruct_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyListNullableExampleStruct_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyListNullableExampleStruct_ByteIndex, _MyListNullableExampleStruct_ByteLength, false, false, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
            ConvertToBytes_List_GWNullableStruct_GExampleStructContainingClasses_g_g(ref w, _MyListNullableExampleStruct,
            includeChildrenMode, v, updateStoredBuffer));
            if (updateStoredBuffer)
            {
                _MyListNullableExampleStruct_ByteIndex = startOfObjectPosition - startPosition;
            }
            startOfObjectPosition = writer.Position;
            if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyListUnwrappedNullableExampleStruct_Accessed)
            {
                var deserialized = MyListUnwrappedNullableExampleStruct;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyListUnwrappedNullableExampleStruct, isBelievedDirty: _MyListUnwrappedNullableExampleStruct_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyListUnwrappedNullableExampleStruct_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyListUnwrappedNullableExampleStruct_ByteIndex, _MyListUnwrappedNullableExampleStruct_ByteLength, false, false, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
            ConvertToBytes_List_GExampleStructContainingClasses_n_g(ref w, _MyListUnwrappedNullableExampleStruct,
            includeChildrenMode, v, updateStoredBuffer));
            if (updateStoredBuffer)
            {
                _MyListUnwrappedNullableExampleStruct_ByteIndex = startOfObjectPosition - startPosition;
            }
            if (updateStoredBuffer)
            {
                _ExampleContainerContainingClassesStructContainingClasses_EndByteIndex = writer.Position - startPosition;
            }
        }
        
        /* Conversion of supported collections and tuples */
        
        private static HashSet<ExampleStructContainingClasses> ConvertFromBytes_HashSet_GExampleStructContainingClasses_g(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(HashSet<ExampleStructContainingClasses>);
            }
            ReadOnlySpan<byte> span = storage.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
            
            HashSet<ExampleStructContainingClasses> collection = new HashSet<ExampleStructContainingClasses>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                var item = new ExampleStructContainingClasses();
                item.DeserializeLazinator(childData);
                collection.Add(item);
                bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_HashSet_GExampleStructContainingClasses_g(ref BinaryBufferWriter writer, HashSet<ExampleStructContainingClasses> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            if (itemToConvert == default(HashSet<ExampleStructContainingClasses>))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            foreach (var item in itemToConvert)
            {
                void action(ref BinaryBufferWriter w) => item.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                WriteToBinaryWithIntLengthPrefix(ref writer, action);
            }
        }
        
        private static HashSet<ExampleStructContainingClasses> CloneOrChange_HashSet_GExampleStructContainingClasses_g(HashSet<ExampleStructContainingClasses> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            
            int collectionLength = itemToClone.Count;
            HashSet<ExampleStructContainingClasses> collection = new HashSet<ExampleStructContainingClasses>(collectionLength);
            foreach (var item in itemToClone)
            {
                var itemCopied = (ExampleStructContainingClasses) (cloneOrChangeFunc(item));
                collection.Add(itemCopied);
            }
            return collection;
        }
        
        private static List<ExampleStructContainingClasses> ConvertFromBytes_List_GExampleStructContainingClasses_g(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(List<ExampleStructContainingClasses>);
            }
            ReadOnlySpan<byte> span = storage.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
            
            List<ExampleStructContainingClasses> collection = new List<ExampleStructContainingClasses>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                var item = new ExampleStructContainingClasses();
                item.DeserializeLazinator(childData);
                collection.Add(item);
                bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_List_GExampleStructContainingClasses_g(ref BinaryBufferWriter writer, List<ExampleStructContainingClasses> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            if (itemToConvert == default(List<ExampleStructContainingClasses>))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            int itemToConvertCount = itemToConvert.Count;
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                void action(ref BinaryBufferWriter w) 
                {
                    var copy = itemToConvert[itemIndex];
                    copy.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    itemToConvert[itemIndex] = copy;
                }
                WriteToBinaryWithIntLengthPrefix(ref writer, action);
            }
        }
        
        private static List<ExampleStructContainingClasses> CloneOrChange_List_GExampleStructContainingClasses_g(List<ExampleStructContainingClasses> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            
            int collectionLength = itemToClone.Count;
            List<ExampleStructContainingClasses> collection = avoidCloningIfPossible ? itemToClone : new List<ExampleStructContainingClasses>(collectionLength);
            int itemToCloneCount = itemToClone.Count;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                if (avoidCloningIfPossible)
                {
                    if (true)
                    {
                        itemToClone[itemIndex] = (ExampleStructContainingClasses) (cloneOrChangeFunc(itemToClone[itemIndex]));
                    }
                    continue;
                }
                var itemCopied = (ExampleStructContainingClasses) (cloneOrChangeFunc(itemToClone[itemIndex]));
                collection.Add(itemCopied);
            }
            return collection;
        }
        
        private static List<WNullableStruct<ExampleStructContainingClasses>> ConvertFromBytes_List_GWNullableStruct_GExampleStructContainingClasses_g_g(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(List<WNullableStruct<ExampleStructContainingClasses>>);
            }
            ReadOnlySpan<byte> span = storage.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
            
            List<WNullableStruct<ExampleStructContainingClasses>> collection = new List<WNullableStruct<ExampleStructContainingClasses>>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                var item = new WNullableStruct<ExampleStructContainingClasses>();
                item.DeserializeLazinator(childData);
                collection.Add(item);
                bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_List_GWNullableStruct_GExampleStructContainingClasses_g_g(ref BinaryBufferWriter writer, List<WNullableStruct<ExampleStructContainingClasses>> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            if (itemToConvert == default(List<WNullableStruct<ExampleStructContainingClasses>>))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            int itemToConvertCount = itemToConvert.Count;
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                void action(ref BinaryBufferWriter w) 
                {
                    var copy = itemToConvert[itemIndex];
                    copy.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    itemToConvert[itemIndex] = copy;
                }
                WriteToBinaryWithIntLengthPrefix(ref writer, action);
            }
        }
        
        private static List<WNullableStruct<ExampleStructContainingClasses>> CloneOrChange_List_GWNullableStruct_GExampleStructContainingClasses_g_g(List<WNullableStruct<ExampleStructContainingClasses>> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            
            int collectionLength = itemToClone.Count;
            List<WNullableStruct<ExampleStructContainingClasses>> collection = avoidCloningIfPossible ? itemToClone : new List<WNullableStruct<ExampleStructContainingClasses>>(collectionLength);
            int itemToCloneCount = itemToClone.Count;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                if (avoidCloningIfPossible)
                {
                    if (true)
                    {
                        itemToClone[itemIndex] = (WNullableStruct<ExampleStructContainingClasses>) (cloneOrChangeFunc(itemToClone[itemIndex]));
                    }
                    continue;
                }
                var itemCopied = (WNullableStruct<ExampleStructContainingClasses>) (cloneOrChangeFunc(itemToClone[itemIndex]));
                collection.Add(itemCopied);
            }
            return collection;
        }
        
        private static List<ExampleStructContainingClasses?> ConvertFromBytes_List_GExampleStructContainingClasses_n_g(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(List<ExampleStructContainingClasses?>);
            }
            ReadOnlySpan<byte> span = storage.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
            
            List<ExampleStructContainingClasses?> collection = new List<ExampleStructContainingClasses?>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember == 0)
                {
                    collection.Add(null);
                }
                else
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = DeserializationFactory.Instance.CreateBasedOnType<ExampleStructContainingClasses?>(childData);
                    collection.Add(item);
                }
                bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_List_GExampleStructContainingClasses_n_g(ref BinaryBufferWriter writer, List<ExampleStructContainingClasses?> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            if (itemToConvert == default(List<ExampleStructContainingClasses?>))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            int itemToConvertCount = itemToConvert.Count;
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                if (itemToConvert[itemIndex] == null)
                {
                    writer.Write((uint)0);
                }
                else 
                {
                    
                    void action(ref BinaryBufferWriter w) 
                    {
                        var copy = itemToConvert[itemIndex];
                        if (copy != null)
                        {
                            copy.Value.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                            itemToConvert[itemIndex] = copy;
                        }
                    }
                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                }
                
            }
        }
        
        private static List<ExampleStructContainingClasses?> CloneOrChange_List_GExampleStructContainingClasses_n_g(List<ExampleStructContainingClasses?> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            
            int collectionLength = itemToClone.Count;
            List<ExampleStructContainingClasses?> collection = avoidCloningIfPossible ? itemToClone : new List<ExampleStructContainingClasses?>(collectionLength);
            int itemToCloneCount = itemToClone.Count;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                if (avoidCloningIfPossible)
                {
                    if (itemToClone[itemIndex] != null)
                    {
                        itemToClone[itemIndex] = (ExampleStructContainingClasses?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                    }
                    continue;
                }
                if (itemToClone[itemIndex] == null)
                {
                    collection.Add(null);
                }
                else
                {
                    var itemCopied = (ExampleStructContainingClasses?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                    collection.Add(itemCopied);
                }
                
            }
            return collection;
        }
        
    }
}
