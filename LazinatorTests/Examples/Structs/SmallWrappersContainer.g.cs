//0b497dd8-efc0-d030-d245-bebcbcd856ec
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.393
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.Structs
{
    using Lazinator.Attributes;
    using Lazinator.Buffers;
    using Lazinator.Core;
    using Lazinator.Exceptions;
    using Lazinator.Support;
    using Lazinator.Wrappers;
    using LazinatorCollections;
    using static Lazinator.Buffers.WriteUncompressedPrimitives;
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class SmallWrappersContainer : ILazinator
    {
        public bool IsStruct => false;
        
        /* Property definitions */
        
        protected int _ListWrappedBytes_ByteIndex;
        protected int _WrappedBool_ByteIndex;
        protected int _WrappedByte_ByteIndex;
        protected int _WrappedChar_ByteIndex;
        protected int _WrappedNullableBool_ByteIndex;
        protected int _WrappedNullableByte_ByteIndex;
        protected int _WrappedNullableChar_ByteIndex;
        protected int _WrappedNullableSByte_ByteIndex;
        protected int _WrappedSByte_ByteIndex;
        protected virtual int _ListWrappedBytes_ByteLength => _WrappedBool_ByteIndex - _ListWrappedBytes_ByteIndex;
        protected virtual int _WrappedBool_ByteLength => _WrappedByte_ByteIndex - _WrappedBool_ByteIndex;
        protected virtual int _WrappedByte_ByteLength => _WrappedChar_ByteIndex - _WrappedByte_ByteIndex;
        protected virtual int _WrappedChar_ByteLength => _WrappedNullableBool_ByteIndex - _WrappedChar_ByteIndex;
        protected virtual int _WrappedNullableBool_ByteLength => _WrappedNullableByte_ByteIndex - _WrappedNullableBool_ByteIndex;
        protected virtual int _WrappedNullableByte_ByteLength => _WrappedNullableChar_ByteIndex - _WrappedNullableByte_ByteIndex;
        protected virtual int _WrappedNullableChar_ByteLength => _WrappedNullableSByte_ByteIndex - _WrappedNullableChar_ByteIndex;
        protected virtual int _WrappedNullableSByte_ByteLength => _WrappedSByte_ByteIndex - _WrappedNullableSByte_ByteIndex;
        private int _SmallWrappersContainer_EndByteIndex;
        protected virtual  int _WrappedSByte_ByteLength => _SmallWrappersContainer_EndByteIndex - _WrappedSByte_ByteIndex;
        protected virtual int _OverallEndByteIndex => _SmallWrappersContainer_EndByteIndex;
        
        
        protected LazinatorList<WByte> _ListWrappedBytes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorList<WByte> ListWrappedBytes
        {
            get
            {
                if (!_ListWrappedBytes_Accessed)
                {
                    LazinateListWrappedBytes();
                } 
                return _ListWrappedBytes;
            }
            set
            {
                if (_ListWrappedBytes != null)
                {
                    _ListWrappedBytes.LazinatorParents = _ListWrappedBytes.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ListWrappedBytes = value;
                _ListWrappedBytes_Accessed = true;
            }
        }
        protected bool _ListWrappedBytes_Accessed;
        private void LazinateListWrappedBytes()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _ListWrappedBytes = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ListWrappedBytes_ByteIndex, _ListWrappedBytes_ByteLength, SizeOfLength.SkipLength, null);
                _ListWrappedBytes = DeserializationFactory.Instance.CreateBaseOrDerivedType(201, (c, p) => new LazinatorList<WByte>(c, p), childData, this); 
            }
            _ListWrappedBytes_Accessed = true;
        }
        
        
        protected WBool _WrappedBool;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WBool WrappedBool
        {
            get
            {
                if (!_WrappedBool_Accessed)
                {
                    LazinateWrappedBool();
                } 
                return _WrappedBool;
            }
            set
            {
                value.LazinatorParents = new LazinatorParentsCollection(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _WrappedBool = value;
                _WrappedBool_Accessed = true;
            }
        }
        protected bool _WrappedBool_Accessed;
        private void LazinateWrappedBool()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _WrappedBool = default(WBool);
                _WrappedBool.LazinatorParents = new LazinatorParentsCollection(this);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedBool_ByteIndex, _WrappedBool_ByteLength, SizeOfLength.SkipLength, 1);_WrappedBool = new WBool(childData)
                {
                    LazinatorParents = new LazinatorParentsCollection(this)
                };
                
            }
            _WrappedBool_Accessed = true;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WBool WrappedBool_Copy
        {
            get
            {
                if (!_WrappedBool_Accessed)
                {
                    if (LazinatorMemoryStorage.Length == 0)
                    {
                        return default(WBool);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedBool_ByteIndex, _WrappedBool_ByteLength, SizeOfLength.SkipLength, 1);
                        var toReturn = new WBool(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                var cleanCopy = _WrappedBool;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        protected WByte _WrappedByte;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WByte WrappedByte
        {
            get
            {
                if (!_WrappedByte_Accessed)
                {
                    LazinateWrappedByte();
                } 
                return _WrappedByte;
            }
            set
            {
                value.LazinatorParents = new LazinatorParentsCollection(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _WrappedByte = value;
                _WrappedByte_Accessed = true;
            }
        }
        protected bool _WrappedByte_Accessed;
        private void LazinateWrappedByte()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _WrappedByte = default(WByte);
                _WrappedByte.LazinatorParents = new LazinatorParentsCollection(this);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedByte_ByteIndex, _WrappedByte_ByteLength, SizeOfLength.SkipLength, 1);_WrappedByte = new WByte(childData)
                {
                    LazinatorParents = new LazinatorParentsCollection(this)
                };
                
            }
            _WrappedByte_Accessed = true;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WByte WrappedByte_Copy
        {
            get
            {
                if (!_WrappedByte_Accessed)
                {
                    if (LazinatorMemoryStorage.Length == 0)
                    {
                        return default(WByte);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedByte_ByteIndex, _WrappedByte_ByteLength, SizeOfLength.SkipLength, 1);
                        var toReturn = new WByte(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                var cleanCopy = _WrappedByte;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        protected WChar _WrappedChar;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WChar WrappedChar
        {
            get
            {
                if (!_WrappedChar_Accessed)
                {
                    LazinateWrappedChar();
                } 
                return _WrappedChar;
            }
            set
            {
                value.LazinatorParents = new LazinatorParentsCollection(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _WrappedChar = value;
                _WrappedChar_Accessed = true;
            }
        }
        protected bool _WrappedChar_Accessed;
        private void LazinateWrappedChar()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _WrappedChar = default(WChar);
                _WrappedChar.LazinatorParents = new LazinatorParentsCollection(this);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedChar_ByteIndex, _WrappedChar_ByteLength, SizeOfLength.SkipLength, 2);_WrappedChar = new WChar(childData)
                {
                    LazinatorParents = new LazinatorParentsCollection(this)
                };
                
            }
            _WrappedChar_Accessed = true;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WChar WrappedChar_Copy
        {
            get
            {
                if (!_WrappedChar_Accessed)
                {
                    if (LazinatorMemoryStorage.Length == 0)
                    {
                        return default(WChar);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedChar_ByteIndex, _WrappedChar_ByteLength, SizeOfLength.SkipLength, 2);
                        var toReturn = new WChar(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                var cleanCopy = _WrappedChar;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        protected WNullableBool _WrappedNullableBool;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WNullableBool WrappedNullableBool
        {
            get
            {
                if (!_WrappedNullableBool_Accessed)
                {
                    LazinateWrappedNullableBool();
                } 
                return _WrappedNullableBool;
            }
            set
            {
                value.LazinatorParents = new LazinatorParentsCollection(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _WrappedNullableBool = value;
                _WrappedNullableBool_Accessed = true;
            }
        }
        protected bool _WrappedNullableBool_Accessed;
        private void LazinateWrappedNullableBool()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _WrappedNullableBool = default(WNullableBool);
                _WrappedNullableBool.LazinatorParents = new LazinatorParentsCollection(this);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedNullableBool_ByteIndex, _WrappedNullableBool_ByteLength, SizeOfLength.SkipLength, 1);_WrappedNullableBool = new WNullableBool(childData)
                {
                    LazinatorParents = new LazinatorParentsCollection(this)
                };
                
            }
            _WrappedNullableBool_Accessed = true;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WNullableBool WrappedNullableBool_Copy
        {
            get
            {
                if (!_WrappedNullableBool_Accessed)
                {
                    if (LazinatorMemoryStorage.Length == 0)
                    {
                        return default(WNullableBool);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedNullableBool_ByteIndex, _WrappedNullableBool_ByteLength, SizeOfLength.SkipLength, 1);
                        var toReturn = new WNullableBool(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                var cleanCopy = _WrappedNullableBool;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        protected WNullableByte _WrappedNullableByte;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WNullableByte WrappedNullableByte
        {
            get
            {
                if (!_WrappedNullableByte_Accessed)
                {
                    LazinateWrappedNullableByte();
                } 
                return _WrappedNullableByte;
            }
            set
            {
                value.LazinatorParents = new LazinatorParentsCollection(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _WrappedNullableByte = value;
                _WrappedNullableByte_Accessed = true;
            }
        }
        protected bool _WrappedNullableByte_Accessed;
        private void LazinateWrappedNullableByte()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _WrappedNullableByte = default(WNullableByte);
                _WrappedNullableByte.LazinatorParents = new LazinatorParentsCollection(this);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedNullableByte_ByteIndex, _WrappedNullableByte_ByteLength, SizeOfLength.SkipLength, null);_WrappedNullableByte = new WNullableByte(childData)
                {
                    LazinatorParents = new LazinatorParentsCollection(this)
                };
                
            }
            _WrappedNullableByte_Accessed = true;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WNullableByte WrappedNullableByte_Copy
        {
            get
            {
                if (!_WrappedNullableByte_Accessed)
                {
                    if (LazinatorMemoryStorage.Length == 0)
                    {
                        return default(WNullableByte);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedNullableByte_ByteIndex, _WrappedNullableByte_ByteLength, SizeOfLength.SkipLength, null);
                        var toReturn = new WNullableByte(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                var cleanCopy = _WrappedNullableByte;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        protected WNullableChar _WrappedNullableChar;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WNullableChar WrappedNullableChar
        {
            get
            {
                if (!_WrappedNullableChar_Accessed)
                {
                    LazinateWrappedNullableChar();
                } 
                return _WrappedNullableChar;
            }
            set
            {
                value.LazinatorParents = new LazinatorParentsCollection(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _WrappedNullableChar = value;
                _WrappedNullableChar_Accessed = true;
            }
        }
        protected bool _WrappedNullableChar_Accessed;
        private void LazinateWrappedNullableChar()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _WrappedNullableChar = default(WNullableChar);
                _WrappedNullableChar.LazinatorParents = new LazinatorParentsCollection(this);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedNullableChar_ByteIndex, _WrappedNullableChar_ByteLength, SizeOfLength.SkipLength, null);_WrappedNullableChar = new WNullableChar(childData)
                {
                    LazinatorParents = new LazinatorParentsCollection(this)
                };
                
            }
            _WrappedNullableChar_Accessed = true;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WNullableChar WrappedNullableChar_Copy
        {
            get
            {
                if (!_WrappedNullableChar_Accessed)
                {
                    if (LazinatorMemoryStorage.Length == 0)
                    {
                        return default(WNullableChar);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedNullableChar_ByteIndex, _WrappedNullableChar_ByteLength, SizeOfLength.SkipLength, null);
                        var toReturn = new WNullableChar(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                var cleanCopy = _WrappedNullableChar;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        protected WNullableSByte _WrappedNullableSByte;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WNullableSByte WrappedNullableSByte
        {
            get
            {
                if (!_WrappedNullableSByte_Accessed)
                {
                    LazinateWrappedNullableSByte();
                } 
                return _WrappedNullableSByte;
            }
            set
            {
                value.LazinatorParents = new LazinatorParentsCollection(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _WrappedNullableSByte = value;
                _WrappedNullableSByte_Accessed = true;
            }
        }
        protected bool _WrappedNullableSByte_Accessed;
        private void LazinateWrappedNullableSByte()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _WrappedNullableSByte = default(WNullableSByte);
                _WrappedNullableSByte.LazinatorParents = new LazinatorParentsCollection(this);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedNullableSByte_ByteIndex, _WrappedNullableSByte_ByteLength, SizeOfLength.SkipLength, null);_WrappedNullableSByte = new WNullableSByte(childData)
                {
                    LazinatorParents = new LazinatorParentsCollection(this)
                };
                
            }
            _WrappedNullableSByte_Accessed = true;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WNullableSByte WrappedNullableSByte_Copy
        {
            get
            {
                if (!_WrappedNullableSByte_Accessed)
                {
                    if (LazinatorMemoryStorage.Length == 0)
                    {
                        return default(WNullableSByte);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedNullableSByte_ByteIndex, _WrappedNullableSByte_ByteLength, SizeOfLength.SkipLength, null);
                        var toReturn = new WNullableSByte(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                var cleanCopy = _WrappedNullableSByte;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        protected WSByte _WrappedSByte;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WSByte WrappedSByte
        {
            get
            {
                if (!_WrappedSByte_Accessed)
                {
                    LazinateWrappedSByte();
                } 
                return _WrappedSByte;
            }
            set
            {
                value.LazinatorParents = new LazinatorParentsCollection(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _WrappedSByte = value;
                _WrappedSByte_Accessed = true;
            }
        }
        protected bool _WrappedSByte_Accessed;
        private void LazinateWrappedSByte()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _WrappedSByte = default(WSByte);
                _WrappedSByte.LazinatorParents = new LazinatorParentsCollection(this);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedSByte_ByteIndex, _WrappedSByte_ByteLength, SizeOfLength.SkipLength, 1);_WrappedSByte = new WSByte(childData)
                {
                    LazinatorParents = new LazinatorParentsCollection(this)
                };
                
            }
            _WrappedSByte_Accessed = true;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WSByte WrappedSByte_Copy
        {
            get
            {
                if (!_WrappedSByte_Accessed)
                {
                    if (LazinatorMemoryStorage.Length == 0)
                    {
                        return default(WSByte);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedSByte_ByteIndex, _WrappedSByte_ByteLength, SizeOfLength.SkipLength, 1);
                        var toReturn = new WSByte(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                var cleanCopy = _WrappedSByte;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        /* Serialization, deserialization, and object relationships */
        
        public SmallWrappersContainer(IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren)
        {
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public SmallWrappersContainer(LazinatorMemory serializedBytes, ILazinator parent = null, IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren, int? lazinatorObjectVersion = null)
        {
            if (lazinatorObjectVersion != null)
            {
                LazinatorObjectVersion = (int) lazinatorObjectVersion;
            }
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorMemoryStorage.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        protected virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        protected virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialMemory.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt32(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt32(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            int totalBytes = ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return _OverallEndByteIndex;
        }
        
        public virtual void SerializeLazinator()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorMemoryStorage.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
                
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(LazinatorSerializationOptions.Default);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.LengthInt ?? 0);
                LazinatorMemoryStorage.WriteToBinaryBuffer(ref writer);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual LazinatorMemory SerializeLazinator(in LazinatorSerializationOptions options) 
        {
            if (LazinatorMemoryStorage.IsEmpty || options.IncludeChildrenMode != OriginalIncludeChildrenMode || (options.VerifyCleanness || IsDirty || (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(options);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.LengthInt ?? 0);
            LazinatorMemoryStorage.WriteToBinaryBuffer(ref writer);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(in LazinatorSerializationOptions options) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.LengthInt ?? ExpandableBytes.DefaultMinBufferSize;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeToExistingBuffer(ref writer, options);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            SmallWrappersContainer clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new SmallWrappersContainer(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (SmallWrappersContainer)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, this);
                clone = new SmallWrappersContainer(bytes);
            }
            return clone;
        }
        
        protected virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            SmallWrappersContainer typedClone = (SmallWrappersContainer) clone;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (ListWrappedBytes == null)
                {
                    typedClone.ListWrappedBytes = null;
                }
                else
                {
                    typedClone.ListWrappedBytes = (LazinatorList<WByte>) ListWrappedBytes.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.WrappedBool = (WBool) WrappedBool.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.WrappedByte = (WByte) WrappedByte.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.WrappedChar = (WChar) WrappedChar.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.WrappedNullableBool = (WNullableBool) WrappedNullableBool.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.WrappedNullableByte = (WNullableByte) WrappedNullableByte.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.WrappedNullableChar = (WNullableChar) WrappedNullableChar.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.WrappedNullableSByte = (WNullableSByte) WrappedNullableSByte.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.WrappedSByte = (WSByte) WrappedSByte.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            
            return typedClone;
        }
        
        
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ListWrappedBytes_Accessed) && ListWrappedBytes == null)
            {
                yield return ("ListWrappedBytes", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ListWrappedBytes != null) || (_ListWrappedBytes_Accessed && _ListWrappedBytes != null))
                {
                    bool isMatch_ListWrappedBytes = matchCriterion == null || matchCriterion(ListWrappedBytes);
                    bool shouldExplore_ListWrappedBytes = exploreCriterion == null || exploreCriterion(ListWrappedBytes);
                    if (isMatch_ListWrappedBytes)
                    {
                        yield return ("ListWrappedBytes", ListWrappedBytes);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_ListWrappedBytes) && shouldExplore_ListWrappedBytes)
                    {
                        foreach (var toYield in ListWrappedBytes.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ListWrappedBytes" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            bool isMatch_WrappedBool = matchCriterion == null || matchCriterion(WrappedBool);
            bool shouldExplore_WrappedBool = exploreCriterion == null || exploreCriterion(WrappedBool);
            if (isMatch_WrappedBool)
            {
                yield return ("WrappedBool", WrappedBool);
            }
            if ((!stopExploringBelowMatch || !isMatch_WrappedBool) && shouldExplore_WrappedBool)
            {
                foreach (var toYield in WrappedBool.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("WrappedBool" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            bool isMatch_WrappedByte = matchCriterion == null || matchCriterion(WrappedByte);
            bool shouldExplore_WrappedByte = exploreCriterion == null || exploreCriterion(WrappedByte);
            if (isMatch_WrappedByte)
            {
                yield return ("WrappedByte", WrappedByte);
            }
            if ((!stopExploringBelowMatch || !isMatch_WrappedByte) && shouldExplore_WrappedByte)
            {
                foreach (var toYield in WrappedByte.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("WrappedByte" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            bool isMatch_WrappedChar = matchCriterion == null || matchCriterion(WrappedChar);
            bool shouldExplore_WrappedChar = exploreCriterion == null || exploreCriterion(WrappedChar);
            if (isMatch_WrappedChar)
            {
                yield return ("WrappedChar", WrappedChar);
            }
            if ((!stopExploringBelowMatch || !isMatch_WrappedChar) && shouldExplore_WrappedChar)
            {
                foreach (var toYield in WrappedChar.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("WrappedChar" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            bool isMatch_WrappedNullableBool = matchCriterion == null || matchCriterion(WrappedNullableBool);
            bool shouldExplore_WrappedNullableBool = exploreCriterion == null || exploreCriterion(WrappedNullableBool);
            if (isMatch_WrappedNullableBool)
            {
                yield return ("WrappedNullableBool", WrappedNullableBool);
            }
            if ((!stopExploringBelowMatch || !isMatch_WrappedNullableBool) && shouldExplore_WrappedNullableBool)
            {
                foreach (var toYield in WrappedNullableBool.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("WrappedNullableBool" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            bool isMatch_WrappedNullableByte = matchCriterion == null || matchCriterion(WrappedNullableByte);
            bool shouldExplore_WrappedNullableByte = exploreCriterion == null || exploreCriterion(WrappedNullableByte);
            if (isMatch_WrappedNullableByte)
            {
                yield return ("WrappedNullableByte", WrappedNullableByte);
            }
            if ((!stopExploringBelowMatch || !isMatch_WrappedNullableByte) && shouldExplore_WrappedNullableByte)
            {
                foreach (var toYield in WrappedNullableByte.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("WrappedNullableByte" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            bool isMatch_WrappedNullableChar = matchCriterion == null || matchCriterion(WrappedNullableChar);
            bool shouldExplore_WrappedNullableChar = exploreCriterion == null || exploreCriterion(WrappedNullableChar);
            if (isMatch_WrappedNullableChar)
            {
                yield return ("WrappedNullableChar", WrappedNullableChar);
            }
            if ((!stopExploringBelowMatch || !isMatch_WrappedNullableChar) && shouldExplore_WrappedNullableChar)
            {
                foreach (var toYield in WrappedNullableChar.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("WrappedNullableChar" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            bool isMatch_WrappedNullableSByte = matchCriterion == null || matchCriterion(WrappedNullableSByte);
            bool shouldExplore_WrappedNullableSByte = exploreCriterion == null || exploreCriterion(WrappedNullableSByte);
            if (isMatch_WrappedNullableSByte)
            {
                yield return ("WrappedNullableSByte", WrappedNullableSByte);
            }
            if ((!stopExploringBelowMatch || !isMatch_WrappedNullableSByte) && shouldExplore_WrappedNullableSByte)
            {
                foreach (var toYield in WrappedNullableSByte.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("WrappedNullableSByte" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            bool isMatch_WrappedSByte = matchCriterion == null || matchCriterion(WrappedSByte);
            bool shouldExplore_WrappedSByte = exploreCriterion == null || exploreCriterion(WrappedSByte);
            if (isMatch_WrappedSByte)
            {
                yield return ("WrappedSByte", WrappedSByte);
            }
            if ((!stopExploringBelowMatch || !isMatch_WrappedSByte) && shouldExplore_WrappedSByte)
            {
                foreach (var toYield in WrappedSByte.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("WrappedSByte" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            yield break;
        }
        
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            yield break;
        }
        
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            if ((!exploreOnlyDeserializedChildren && ListWrappedBytes != null) || (_ListWrappedBytes_Accessed && _ListWrappedBytes != null))
            {
                _ListWrappedBytes = (LazinatorList<WByte>) _ListWrappedBytes.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            var deserialized_WrappedBool = WrappedBool;
            _WrappedBool = (WBool) _WrappedBool.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            var deserialized_WrappedByte = WrappedByte;
            _WrappedByte = (WByte) _WrappedByte.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            var deserialized_WrappedChar = WrappedChar;
            _WrappedChar = (WChar) _WrappedChar.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            var deserialized_WrappedNullableBool = WrappedNullableBool;
            _WrappedNullableBool = (WNullableBool) _WrappedNullableBool.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            var deserialized_WrappedNullableByte = WrappedNullableByte;
            _WrappedNullableByte = (WNullableByte) _WrappedNullableByte.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            var deserialized_WrappedNullableChar = WrappedNullableChar;
            _WrappedNullableChar = (WNullableChar) _WrappedNullableChar.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            var deserialized_WrappedNullableSByte = WrappedNullableSByte;
            _WrappedNullableSByte = (WNullableSByte) _WrappedNullableSByte.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            var deserialized_WrappedSByte = WrappedSByte;
            _WrappedSByte = (WSByte) _WrappedSByte.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        
        public virtual void FreeInMemoryObjects()
        {
            _ListWrappedBytes = default;
            _WrappedBool = default;
            _WrappedByte = default;
            _WrappedChar = default;
            _WrappedNullableBool = default;
            _WrappedNullableByte = default;
            _WrappedNullableChar = default;
            _WrappedNullableSByte = default;
            _WrappedSByte = default;
            _ListWrappedBytes_Accessed = _WrappedBool_Accessed = _WrappedByte_Accessed = _WrappedChar_Accessed = _WrappedNullableBool_Accessed = _WrappedNullableByte_Accessed = _WrappedNullableChar_Accessed = _WrappedNullableSByte_Accessed = _WrappedSByte_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1062;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        protected virtual int ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialMemory.Span;
            ConvertFromBytesForPrimitiveProperties(span, includeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            int lengthForLengths = 0;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                lengthForLengths += 7;
            }
            int totalChildrenSize = ConvertFromBytesForChildProperties(span, includeChildrenMode, serializedVersionNumber, bytesSoFar + lengthForLengths, ref bytesSoFar);
            return bytesSoFar + totalChildrenSize;
        }
        
        protected virtual void ConvertFromBytesForPrimitiveProperties(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
        }
        
        protected virtual int ConvertFromBytesForChildProperties(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, int indexOfFirstChild, ref int bytesSoFar)
        {
            int totalChildrenBytes = 0;
            _ListWrappedBytes_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            _WrappedBool_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes++;
            _WrappedByte_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes++;
            _WrappedChar_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += 2;
            _WrappedNullableBool_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes++;
            _WrappedNullableByte_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToByte(ref bytesSoFar);
            }
            _WrappedNullableChar_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToByte(ref bytesSoFar);
            }
            _WrappedNullableSByte_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToByte(ref bytesSoFar);
            }
            _WrappedSByte_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes++;
            _SmallWrappersContainer_EndByteIndex = indexOfFirstChild + totalChildrenBytes;
            return totalChildrenBytes;
        }
        
        public virtual void SerializeToExistingBuffer(ref BinaryBufferWriter writer, in LazinatorSerializationOptions options)
        {
            int startPosition = writer.ActiveMemoryPosition;
            WritePropertiesIntoBuffer(ref writer, options, true);
            if (options.UpdateStoredBuffer)
            {
                UpdateStoredBuffer(ref writer, startPosition, writer.ActiveMemoryPosition - startPosition, options.IncludeChildrenMode, false);
            }
        }
        
        public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, long startPosition, long length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
        {
            _IsDirty = false;
            if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                _DescendantIsDirty = false;
                if (updateDeserializedChildren)
                {
                    UpdateDeserializedChildren(ref writer, startPosition);
                }
                
                _WrappedBool_Accessed = false;
                _WrappedByte_Accessed = false;
                _WrappedChar_Accessed = false;
                _WrappedNullableBool_Accessed = false;
                _WrappedNullableByte_Accessed = false;
                _WrappedNullableChar_Accessed = false;
                _WrappedNullableSByte_Accessed = false;
                _WrappedSByte_Accessed = false;
            }
            else
            {
                ThrowHelper.ThrowCannotUpdateStoredBuffer();
            }
            
            var newBuffer = writer.Slice(startPosition, length);
            LazinatorMemoryStorage = newBuffer;
        }
        
        protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, long startPosition)
        {
            if (_ListWrappedBytes_Accessed && _ListWrappedBytes != null)
            {
                ListWrappedBytes.UpdateStoredBuffer(ref writer, startPosition + _ListWrappedBytes_ByteIndex, _ListWrappedBytes_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            }
            WrappedBool.UpdateStoredBuffer(ref writer, startPosition + _WrappedBool_ByteIndex, _WrappedBool_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            WrappedByte.UpdateStoredBuffer(ref writer, startPosition + _WrappedByte_ByteIndex, _WrappedByte_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            WrappedChar.UpdateStoredBuffer(ref writer, startPosition + _WrappedChar_ByteIndex, _WrappedChar_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            WrappedNullableBool.UpdateStoredBuffer(ref writer, startPosition + _WrappedNullableBool_ByteIndex, _WrappedNullableBool_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            WrappedNullableByte.UpdateStoredBuffer(ref writer, startPosition + _WrappedNullableByte_ByteIndex, _WrappedNullableByte_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            WrappedNullableChar.UpdateStoredBuffer(ref writer, startPosition + _WrappedNullableChar_ByteIndex, _WrappedNullableChar_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            WrappedNullableSByte.UpdateStoredBuffer(ref writer, startPosition + _WrappedNullableSByte_ByteIndex, _WrappedNullableSByte_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            WrappedSByte.UpdateStoredBuffer(ref writer, startPosition + _WrappedSByte_ByteIndex, _WrappedSByte_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            
        }
        
        
        protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, in LazinatorSerializationOptions options, bool includeUniqueID)
        {
            int startPosition = writer.ActiveMemoryPosition;
            if (includeUniqueID)
            {
                if (!ContainsOpenGenericParameters)
                {
                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                }
                else
                {
                    WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                }
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
            writer.Write((byte)options.IncludeChildrenMode);
            // write properties
            
            
            int lengthForLengths = 0;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                lengthForLengths += 7;
            }
            
            int previousLengthsPosition = writer.SetLengthsPosition(lengthForLengths);
            WriteChildrenPropertiesIntoBuffer(ref writer, options, includeUniqueID, startPosition);
            writer.ResetLengthsPosition(previousLengthsPosition);
            
        }
        
        protected virtual void WritePrimitivePropertiesIntoBuffer(ref BinaryBufferWriter writer, in LazinatorSerializationOptions options, bool includeUniqueID)
        {
        }
        protected virtual void WriteChildrenPropertiesIntoBuffer(ref BinaryBufferWriter writer, LazinatorSerializationOptions options, bool includeUniqueID, int startOfObjectPosition)
        {
            int startOfChildPosition = 0;
            int lengthValue = 0;
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_ListWrappedBytes_Accessed)
                {
                    var deserialized = ListWrappedBytes;
                }
                WriteChild(ref writer, ref _ListWrappedBytes, options, _ListWrappedBytes_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ListWrappedBytes_ByteIndex, _ListWrappedBytes_ByteLength, SizeOfLength.SkipLength, null), SizeOfLength.SkipLength, this);
                lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _ListWrappedBytes_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_WrappedBool_Accessed)
                {
                    var deserialized = WrappedBool;
                }
                WriteChild(ref writer, ref _WrappedBool, options, _WrappedBool_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _WrappedBool_ByteIndex, _WrappedBool_ByteLength, SizeOfLength.SkipLength, 1), SizeOfLength.SkipLength, this);
                
            }
            if (options.UpdateStoredBuffer)
            {
                _WrappedBool_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_WrappedByte_Accessed)
                {
                    var deserialized = WrappedByte;
                }
                WriteChild(ref writer, ref _WrappedByte, options, _WrappedByte_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _WrappedByte_ByteIndex, _WrappedByte_ByteLength, SizeOfLength.SkipLength, 1), SizeOfLength.SkipLength, this);
                
            }
            if (options.UpdateStoredBuffer)
            {
                _WrappedByte_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_WrappedChar_Accessed)
                {
                    var deserialized = WrappedChar;
                }
                WriteChild(ref writer, ref _WrappedChar, options, _WrappedChar_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _WrappedChar_ByteIndex, _WrappedChar_ByteLength, SizeOfLength.SkipLength, 2), SizeOfLength.SkipLength, this);
                
            }
            if (options.UpdateStoredBuffer)
            {
                _WrappedChar_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_WrappedNullableBool_Accessed)
                {
                    var deserialized = WrappedNullableBool;
                }
                WriteChild(ref writer, ref _WrappedNullableBool, options, _WrappedNullableBool_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _WrappedNullableBool_ByteIndex, _WrappedNullableBool_ByteLength, SizeOfLength.SkipLength, 1), SizeOfLength.SkipLength, this);
                
            }
            if (options.UpdateStoredBuffer)
            {
                _WrappedNullableBool_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_WrappedNullableByte_Accessed)
                {
                    var deserialized = WrappedNullableByte;
                }
                WriteChild(ref writer, ref _WrappedNullableByte, options, _WrappedNullableByte_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _WrappedNullableByte_ByteIndex, _WrappedNullableByte_ByteLength, SizeOfLength.SkipLength, null), SizeOfLength.SkipLength, this);
                lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                if (lengthValue > byte.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(byte.MaxValue);
                }
                writer.RecordLength((byte) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _WrappedNullableByte_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_WrappedNullableChar_Accessed)
                {
                    var deserialized = WrappedNullableChar;
                }
                WriteChild(ref writer, ref _WrappedNullableChar, options, _WrappedNullableChar_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _WrappedNullableChar_ByteIndex, _WrappedNullableChar_ByteLength, SizeOfLength.SkipLength, null), SizeOfLength.SkipLength, this);
                lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                if (lengthValue > byte.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(byte.MaxValue);
                }
                writer.RecordLength((byte) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _WrappedNullableChar_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_WrappedNullableSByte_Accessed)
                {
                    var deserialized = WrappedNullableSByte;
                }
                WriteChild(ref writer, ref _WrappedNullableSByte, options, _WrappedNullableSByte_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _WrappedNullableSByte_ByteIndex, _WrappedNullableSByte_ByteLength, SizeOfLength.SkipLength, null), SizeOfLength.SkipLength, this);
                lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                if (lengthValue > byte.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(byte.MaxValue);
                }
                writer.RecordLength((byte) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _WrappedNullableSByte_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_WrappedSByte_Accessed)
                {
                    var deserialized = WrappedSByte;
                }
                WriteChild(ref writer, ref _WrappedSByte, options, _WrappedSByte_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _WrappedSByte_ByteIndex, _WrappedSByte_ByteLength, SizeOfLength.SkipLength, 1), SizeOfLength.SkipLength, this);
                
            }
            if (options.UpdateStoredBuffer)
            {
                _WrappedSByte_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            if (options.UpdateStoredBuffer)
            {
                _SmallWrappersContainer_EndByteIndex = writer.ActiveMemoryPosition - startOfObjectPosition;
            }
            
        }
    }
}
