//c915a55c-e78a-b5cb-6be7-367a17e48a59
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.393
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples
{
    using Lazinator.Attributes;
    using Lazinator.Buffers;
    using Lazinator.Core;
    using Lazinator.Exceptions;
    using Lazinator.Support;
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial struct ExampleStructContainingClasses : ILazinator
    {
        public bool IsStruct => true;
        
        /* Property definitions */
        
        int _MyChild1_ByteIndex;
        int _MyChild2_ByteIndex;
        int _MyLazinatorList_ByteIndex;
        int _MyListValues_ByteIndex;
        int _MyTuple_ByteIndex;
        int _MyChild1_ByteLength => _MyChild2_ByteIndex - _MyChild1_ByteIndex;
        int _MyChild2_ByteLength => _MyLazinatorList_ByteIndex - _MyChild2_ByteIndex;
        int _MyLazinatorList_ByteLength => _MyListValues_ByteIndex - _MyLazinatorList_ByteIndex;
        int _MyListValues_ByteLength => _MyTuple_ByteIndex - _MyListValues_ByteIndex;
        private int _ExampleStructContainingClasses_EndByteIndex;
        int _MyTuple_ByteLength => _ExampleStructContainingClasses_EndByteIndex - _MyTuple_ByteIndex;
        
        
        bool _MyBool;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool MyBool
        {
            get
            {
                return _MyBool;
            }
            set
            {
                IsDirty = true;
                _MyBool = value;
            }
        }
        
        char _MyChar;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public char MyChar
        {
            get
            {
                return _MyChar;
            }
            set
            {
                IsDirty = true;
                _MyChar = value;
            }
        }
        
        ExampleChild _MyChild1;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleChild MyChild1
        {
            get
            {
                if (!_MyChild1_Accessed)
                {
                    Lazinate_MyChild1();
                } 
                return _MyChild1;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyChild1 = value;
                _MyChild1_Accessed = true;
            }
        }
        bool _MyChild1_Accessed;
        private void Lazinate_MyChild1()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyChild1 = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyChild1_ByteIndex, _MyChild1_ByteLength, false, false, null);
                
                _MyChild1 = DeserializationFactory.Instance.CreateBaseOrDerivedType(1013, (c, p) => new ExampleChild(c, p), childData); 
            }
            
            _MyChild1_Accessed = true;
        }
        
        
        ExampleChild _MyChild2;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleChild MyChild2
        {
            get
            {
                if (!_MyChild2_Accessed)
                {
                    Lazinate_MyChild2();
                } 
                return _MyChild2;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyChild2 = value;
                _MyChild2_Accessed = true;
            }
        }
        bool _MyChild2_Accessed;
        private void Lazinate_MyChild2()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyChild2 = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyChild2_ByteIndex, _MyChild2_ByteLength, false, false, null);
                
                _MyChild2 = DeserializationFactory.Instance.CreateBaseOrDerivedType(1013, (c, p) => new ExampleChild(c, p), childData); 
            }
            
            _MyChild2_Accessed = true;
        }
        
        
        List<Example> _MyLazinatorList;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Example> MyLazinatorList
        {
            get
            {
                if (!_MyLazinatorList_Accessed)
                {
                    Lazinate_MyLazinatorList();
                } 
                return _MyLazinatorList;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyLazinatorList = value;
                _MyLazinatorList_Dirty = true;
                _MyLazinatorList_Accessed = true;
            }
        }
        bool _MyLazinatorList_Accessed;
        private void Lazinate_MyLazinatorList()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyLazinatorList = default(List<Example>);
                _MyLazinatorList_Dirty = true; 
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyLazinatorList_ByteIndex, _MyLazinatorList_ByteLength, false, false, null);
                _MyLazinatorList = ConvertFromBytes_List_GExample_g(childData);
            }
            
            _MyLazinatorList_Accessed = true;
        }
        
        
        private bool _MyLazinatorList_Dirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool MyLazinatorList_Dirty
        {
            get => _MyLazinatorList_Dirty;
            set
            {
                if (_MyLazinatorList_Dirty != value)
                {
                    _MyLazinatorList_Dirty = value;
                }
                if (value && !IsDirty)
                {
                    IsDirty = true;
                }
            }
        }
        
        List<Int32> _MyListValues;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Int32> MyListValues
        {
            get
            {
                if (!_MyListValues_Accessed)
                {
                    Lazinate_MyListValues();
                }
                IsDirty = true; 
                return _MyListValues;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyListValues = value;
                _MyListValues_Accessed = true;
            }
        }
        bool _MyListValues_Accessed;
        private void Lazinate_MyListValues()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyListValues = default(List<Int32>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyListValues_ByteIndex, _MyListValues_ByteLength, false, false, null);
                _MyListValues = ConvertFromBytes_List_Gint_g(childData);
            }
            
            _MyListValues_Accessed = true;
        }
        
        
        (NonLazinatorClass myitem1, Int32? myitem2) _MyTuple;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (NonLazinatorClass myitem1, Int32? myitem2) MyTuple
        {
            get
            {
                if (!_MyTuple_Accessed)
                {
                    Lazinate_MyTuple();
                }
                IsDirty = true; 
                return _MyTuple;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyTuple = value;
                _MyTuple_Accessed = true;
            }
        }
        bool _MyTuple_Accessed;
        private void Lazinate_MyTuple()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyTuple = default((NonLazinatorClass myitem1, Int32? myitem2));
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyTuple_ByteIndex, _MyTuple_ByteLength, false, false, null);
                _MyTuple = ConvertFromBytes__PNonLazinatorClass_C32myitem1_c_C32int_n_C32myitem2_p(childData);
            }
            
            _MyTuple_Accessed = true;
        }
        
        
        /* Serialization, deserialization, and object relationships */
        
        public ExampleStructContainingClasses(IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren) : this()
        {
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public ExampleStructContainingClasses(LazinatorMemory serializedBytes, ILazinator parent = null) : this()
        {
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public LazinatorParentsCollection LazinatorParents { get; set; }
        
        public IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialMemory.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            int uniqueID = span.ToDecompressedInt32(ref bytesSoFar);
            if (uniqueID != LazinatorUniqueID)
            {
                ThrowHelper.ThrowFormatException();
            }
            
            int lazinatorLibraryVersion = span.ToDecompressedInt32(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt32(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            LazinatorMemoryStorage.WriteToBinaryBuffer(writer);
            return writer.LazinatorMemory;
        }
        
        LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            ExampleStructContainingClasses clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new ExampleStructContainingClasses(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (ExampleStructContainingClasses)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, false, this);
                clone = new ExampleStructContainingClasses(bytes);
            }
            return clone;
        }
        
        public ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            ExampleStructContainingClasses typedClone = (ExampleStructContainingClasses) clone;
            typedClone.MyBool = MyBool;
            typedClone.MyChar = MyChar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (MyChild1 == null)
                {
                    typedClone.MyChild1 = null;
                }
                else
                {
                    typedClone.MyChild1 = (ExampleChild) MyChild1.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (MyChild2 == null)
                {
                    typedClone.MyChild2 = null;
                }
                else
                {
                    typedClone.MyChild2 = (ExampleChild) MyChild2.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            typedClone.MyLazinatorList = CloneOrChange_List_GExample_g(MyLazinatorList, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyListValues = CloneOrChange_List_Gint_g(MyListValues, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyTuple = CloneOrChange__PNonLazinatorClass_C32myitem1_c_C32int_n_C32myitem2_p(MyTuple, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            typedClone.IsDirty = false;
            return typedClone;
        }
        
        public bool HasChanged { get; set; }
        
        bool _IsDirty;
        public bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        bool _DescendantHasChanged;
        public bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged || (_MyChild1_Accessed && _MyChild1 != null && (MyChild1.HasChanged || MyChild1.DescendantHasChanged)) || (_MyChild2_Accessed && _MyChild2 != null && (MyChild2.HasChanged || MyChild2.DescendantHasChanged));
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        bool _DescendantIsDirty;
        public bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty || (_MyChild1_Accessed && _MyChild1 != null && (MyChild1.IsDirty || MyChild1.DescendantIsDirty)) || (_MyChild2_Accessed && _MyChild2 != null && (MyChild2.IsDirty || MyChild2.DescendantIsDirty));
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        
        public void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorMemoryStorage.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                LazinatorMemoryStorage.WriteToBinaryBuffer(writer);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorMemoryStorage.Length;
        }
        
        public bool NonBinaryHash32 => false;
        
        
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        public IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _MyChild1_Accessed) && MyChild1 == null)
            {
                yield return ("MyChild1", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && MyChild1 != null) || (_MyChild1_Accessed && _MyChild1 != null))
                {
                    bool isMatch_MyChild1 = matchCriterion == null || matchCriterion(MyChild1);
                    bool shouldExplore_MyChild1 = exploreCriterion == null || exploreCriterion(MyChild1);
                    if (isMatch_MyChild1)
                    {
                        yield return ("MyChild1", MyChild1);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_MyChild1) && shouldExplore_MyChild1)
                    {
                        foreach (var toYield in MyChild1.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("MyChild1" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _MyChild2_Accessed) && MyChild2 == null)
            {
                yield return ("MyChild2", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && MyChild2 != null) || (_MyChild2_Accessed && _MyChild2 != null))
                {
                    bool isMatch_MyChild2 = matchCriterion == null || matchCriterion(MyChild2);
                    bool shouldExplore_MyChild2 = exploreCriterion == null || exploreCriterion(MyChild2);
                    if (isMatch_MyChild2)
                    {
                        yield return ("MyChild2", MyChild2);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_MyChild2) && shouldExplore_MyChild2)
                    {
                        foreach (var toYield in MyChild2.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("MyChild2" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            yield break;
        }
        
        
        public IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            yield return ("MyBool", (object)MyBool);
            yield return ("MyChar", (object)MyChar);
            yield return ("MyLazinatorList", (object)MyLazinatorList);
            yield return ("MyListValues", (object)MyListValues);
            yield return ("MyTuple", (object)MyTuple);
            yield break;
        }
        
        public ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            if ((!exploreOnlyDeserializedChildren && MyChild1 != null) || (_MyChild1_Accessed && _MyChild1 != null))
            {
                _MyChild1 = (ExampleChild) _MyChild1.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && MyChild2 != null) || (_MyChild2_Accessed && _MyChild2 != null))
            {
                _MyChild2 = (ExampleChild) _MyChild2.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && MyLazinatorList != null) || (_MyLazinatorList_Accessed && _MyLazinatorList != null))
            {
                _MyLazinatorList = (List<Example>) CloneOrChange_List_GExample_g(_MyLazinatorList, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && MyListValues != null) || (_MyListValues_Accessed && _MyListValues != null))
            {
                _MyListValues = (List<Int32>) CloneOrChange_List_Gint_g(_MyListValues, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            var deserialized_MyTuple = MyTuple;
            _MyTuple = ((NonLazinatorClass myitem1, Int32? myitem2)) CloneOrChange__PNonLazinatorClass_C32myitem1_c_C32int_n_C32myitem2_p(_MyTuple, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        
        public void FreeInMemoryObjects()
        {
            _MyChild1 = default;
            _MyChild2 = default;
            _MyLazinatorList = default;
            _MyListValues = default;
            _MyTuple = default;
            _MyChild1_Accessed = _MyChild2_Accessed = _MyLazinatorList_Accessed = _MyListValues_Accessed = _MyTuple_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        /* Conversion */
        
        public int LazinatorUniqueID => 1016;
        
        bool ContainsOpenGenericParameters => false;
        public LazinatorGenericIDType LazinatorGenericID => default;
        
        
        private bool _LazinatorObjectVersionChanged;
        private int _LazinatorObjectVersionOverride;
        public int LazinatorObjectVersion
        {
            get => _LazinatorObjectVersionChanged ? _LazinatorObjectVersionOverride : 0;
            set
            {
                _LazinatorObjectVersionOverride = value;
                _LazinatorObjectVersionChanged = true;
            }
        }
        
        
        public void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialMemory.Span;
            _MyBool = span.ToBoolean(ref bytesSoFar);
            _MyChar = span.ToChar(ref bytesSoFar);
            _MyChild1_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            _MyChild2_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            _MyLazinatorList_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _MyListValues_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _MyTuple_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _ExampleStructContainingClasses_EndByteIndex = bytesSoFar;
        }
        
        public void SerializeExistingBuffer(BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
            {
                updateStoredBuffer = false;
            }
            int startPosition = writer.Position;
            WritePropertiesIntoBuffer(writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
            if (updateStoredBuffer)
            {
                UpdateStoredBuffer(writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
            }
        }
        
        public void UpdateStoredBuffer(BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
        {
            _IsDirty = false;
            if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                _DescendantIsDirty = false;
                if (updateDeserializedChildren)
                {
                    UpdateDeserializedChildren(writer, startPosition);
                }
                
            }
            else
            {
                ThrowHelper.ThrowCannotUpdateStoredBuffer();
            }
            
            var newBuffer = writer.Slice(startPosition, length);
            LazinatorMemoryStorage = newBuffer;
        }
        
        void UpdateDeserializedChildren(BinaryBufferWriter writer, int startPosition)
        {
            if (_MyChild1_Accessed && _MyChild1 != null)
            {
                MyChild1.UpdateStoredBuffer(writer, startPosition + _MyChild1_ByteIndex + sizeof(int), _MyChild1_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            
            if (_MyChild2_Accessed && _MyChild2 != null)
            {
                MyChild2.UpdateStoredBuffer(writer, startPosition + _MyChild2_ByteIndex + sizeof(int), _MyChild2_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            
            if (_MyLazinatorList_Accessed && _MyLazinatorList != null)
            {
                _MyLazinatorList = (List<Example>) CloneOrChange_List_GExample_g(_MyLazinatorList, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_MyListValues_Accessed && _MyListValues != null)
            {
                _MyListValues = (List<Int32>) CloneOrChange_List_Gint_g(_MyListValues, l => l.RemoveBufferInHierarchy(), true);
            }
            _MyTuple = ((NonLazinatorClass myitem1, Int32? myitem2)) CloneOrChange__PNonLazinatorClass_C32myitem1_c_C32int_n_C32myitem2_p(_MyTuple, l => l.RemoveBufferInHierarchy(), true);}
            
            
            void WritePropertiesIntoBuffer(BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
            {
                int startPosition = writer.Position;
                int startOfObjectPosition = 0;
                // header information
                if (includeUniqueID)
                {
                    CompressedIntegralTypes.WriteCompressedInt(writer, LazinatorUniqueID);
                }
                
                CompressedIntegralTypes.WriteCompressedInt(writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                CompressedIntegralTypes.WriteCompressedInt(writer, LazinatorObjectVersion);
                writer.Write((byte)includeChildrenMode);
                // write properties
                WriteUncompressedPrimitives.WriteBool(writer, _MyBool);
                EncodeCharAndString.WriteCharInTwoBytes(writer, _MyChar);
                startOfObjectPosition = writer.Position;
                if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                {
                    if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyChild1_Accessed)
                    {
                        var deserialized = MyChild1;
                    }
                    var serializedBytesCopy = LazinatorMemoryStorage;
                    var byteIndexCopy = _MyChild1_ByteIndex;
                    var byteLengthCopy = _MyChild1_ByteLength;
                    WriteChild(writer, ref _MyChild1, includeChildrenMode, _MyChild1_Accessed, () => GetChildSlice(serializedBytesCopy, byteIndexCopy, byteLengthCopy, false, false, null), verifyCleanness, updateStoredBuffer, false, false, null);
                }
                
                if (updateStoredBuffer)
                {
                    _MyChild1_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                {
                    if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyChild2_Accessed)
                    {
                        var deserialized = MyChild2;
                    }
                    var serializedBytesCopy = LazinatorMemoryStorage;
                    var byteIndexCopy = _MyChild2_ByteIndex;
                    var byteLengthCopy = _MyChild2_ByteLength;
                    WriteChild(writer, ref _MyChild2, includeChildrenMode, _MyChild2_Accessed, () => GetChildSlice(serializedBytesCopy, byteIndexCopy, byteLengthCopy, false, false, null), verifyCleanness, updateStoredBuffer, false, false, null);
                }
                
                if (updateStoredBuffer)
                {
                    _MyChild2_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyLazinatorList_Accessed)
                {
                    var deserialized = MyLazinatorList;
                }
                var serializedBytesCopy_MyLazinatorList = LazinatorMemoryStorage;
                var byteIndexCopy_MyLazinatorList = _MyLazinatorList_ByteIndex;
                var byteLengthCopy_MyLazinatorList = _MyLazinatorList_ByteLength;
                var copy_MyLazinatorList = _MyLazinatorList;
                WriteNonLazinatorObject(
                nonLazinatorObject: _MyLazinatorList, isBelievedDirty: MyLazinatorList_Dirty || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _MyLazinatorList_Accessed, writer: writer,
                getChildSliceForFieldFn: () => GetChildSlice(serializedBytesCopy_MyLazinatorList, byteIndexCopy_MyLazinatorList, byteLengthCopy_MyLazinatorList, false, false, null),
                verifyCleanness: verifyCleanness,
                binaryWriterAction: (BinaryBufferWriter w, bool v) =>
                ConvertToBytes_List_GExample_g(w, copy_MyLazinatorList, includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _MyLazinatorList_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyListValues_Accessed)
                {
                    var deserialized = MyListValues;
                }
                var serializedBytesCopy_MyListValues = LazinatorMemoryStorage;
                var byteIndexCopy_MyListValues = _MyListValues_ByteIndex;
                var byteLengthCopy_MyListValues = _MyListValues_ByteLength;
                var copy_MyListValues = _MyListValues;
                WriteNonLazinatorObject(
                nonLazinatorObject: _MyListValues, isBelievedDirty: _MyListValues_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _MyListValues_Accessed, writer: writer,
                getChildSliceForFieldFn: () => GetChildSlice(serializedBytesCopy_MyListValues, byteIndexCopy_MyListValues, byteLengthCopy_MyListValues, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (BinaryBufferWriter w, bool v) =>
                ConvertToBytes_List_Gint_g(w, copy_MyListValues, includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _MyListValues_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyTuple_Accessed)
                {
                    var deserialized = MyTuple;
                }
                var serializedBytesCopy_MyTuple = LazinatorMemoryStorage;
                var byteIndexCopy_MyTuple = _MyTuple_ByteIndex;
                var byteLengthCopy_MyTuple = _MyTuple_ByteLength;
                var copy_MyTuple = _MyTuple;
                WriteNonLazinatorObject(
                nonLazinatorObject: _MyTuple, isBelievedDirty: _MyTuple_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _MyTuple_Accessed, writer: writer,
                getChildSliceForFieldFn: () => GetChildSlice(serializedBytesCopy_MyTuple, byteIndexCopy_MyTuple, byteLengthCopy_MyTuple, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (BinaryBufferWriter w, bool v) =>
                ConvertToBytes__PNonLazinatorClass_C32myitem1_c_C32int_n_C32myitem2_p(w, copy_MyTuple, includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _MyTuple_ByteIndex = startOfObjectPosition - startPosition;
                }
                if (updateStoredBuffer)
                {
                    _ExampleStructContainingClasses_EndByteIndex = writer.Position - startPosition;
                }
            }
            
            /* Conversion of supported collections and tuples */
            
            private static List<Example> ConvertFromBytes_List_GExample_g(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default(List<Example>);
                }
                ReadOnlySpan<byte> span = storage.InitialMemory.Span;
                int bytesSoFar = 0;
                int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
                
                List<Example> collection = new List<Example>(collectionLength);
                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                {
                    int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                    if (lengthCollectionMember == 0)
                    {
                        collection.Add(null);
                    }
                    else
                    {
                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                        var item = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                        collection.Add(item);
                    }
                    bytesSoFar += lengthCollectionMember;
                }
                
                return collection;
            }
            
            private static void ConvertToBytes_List_GExample_g(BinaryBufferWriter writer, List<Example> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == default(List<Example>))
                {
                    return;
                }
                CompressedIntegralTypes.WriteCompressedInt(writer, itemToConvert.Count);
                int itemToConvertCount = itemToConvert.Count;
                for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                {
                    if (itemToConvert[itemIndex] == null)
                    {
                        writer.Write((uint)0);
                    }
                    else 
                    {
                        
                        void action(BinaryBufferWriter w) => itemToConvert[itemIndex].SerializeExistingBuffer(w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                        WriteToBinaryWithIntLengthPrefix(writer, action);
                    }
                    
                }
            }
            
            private static List<Example> CloneOrChange_List_GExample_g(List<Example> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                if (itemToClone == null)
                {
                    return default;
                }
                
                int collectionLength = itemToClone.Count;
                List<Example> collection = avoidCloningIfPossible ? itemToClone : new List<Example>(collectionLength);
                int itemToCloneCount = itemToClone.Count;
                for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                {
                    if (avoidCloningIfPossible)
                    {
                        if (itemToClone[itemIndex] != null)
                        {
                            itemToClone[itemIndex] = (Example) (cloneOrChangeFunc(itemToClone[itemIndex]));
                        }
                        continue;
                    }
                    if (itemToClone[itemIndex] == null)
                    {
                        collection.Add(null);
                    }
                    else
                    {
                        var itemCopied = (Example) (cloneOrChangeFunc(itemToClone[itemIndex]));
                        collection.Add(itemCopied);
                    }
                    
                }
                return collection;
            }
            
            private static List<Int32> ConvertFromBytes_List_Gint_g(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default(List<Int32>);
                }
                ReadOnlySpan<byte> span = storage.InitialMemory.Span;
                int bytesSoFar = 0;
                int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
                
                List<Int32> collection = new List<Int32>(collectionLength);
                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                {
                    int item = span.ToDecompressedInt32(ref bytesSoFar);
                    collection.Add(item);
                }
                
                return collection;
            }
            
            private static void ConvertToBytes_List_Gint_g(BinaryBufferWriter writer, List<Int32> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == default(List<Int32>))
                {
                    return;
                }
                CompressedIntegralTypes.WriteCompressedInt(writer, itemToConvert.Count);
                int itemToConvertCount = itemToConvert.Count;
                for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                {
                    CompressedIntegralTypes.WriteCompressedInt(writer, itemToConvert[itemIndex]);
                }
            }
            
            private static List<Int32> CloneOrChange_List_Gint_g(List<Int32> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                if (itemToClone == null)
                {
                    return default;
                }
                
                int collectionLength = itemToClone.Count;
                List<Int32> collection = new List<Int32>(collectionLength);
                int itemToCloneCount = itemToClone.Count;
                for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                {
                    var itemCopied = (int) itemToClone[itemIndex];
                    collection.Add(itemCopied);
                }
                return collection;
            }
            
            private static (NonLazinatorClass myitem1, Int32? myitem2) ConvertFromBytes__PNonLazinatorClass_C32myitem1_c_C32int_n_C32myitem2_p(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default;
                }
                ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
                
                int bytesSoFar = 0;
                
                NonLazinatorClass item1 = default(NonLazinatorClass);
                int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember_item1 != 0)
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                    item1 = NonLazinatorDirectConverter.ConvertFromBytes_NonLazinatorClass(childData);
                }
                bytesSoFar += lengthCollectionMember_item1;
                
                int? item2 = span.ToDecompressedNullableInt32(ref bytesSoFar);
                
                var itemToCreate = (item1, item2);
                
                return itemToCreate;
            }
            
            private static void ConvertToBytes__PNonLazinatorClass_C32myitem1_c_C32int_n_C32myitem2_p(BinaryBufferWriter writer, (NonLazinatorClass myitem1, Int32? myitem2) itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                
                if (itemToConvert.Item1 == null)
                {
                    writer.Write((uint)0);
                }
                else
                {
                    void actionItem1(BinaryBufferWriter w) => NonLazinatorDirectConverter.ConvertToBytes_NonLazinatorClass(w, itemToConvert.Item1, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(writer, actionItem1);
                }
                
                CompressedIntegralTypes.WriteCompressedNullableInt(writer, itemToConvert.Item2);
            }
            
            private static (NonLazinatorClass myitem1, Int32? myitem2) CloneOrChange__PNonLazinatorClass_C32myitem1_c_C32int_n_C32myitem2_p((NonLazinatorClass myitem1, Int32? myitem2) itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                return ((NonLazinatorClass) (itemToConvert.Item1), (int?) (itemToConvert.Item2));
            }
            
        }
    }
