/*Location1128*//*Location1113*///7f4e4c5d-f24a-4977-3d8c-2f073db7a4bf
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples
{/*Location1114*/
    using Lazinator.Attributes;/*Location1115*/
    using Lazinator.Buffers;/*Location1116*/
    using Lazinator.Core;/*Location1117*/
    using Lazinator.Exceptions;/*Location1118*/
    using Lazinator.Support;/*Location1119*/
    using LazinatorTests.Examples.Structs;/*Location1120*/
    using System;/*Location1121*/
    using System.Buffers;/*Location1122*/
    using System.Collections.Generic;/*Location1123*/
    using System.Diagnostics;/*Location1124*/
    using System.IO;/*Location1125*/
    using System.Linq;/*Location1126*/
    using System.Runtime.InteropServices;/*Location1127*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class ExampleChild : ILazinator
    {
        /*Location1129*/public bool IsStruct => false;
        
        /*Location1130*//* Property definitions */
        
        /*Location1131*/        protected int _ByteSpan_ByteIndex;
        /*Location1132*/        protected int _MyExampleGrandchild_ByteIndex;
        /*Location1133*/        protected int _MyWrapperContainer_ByteIndex;
        /*Location1134*/protected virtual int _ByteSpan_ByteLength => _MyExampleGrandchild_ByteIndex - _ByteSpan_ByteIndex;
        /*Location1135*/protected virtual int _MyExampleGrandchild_ByteLength => _MyWrapperContainer_ByteIndex - _MyExampleGrandchild_ByteIndex;
        /*Location1136*/private int _ExampleChild_EndByteIndex;
        /*Location1137*/protected virtual int _MyWrapperContainer_ByteLength => _ExampleChild_EndByteIndex - _MyWrapperContainer_ByteIndex;
        
        /*Location1138*/
        protected long _MyLong;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public long MyLong
        {
            get
            {
                return _MyLong;
            }
            set
            {
                IsDirty = true;
                _MyLong = value;
            }
        }
        /*Location1139*/
        protected short _MyShort;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public short MyShort
        {
            get
            {
                return _MyShort;
            }
            set
            {
                IsDirty = true;
                _MyShort = value;
            }
        }
        /*Location1140*/private ReadOnlyMemory<byte> _ByteSpan;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlySpan<byte> ByteSpan
        {
            get
            {
                if (!_ByteSpan_Accessed)
                {
                    LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ByteSpan_ByteIndex, _ByteSpan_ByteLength, false, false, null);
                    return childData.Span;
                }
                return _ByteSpan.Span;
            }
            set
            {
                IsDirty = true;
                _ByteSpan = new ReadOnlyMemory<byte>((value).ToArray());
                _ByteSpan_Accessed = true;
            }
        }
        protected bool _ByteSpan_Accessed;
        /*Location1141*/
        protected ExampleGrandchild _MyExampleGrandchild;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleGrandchild MyExampleGrandchild
        {
            get
            {
                if (!_MyExampleGrandchild_Accessed)
                {
                    Lazinate_MyExampleGrandchild();
                } 
                return _MyExampleGrandchild;
            }
            set
            {
                if (_MyExampleGrandchild != null)
                {
                    _MyExampleGrandchild.LazinatorParents = _MyExampleGrandchild.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _MyExampleGrandchild = value;
                _MyExampleGrandchild_Accessed = true;
            }
        }
        protected bool _MyExampleGrandchild_Accessed;
        private void Lazinate_MyExampleGrandchild()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyExampleGrandchild = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyExampleGrandchild_ByteIndex, _MyExampleGrandchild_ByteLength, false, false, null);
                
                _MyExampleGrandchild = DeserializationFactory.Instance.CreateBaseOrDerivedType(1079, (c, p) => new ExampleGrandchild(c, p), childData, this); 
            }
            
            _MyExampleGrandchild_Accessed = true;
        }
        
        /*Location1142*/
        protected WrapperContainer _MyWrapperContainer;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WrapperContainer MyWrapperContainer
        {
            get
            {
                if (!_MyWrapperContainer_Accessed)
                {
                    Lazinate_MyWrapperContainer();
                } 
                return _MyWrapperContainer;
            }
            set
            {
                if (_MyWrapperContainer != null)
                {
                    _MyWrapperContainer.LazinatorParents = _MyWrapperContainer.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _MyWrapperContainer = value;
                _MyWrapperContainer_Accessed = true;
            }
        }
        protected bool _MyWrapperContainer_Accessed;
        private void Lazinate_MyWrapperContainer()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyWrapperContainer = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyWrapperContainer_ByteIndex, _MyWrapperContainer_ByteLength, false, false, null);
                
                _MyWrapperContainer = DeserializationFactory.Instance.CreateBaseOrDerivedType(1048, (c, p) => new WrapperContainer(c, p), childData, this); 
            }
            
            _MyWrapperContainer_Accessed = true;
        }
        
        /*Location1148*/
        /* Serialization, deserialization, and object relationships */
        
        public ExampleChild(LazinatorConstructorEnum constructorEnum)
        {
        }
        
        public ExampleChild(LazinatorMemory serializedBytes, ILazinator parent = null)
        {
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            var clone = new ExampleChild(LazinatorConstructorEnum.LazinatorConstructor)
            {
                OriginalIncludeChildrenMode = includeChildrenMode
            };
            clone = CompleteClone(this, clone, includeChildrenMode, cloneBufferOptions);
            return clone;
        }
        
        public virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            ExampleChild typedClone = (ExampleChild) clone;
            /*Location1143*/typedClone.MyLong = MyLong;
            /*Location1144*/typedClone.MyShort = MyShort;
            /*Location1145*/typedClone.ByteSpan = CloneOrChange_ReadOnlySpan_Gbyte_g(ByteSpan, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location1146*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (MyExampleGrandchild == null)
                {
                    typedClone.MyExampleGrandchild = null;
                }
                else
                {
                    typedClone.MyExampleGrandchild = (ExampleGrandchild) MyExampleGrandchild.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location1147*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (MyWrapperContainer == null)
                {
                    typedClone.MyWrapperContainer = null;
                }
                else
                {
                    typedClone.MyWrapperContainer = (WrapperContainer) MyWrapperContainer.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        /*Location1149*/
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location1150*/public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location1151*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _MyExampleGrandchild_Accessed) && MyExampleGrandchild == null)
            {
                yield return ("MyExampleGrandchild", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && MyExampleGrandchild != null) || (_MyExampleGrandchild_Accessed && _MyExampleGrandchild != null))
                {
                    bool isMatch_MyExampleGrandchild = matchCriterion == null || matchCriterion(MyExampleGrandchild);
                    bool shouldExplore_MyExampleGrandchild = exploreCriterion == null || exploreCriterion(MyExampleGrandchild);
                    if (isMatch_MyExampleGrandchild)
                    {
                        yield return ("MyExampleGrandchild", MyExampleGrandchild);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_MyExampleGrandchild) && shouldExplore_MyExampleGrandchild)
                    {
                        foreach (var toYield in MyExampleGrandchild.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("MyExampleGrandchild" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location1152*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _MyWrapperContainer_Accessed) && MyWrapperContainer == null)
            {
                yield return ("MyWrapperContainer", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && MyWrapperContainer != null) || (_MyWrapperContainer_Accessed && _MyWrapperContainer != null))
                {
                    bool isMatch_MyWrapperContainer = matchCriterion == null || matchCriterion(MyWrapperContainer);
                    bool shouldExplore_MyWrapperContainer = exploreCriterion == null || exploreCriterion(MyWrapperContainer);
                    if (isMatch_MyWrapperContainer)
                    {
                        yield return ("MyWrapperContainer", MyWrapperContainer);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_MyWrapperContainer) && shouldExplore_MyWrapperContainer)
                    {
                        foreach (var toYield in MyWrapperContainer.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("MyWrapperContainer" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location1153*/yield break;
        }
        /*Location1154*/
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location1155*/yield return ("MyLong", (object)MyLong);
            /*Location1156*/yield return ("MyShort", (object)MyShort);
            /*Location1157*/yield return ("ByteSpan", (object)ByteSpan.ToString());
            /*Location1158*/yield break;
        }
        /*Location1159*/
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location1160*/if ((!exploreOnlyDeserializedChildren && MyExampleGrandchild != null) || (_MyExampleGrandchild_Accessed && _MyExampleGrandchild != null))
            {
                _MyExampleGrandchild = (ExampleGrandchild) _MyExampleGrandchild.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location1161*/if ((!exploreOnlyDeserializedChildren && MyWrapperContainer != null) || (_MyWrapperContainer_Accessed && _MyWrapperContainer != null))
            {
                _MyWrapperContainer = (WrapperContainer) _MyWrapperContainer.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location1162*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_ByteSpan = ByteSpan;
                if (!_ByteSpan_Accessed)
                {
                    ByteSpan = deserialized_ByteSpan;
                }
            }
            /*Location1163*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location1164*/
        public virtual void FreeInMemoryObjects()
        {
            _ByteSpan = default;
            _MyExampleGrandchild = default;
            _MyWrapperContainer = default;
            _ByteSpan_Accessed = _MyExampleGrandchild_Accessed = _MyWrapperContainer_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location1165*/
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1013;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location1166*/public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location1167*/_MyLong = span.ToDecompressedLong(ref bytesSoFar);
            /*Location1168*/_MyShort = span.ToDecompressedShort(ref bytesSoFar);
            /*Location1169*/_ByteSpan_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location1170*/_MyExampleGrandchild_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location1171*/_MyWrapperContainer_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location1172*/_ExampleChild_EndByteIndex = bytesSoFar;
            /*Location1173*/        }
            
            /*Location1174*/public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location1175*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location1176*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location1177*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location1178*/}
                    /*Location1179*/}
                    /*Location1180*/
                    public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location1181*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location1182*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location1183*/}
                                /*Location1184*//*Location1185*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location1186*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location1187*/}
                            /*Location1188*/
                            protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                /*Location1189*/if (_MyExampleGrandchild_Accessed && _MyExampleGrandchild != null)
                                {
                                    MyExampleGrandchild.UpdateStoredBuffer(ref writer, startPosition + _MyExampleGrandchild_ByteIndex + sizeof(int), _MyExampleGrandchild_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location1190*/if (_MyWrapperContainer_Accessed && _MyWrapperContainer != null)
                                {
                                    MyWrapperContainer.UpdateStoredBuffer(ref writer, startPosition + _MyWrapperContainer_ByteIndex + sizeof(int), _MyWrapperContainer_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location1191*/}
                                
                                /*Location1192*/
                                protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    int startPosition = writer.Position;
                                    int startOfObjectPosition = 0;
                                    // header information
                                    /*Location1193*/if (includeUniqueID)
                                    {
                                        if (!ContainsOpenGenericParameters)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                        }
                                        else
                                        {
                                            WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                                        }
                                    }
                                    /*Location1194*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                    writer.Write((byte)includeChildrenMode);
                                    /*Location1195*/// write properties
                                    /*Location1196*/CompressedIntegralTypes.WriteCompressedLong(ref writer, _MyLong);
                                    /*Location1197*/CompressedIntegralTypes.WriteCompressedShort(ref writer, _MyShort);
                                    /*Location1198*/startOfObjectPosition = writer.Position;
                                    /*Location1199*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ByteSpan_Accessed)
                                    {
                                        var deserialized = ByteSpan;
                                    }
                                    /*Location1200*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _ByteSpan, isBelievedDirty: _ByteSpan_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _ByteSpan_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ByteSpan_ByteIndex, _ByteSpan_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_ReadOnlySpan_Gbyte_g(ref w, _ByteSpan.Span,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location1201*/if (updateStoredBuffer)
                                    {
                                        _ByteSpan_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location1202*/startOfObjectPosition = writer.Position;
                                    /*Location1203*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyExampleGrandchild_Accessed)
                                        {
                                            var deserialized = MyExampleGrandchild;
                                        }
                                        WriteChild(ref writer, ref _MyExampleGrandchild, includeChildrenMode, _MyExampleGrandchild_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _MyExampleGrandchild_ByteIndex, _MyExampleGrandchild_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location1204*/if (updateStoredBuffer)
                                    {
                                        _MyExampleGrandchild_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location1205*/startOfObjectPosition = writer.Position;
                                    /*Location1206*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyWrapperContainer_Accessed)
                                        {
                                            var deserialized = MyWrapperContainer;
                                        }
                                        WriteChild(ref writer, ref _MyWrapperContainer, includeChildrenMode, _MyWrapperContainer_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _MyWrapperContainer_ByteIndex, _MyWrapperContainer_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location1207*/if (updateStoredBuffer)
                                    {
                                        _MyWrapperContainer_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location1208*/if (updateStoredBuffer)
                                    {
                                        /*Location1209*/_ExampleChild_EndByteIndex = writer.Position - startPosition;
                                        /*Location1210*/}
                                        /*Location1211*/}
                                        /*Location1212*/
                                        /* Conversion of supported collections and tuples */
                                        /*Location1213*/
                                        private static void ConvertToBytes_ReadOnlySpan_Gbyte_g(ref BinaryBufferWriter writer, ReadOnlySpan<byte> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            ReadOnlySpan<byte> toConvert = (itemToConvert);
                                            for (int i = 0; i < toConvert.Length; i++)
                                            {
                                                writer.Write(toConvert[i]);
                                            }
                                        }
                                        /*Location1214*/private static ReadOnlySpan<byte> CloneOrChange_ReadOnlySpan_Gbyte_g(ReadOnlySpan<byte> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            var clone = new Span<byte>(new byte[itemToClone.Length * sizeof(byte)]);
                                            itemToClone.CopyTo(clone);
                                            return clone;
                                        }
                                        /*Location1215*/
                                    }
                                }
