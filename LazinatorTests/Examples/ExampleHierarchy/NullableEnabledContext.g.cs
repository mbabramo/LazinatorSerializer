//e9d768b2-b305-54c6-20f9-7522e0cf9c3d
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
namespace LazinatorTests.Examples.ExampleHierarchy
{
    using Lazinator.Attributes;
    using Lazinator.Buffers;
    using Lazinator.Core;
    using Lazinator.Exceptions;
    using Lazinator.Support;
    using LazinatorCollections;
    using LazinatorTests.Examples;
    using LazinatorTests.Examples.Structs;
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class NullableEnabledContext : ILazinator
    {
        public bool IsStruct => false;
        
        /* Property definitions */
        
        protected int _ByteMemory_ByteIndex;
        protected int _ByteMemoryNullable_ByteIndex;
        protected int _ByteReadOnlyMemory_ByteIndex;
        protected int _ByteReadOnlyMemoryNullable_ByteIndex;
        protected int _ByteReadOnlySpan_ByteIndex;
        protected int _DictionaryWithNonNullable_ByteIndex;
        protected int _DictionaryWithNullable_ByteIndex;
        protected int _ExplicitlyNullable_ByteIndex;
        protected int _ExplicitlyNullableInterface_ByteIndex;
        protected int _LazinatorListNonNullable_ByteIndex;
        protected int _LazinatorListNullable_ByteIndex;
        protected int _MyStruct_ByteIndex;
        protected int _NonNullableArray_ByteIndex;
        protected int _NonNullableClass_ByteIndex;
        protected int _NonNullableInterface_ByteIndex;
        protected int _NonNullableListOfNonNullables_ByteIndex;
        protected int _NonNullableListOfNullables_ByteIndex;
        protected int _NonNullableQueue_ByteIndex;
        protected int _NonNullableStack_ByteIndex;
        protected int _NullableArray_ByteIndex;
        protected int _NullableListOfNonNullables_ByteIndex;
        protected int _NullableListOfNullables_ByteIndex;
        protected int _NullableQueue_ByteIndex;
        protected int _NullableStack_ByteIndex;
        protected int _RegularTupleWithNonNullable_ByteIndex;
        protected int _RegularTupleWithNullable_ByteIndex;
        protected int _ValueTupleWithNonNullable_ByteIndex;
        protected int _ValueTupleWithNullable_ByteIndex;
        protected virtual int _ByteMemory_ByteLength => _ByteMemoryNullable_ByteIndex - _ByteMemory_ByteIndex;
        protected virtual int _ByteMemoryNullable_ByteLength => _ByteReadOnlyMemory_ByteIndex - _ByteMemoryNullable_ByteIndex;
        protected virtual int _ByteReadOnlyMemory_ByteLength => _ByteReadOnlyMemoryNullable_ByteIndex - _ByteReadOnlyMemory_ByteIndex;
        protected virtual int _ByteReadOnlyMemoryNullable_ByteLength => _ByteReadOnlySpan_ByteIndex - _ByteReadOnlyMemoryNullable_ByteIndex;
        protected virtual int _ByteReadOnlySpan_ByteLength => _DictionaryWithNonNullable_ByteIndex - _ByteReadOnlySpan_ByteIndex;
        protected virtual int _DictionaryWithNonNullable_ByteLength => _DictionaryWithNullable_ByteIndex - _DictionaryWithNonNullable_ByteIndex;
        protected virtual int _DictionaryWithNullable_ByteLength => _ExplicitlyNullable_ByteIndex - _DictionaryWithNullable_ByteIndex;
        protected virtual int _ExplicitlyNullable_ByteLength => _ExplicitlyNullableInterface_ByteIndex - _ExplicitlyNullable_ByteIndex;
        protected virtual int _ExplicitlyNullableInterface_ByteLength => _LazinatorListNonNullable_ByteIndex - _ExplicitlyNullableInterface_ByteIndex;
        protected virtual int _LazinatorListNonNullable_ByteLength => _LazinatorListNullable_ByteIndex - _LazinatorListNonNullable_ByteIndex;
        protected virtual int _LazinatorListNullable_ByteLength => _MyStruct_ByteIndex - _LazinatorListNullable_ByteIndex;
        protected virtual int _MyStruct_ByteLength => _NonNullableArray_ByteIndex - _MyStruct_ByteIndex;
        protected virtual int _NonNullableArray_ByteLength => _NonNullableClass_ByteIndex - _NonNullableArray_ByteIndex;
        protected virtual int _NonNullableClass_ByteLength => _NonNullableInterface_ByteIndex - _NonNullableClass_ByteIndex;
        protected virtual int _NonNullableInterface_ByteLength => _NonNullableListOfNonNullables_ByteIndex - _NonNullableInterface_ByteIndex;
        protected virtual int _NonNullableListOfNonNullables_ByteLength => _NonNullableListOfNullables_ByteIndex - _NonNullableListOfNonNullables_ByteIndex;
        protected virtual int _NonNullableListOfNullables_ByteLength => _NonNullableQueue_ByteIndex - _NonNullableListOfNullables_ByteIndex;
        protected virtual int _NonNullableQueue_ByteLength => _NonNullableStack_ByteIndex - _NonNullableQueue_ByteIndex;
        protected virtual int _NonNullableStack_ByteLength => _NullableArray_ByteIndex - _NonNullableStack_ByteIndex;
        protected virtual int _NullableArray_ByteLength => _NullableListOfNonNullables_ByteIndex - _NullableArray_ByteIndex;
        protected virtual int _NullableListOfNonNullables_ByteLength => _NullableListOfNullables_ByteIndex - _NullableListOfNonNullables_ByteIndex;
        protected virtual int _NullableListOfNullables_ByteLength => _NullableQueue_ByteIndex - _NullableListOfNullables_ByteIndex;
        protected virtual int _NullableQueue_ByteLength => _NullableStack_ByteIndex - _NullableQueue_ByteIndex;
        protected virtual int _NullableStack_ByteLength => _RegularTupleWithNonNullable_ByteIndex - _NullableStack_ByteIndex;
        protected virtual int _RegularTupleWithNonNullable_ByteLength => _RegularTupleWithNullable_ByteIndex - _RegularTupleWithNonNullable_ByteIndex;
        protected virtual int _RegularTupleWithNullable_ByteLength => _ValueTupleWithNonNullable_ByteIndex - _RegularTupleWithNullable_ByteIndex;
        protected virtual int _ValueTupleWithNonNullable_ByteLength => _ValueTupleWithNullable_ByteIndex - _ValueTupleWithNonNullable_ByteIndex;
        private int _NullableEnabledContext_EndByteIndex;
        protected virtual int _ValueTupleWithNullable_ByteLength => _NullableEnabledContext_EndByteIndex - _ValueTupleWithNullable_ByteIndex;
        
        
        protected int _MyInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int MyInt
        {
            get
            {
                return _MyInt;
            }
            set
            {
                IsDirty = true;
                _MyInt = value;
            }
        }
        
        protected int? _MyNullableInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int? MyNullableInt
        {
            get
            {
                return _MyNullableInt;
            }
            set
            {
                IsDirty = true;
                _MyNullableInt = value;
            }
        }
        
        protected string _NonNullableString;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string NonNullableString
        {
            get
            {
                return _NonNullableString;
            }
            set
            {
                IsDirty = true;
                _NonNullableString = value;
            }
        }
        
        protected string? _NullableString;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string? NullableString
        {
            get
            {
                return _NullableString;
            }
            set
            {
                IsDirty = true;
                _NullableString = value;
            }
        }
        
        protected Memory<byte> _ByteMemory;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Memory<byte> ByteMemory
        {
            get
            {
                if (!_ByteMemory_Accessed)
                {
                    Lazinate_ByteMemory();
                }
                IsDirty = true; 
                return _ByteMemory;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _ByteMemory = value;
                _ByteMemory_Accessed = true;
            }
        }
        protected bool _ByteMemory_Accessed;
        private void Lazinate_ByteMemory()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ByteMemory_ByteIndex, _ByteMemory_ByteLength, false, false, null);
            _ByteMemory = ConvertFromBytes_Memory_Gbyte_g(childData);
            _ByteMemory_Accessed = true;
        }
        
        
        protected Memory<byte>? _ByteMemoryNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Memory<byte>? ByteMemoryNullable
        {
            get
            {
                if (!_ByteMemoryNullable_Accessed)
                {
                    Lazinate_ByteMemoryNullable();
                }
                IsDirty = true; 
                return _ByteMemoryNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _ByteMemoryNullable = value;
                _ByteMemoryNullable_Accessed = true;
            }
        }
        protected bool _ByteMemoryNullable_Accessed;
        private void Lazinate_ByteMemoryNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _ByteMemoryNullable = default(Memory<byte>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ByteMemoryNullable_ByteIndex, _ByteMemoryNullable_ByteLength, false, false, null);
                _ByteMemoryNullable = ConvertFromBytes_Memory_Gbyte_g_C63(childData);
            }
            
            _ByteMemoryNullable_Accessed = true;
        }
        
        
        protected ReadOnlyMemory<byte> _ByteReadOnlyMemory;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlyMemory<byte> ByteReadOnlyMemory
        {
            get
            {
                if (!_ByteReadOnlyMemory_Accessed)
                {
                    Lazinate_ByteReadOnlyMemory();
                }
                IsDirty = true; 
                return _ByteReadOnlyMemory;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _ByteReadOnlyMemory = value;
                _ByteReadOnlyMemory_Accessed = true;
            }
        }
        protected bool _ByteReadOnlyMemory_Accessed;
        private void Lazinate_ByteReadOnlyMemory()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ByteReadOnlyMemory_ByteIndex, _ByteReadOnlyMemory_ByteLength, false, false, null);
            _ByteReadOnlyMemory = ConvertFromBytes_ReadOnlyMemory_Gbyte_g(childData);
            _ByteReadOnlyMemory_Accessed = true;
        }
        
        
        protected ReadOnlyMemory<byte>? _ByteReadOnlyMemoryNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlyMemory<byte>? ByteReadOnlyMemoryNullable
        {
            get
            {
                if (!_ByteReadOnlyMemoryNullable_Accessed)
                {
                    Lazinate_ByteReadOnlyMemoryNullable();
                }
                IsDirty = true; 
                return _ByteReadOnlyMemoryNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _ByteReadOnlyMemoryNullable = value;
                _ByteReadOnlyMemoryNullable_Accessed = true;
            }
        }
        protected bool _ByteReadOnlyMemoryNullable_Accessed;
        private void Lazinate_ByteReadOnlyMemoryNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _ByteReadOnlyMemoryNullable = default(ReadOnlyMemory<byte>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ByteReadOnlyMemoryNullable_ByteIndex, _ByteReadOnlyMemoryNullable_ByteLength, false, false, null);
                _ByteReadOnlyMemoryNullable = ConvertFromBytes_ReadOnlyMemory_Gbyte_g_C63(childData);
            }
            
            _ByteReadOnlyMemoryNullable_Accessed = true;
        }
        
        private ReadOnlyMemory<byte> _ByteReadOnlySpan;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlySpan<byte> ByteReadOnlySpan
        {
            get
            {
                if (!_ByteReadOnlySpan_Accessed)
                {
                    LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ByteReadOnlySpan_ByteIndex, _ByteReadOnlySpan_ByteLength, false, false, null);
                    return childData.Span;
                }
                return _ByteReadOnlySpan.Span;
            }
            set
            {
                IsDirty = true;
                _ByteReadOnlySpan = new ReadOnlyMemory<byte>((value).ToArray());
                _ByteReadOnlySpan_Accessed = true;
            }
        }
        protected bool _ByteReadOnlySpan_Accessed;
        
        protected Dictionary<int, Example>? _DictionaryWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<int, Example> DictionaryWithNonNullable
        {
            get
            {
                if (!_DictionaryWithNonNullable_Accessed)
                {
                    Lazinate_DictionaryWithNonNullable();
                }
                IsDirty = true; 
                return _DictionaryWithNonNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _DictionaryWithNonNullable = value;
                _DictionaryWithNonNullable_Accessed = true;
            }
        }
        protected bool _DictionaryWithNonNullable_Accessed;
        private void Lazinate_DictionaryWithNonNullable()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _DictionaryWithNonNullable_ByteIndex, _DictionaryWithNonNullable_ByteLength, false, false, null);
            _DictionaryWithNonNullable = ConvertFromBytes_Dictionary_Gint_c_C32Example_g(childData);
            _DictionaryWithNonNullable_Accessed = true;
        }
        
        
        protected Dictionary<int, Example?>? _DictionaryWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<int, Example?> DictionaryWithNullable
        {
            get
            {
                if (!_DictionaryWithNullable_Accessed)
                {
                    Lazinate_DictionaryWithNullable();
                }
                IsDirty = true; 
                return _DictionaryWithNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _DictionaryWithNullable = value;
                _DictionaryWithNullable_Accessed = true;
            }
        }
        protected bool _DictionaryWithNullable_Accessed;
        private void Lazinate_DictionaryWithNullable()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _DictionaryWithNullable_ByteIndex, _DictionaryWithNullable_ByteLength, false, false, null);
            _DictionaryWithNullable = ConvertFromBytes_Dictionary_Gint_c_C32Example_C63_g(childData);
            _DictionaryWithNullable_Accessed = true;
        }
        
        
        protected Example? _ExplicitlyNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example? ExplicitlyNullable
        {
            get
            {
                if (!_ExplicitlyNullable_Accessed)
                {
                    Lazinate_ExplicitlyNullable();
                } 
                return _ExplicitlyNullable;
            }
            set
            {
                if (_ExplicitlyNullable != null)
                {
                    _ExplicitlyNullable.LazinatorParents = _ExplicitlyNullable.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ExplicitlyNullable = value;
                _ExplicitlyNullable_Accessed = true;
            }
        }
        protected bool _ExplicitlyNullable_Accessed;
        private void Lazinate_ExplicitlyNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _ExplicitlyNullable = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ExplicitlyNullable_ByteIndex, _ExplicitlyNullable_ByteLength, false, false, null);
                
                _ExplicitlyNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(1012, () => new Example(LazinatorConstructorEnum.LazinatorConstructor), childData, this); 
            }
            
            _ExplicitlyNullable_Accessed = true;
        }
        
        
        protected IExample? _ExplicitlyNullableInterface;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IExample? ExplicitlyNullableInterface
        {
            get
            {
                if (!_ExplicitlyNullableInterface_Accessed)
                {
                    Lazinate_ExplicitlyNullableInterface();
                } 
                return _ExplicitlyNullableInterface;
            }
            set
            {
                if (_ExplicitlyNullableInterface != null)
                {
                    _ExplicitlyNullableInterface.LazinatorParents = _ExplicitlyNullableInterface.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ExplicitlyNullableInterface = value;
                _ExplicitlyNullableInterface_Accessed = true;
            }
        }
        protected bool _ExplicitlyNullableInterface_Accessed;
        private void Lazinate_ExplicitlyNullableInterface()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _ExplicitlyNullableInterface = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ExplicitlyNullableInterface_ByteIndex, _ExplicitlyNullableInterface_ByteLength, false, false, null);
                
                _ExplicitlyNullableInterface = DeserializationFactory.Instance.CreateBasedOnType<IExample?>(childData, this); 
            }
            
            _ExplicitlyNullableInterface_Accessed = true;
        }
        
        
        protected LazinatorList<Example>? _LazinatorListNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorList<Example> LazinatorListNonNullable
        {
            get
            {
                if (!_LazinatorListNonNullable_Accessed)
                {
                    Lazinate_LazinatorListNonNullable();
                } 
                return _LazinatorListNonNullable ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                _ = value ?? throw new ArgumentNullException(nameof(value));
                if (_LazinatorListNonNullable != null)
                {
                    _LazinatorListNonNullable.LazinatorParents = _LazinatorListNonNullable.LazinatorParents.WithRemoved(this);
                }
                value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _LazinatorListNonNullable = value;
                _LazinatorListNonNullable_Accessed = true;
            }
        }
        protected bool _LazinatorListNonNullable_Accessed;
        private void Lazinate_LazinatorListNonNullable()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _LazinatorListNonNullable_ByteIndex, _LazinatorListNonNullable_ByteLength, false, false, null);
            
            _LazinatorListNonNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(201, () => new LazinatorList<Example>(LazinatorConstructorEnum.LazinatorConstructor), childData, this); 
            _LazinatorListNonNullable_Accessed = true;
        }
        
        
        protected LazinatorList<Example?>? _LazinatorListNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorList<Example?> LazinatorListNullable
        {
            get
            {
                if (!_LazinatorListNullable_Accessed)
                {
                    Lazinate_LazinatorListNullable();
                } 
                return _LazinatorListNullable ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                _ = value ?? throw new ArgumentNullException(nameof(value));
                if (_LazinatorListNullable != null)
                {
                    _LazinatorListNullable.LazinatorParents = _LazinatorListNullable.LazinatorParents.WithRemoved(this);
                }
                value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _LazinatorListNullable = value;
                _LazinatorListNullable_Accessed = true;
            }
        }
        protected bool _LazinatorListNullable_Accessed;
        private void Lazinate_LazinatorListNullable()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _LazinatorListNullable_ByteIndex, _LazinatorListNullable_ByteLength, false, false, null);
            
            _LazinatorListNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(201, () => new LazinatorList<Example?>(LazinatorConstructorEnum.LazinatorConstructor), childData, this); 
            _LazinatorListNullable_Accessed = true;
        }
        
        
        protected ExampleStructWithoutClass _MyStruct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleStructWithoutClass MyStruct
        {
            get
            {
                if (!_MyStruct_Accessed)
                {
                    Lazinate_MyStruct();
                } 
                return _MyStruct;
            }
            set
            {
                value.LazinatorParents = new LazinatorParentsCollection(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _MyStruct = value;
                _MyStruct_Accessed = true;
            }
        }
        protected bool _MyStruct_Accessed;
        private void Lazinate_MyStruct()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyStruct_ByteIndex, _MyStruct_ByteLength, false, false, null);
            _MyStruct = new ExampleStructWithoutClass()
            {
                LazinatorParents = new LazinatorParentsCollection(this)
            };
            _MyStruct.DeserializeLazinator(childData);
            _MyStruct_Accessed = true;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleStructWithoutClass MyStruct_Copy
        {
            get
            {
                if (!_MyStruct_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        return default(ExampleStructWithoutClass);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyStruct_ByteIndex, _MyStruct_ByteLength, false, false, null);
                        var toReturn = new ExampleStructWithoutClass();
                        toReturn.DeserializeLazinator(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                var cleanCopy = _MyStruct;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        protected Example[]? _NonNullableArray;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example[]? NonNullableArray
        {
            get
            {
                if (!_NonNullableArray_Accessed)
                {
                    Lazinate_NonNullableArray();
                }
                IsDirty = true; 
                return _NonNullableArray;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableArray = value;
                _NonNullableArray_Accessed = true;
            }
        }
        protected bool _NonNullableArray_Accessed;
        private void Lazinate_NonNullableArray()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NonNullableArray = default(Example[]?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableArray_ByteIndex, _NonNullableArray_ByteLength, false, false, null);
                _NonNullableArray = ConvertFromBytes_Example_B_b(childData);
            }
            
            _NonNullableArray_Accessed = true;
        }
        
        
        protected Example? _NonNullableClass;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example NonNullableClass
        {
            get
            {
                if (!_NonNullableClass_Accessed)
                {
                    Lazinate_NonNullableClass();
                } 
                return _NonNullableClass ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                _ = value ?? throw new ArgumentNullException(nameof(value));
                if (_NonNullableClass != null)
                {
                    _NonNullableClass.LazinatorParents = _NonNullableClass.LazinatorParents.WithRemoved(this);
                }
                value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableClass = value;
                _NonNullableClass_Accessed = true;
            }
        }
        protected bool _NonNullableClass_Accessed;
        private void Lazinate_NonNullableClass()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableClass_ByteIndex, _NonNullableClass_ByteLength, false, false, null);
            
            _NonNullableClass = DeserializationFactory.Instance.CreateBaseOrDerivedType(1012, () => new Example(LazinatorConstructorEnum.LazinatorConstructor), childData, this); 
            _NonNullableClass_Accessed = true;
        }
        
        
        protected IExample? _NonNullableInterface;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IExample NonNullableInterface
        {
            get
            {
                if (!_NonNullableInterface_Accessed)
                {
                    Lazinate_NonNullableInterface();
                } 
                return _NonNullableInterface ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                _ = value ?? throw new ArgumentNullException(nameof(value));
                if (_NonNullableInterface != null)
                {
                    _NonNullableInterface.LazinatorParents = _NonNullableInterface.LazinatorParents.WithRemoved(this);
                }
                value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableInterface = value;
                _NonNullableInterface_Accessed = true;
            }
        }
        protected bool _NonNullableInterface_Accessed;
        private void Lazinate_NonNullableInterface()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableInterface_ByteIndex, _NonNullableInterface_ByteLength, false, false, null);
            
            _NonNullableInterface = DeserializationFactory.Instance.CreateBasedOnType<IExample>(childData, this); 
            _NonNullableInterface_Accessed = true;
        }
        
        
        protected List<Example>? _NonNullableListOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Example> NonNullableListOfNonNullables
        {
            get
            {
                if (!_NonNullableListOfNonNullables_Accessed)
                {
                    Lazinate_NonNullableListOfNonNullables();
                }
                IsDirty = true; 
                return _NonNullableListOfNonNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableListOfNonNullables = value;
                _NonNullableListOfNonNullables_Accessed = true;
            }
        }
        protected bool _NonNullableListOfNonNullables_Accessed;
        private void Lazinate_NonNullableListOfNonNullables()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableListOfNonNullables_ByteIndex, _NonNullableListOfNonNullables_ByteLength, false, false, null);
            _NonNullableListOfNonNullables = ConvertFromBytes_List_GExample_g(childData);
            _NonNullableListOfNonNullables_Accessed = true;
        }
        
        
        protected List<Example?>? _NonNullableListOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Example?> NonNullableListOfNullables
        {
            get
            {
                if (!_NonNullableListOfNullables_Accessed)
                {
                    Lazinate_NonNullableListOfNullables();
                }
                IsDirty = true; 
                return _NonNullableListOfNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableListOfNullables = value;
                _NonNullableListOfNullables_Accessed = true;
            }
        }
        protected bool _NonNullableListOfNullables_Accessed;
        private void Lazinate_NonNullableListOfNullables()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableListOfNullables_ByteIndex, _NonNullableListOfNullables_ByteLength, false, false, null);
            _NonNullableListOfNullables = ConvertFromBytes_List_GExample_C63_g(childData);
            _NonNullableListOfNullables_Accessed = true;
        }
        
        
        protected Queue<Example>? _NonNullableQueue;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Queue<Example> NonNullableQueue
        {
            get
            {
                if (!_NonNullableQueue_Accessed)
                {
                    Lazinate_NonNullableQueue();
                }
                IsDirty = true; 
                return _NonNullableQueue;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableQueue = value;
                _NonNullableQueue_Accessed = true;
            }
        }
        protected bool _NonNullableQueue_Accessed;
        private void Lazinate_NonNullableQueue()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableQueue_ByteIndex, _NonNullableQueue_ByteLength, false, false, null);
            _NonNullableQueue = ConvertFromBytes_Queue_GExample_g(childData);
            _NonNullableQueue_Accessed = true;
        }
        
        
        protected Stack<Example>? _NonNullableStack;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Stack<Example> NonNullableStack
        {
            get
            {
                if (!_NonNullableStack_Accessed)
                {
                    Lazinate_NonNullableStack();
                }
                IsDirty = true; 
                return _NonNullableStack;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableStack = value;
                _NonNullableStack_Accessed = true;
            }
        }
        protected bool _NonNullableStack_Accessed;
        private void Lazinate_NonNullableStack()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableStack_ByteIndex, _NonNullableStack_ByteLength, false, false, null);
            _NonNullableStack = ConvertFromBytes_Stack_GExample_g(childData);
            _NonNullableStack_Accessed = true;
        }
        
        
        protected Example?[]? _NullableArray;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example?[]? NullableArray
        {
            get
            {
                if (!_NullableArray_Accessed)
                {
                    Lazinate_NullableArray();
                }
                IsDirty = true; 
                return _NullableArray;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableArray = value;
                _NullableArray_Accessed = true;
            }
        }
        protected bool _NullableArray_Accessed;
        private void Lazinate_NullableArray()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableArray = default(Example?[]?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableArray_ByteIndex, _NullableArray_ByteLength, false, false, null);
                _NullableArray = ConvertFromBytes_Example_C63_B_b(childData);
            }
            
            _NullableArray_Accessed = true;
        }
        
        
        protected List<Example>? _NullableListOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Example>? NullableListOfNonNullables
        {
            get
            {
                if (!_NullableListOfNonNullables_Accessed)
                {
                    Lazinate_NullableListOfNonNullables();
                }
                IsDirty = true; 
                return _NullableListOfNonNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableListOfNonNullables = value;
                _NullableListOfNonNullables_Accessed = true;
            }
        }
        protected bool _NullableListOfNonNullables_Accessed;
        private void Lazinate_NullableListOfNonNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableListOfNonNullables = default(List<Example>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableListOfNonNullables_ByteIndex, _NullableListOfNonNullables_ByteLength, false, false, null);
                _NullableListOfNonNullables = ConvertFromBytes_List_GExample_g_C63(childData);
            }
            
            _NullableListOfNonNullables_Accessed = true;
        }
        
        
        protected List<Example?>? _NullableListOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Example?>? NullableListOfNullables
        {
            get
            {
                if (!_NullableListOfNullables_Accessed)
                {
                    Lazinate_NullableListOfNullables();
                }
                IsDirty = true; 
                return _NullableListOfNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableListOfNullables = value;
                _NullableListOfNullables_Accessed = true;
            }
        }
        protected bool _NullableListOfNullables_Accessed;
        private void Lazinate_NullableListOfNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableListOfNullables = default(List<Example?>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableListOfNullables_ByteIndex, _NullableListOfNullables_ByteLength, false, false, null);
                _NullableListOfNullables = ConvertFromBytes_List_GExample_C63_g_C63(childData);
            }
            
            _NullableListOfNullables_Accessed = true;
        }
        
        
        protected Queue<Example?>? _NullableQueue;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Queue<Example?> NullableQueue
        {
            get
            {
                if (!_NullableQueue_Accessed)
                {
                    Lazinate_NullableQueue();
                }
                IsDirty = true; 
                return _NullableQueue;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableQueue = value;
                _NullableQueue_Accessed = true;
            }
        }
        protected bool _NullableQueue_Accessed;
        private void Lazinate_NullableQueue()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableQueue_ByteIndex, _NullableQueue_ByteLength, false, false, null);
            _NullableQueue = ConvertFromBytes_Queue_GExample_C63_g(childData);
            _NullableQueue_Accessed = true;
        }
        
        
        protected Stack<Example?>? _NullableStack;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Stack<Example?> NullableStack
        {
            get
            {
                if (!_NullableStack_Accessed)
                {
                    Lazinate_NullableStack();
                }
                IsDirty = true; 
                return _NullableStack;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableStack = value;
                _NullableStack_Accessed = true;
            }
        }
        protected bool _NullableStack_Accessed;
        private void Lazinate_NullableStack()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableStack_ByteIndex, _NullableStack_ByteLength, false, false, null);
            _NullableStack = ConvertFromBytes_Stack_GExample_C63_g(childData);
            _NullableStack_Accessed = true;
        }
        
        
        protected Tuple<Example, int>? _RegularTupleWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<Example, int>? RegularTupleWithNonNullable
        {
            get
            {
                if (!_RegularTupleWithNonNullable_Accessed)
                {
                    Lazinate_RegularTupleWithNonNullable();
                }
                IsDirty = true; 
                return _RegularTupleWithNonNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _RegularTupleWithNonNullable = value;
                _RegularTupleWithNonNullable_Accessed = true;
            }
        }
        protected bool _RegularTupleWithNonNullable_Accessed;
        private void Lazinate_RegularTupleWithNonNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _RegularTupleWithNonNullable = default(Tuple<Example, int>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _RegularTupleWithNonNullable_ByteIndex, _RegularTupleWithNonNullable_ByteLength, false, false, null);
                _RegularTupleWithNonNullable = ConvertFromBytes_Tuple_GExample_c_C32int_g(childData);
            }
            
            _RegularTupleWithNonNullable_Accessed = true;
        }
        
        
        protected Tuple<Example?, int>? _RegularTupleWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<Example?, int>? RegularTupleWithNullable
        {
            get
            {
                if (!_RegularTupleWithNullable_Accessed)
                {
                    Lazinate_RegularTupleWithNullable();
                }
                IsDirty = true; 
                return _RegularTupleWithNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _RegularTupleWithNullable = value;
                _RegularTupleWithNullable_Accessed = true;
            }
        }
        protected bool _RegularTupleWithNullable_Accessed;
        private void Lazinate_RegularTupleWithNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _RegularTupleWithNullable = default(Tuple<Example?, int>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _RegularTupleWithNullable_ByteIndex, _RegularTupleWithNullable_ByteLength, false, false, null);
                _RegularTupleWithNullable = ConvertFromBytes_Tuple_GExample_C63_c_C32int_g(childData);
            }
            
            _RegularTupleWithNullable_Accessed = true;
        }
        
        
        protected (Example, int) _ValueTupleWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (Example, int) ValueTupleWithNonNullable
        {
            get
            {
                if (!_ValueTupleWithNonNullable_Accessed)
                {
                    Lazinate_ValueTupleWithNonNullable();
                }
                IsDirty = true; 
                return _ValueTupleWithNonNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _ValueTupleWithNonNullable = value;
                _ValueTupleWithNonNullable_Accessed = true;
            }
        }
        protected bool _ValueTupleWithNonNullable_Accessed;
        private void Lazinate_ValueTupleWithNonNullable()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ValueTupleWithNonNullable_ByteIndex, _ValueTupleWithNonNullable_ByteLength, false, false, null);
            _ValueTupleWithNonNullable = ConvertFromBytes__PExample_c_C32int_p(childData);
            _ValueTupleWithNonNullable_Accessed = true;
        }
        
        
        protected (Example?, int) _ValueTupleWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (Example?, int) ValueTupleWithNullable
        {
            get
            {
                if (!_ValueTupleWithNullable_Accessed)
                {
                    Lazinate_ValueTupleWithNullable();
                }
                IsDirty = true; 
                return _ValueTupleWithNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _ValueTupleWithNullable = value;
                _ValueTupleWithNullable_Accessed = true;
            }
        }
        protected bool _ValueTupleWithNullable_Accessed;
        private void Lazinate_ValueTupleWithNullable()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ValueTupleWithNullable_ByteIndex, _ValueTupleWithNullable_ByteLength, false, false, null);
            _ValueTupleWithNullable = ConvertFromBytes__PExample_C63_c_C32int_p(childData);
            _ValueTupleWithNullable_Accessed = true;
        }
        
        
        /* Serialization, deserialization, and object relationships */
        
        public NullableEnabledContext(LazinatorConstructorEnum constructorEnum)
        {
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator? CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            var clone = new NullableEnabledContext(LazinatorConstructorEnum.LazinatorConstructor)
            {
                OriginalIncludeChildrenMode = includeChildrenMode
            };
            clone = CompleteClone(this, clone, includeChildrenMode, cloneBufferOptions);
            return clone;
        }
        
        public virtual ILazinator? AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            NullableEnabledContext typedClone = (NullableEnabledContext) clone;
            typedClone.MyInt = MyInt;
            typedClone.MyNullableInt = MyNullableInt;
            typedClone.NonNullableString = NonNullableString;
            typedClone.NullableString = NullableString;
            typedClone.ByteMemory = CloneOrChange_Memory_Gbyte_g(ByteMemory, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.ByteMemoryNullable = CloneOrChange_Memory_Gbyte_g_C63(ByteMemoryNullable, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.ByteReadOnlyMemory = CloneOrChange_ReadOnlyMemory_Gbyte_g(ByteReadOnlyMemory, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.ByteReadOnlyMemoryNullable = CloneOrChange_ReadOnlyMemory_Gbyte_g_C63(ByteReadOnlyMemoryNullable, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.ByteReadOnlySpan = CloneOrChange_ReadOnlySpan_Gbyte_g(ByteReadOnlySpan, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.DictionaryWithNonNullable = CloneOrChange_Dictionary_Gint_c_C32Example_g(DictionaryWithNonNullable, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.DictionaryWithNullable = CloneOrChange_Dictionary_Gint_c_C32Example_C63_g(DictionaryWithNullable, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (ExplicitlyNullable == null)
                {
                    typedClone.ExplicitlyNullable = null;
                }
                else
                {
                    typedClone.ExplicitlyNullable = (Example?) ExplicitlyNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (ExplicitlyNullableInterface == null)
                {
                    typedClone.ExplicitlyNullableInterface = null;
                }
                else
                {
                    typedClone.ExplicitlyNullableInterface = (IExample?) ExplicitlyNullableInterface.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.LazinatorListNonNullable = (LazinatorList<Example>) LazinatorListNonNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.LazinatorListNullable = (LazinatorList<Example?>) LazinatorListNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.MyStruct = (ExampleStructWithoutClass) MyStruct.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            
            typedClone.NonNullableArray = CloneOrChange_Example_B_b(NonNullableArray, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.NonNullableClass = (Example) NonNullableClass.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.NonNullableInterface = (IExample) NonNullableInterface.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            
            typedClone.NonNullableListOfNonNullables = CloneOrChange_List_GExample_g(NonNullableListOfNonNullables, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableListOfNullables = CloneOrChange_List_GExample_C63_g(NonNullableListOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableQueue = CloneOrChange_Queue_GExample_g(NonNullableQueue, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableStack = CloneOrChange_Stack_GExample_g(NonNullableStack, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableArray = CloneOrChange_Example_C63_B_b(NullableArray, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableListOfNonNullables = CloneOrChange_List_GExample_g_C63(NullableListOfNonNullables, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableListOfNullables = CloneOrChange_List_GExample_C63_g_C63(NullableListOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableQueue = CloneOrChange_Queue_GExample_C63_g(NullableQueue, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableStack = CloneOrChange_Stack_GExample_C63_g(NullableStack, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.RegularTupleWithNonNullable = CloneOrChange_Tuple_GExample_c_C32int_g(RegularTupleWithNonNullable, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.RegularTupleWithNullable = CloneOrChange_Tuple_GExample_C63_c_C32int_g(RegularTupleWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.ValueTupleWithNonNullable = CloneOrChange__PExample_c_C32int_p(ValueTupleWithNonNullable, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.ValueTupleWithNullable = CloneOrChange__PExample_C63_c_C32int_p(ValueTupleWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        
        public IEnumerable<ILazinator?> EnumerateLazinatorNodes(Func<ILazinator?, bool>? matchCriterion, bool stopExploringBelowMatch, Func<ILazinator?, bool>? exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        public virtual IEnumerable<(string propertyName, ILazinator? descendant)> EnumerateLazinatorDescendants(Func<ILazinator?, bool>? matchCriterion, bool stopExploringBelowMatch, Func<ILazinator?, bool>? exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ExplicitlyNullable_Accessed) && ExplicitlyNullable == null)
            {
                yield return ("ExplicitlyNullable", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ExplicitlyNullable != null) || (_ExplicitlyNullable_Accessed && _ExplicitlyNullable != null))
                {
                    bool isMatch_ExplicitlyNullable = matchCriterion == null || matchCriterion(ExplicitlyNullable);
                    bool shouldExplore_ExplicitlyNullable = exploreCriterion == null || exploreCriterion(ExplicitlyNullable);
                    if (isMatch_ExplicitlyNullable)
                    {
                        yield return ("ExplicitlyNullable", ExplicitlyNullable);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_ExplicitlyNullable) && shouldExplore_ExplicitlyNullable)
                    {
                        foreach (var toYield in ExplicitlyNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ExplicitlyNullable" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ExplicitlyNullableInterface_Accessed) && ExplicitlyNullableInterface == null)
            {
                yield return ("ExplicitlyNullableInterface", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ExplicitlyNullableInterface != null) || (_ExplicitlyNullableInterface_Accessed && _ExplicitlyNullableInterface != null))
                {
                    bool isMatch_ExplicitlyNullableInterface = matchCriterion == null || matchCriterion(ExplicitlyNullableInterface);
                    bool shouldExplore_ExplicitlyNullableInterface = exploreCriterion == null || exploreCriterion(ExplicitlyNullableInterface);
                    if (isMatch_ExplicitlyNullableInterface)
                    {
                        yield return ("ExplicitlyNullableInterface", ExplicitlyNullableInterface);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_ExplicitlyNullableInterface) && shouldExplore_ExplicitlyNullableInterface)
                    {
                        foreach (var toYield in ExplicitlyNullableInterface!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ExplicitlyNullableInterface" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _LazinatorListNonNullable_Accessed) && LazinatorListNonNullable == null)
            {
                yield return ("LazinatorListNonNullable", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && LazinatorListNonNullable != null) || (_LazinatorListNonNullable_Accessed && _LazinatorListNonNullable != null))
                {
                    bool isMatch_LazinatorListNonNullable = matchCriterion == null || matchCriterion(LazinatorListNonNullable);
                    bool shouldExplore_LazinatorListNonNullable = exploreCriterion == null || exploreCriterion(LazinatorListNonNullable);
                    if (isMatch_LazinatorListNonNullable)
                    {
                        yield return ("LazinatorListNonNullable", LazinatorListNonNullable);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_LazinatorListNonNullable) && shouldExplore_LazinatorListNonNullable)
                    {
                        foreach (var toYield in LazinatorListNonNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("LazinatorListNonNullable" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _LazinatorListNullable_Accessed) && LazinatorListNullable == null)
            {
                yield return ("LazinatorListNullable", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && LazinatorListNullable != null) || (_LazinatorListNullable_Accessed && _LazinatorListNullable != null))
                {
                    bool isMatch_LazinatorListNullable = matchCriterion == null || matchCriterion(LazinatorListNullable);
                    bool shouldExplore_LazinatorListNullable = exploreCriterion == null || exploreCriterion(LazinatorListNullable);
                    if (isMatch_LazinatorListNullable)
                    {
                        yield return ("LazinatorListNullable", LazinatorListNullable);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_LazinatorListNullable) && shouldExplore_LazinatorListNullable)
                    {
                        foreach (var toYield in LazinatorListNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("LazinatorListNullable" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            bool isMatch_MyStruct = matchCriterion == null || matchCriterion(MyStruct);
            bool shouldExplore_MyStruct = exploreCriterion == null || exploreCriterion(MyStruct);
            if (isMatch_MyStruct)
            {
                yield return ("MyStruct", MyStruct);
            }
            if ((!stopExploringBelowMatch || !isMatch_MyStruct) && shouldExplore_MyStruct)
            {
                foreach (var toYield in MyStruct!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("MyStruct" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _NonNullableClass_Accessed) && NonNullableClass == null)
            {
                yield return ("NonNullableClass", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && NonNullableClass != null) || (_NonNullableClass_Accessed && _NonNullableClass != null))
                {
                    bool isMatch_NonNullableClass = matchCriterion == null || matchCriterion(NonNullableClass);
                    bool shouldExplore_NonNullableClass = exploreCriterion == null || exploreCriterion(NonNullableClass);
                    if (isMatch_NonNullableClass)
                    {
                        yield return ("NonNullableClass", NonNullableClass);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_NonNullableClass) && shouldExplore_NonNullableClass)
                    {
                        foreach (var toYield in NonNullableClass!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("NonNullableClass" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _NonNullableInterface_Accessed) && NonNullableInterface == null)
            {
                yield return ("NonNullableInterface", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && NonNullableInterface != null) || (_NonNullableInterface_Accessed && _NonNullableInterface != null))
                {
                    bool isMatch_NonNullableInterface = matchCriterion == null || matchCriterion(NonNullableInterface);
                    bool shouldExplore_NonNullableInterface = exploreCriterion == null || exploreCriterion(NonNullableInterface);
                    if (isMatch_NonNullableInterface)
                    {
                        yield return ("NonNullableInterface", NonNullableInterface);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_NonNullableInterface) && shouldExplore_NonNullableInterface)
                    {
                        foreach (var toYield in NonNullableInterface!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("NonNullableInterface" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            yield break;
        }
        
        
        public virtual IEnumerable<(string propertyName, object? descendant)> EnumerateNonLazinatorProperties()
        {
            yield return ("MyInt", (object?)MyInt);
            yield return ("MyNullableInt", (object?)MyNullableInt);
            yield return ("NonNullableString", (object?)NonNullableString);
            yield return ("NullableString", (object?)NullableString);
            yield return ("ByteMemory", (object?)ByteMemory);
            yield return ("ByteMemoryNullable", (object?)ByteMemoryNullable);
            yield return ("ByteReadOnlyMemory", (object?)ByteReadOnlyMemory);
            yield return ("ByteReadOnlyMemoryNullable", (object?)ByteReadOnlyMemoryNullable);
            yield return ("ByteReadOnlySpan", (object?)ByteReadOnlySpan.ToString());
            yield return ("DictionaryWithNonNullable", (object?)DictionaryWithNonNullable);
            yield return ("DictionaryWithNullable", (object?)DictionaryWithNullable);
            yield return ("NonNullableArray", (object?)NonNullableArray);
            yield return ("NonNullableListOfNonNullables", (object?)NonNullableListOfNonNullables);
            yield return ("NonNullableListOfNullables", (object?)NonNullableListOfNullables);
            yield return ("NonNullableQueue", (object?)NonNullableQueue);
            yield return ("NonNullableStack", (object?)NonNullableStack);
            yield return ("NullableArray", (object?)NullableArray);
            yield return ("NullableListOfNonNullables", (object?)NullableListOfNonNullables);
            yield return ("NullableListOfNullables", (object?)NullableListOfNullables);
            yield return ("NullableQueue", (object?)NullableQueue);
            yield return ("NullableStack", (object?)NullableStack);
            yield return ("RegularTupleWithNonNullable", (object?)RegularTupleWithNonNullable);
            yield return ("RegularTupleWithNullable", (object?)RegularTupleWithNullable);
            yield return ("ValueTupleWithNonNullable", (object?)ValueTupleWithNonNullable);
            yield return ("ValueTupleWithNullable", (object?)ValueTupleWithNullable);
            yield break;
        }
        
        public virtual ILazinator? ForEachLazinator(Func<ILazinator?, ILazinator?>? changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            if ((!exploreOnlyDeserializedChildren && ExplicitlyNullable != null) || (_ExplicitlyNullable_Accessed && _ExplicitlyNullable != null))
            {
                _ExplicitlyNullable = (Example?) _ExplicitlyNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && ExplicitlyNullableInterface != null) || (_ExplicitlyNullableInterface_Accessed && _ExplicitlyNullableInterface != null))
            {
                _ExplicitlyNullableInterface = (IExample?) _ExplicitlyNullableInterface!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && LazinatorListNonNullable != null) || (_LazinatorListNonNullable_Accessed && _LazinatorListNonNullable != null))
            {
                _LazinatorListNonNullable = (LazinatorList<Example>) _LazinatorListNonNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && LazinatorListNullable != null) || (_LazinatorListNullable_Accessed && _LazinatorListNullable != null))
            {
                _LazinatorListNullable = (LazinatorList<Example?>) _LazinatorListNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            var deserialized_MyStruct = MyStruct;
            _MyStruct = (ExampleStructWithoutClass) _MyStruct!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);if ((!exploreOnlyDeserializedChildren && NonNullableClass != null) || (_NonNullableClass_Accessed && _NonNullableClass != null))
            {
                _NonNullableClass = (Example) _NonNullableClass!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && NonNullableInterface != null) || (_NonNullableInterface_Accessed && _NonNullableInterface != null))
            {
                _NonNullableInterface = (IExample) _NonNullableInterface!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && DictionaryWithNonNullable != null) || (_DictionaryWithNonNullable_Accessed && _DictionaryWithNonNullable != null))
            {
                _DictionaryWithNonNullable = (Dictionary<int, Example>) CloneOrChange_Dictionary_Gint_c_C32Example_g(_DictionaryWithNonNullable, l => l.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && DictionaryWithNullable != null) || (_DictionaryWithNullable_Accessed && _DictionaryWithNullable != null))
            {
                _DictionaryWithNullable = (Dictionary<int, Example?>) CloneOrChange_Dictionary_Gint_c_C32Example_C63_g(_DictionaryWithNullable, l => l.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NonNullableArray != null) || (_NonNullableArray_Accessed && _NonNullableArray != null))
            {
                _NonNullableArray = (Example[]?) CloneOrChange_Example_B_b(_NonNullableArray, l => l.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NonNullableListOfNonNullables != null) || (_NonNullableListOfNonNullables_Accessed && _NonNullableListOfNonNullables != null))
            {
                _NonNullableListOfNonNullables = (List<Example>) CloneOrChange_List_GExample_g(_NonNullableListOfNonNullables, l => l.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NonNullableListOfNullables != null) || (_NonNullableListOfNullables_Accessed && _NonNullableListOfNullables != null))
            {
                _NonNullableListOfNullables = (List<Example?>) CloneOrChange_List_GExample_C63_g(_NonNullableListOfNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NonNullableQueue != null) || (_NonNullableQueue_Accessed && _NonNullableQueue != null))
            {
                _NonNullableQueue = (Queue<Example>) CloneOrChange_Queue_GExample_g(_NonNullableQueue, l => l.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NonNullableStack != null) || (_NonNullableStack_Accessed && _NonNullableStack != null))
            {
                _NonNullableStack = (Stack<Example>) CloneOrChange_Stack_GExample_g(_NonNullableStack, l => l.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableArray != null) || (_NullableArray_Accessed && _NullableArray != null))
            {
                _NullableArray = (Example?[]?) CloneOrChange_Example_C63_B_b(_NullableArray, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableListOfNonNullables != null) || (_NullableListOfNonNullables_Accessed && _NullableListOfNonNullables != null))
            {
                _NullableListOfNonNullables = (List<Example>?) CloneOrChange_List_GExample_g_C63(_NullableListOfNonNullables, l => l.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableListOfNullables != null) || (_NullableListOfNullables_Accessed && _NullableListOfNullables != null))
            {
                _NullableListOfNullables = (List<Example?>?) CloneOrChange_List_GExample_C63_g_C63(_NullableListOfNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableQueue != null) || (_NullableQueue_Accessed && _NullableQueue != null))
            {
                _NullableQueue = (Queue<Example?>) CloneOrChange_Queue_GExample_C63_g(_NullableQueue, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableStack != null) || (_NullableStack_Accessed && _NullableStack != null))
            {
                _NullableStack = (Stack<Example?>) CloneOrChange_Stack_GExample_C63_g(_NullableStack, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && RegularTupleWithNonNullable != null) || (_RegularTupleWithNonNullable_Accessed && _RegularTupleWithNonNullable != null))
            {
                _RegularTupleWithNonNullable = (Tuple<Example, int>?) CloneOrChange_Tuple_GExample_c_C32int_g(_RegularTupleWithNonNullable, l => l.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && RegularTupleWithNullable != null) || (_RegularTupleWithNullable_Accessed && _RegularTupleWithNullable != null))
            {
                _RegularTupleWithNullable = (Tuple<Example?, int>?) CloneOrChange_Tuple_GExample_C63_c_C32int_g(_RegularTupleWithNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            var deserialized_ValueTupleWithNonNullable = ValueTupleWithNonNullable;
            _ValueTupleWithNonNullable = ((Example, int)) CloneOrChange__PExample_c_C32int_p(_ValueTupleWithNonNullable, l => l.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);var deserialized_ValueTupleWithNullable = ValueTupleWithNullable;
            _ValueTupleWithNullable = ((Example?, int)) CloneOrChange__PExample_C63_c_C32int_p(_ValueTupleWithNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_ByteMemory = ByteMemory;
            }
            if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_ByteMemoryNullable = ByteMemoryNullable;
            }
            if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_ByteReadOnlyMemory = ByteReadOnlyMemory;
            }
            if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_ByteReadOnlyMemoryNullable = ByteReadOnlyMemoryNullable;
            }
            if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_ByteReadOnlySpan = ByteReadOnlySpan;
                if (!_ByteReadOnlySpan_Accessed)
                {
                    ByteReadOnlySpan = deserialized_ByteReadOnlySpan;
                }
            }
            if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        
        public virtual void FreeInMemoryObjects()
        {
            _ByteMemory = default;
            _ByteMemoryNullable = default;
            _ByteReadOnlyMemory = default;
            _ByteReadOnlyMemoryNullable = default;
            _ByteReadOnlySpan = default;
            _DictionaryWithNonNullable = default;
            _DictionaryWithNullable = default;
            _ExplicitlyNullable = default;
            _ExplicitlyNullableInterface = default;
            _LazinatorListNonNullable = default;
            _LazinatorListNullable = default;
            _MyStruct = default;
            _NonNullableArray = default;
            _NonNullableClass = default;
            _NonNullableInterface = default;
            _NonNullableListOfNonNullables = default;
            _NonNullableListOfNullables = default;
            _NonNullableQueue = default;
            _NonNullableStack = default;
            _NullableArray = default;
            _NullableListOfNonNullables = default;
            _NullableListOfNullables = default;
            _NullableQueue = default;
            _NullableStack = default;
            _RegularTupleWithNonNullable = default;
            _RegularTupleWithNullable = default;
            _ValueTupleWithNonNullable = default;
            _ValueTupleWithNullable = default;
            _ByteMemory_Accessed = _ByteMemoryNullable_Accessed = _ByteReadOnlyMemory_Accessed = _ByteReadOnlyMemoryNullable_Accessed = _ByteReadOnlySpan_Accessed = _DictionaryWithNonNullable_Accessed = _DictionaryWithNullable_Accessed = _ExplicitlyNullable_Accessed = _ExplicitlyNullableInterface_Accessed = _LazinatorListNonNullable_Accessed = _LazinatorListNullable_Accessed = _MyStruct_Accessed = _NonNullableArray_Accessed = _NonNullableClass_Accessed = _NonNullableInterface_Accessed = _NonNullableListOfNonNullables_Accessed = _NonNullableListOfNullables_Accessed = _NonNullableQueue_Accessed = _NonNullableStack_Accessed = _NullableArray_Accessed = _NullableListOfNonNullables_Accessed = _NullableListOfNullables_Accessed = _NullableQueue_Accessed = _NullableStack_Accessed = _RegularTupleWithNonNullable_Accessed = _RegularTupleWithNullable_Accessed = _ValueTupleWithNonNullable_Accessed = _ValueTupleWithNullable_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1085;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            _MyInt = span.ToDecompressedInt(ref bytesSoFar);
            _MyNullableInt = span.ToDecompressedNullableInt(ref bytesSoFar);
            _NonNullableString = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            _NullableString = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            _ByteMemory_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _ByteMemoryNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _ByteReadOnlyMemory_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _ByteReadOnlyMemoryNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _ByteReadOnlySpan_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _DictionaryWithNonNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _DictionaryWithNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _ExplicitlyNullable_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            _ExplicitlyNullableInterface_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            _LazinatorListNonNullable_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            _LazinatorListNullable_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            _MyStruct_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            _NonNullableArray_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _NonNullableClass_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            _NonNullableInterface_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            _NonNullableListOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _NonNullableListOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _NonNullableQueue_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _NonNullableStack_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _NullableArray_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _NullableListOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _NullableListOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _NullableQueue_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _NullableStack_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _RegularTupleWithNonNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _RegularTupleWithNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _ValueTupleWithNonNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _ValueTupleWithNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _NullableEnabledContext_EndByteIndex = bytesSoFar;
        }
        
        public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
            {
                updateStoredBuffer = false;
            }
            int startPosition = writer.Position;
            WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
            if (updateStoredBuffer)
            {
                UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
            }
        }
        
        public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
        {
            _IsDirty = false;
            if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                _DescendantIsDirty = false;
                if (updateDeserializedChildren)
                {
                    UpdateDeserializedChildren(ref writer, startPosition);
                }
                
                _MyStruct_Accessed = false;
            }
            else
            {
                ThrowHelper.ThrowCannotUpdateStoredBuffer();
            }
            
            var newBuffer = writer.Slice(startPosition, length);
            LazinatorMemoryStorage = newBuffer;
        }
        
        protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
        {
            if (_ExplicitlyNullable_Accessed && _ExplicitlyNullable != null)
            {
                ExplicitlyNullable!.UpdateStoredBuffer(ref writer, startPosition + _ExplicitlyNullable_ByteIndex + sizeof(int), _ExplicitlyNullable_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            
            if (_ExplicitlyNullableInterface_Accessed && _ExplicitlyNullableInterface != null)
            {
                ExplicitlyNullableInterface!.UpdateStoredBuffer(ref writer, startPosition + _ExplicitlyNullableInterface_ByteIndex + sizeof(int), _ExplicitlyNullableInterface_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            
            if (_LazinatorListNonNullable_Accessed && _LazinatorListNonNullable != null)
            {
                LazinatorListNonNullable!.UpdateStoredBuffer(ref writer, startPosition + _LazinatorListNonNullable_ByteIndex + sizeof(int), _LazinatorListNonNullable_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            
            if (_LazinatorListNullable_Accessed && _LazinatorListNullable != null)
            {
                LazinatorListNullable!.UpdateStoredBuffer(ref writer, startPosition + _LazinatorListNullable_ByteIndex + sizeof(int), _LazinatorListNullable_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            
            MyStruct!.UpdateStoredBuffer(ref writer, startPosition + _MyStruct_ByteIndex + sizeof(int), _MyStruct_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            if (_NonNullableClass_Accessed && _NonNullableClass != null)
            {
                NonNullableClass!.UpdateStoredBuffer(ref writer, startPosition + _NonNullableClass_ByteIndex + sizeof(int), _NonNullableClass_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            
            if (_NonNullableInterface_Accessed && _NonNullableInterface != null)
            {
                NonNullableInterface!.UpdateStoredBuffer(ref writer, startPosition + _NonNullableInterface_ByteIndex + sizeof(int), _NonNullableInterface_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            
            if (_DictionaryWithNonNullable_Accessed && _DictionaryWithNonNullable != null)
            {
                _DictionaryWithNonNullable = (Dictionary<int, Example>) CloneOrChange_Dictionary_Gint_c_C32Example_g(_DictionaryWithNonNullable, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_DictionaryWithNullable_Accessed && _DictionaryWithNullable != null)
            {
                _DictionaryWithNullable = (Dictionary<int, Example?>) CloneOrChange_Dictionary_Gint_c_C32Example_C63_g(_DictionaryWithNullable, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NonNullableArray_Accessed && _NonNullableArray != null)
            {
                _NonNullableArray = (Example[]?) CloneOrChange_Example_B_b(_NonNullableArray, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NonNullableListOfNonNullables_Accessed && _NonNullableListOfNonNullables != null)
            {
                _NonNullableListOfNonNullables = (List<Example>) CloneOrChange_List_GExample_g(_NonNullableListOfNonNullables, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NonNullableListOfNullables_Accessed && _NonNullableListOfNullables != null)
            {
                _NonNullableListOfNullables = (List<Example?>) CloneOrChange_List_GExample_C63_g(_NonNullableListOfNullables, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NonNullableQueue_Accessed && _NonNullableQueue != null)
            {
                _NonNullableQueue = (Queue<Example>) CloneOrChange_Queue_GExample_g(_NonNullableQueue, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NonNullableStack_Accessed && _NonNullableStack != null)
            {
                _NonNullableStack = (Stack<Example>) CloneOrChange_Stack_GExample_g(_NonNullableStack, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableArray_Accessed && _NullableArray != null)
            {
                _NullableArray = (Example?[]?) CloneOrChange_Example_C63_B_b(_NullableArray, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableListOfNonNullables_Accessed && _NullableListOfNonNullables != null)
            {
                _NullableListOfNonNullables = (List<Example>?) CloneOrChange_List_GExample_g_C63(_NullableListOfNonNullables, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableListOfNullables_Accessed && _NullableListOfNullables != null)
            {
                _NullableListOfNullables = (List<Example?>?) CloneOrChange_List_GExample_C63_g_C63(_NullableListOfNullables, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableQueue_Accessed && _NullableQueue != null)
            {
                _NullableQueue = (Queue<Example?>) CloneOrChange_Queue_GExample_C63_g(_NullableQueue, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableStack_Accessed && _NullableStack != null)
            {
                _NullableStack = (Stack<Example?>) CloneOrChange_Stack_GExample_C63_g(_NullableStack, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_RegularTupleWithNonNullable_Accessed && _RegularTupleWithNonNullable != null)
            {
                _RegularTupleWithNonNullable = (Tuple<Example, int>?) CloneOrChange_Tuple_GExample_c_C32int_g(_RegularTupleWithNonNullable, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_RegularTupleWithNullable_Accessed && _RegularTupleWithNullable != null)
            {
                _RegularTupleWithNullable = (Tuple<Example?, int>?) CloneOrChange_Tuple_GExample_C63_c_C32int_g(_RegularTupleWithNullable, l => l.RemoveBufferInHierarchy(), true);
            }
            _ValueTupleWithNonNullable = ((Example, int)) CloneOrChange__PExample_c_C32int_p(_ValueTupleWithNonNullable, l => l.RemoveBufferInHierarchy(), true);_ValueTupleWithNullable = ((Example?, int)) CloneOrChange__PExample_C63_c_C32int_p(_ValueTupleWithNullable, l => l.RemoveBufferInHierarchy(), true);}
            
            
            protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
            {
                int startPosition = writer.Position;
                int startOfObjectPosition = 0;
                // header information
                if (includeUniqueID)
                {
                    if (!ContainsOpenGenericParameters)
                    {
                        CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                    }
                    else
                    {
                        WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                    }
                }
                CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                writer.Write((byte)includeChildrenMode);
                // write properties
                CompressedIntegralTypes.WriteCompressedInt(ref writer, _MyInt);
                CompressedIntegralTypes.WriteCompressedNullableInt(ref writer, _MyNullableInt);
                EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _NonNullableString);
                EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _NullableString);
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ByteMemory_Accessed)
                {
                    var deserialized = ByteMemory;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _ByteMemory, isBelievedDirty: _ByteMemory_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _ByteMemory_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ByteMemory_ByteIndex, _ByteMemory_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_Memory_Gbyte_g(ref w, _ByteMemory,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _ByteMemory_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ByteMemoryNullable_Accessed)
                {
                    var deserialized = ByteMemoryNullable;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _ByteMemoryNullable, isBelievedDirty: _ByteMemoryNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _ByteMemoryNullable_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ByteMemoryNullable_ByteIndex, _ByteMemoryNullable_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_Memory_Gbyte_g_C63(ref w, _ByteMemoryNullable,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _ByteMemoryNullable_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ByteReadOnlyMemory_Accessed)
                {
                    var deserialized = ByteReadOnlyMemory;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _ByteReadOnlyMemory, isBelievedDirty: _ByteReadOnlyMemory_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _ByteReadOnlyMemory_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ByteReadOnlyMemory_ByteIndex, _ByteReadOnlyMemory_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_ReadOnlyMemory_Gbyte_g(ref w, _ByteReadOnlyMemory,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _ByteReadOnlyMemory_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ByteReadOnlyMemoryNullable_Accessed)
                {
                    var deserialized = ByteReadOnlyMemoryNullable;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _ByteReadOnlyMemoryNullable, isBelievedDirty: _ByteReadOnlyMemoryNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _ByteReadOnlyMemoryNullable_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ByteReadOnlyMemoryNullable_ByteIndex, _ByteReadOnlyMemoryNullable_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_ReadOnlyMemory_Gbyte_g_C63(ref w, _ByteReadOnlyMemoryNullable,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _ByteReadOnlyMemoryNullable_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ByteReadOnlySpan_Accessed)
                {
                    var deserialized = ByteReadOnlySpan;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _ByteReadOnlySpan, isBelievedDirty: _ByteReadOnlySpan_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _ByteReadOnlySpan_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ByteReadOnlySpan_ByteIndex, _ByteReadOnlySpan_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_ReadOnlySpan_Gbyte_g(ref w, _ByteReadOnlySpan.Span,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _ByteReadOnlySpan_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_DictionaryWithNonNullable_Accessed)
                {
                    var deserialized = DictionaryWithNonNullable;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _DictionaryWithNonNullable, isBelievedDirty: _DictionaryWithNonNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _DictionaryWithNonNullable_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _DictionaryWithNonNullable_ByteIndex, _DictionaryWithNonNullable_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_Dictionary_Gint_c_C32Example_g(ref w, _DictionaryWithNonNullable ?? throw new UnsetNonnullableLazinatorException(),
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _DictionaryWithNonNullable_ByteIndex = startOfObjectPosition - startPosition;if (_DictionaryWithNonNullable_Accessed && _DictionaryWithNonNullable != null)
                    {
                        _DictionaryWithNonNullable = (Dictionary<int, Example>) CloneOrChange_Dictionary_Gint_c_C32Example_g(_DictionaryWithNonNullable, l => l.RemoveBufferInHierarchy(), true);
                    }
                    
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_DictionaryWithNullable_Accessed)
                {
                    var deserialized = DictionaryWithNullable;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _DictionaryWithNullable, isBelievedDirty: _DictionaryWithNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _DictionaryWithNullable_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _DictionaryWithNullable_ByteIndex, _DictionaryWithNullable_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_Dictionary_Gint_c_C32Example_C63_g(ref w, _DictionaryWithNullable ?? throw new UnsetNonnullableLazinatorException(),
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _DictionaryWithNullable_ByteIndex = startOfObjectPosition - startPosition;if (_DictionaryWithNullable_Accessed && _DictionaryWithNullable != null)
                    {
                        _DictionaryWithNullable = (Dictionary<int, Example?>) CloneOrChange_Dictionary_Gint_c_C32Example_C63_g(_DictionaryWithNullable, l => l.RemoveBufferInHierarchy(), true);
                    }
                    
                }
                startOfObjectPosition = writer.Position;
                if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                {
                    if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ExplicitlyNullable_Accessed)
                    {
                        var deserialized = ExplicitlyNullable;
                    }
                    WriteChild(ref writer, ref _ExplicitlyNullable, includeChildrenMode, _ExplicitlyNullable_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ExplicitlyNullable_ByteIndex, _ExplicitlyNullable_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                }
                
                if (updateStoredBuffer)
                {
                    _ExplicitlyNullable_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                {
                    if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ExplicitlyNullableInterface_Accessed)
                    {
                        var deserialized = ExplicitlyNullableInterface;
                    }
                    WriteChild(ref writer, ref _ExplicitlyNullableInterface, includeChildrenMode, _ExplicitlyNullableInterface_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ExplicitlyNullableInterface_ByteIndex, _ExplicitlyNullableInterface_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                }
                
                if (updateStoredBuffer)
                {
                    _ExplicitlyNullableInterface_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                {
                    if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_LazinatorListNonNullable_Accessed)
                    {
                        var deserialized = LazinatorListNonNullable;
                    }
                    WriteChild(ref writer, ref _LazinatorListNonNullable, includeChildrenMode, _LazinatorListNonNullable_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _LazinatorListNonNullable_ByteIndex, _LazinatorListNonNullable_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                }
                
                if (updateStoredBuffer)
                {
                    _LazinatorListNonNullable_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                {
                    if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_LazinatorListNullable_Accessed)
                    {
                        var deserialized = LazinatorListNullable;
                    }
                    WriteChild(ref writer, ref _LazinatorListNullable, includeChildrenMode, _LazinatorListNullable_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _LazinatorListNullable_ByteIndex, _LazinatorListNullable_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                }
                
                if (updateStoredBuffer)
                {
                    _LazinatorListNullable_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                {
                    if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyStruct_Accessed)
                    {
                        var deserialized = MyStruct;
                    }
                    WriteChild(ref writer, ref _MyStruct, includeChildrenMode, _MyStruct_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _MyStruct_ByteIndex, _MyStruct_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                }
                
                if (updateStoredBuffer)
                {
                    _MyStruct_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableArray_Accessed)
                {
                    var deserialized = NonNullableArray;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _NonNullableArray, isBelievedDirty: _NonNullableArray_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _NonNullableArray_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableArray_ByteIndex, _NonNullableArray_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_Example_B_b(ref w, _NonNullableArray,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _NonNullableArray_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                {
                    if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableClass_Accessed)
                    {
                        var deserialized = NonNullableClass;
                    }
                    WriteChild(ref writer, ref _NonNullableClass, includeChildrenMode, _NonNullableClass_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NonNullableClass_ByteIndex, _NonNullableClass_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                }
                
                if (updateStoredBuffer)
                {
                    _NonNullableClass_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                {
                    if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableInterface_Accessed)
                    {
                        var deserialized = NonNullableInterface;
                    }
                    WriteChild(ref writer, ref _NonNullableInterface, includeChildrenMode, _NonNullableInterface_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NonNullableInterface_ByteIndex, _NonNullableInterface_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                }
                
                if (updateStoredBuffer)
                {
                    _NonNullableInterface_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableListOfNonNullables_Accessed)
                {
                    var deserialized = NonNullableListOfNonNullables;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _NonNullableListOfNonNullables, isBelievedDirty: _NonNullableListOfNonNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _NonNullableListOfNonNullables_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableListOfNonNullables_ByteIndex, _NonNullableListOfNonNullables_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_List_GExample_g(ref w, _NonNullableListOfNonNullables ?? throw new UnsetNonnullableLazinatorException(),
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _NonNullableListOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableListOfNullables_Accessed)
                {
                    var deserialized = NonNullableListOfNullables;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _NonNullableListOfNullables, isBelievedDirty: _NonNullableListOfNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _NonNullableListOfNullables_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableListOfNullables_ByteIndex, _NonNullableListOfNullables_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_List_GExample_C63_g(ref w, _NonNullableListOfNullables ?? throw new UnsetNonnullableLazinatorException(),
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _NonNullableListOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableQueue_Accessed)
                {
                    var deserialized = NonNullableQueue;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _NonNullableQueue, isBelievedDirty: _NonNullableQueue_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _NonNullableQueue_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableQueue_ByteIndex, _NonNullableQueue_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_Queue_GExample_g(ref w, _NonNullableQueue ?? throw new UnsetNonnullableLazinatorException(),
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _NonNullableQueue_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableStack_Accessed)
                {
                    var deserialized = NonNullableStack;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _NonNullableStack, isBelievedDirty: _NonNullableStack_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _NonNullableStack_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableStack_ByteIndex, _NonNullableStack_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_Stack_GExample_g(ref w, _NonNullableStack ?? throw new UnsetNonnullableLazinatorException(),
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _NonNullableStack_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableArray_Accessed)
                {
                    var deserialized = NullableArray;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _NullableArray, isBelievedDirty: _NullableArray_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _NullableArray_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableArray_ByteIndex, _NullableArray_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_Example_C63_B_b(ref w, _NullableArray,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _NullableArray_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableListOfNonNullables_Accessed)
                {
                    var deserialized = NullableListOfNonNullables;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _NullableListOfNonNullables, isBelievedDirty: _NullableListOfNonNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _NullableListOfNonNullables_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableListOfNonNullables_ByteIndex, _NullableListOfNonNullables_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_List_GExample_g_C63(ref w, _NullableListOfNonNullables,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _NullableListOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableListOfNullables_Accessed)
                {
                    var deserialized = NullableListOfNullables;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _NullableListOfNullables, isBelievedDirty: _NullableListOfNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _NullableListOfNullables_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableListOfNullables_ByteIndex, _NullableListOfNullables_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_List_GExample_C63_g_C63(ref w, _NullableListOfNullables,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _NullableListOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableQueue_Accessed)
                {
                    var deserialized = NullableQueue;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _NullableQueue, isBelievedDirty: _NullableQueue_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _NullableQueue_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableQueue_ByteIndex, _NullableQueue_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_Queue_GExample_C63_g(ref w, _NullableQueue ?? throw new UnsetNonnullableLazinatorException(),
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _NullableQueue_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableStack_Accessed)
                {
                    var deserialized = NullableStack;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _NullableStack, isBelievedDirty: _NullableStack_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _NullableStack_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableStack_ByteIndex, _NullableStack_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_Stack_GExample_C63_g(ref w, _NullableStack ?? throw new UnsetNonnullableLazinatorException(),
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _NullableStack_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_RegularTupleWithNonNullable_Accessed)
                {
                    var deserialized = RegularTupleWithNonNullable;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _RegularTupleWithNonNullable, isBelievedDirty: _RegularTupleWithNonNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _RegularTupleWithNonNullable_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _RegularTupleWithNonNullable_ByteIndex, _RegularTupleWithNonNullable_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_Tuple_GExample_c_C32int_g(ref w, _RegularTupleWithNonNullable,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _RegularTupleWithNonNullable_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_RegularTupleWithNullable_Accessed)
                {
                    var deserialized = RegularTupleWithNullable;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _RegularTupleWithNullable, isBelievedDirty: _RegularTupleWithNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _RegularTupleWithNullable_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _RegularTupleWithNullable_ByteIndex, _RegularTupleWithNullable_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_Tuple_GExample_C63_c_C32int_g(ref w, _RegularTupleWithNullable,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _RegularTupleWithNullable_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ValueTupleWithNonNullable_Accessed)
                {
                    var deserialized = ValueTupleWithNonNullable;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _ValueTupleWithNonNullable, isBelievedDirty: _ValueTupleWithNonNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _ValueTupleWithNonNullable_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ValueTupleWithNonNullable_ByteIndex, _ValueTupleWithNonNullable_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes__PExample_c_C32int_p(ref w, _ValueTupleWithNonNullable,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _ValueTupleWithNonNullable_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ValueTupleWithNullable_Accessed)
                {
                    var deserialized = ValueTupleWithNullable;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _ValueTupleWithNullable, isBelievedDirty: _ValueTupleWithNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _ValueTupleWithNullable_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ValueTupleWithNullable_ByteIndex, _ValueTupleWithNullable_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes__PExample_C63_c_C32int_p(ref w, _ValueTupleWithNullable,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _ValueTupleWithNullable_ByteIndex = startOfObjectPosition - startPosition;
                }
                if (updateStoredBuffer)
                {
                    _NullableEnabledContext_EndByteIndex = writer.Position - startPosition;
                }
            }
            
            /* Conversion of supported collections and tuples */
            
            private static Memory<byte> ConvertFromBytes_Memory_Gbyte_g(LazinatorMemory storage)
            {
                return storage.Memory.ToArray();
            }
            
            private static void ConvertToBytes_Memory_Gbyte_g(ref BinaryBufferWriter writer, Memory<byte> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                writer.Write(itemToConvert.Span);
            }
            
            private static Memory<byte> CloneOrChange_Memory_Gbyte_g(Memory<byte> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                int collectionLength = itemToClone.Length;
                Memory<byte> collection = new Memory<byte>(new byte[collectionLength]);
                var collectionAsSpan = collection.Span;
                var itemToCloneSpan = itemToClone.Span;
                int itemToCloneCount = itemToCloneSpan.Length;
                for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                {
                    var itemCopied = (byte) itemToCloneSpan[itemIndex];
                    collectionAsSpan[itemIndex] = itemCopied;
                }
                return collection;
            }
            
            private static Memory<byte>? ConvertFromBytes_Memory_Gbyte_g_C63(LazinatorMemory storage)
            {
                int index = 0;
                bool isNull = storage.ReadOnlySpan.ToBoolean(ref index);
                if (isNull)
                {
                    return null;
                }
                return storage.Memory.Slice(1).ToArray();
            }
            
            private static void ConvertToBytes_Memory_Gbyte_g_C63(ref BinaryBufferWriter writer, Memory<byte>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == null)
                {
                    writer.Write((bool)true);
                    return;
                }
                writer.Write((bool)false);
                writer.Write(itemToConvert.Value.Span);
            }
            
            private static Memory<byte>? CloneOrChange_Memory_Gbyte_g_C63(Memory<byte>? itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                if (itemToClone == null)
                {
                    return default;
                }
                
                int collectionLength = itemToClone.Value.Length;
                Memory<byte> collection = new Memory<byte>(new byte[collectionLength]);
                var collectionAsSpan = collection.Span;
                var itemToCloneSpan = itemToClone.Value.Span;
                int itemToCloneCount = itemToCloneSpan.Length;
                for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                {
                    var itemCopied = (byte) itemToCloneSpan[itemIndex];
                    collectionAsSpan[itemIndex] = itemCopied;
                }
                return collection;
            }
            
            private static ReadOnlyMemory<byte> ConvertFromBytes_ReadOnlyMemory_Gbyte_g(LazinatorMemory storage)
            {
                return storage.Memory.ToArray();
            }
            
            private static void ConvertToBytes_ReadOnlyMemory_Gbyte_g(ref BinaryBufferWriter writer, ReadOnlyMemory<byte> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                writer.Write(itemToConvert.Span);
            }
            
            private static ReadOnlyMemory<byte> CloneOrChange_ReadOnlyMemory_Gbyte_g(ReadOnlyMemory<byte> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                int collectionLength = itemToClone.Length;
                Memory<byte> collection = new Memory<byte>(new byte[collectionLength]);
                var collectionAsSpan = collection.Span;
                var itemToCloneSpan = itemToClone.Span;
                int itemToCloneCount = itemToCloneSpan.Length;
                for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                {
                    var itemCopied = (byte) itemToCloneSpan[itemIndex];
                    collectionAsSpan[itemIndex] = itemCopied;
                }
                return collection;
            }
            
            private static ReadOnlyMemory<byte>? ConvertFromBytes_ReadOnlyMemory_Gbyte_g_C63(LazinatorMemory storage)
            {
                int index = 0;
                bool isNull = storage.ReadOnlySpan.ToBoolean(ref index);
                if (isNull)
                {
                    return null;
                }
                return storage.Memory.Slice(1).ToArray();
            }
            
            private static void ConvertToBytes_ReadOnlyMemory_Gbyte_g_C63(ref BinaryBufferWriter writer, ReadOnlyMemory<byte>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == null)
                {
                    return;
                }
                ConvertToBytes_ReadOnlyMemory_Gbyte_g(ref writer, itemToConvert.Value, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            
            private static ReadOnlyMemory<byte>? CloneOrChange_ReadOnlyMemory_Gbyte_g_C63(ReadOnlyMemory<byte>? itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                if (itemToClone == null)
                {
                    return default;
                }
                
                int collectionLength = itemToClone.Value.Length;
                Memory<byte> collection = new Memory<byte>(new byte[collectionLength]);
                var collectionAsSpan = collection.Span;
                var itemToCloneSpan = itemToClone.Value.Span;
                int itemToCloneCount = itemToCloneSpan.Length;
                for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                {
                    var itemCopied = (byte) itemToCloneSpan[itemIndex];
                    collectionAsSpan[itemIndex] = itemCopied;
                }
                return collection;
            }
            
            private static void ConvertToBytes_ReadOnlySpan_Gbyte_g(ref BinaryBufferWriter writer, ReadOnlySpan<byte> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                ReadOnlySpan<byte> toConvert = (itemToConvert);
                for (int i = 0; i < toConvert.Length; i++)
                {
                    writer.Write(toConvert[i]);
                }
            }
            private static ReadOnlySpan<byte> CloneOrChange_ReadOnlySpan_Gbyte_g(ReadOnlySpan<byte> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                var clone = new Span<byte>(new byte[itemToClone.Length * sizeof(byte)]);
                itemToClone.CopyTo(clone);
                return clone;
            }
            
            private static Dictionary<int, Example> ConvertFromBytes_Dictionary_Gint_c_C32Example_g(LazinatorMemory storage)
            {
                ReadOnlySpan<byte> span = storage.Span;
                
                int bytesSoFar = 0;
                int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                
                Dictionary<int, Example> collection = new Dictionary<int, Example>(collectionLength);
                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                {
                    int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = ConvertFromBytes_KeyValuePair_Gint_c_C32Example_g(childData);
                    collection.Add(item.Key, item.Value);
                    bytesSoFar += lengthCollectionMember;
                }
                
                return collection;
            }
            
            private static void ConvertToBytes_Dictionary_Gint_c_C32Example_g(ref BinaryBufferWriter writer, Dictionary<int, Example> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == default(Dictionary<int, Example>))
                {
                    return;
                }
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                foreach (var item in itemToConvert)
                {
                    void action(ref BinaryBufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32Example_g(ref w, item, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                }
            }
            
            private static Dictionary<int, Example> CloneOrChange_Dictionary_Gint_c_C32Example_g(Dictionary<int, Example> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                int collectionLength = itemToClone.Count;
                Dictionary<int, Example> collection = new Dictionary<int, Example>(collectionLength);
                foreach (var item in itemToClone)
                {
                    var itemCopied = (KeyValuePair<int, Example>) CloneOrChange_KeyValuePair_Gint_c_C32Example_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                    collection.Add(itemCopied.Key, itemCopied.Value);
                }
                return collection;
            }
            
            private static KeyValuePair<int, Example> ConvertFromBytes_KeyValuePair_Gint_c_C32Example_g(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default;
                }
                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                
                int bytesSoFar = 0;
                
                int item1 = span.ToDecompressedInt(ref bytesSoFar);
                
                Example item2 = default;
                int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember_item2 != 0)
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                    item2 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                }
                bytesSoFar += lengthCollectionMember_item2;
                
                var tupleType = new KeyValuePair<int, Example>(item1, item2);
                
                return tupleType;
            }
            
            private static void ConvertToBytes_KeyValuePair_Gint_c_C32Example_g(ref BinaryBufferWriter writer, KeyValuePair<int, Example> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Key);
                
                if (itemToConvert.Value == null)
                {
                    writer.Write((uint)0);
                }
                else
                {
                    void actionValue(ref BinaryBufferWriter w) => itemToConvert.Value.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, actionValue);
                };
            }
            
            private static KeyValuePair<int, Example> CloneOrChange_KeyValuePair_Gint_c_C32Example_g(KeyValuePair<int, Example> itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                return new KeyValuePair<int, Example>((int) (itemToConvert.Key),(Example) cloneOrChangeFunc((itemToConvert.Value)));
            }
            
            private static Dictionary<int, Example?> ConvertFromBytes_Dictionary_Gint_c_C32Example_C63_g(LazinatorMemory storage)
            {
                ReadOnlySpan<byte> span = storage.Span;
                
                int bytesSoFar = 0;
                int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                
                Dictionary<int, Example?> collection = new Dictionary<int, Example?>(collectionLength);
                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                {
                    int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = ConvertFromBytes_KeyValuePair_Gint_c_C32Example_C63_g(childData);
                    collection.Add(item.Key, item.Value);
                    bytesSoFar += lengthCollectionMember;
                }
                
                return collection;
            }
            
            private static void ConvertToBytes_Dictionary_Gint_c_C32Example_C63_g(ref BinaryBufferWriter writer, Dictionary<int, Example?> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == default(Dictionary<int, Example?>))
                {
                    return;
                }
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                foreach (var item in itemToConvert)
                {
                    void action(ref BinaryBufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32Example_C63_g(ref w, item, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                }
            }
            
            private static Dictionary<int, Example?> CloneOrChange_Dictionary_Gint_c_C32Example_C63_g(Dictionary<int, Example?> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                int collectionLength = itemToClone.Count;
                Dictionary<int, Example?> collection = new Dictionary<int, Example?>(collectionLength);
                foreach (var item in itemToClone)
                {
                    var itemCopied = (KeyValuePair<int, Example?>) CloneOrChange_KeyValuePair_Gint_c_C32Example_C63_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                    collection.Add(itemCopied.Key, itemCopied.Value);
                }
                return collection;
            }
            
            private static KeyValuePair<int, Example?> ConvertFromBytes_KeyValuePair_Gint_c_C32Example_C63_g(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default;
                }
                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                
                int bytesSoFar = 0;
                
                int item1 = span.ToDecompressedInt(ref bytesSoFar);
                
                Example? item2 = default;
                int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember_item2 != 0)
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                    item2 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                }
                bytesSoFar += lengthCollectionMember_item2;
                
                var tupleType = new KeyValuePair<int, Example?>(item1, item2);
                
                return tupleType;
            }
            
            private static void ConvertToBytes_KeyValuePair_Gint_c_C32Example_C63_g(ref BinaryBufferWriter writer, KeyValuePair<int, Example?> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Key);
                
                if (itemToConvert.Value == null)
                {
                    writer.Write((uint)0);
                }
                else
                {
                    void actionValue(ref BinaryBufferWriter w) => itemToConvert.Value.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, actionValue);
                };
            }
            
            private static KeyValuePair<int, Example?> CloneOrChange_KeyValuePair_Gint_c_C32Example_C63_g(KeyValuePair<int, Example?> itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                return new KeyValuePair<int, Example?>((int) (itemToConvert.Key),(Example?) cloneOrChangeFunc((itemToConvert.Value)));
            }
            
            private static Example[]? ConvertFromBytes_Example_B_b(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default(Example[]?);
                }
                ReadOnlySpan<byte> span = storage.Span;
                
                int bytesSoFar = 0;
                int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                
                Example[]? collection = new Example[collectionLength];
                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                {
                    int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = new Example();
                    item.DeserializeLazinator(childData);
                    collection[itemIndex] = item;
                    bytesSoFar += lengthCollectionMember;
                }
                
                return collection;
            }
            
            private static void ConvertToBytes_Example_B_b(ref BinaryBufferWriter writer, Example[]? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == default(Example[]?))
                {
                    return;
                }
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
                int itemToConvertCount = itemToConvert.Length;
                for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                {
                    void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                }
            }
            
            private static Example[]? CloneOrChange_Example_B_b(Example[]? itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                if (itemToClone == null)
                {
                    return default;
                }
                
                int collectionLength = itemToClone.Length;
                Example[]? collection = avoidCloningIfPossible ? itemToClone : new Example[collectionLength];
                int itemToCloneCount = itemToClone.Length;
                for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                {
                    if (avoidCloningIfPossible)
                    {
                        if (itemToClone[itemIndex] != null)
                        {
                            itemToClone[itemIndex] = (Example) cloneOrChangeFunc(itemToClone[itemIndex]);
                        }
                        continue;
                    }
                    var itemCopied = (Example) cloneOrChangeFunc(itemToClone[itemIndex]);
                    collection[itemIndex] = itemCopied;
                }
                return collection;
            }
            
            private static List<Example> ConvertFromBytes_List_GExample_g(LazinatorMemory storage)
            {
                ReadOnlySpan<byte> span = storage.Span;
                
                int bytesSoFar = 0;
                int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                
                List<Example> collection = new List<Example>(collectionLength);
                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                {
                    int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = new Example();
                    item.DeserializeLazinator(childData);
                    collection.Add(item);
                    bytesSoFar += lengthCollectionMember;
                }
                
                return collection;
            }
            
            private static void ConvertToBytes_List_GExample_g(ref BinaryBufferWriter writer, List<Example> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == default(List<Example>))
                {
                    return;
                }
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                int itemToConvertCount = itemToConvert.Count;
                for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                {
                    void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                }
            }
            
            private static List<Example> CloneOrChange_List_GExample_g(List<Example> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                int collectionLength = itemToClone.Count;
                List<Example> collection = avoidCloningIfPossible ? itemToClone : new List<Example>(collectionLength);
                int itemToCloneCount = itemToClone.Count;
                for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                {
                    if (avoidCloningIfPossible)
                    {
                        if (itemToClone[itemIndex] != null)
                        {
                            itemToClone[itemIndex] = (Example) cloneOrChangeFunc(itemToClone[itemIndex]);
                        }
                        continue;
                    }
                    var itemCopied = (Example) cloneOrChangeFunc(itemToClone[itemIndex]);
                    collection.Add(itemCopied);
                }
                return collection;
            }
            
            private static List<Example?> ConvertFromBytes_List_GExample_C63_g(LazinatorMemory storage)
            {
                ReadOnlySpan<byte> span = storage.Span;
                
                int bytesSoFar = 0;
                int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                
                List<Example?> collection = new List<Example?>(collectionLength);
                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                {
                    int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                    if (lengthCollectionMember == 0)
                    {
                        collection.Add(null);
                    }
                    else
                    {
                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                        var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                        collection.Add(item);
                    }
                    bytesSoFar += lengthCollectionMember;
                }
                
                return collection;
            }
            
            private static void ConvertToBytes_List_GExample_C63_g(ref BinaryBufferWriter writer, List<Example?> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == default(List<Example?>))
                {
                    return;
                }
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                int itemToConvertCount = itemToConvert.Count;
                for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                {
                    if (itemToConvert[itemIndex] == null)
                    {
                        writer.Write((uint)0);
                    }
                    else 
                    {
                        
                        void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                    }
                    
                }
            }
            
            private static List<Example?> CloneOrChange_List_GExample_C63_g(List<Example?> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                int collectionLength = itemToClone.Count;
                List<Example?> collection = avoidCloningIfPossible ? itemToClone : new List<Example?>(collectionLength);
                int itemToCloneCount = itemToClone.Count;
                for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                {
                    if (avoidCloningIfPossible)
                    {
                        if (itemToClone[itemIndex] != null)
                        {
                            itemToClone[itemIndex] = (Example?) cloneOrChangeFunc(itemToClone[itemIndex]);
                        }
                        continue;
                    }
                    if (itemToClone[itemIndex] == null)
                    {
                        collection.Add(null);
                    }
                    else
                    {
                        var itemCopied = (Example?) cloneOrChangeFunc(itemToClone[itemIndex]);
                        collection.Add(itemCopied);
                    }
                    
                }
                return collection;
            }
            
            private static Queue<Example> ConvertFromBytes_Queue_GExample_g(LazinatorMemory storage)
            {
                ReadOnlySpan<byte> span = storage.Span;
                
                int bytesSoFar = 0;
                int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                
                Queue<Example> collection = new Queue<Example>(collectionLength);
                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                {
                    int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = new Example();
                    item.DeserializeLazinator(childData);
                    collection.Enqueue(item);
                    bytesSoFar += lengthCollectionMember;
                }
                
                return collection;
            }
            
            private static void ConvertToBytes_Queue_GExample_g(ref BinaryBufferWriter writer, Queue<Example> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == default(Queue<Example>))
                {
                    return;
                }
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                int itemToConvertCount = itemToConvert.Count;
                var q = System.Linq.Enumerable.ToList(itemToConvert);
                for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                {
                    void action(ref BinaryBufferWriter w) => q[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                }
            }
            
            private static Queue<Example> CloneOrChange_Queue_GExample_g(Queue<Example> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                int collectionLength = itemToClone.Count;
                Queue<Example> collection = new Queue<Example>(collectionLength);
                int itemToCloneCount = itemToClone.Count;
                var q = System.Linq.Enumerable.ToList(itemToClone);
                for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                {
                    var itemCopied = (Example) cloneOrChangeFunc(q[itemIndex]);
                    collection.Enqueue(itemCopied);
                }
                return collection;
            }
            
            private static Stack<Example> ConvertFromBytes_Stack_GExample_g(LazinatorMemory storage)
            {
                ReadOnlySpan<byte> span = storage.Span;
                
                int bytesSoFar = 0;
                int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                
                Stack<Example> collection = new Stack<Example>(collectionLength);
                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                {
                    int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = new Example();
                    item.DeserializeLazinator(childData);
                    collection.Push(item);
                    bytesSoFar += lengthCollectionMember;
                }
                
                return collection;
            }
            
            private static void ConvertToBytes_Stack_GExample_g(ref BinaryBufferWriter writer, Stack<Example> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == default(Stack<Example>))
                {
                    return;
                }
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                int itemToConvertCount = itemToConvert.Count;
                var stackReversed = System.Linq.Enumerable.ToList(itemToConvert);
                stackReversed.Reverse();
                for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                {
                    void action(ref BinaryBufferWriter w) => stackReversed[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                }
            }
            
            private static Stack<Example> CloneOrChange_Stack_GExample_g(Stack<Example> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                int collectionLength = itemToClone.Count;
                Stack<Example> collection = new Stack<Example>(collectionLength);
                int itemToCloneCount = itemToClone.Count;
                var stackReversed = System.Linq.Enumerable.ToList(itemToClone);
                stackReversed.Reverse();
                for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                {
                    var itemCopied = (Example) cloneOrChangeFunc(stackReversed[itemIndex]);
                    collection.Push(itemCopied);
                }
                return collection;
            }
            
            private static Example?[]? ConvertFromBytes_Example_C63_B_b(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default(Example?[]?);
                }
                ReadOnlySpan<byte> span = storage.Span;
                
                int bytesSoFar = 0;
                int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                
                Example?[]? collection = new Example?[collectionLength];
                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                {
                    int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                    if (lengthCollectionMember == 0)
                    {
                        collection[itemIndex] = null;
                    }
                    else
                    {
                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                        var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                        collection[itemIndex] = item;
                    }
                    bytesSoFar += lengthCollectionMember;
                }
                
                return collection;
            }
            
            private static void ConvertToBytes_Example_C63_B_b(ref BinaryBufferWriter writer, Example?[]? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == default(Example?[]?))
                {
                    return;
                }
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
                int itemToConvertCount = itemToConvert.Length;
                for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                {
                    if (itemToConvert[itemIndex] == null)
                    {
                        writer.Write((uint)0);
                    }
                    else 
                    {
                        
                        void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                    }
                    
                }
            }
            
            private static Example?[]? CloneOrChange_Example_C63_B_b(Example?[]? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                if (itemToClone == null)
                {
                    return default;
                }
                
                int collectionLength = itemToClone.Length;
                Example?[]? collection = avoidCloningIfPossible ? itemToClone : new Example?[collectionLength];
                int itemToCloneCount = itemToClone.Length;
                for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                {
                    if (avoidCloningIfPossible)
                    {
                        if (itemToClone[itemIndex] != null)
                        {
                            itemToClone[itemIndex] = (Example?) cloneOrChangeFunc(itemToClone[itemIndex]);
                        }
                        continue;
                    }
                    if (itemToClone[itemIndex] == null)
                    {
                        collection[itemIndex] = null;
                    }
                    else
                    {
                        var itemCopied = (Example?) cloneOrChangeFunc(itemToClone[itemIndex]);
                        collection[itemIndex] = itemCopied;
                    }
                    
                }
                return collection;
            }
            
            private static List<Example>? ConvertFromBytes_List_GExample_g_C63(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default(List<Example>?);
                }
                ReadOnlySpan<byte> span = storage.Span;
                
                int bytesSoFar = 0;
                int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                
                List<Example>? collection = new List<Example>(collectionLength);
                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                {
                    int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = new Example();
                    item.DeserializeLazinator(childData);
                    collection.Add(item);
                    bytesSoFar += lengthCollectionMember;
                }
                
                return collection;
            }
            
            private static void ConvertToBytes_List_GExample_g_C63(ref BinaryBufferWriter writer, List<Example>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == default(List<Example>?))
                {
                    return;
                }
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                int itemToConvertCount = itemToConvert.Count;
                for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                {
                    void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                }
            }
            
            private static List<Example>? CloneOrChange_List_GExample_g_C63(List<Example>? itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                if (itemToClone == null)
                {
                    return default;
                }
                
                int collectionLength = itemToClone.Count;
                List<Example>? collection = avoidCloningIfPossible ? itemToClone : new List<Example>(collectionLength);
                int itemToCloneCount = itemToClone.Count;
                for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                {
                    if (avoidCloningIfPossible)
                    {
                        if (itemToClone[itemIndex] != null)
                        {
                            itemToClone[itemIndex] = (Example) cloneOrChangeFunc(itemToClone[itemIndex]);
                        }
                        continue;
                    }
                    var itemCopied = (Example) cloneOrChangeFunc(itemToClone[itemIndex]);
                    collection.Add(itemCopied);
                }
                return collection;
            }
            
            private static List<Example?>? ConvertFromBytes_List_GExample_C63_g_C63(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default(List<Example?>?);
                }
                ReadOnlySpan<byte> span = storage.Span;
                
                int bytesSoFar = 0;
                int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                
                List<Example?>? collection = new List<Example?>(collectionLength);
                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                {
                    int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                    if (lengthCollectionMember == 0)
                    {
                        collection.Add(null);
                    }
                    else
                    {
                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                        var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                        collection.Add(item);
                    }
                    bytesSoFar += lengthCollectionMember;
                }
                
                return collection;
            }
            
            private static void ConvertToBytes_List_GExample_C63_g_C63(ref BinaryBufferWriter writer, List<Example?>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == default(List<Example?>?))
                {
                    return;
                }
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                int itemToConvertCount = itemToConvert.Count;
                for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                {
                    if (itemToConvert[itemIndex] == null)
                    {
                        writer.Write((uint)0);
                    }
                    else 
                    {
                        
                        void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                    }
                    
                }
            }
            
            private static List<Example?>? CloneOrChange_List_GExample_C63_g_C63(List<Example?>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                if (itemToClone == null)
                {
                    return default;
                }
                
                int collectionLength = itemToClone.Count;
                List<Example?>? collection = avoidCloningIfPossible ? itemToClone : new List<Example?>(collectionLength);
                int itemToCloneCount = itemToClone.Count;
                for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                {
                    if (avoidCloningIfPossible)
                    {
                        if (itemToClone[itemIndex] != null)
                        {
                            itemToClone[itemIndex] = (Example?) cloneOrChangeFunc(itemToClone[itemIndex]);
                        }
                        continue;
                    }
                    if (itemToClone[itemIndex] == null)
                    {
                        collection.Add(null);
                    }
                    else
                    {
                        var itemCopied = (Example?) cloneOrChangeFunc(itemToClone[itemIndex]);
                        collection.Add(itemCopied);
                    }
                    
                }
                return collection;
            }
            
            private static Queue<Example?> ConvertFromBytes_Queue_GExample_C63_g(LazinatorMemory storage)
            {
                ReadOnlySpan<byte> span = storage.Span;
                
                int bytesSoFar = 0;
                int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                
                Queue<Example?> collection = new Queue<Example?>(collectionLength);
                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                {
                    int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                    if (lengthCollectionMember == 0)
                    {
                        collection.Enqueue(null);
                    }
                    else
                    {
                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                        var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                        collection.Enqueue(item);
                    }
                    bytesSoFar += lengthCollectionMember;
                }
                
                return collection;
            }
            
            private static void ConvertToBytes_Queue_GExample_C63_g(ref BinaryBufferWriter writer, Queue<Example?> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == default(Queue<Example?>))
                {
                    return;
                }
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                int itemToConvertCount = itemToConvert.Count;
                var q = System.Linq.Enumerable.ToList(itemToConvert);
                for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                {
                    if (q[itemIndex] == null)
                    {
                        writer.Write((uint)0);
                    }
                    else 
                    {
                        
                        void action(ref BinaryBufferWriter w) => q[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                    }
                    
                }
            }
            
            private static Queue<Example?> CloneOrChange_Queue_GExample_C63_g(Queue<Example?> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                int collectionLength = itemToClone.Count;
                Queue<Example?> collection = new Queue<Example?>(collectionLength);
                int itemToCloneCount = itemToClone.Count;
                var q = System.Linq.Enumerable.ToList(itemToClone);
                for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                {
                    if (q[itemIndex] == null)
                    {
                        collection.Enqueue(null);
                    }
                    else
                    {
                        var itemCopied = (Example?) cloneOrChangeFunc(q[itemIndex]);
                        collection.Enqueue(itemCopied);
                    }
                    
                }
                return collection;
            }
            
            private static Stack<Example?> ConvertFromBytes_Stack_GExample_C63_g(LazinatorMemory storage)
            {
                ReadOnlySpan<byte> span = storage.Span;
                
                int bytesSoFar = 0;
                int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                
                Stack<Example?> collection = new Stack<Example?>(collectionLength);
                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                {
                    int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                    if (lengthCollectionMember == 0)
                    {
                        collection.Push(null);
                    }
                    else
                    {
                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                        var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                        collection.Push(item);
                    }
                    bytesSoFar += lengthCollectionMember;
                }
                
                return collection;
            }
            
            private static void ConvertToBytes_Stack_GExample_C63_g(ref BinaryBufferWriter writer, Stack<Example?> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == default(Stack<Example?>))
                {
                    return;
                }
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                int itemToConvertCount = itemToConvert.Count;
                var stackReversed = System.Linq.Enumerable.ToList(itemToConvert);
                stackReversed.Reverse();
                for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                {
                    if (stackReversed[itemIndex] == null)
                    {
                        writer.Write((uint)0);
                    }
                    else 
                    {
                        
                        void action(ref BinaryBufferWriter w) => stackReversed[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                    }
                    
                }
            }
            
            private static Stack<Example?> CloneOrChange_Stack_GExample_C63_g(Stack<Example?> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                int collectionLength = itemToClone.Count;
                Stack<Example?> collection = new Stack<Example?>(collectionLength);
                int itemToCloneCount = itemToClone.Count;
                var stackReversed = System.Linq.Enumerable.ToList(itemToClone);
                stackReversed.Reverse();
                for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                {
                    if (stackReversed[itemIndex] == null)
                    {
                        collection.Push(null);
                    }
                    else
                    {
                        var itemCopied = (Example?) cloneOrChangeFunc(stackReversed[itemIndex]);
                        collection.Push(itemCopied);
                    }
                    
                }
                return collection;
            }
            
            private static Tuple<Example, int>? ConvertFromBytes_Tuple_GExample_c_C32int_g(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default;
                }
                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                
                int bytesSoFar = 0;
                
                Example item1 = default;
                int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember_item1 != 0)
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                    item1 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                }
                bytesSoFar += lengthCollectionMember_item1;
                
                int item2 = span.ToDecompressedInt(ref bytesSoFar);
                
                var tupleType = new Tuple<Example, int>(item1, item2);
                
                return tupleType;
            }
            
            private static void ConvertToBytes_Tuple_GExample_c_C32int_g(ref BinaryBufferWriter writer, Tuple<Example, int>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == null)
                {
                    return;
                }
                
                if (itemToConvert.Item1 == null)
                {
                    writer.Write((uint)0);
                }
                else
                {
                    void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                };
                
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
            }
            
            private static Tuple<Example, int>? CloneOrChange_Tuple_GExample_c_C32int_g(Tuple<Example, int>? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                if (itemToConvert == null)
                {
                    return default(Tuple<Example, int>?);
                }
                
                return new Tuple<Example, int>((Example) cloneOrChangeFunc((itemToConvert?.Item1 ?? default)),(int) (itemToConvert?.Item2 ?? default));
            }
            
            private static Tuple<Example?, int>? ConvertFromBytes_Tuple_GExample_C63_c_C32int_g(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default;
                }
                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                
                int bytesSoFar = 0;
                
                Example? item1 = default;
                int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember_item1 != 0)
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                    item1 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                }
                bytesSoFar += lengthCollectionMember_item1;
                
                int item2 = span.ToDecompressedInt(ref bytesSoFar);
                
                var tupleType = new Tuple<Example?, int>(item1, item2);
                
                return tupleType;
            }
            
            private static void ConvertToBytes_Tuple_GExample_C63_c_C32int_g(ref BinaryBufferWriter writer, Tuple<Example?, int>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == null)
                {
                    return;
                }
                
                if (itemToConvert.Item1 == null)
                {
                    writer.Write((uint)0);
                }
                else
                {
                    void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                };
                
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
            }
            
            private static Tuple<Example?, int>? CloneOrChange_Tuple_GExample_C63_c_C32int_g(Tuple<Example?, int>? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                if (itemToConvert == null)
                {
                    return default(Tuple<Example?, int>?);
                }
                
                return new Tuple<Example?, int>((Example?) cloneOrChangeFunc((itemToConvert?.Item1)),(int) (itemToConvert?.Item2 ?? default));
            }
            
            private static (Example, int) ConvertFromBytes__PExample_c_C32int_p(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default;
                }
                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                
                int bytesSoFar = 0;
                
                Example item1 = default;
                int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember_item1 != 0)
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                    item1 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                }
                bytesSoFar += lengthCollectionMember_item1;
                
                int item2 = span.ToDecompressedInt(ref bytesSoFar);
                
                var tupleType = (item1, item2);
                
                return tupleType;
            }
            
            private static void ConvertToBytes__PExample_c_C32int_p(ref BinaryBufferWriter writer, (Example, int) itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                
                if (itemToConvert.Item1 == null)
                {
                    writer.Write((uint)0);
                }
                else
                {
                    void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                };
                
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
            }
            
            private static (Example, int) CloneOrChange__PExample_c_C32int_p((Example, int) itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                return ((Example) cloneOrChangeFunc((itemToConvert.Item1)),(int) (itemToConvert.Item2));
            }
            
            private static (Example?, int) ConvertFromBytes__PExample_C63_c_C32int_p(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default;
                }
                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                
                int bytesSoFar = 0;
                
                Example? item1 = default;
                int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember_item1 != 0)
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                    item1 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                }
                bytesSoFar += lengthCollectionMember_item1;
                
                int item2 = span.ToDecompressedInt(ref bytesSoFar);
                
                var tupleType = (item1, item2);
                
                return tupleType;
            }
            
            private static void ConvertToBytes__PExample_C63_c_C32int_p(ref BinaryBufferWriter writer, (Example?, int) itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                
                if (itemToConvert.Item1 == null)
                {
                    writer.Write((uint)0);
                }
                else
                {
                    void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                };
                
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
            }
            
            private static (Example?, int) CloneOrChange__PExample_C63_c_C32int_p((Example?, int) itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                return ((Example?) cloneOrChangeFunc((itemToConvert.Item1)),(int) (itemToConvert.Item2));
            }
            
        }
    }
