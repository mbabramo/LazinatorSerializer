/*Location2064*//*Location2047*///e1d2a218-f009-cf29-07dd-f077c43081b4
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
namespace LazinatorTests.Examples.ExampleHierarchy
{/*Location2048*/
    using Lazinator.Attributes;/*Location2049*/
    using Lazinator.Buffers;/*Location2050*/
    using Lazinator.Core;/*Location2051*/
    using Lazinator.Exceptions;/*Location2052*/
    using Lazinator.Support;/*Location2053*/
    using LazinatorCollections;/*Location2054*/
    using LazinatorTests.Examples;/*Location2055*/
    using LazinatorTests.Examples.Structs;/*Location2056*/
    using System;/*Location2057*/
    using System.Buffers;/*Location2058*/
    using System.Collections.Generic;/*Location2059*/
    using System.Diagnostics;/*Location2060*/
    using System.IO;/*Location2061*/
    using System.Linq;/*Location2062*/
    using System.Runtime.InteropServices;/*Location2063*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class NullableEnabledContext : ILazinator
    {
        /*Location2065*/public bool IsStruct => false;
        
        /*Location2066*//* Property definitions */
        
        /*Location2067*/        protected int _ByteReadOnlySpan_ByteIndex;
        /*Location2068*/        protected int _ExplicitlyNullable_ByteIndex;
        /*Location2069*/        protected int _ExplicitlyNullableInterface_ByteIndex;
        /*Location2070*/        protected int _NonNullableArrayOfNonNullables_ByteIndex;
        /*Location2071*/        protected int _NonNullableArrayOfNullables_ByteIndex;
        /*Location2072*/        protected int _NonNullableClass_ByteIndex;
        /*Location2073*/        protected int _NonNullableDictionaryWithNonNullable_ByteIndex;
        /*Location2074*/        protected int _NonNullableDictionaryWithNullable_ByteIndex;
        /*Location2075*/        protected int _NonNullableInterface_ByteIndex;
        /*Location2076*/        protected int _NonNullableLazinatorListNonNullable_ByteIndex;
        /*Location2077*/        protected int _NonNullableLazinatorListNullable_ByteIndex;
        /*Location2078*/        protected int _NonNullableListOfNonNullables_ByteIndex;
        /*Location2079*/        protected int _NonNullableListOfNullables_ByteIndex;
        /*Location2080*/        protected int _NonNullableMemoryOfBytes_ByteIndex;
        /*Location2081*/        protected int _NonNullableQueueOfNonNullables_ByteIndex;
        /*Location2082*/        protected int _NonNullableQueueOfNullables_ByteIndex;
        /*Location2083*/        protected int _NonNullableReadOnlyMemoryOfBytes_ByteIndex;
        /*Location2084*/        protected int _NonNullableRecordLikeClass_ByteIndex;
        /*Location2085*/        protected int _NonNullableRecordLikeStruct_ByteIndex;
        /*Location2086*/        protected int _NonNullableRegularTupleWithNonNullable_ByteIndex;
        /*Location2087*/        protected int _NonNullableRegularTupleWithNullable_ByteIndex;
        /*Location2088*/        protected int _NonNullableStackOfNonNullables_ByteIndex;
        /*Location2089*/        protected int _NonNullableStackOfNullables_ByteIndex;
        /*Location2090*/        protected int _NonNullableStruct_ByteIndex;
        /*Location2091*/        protected int _NullableArrayOfNonNullables_ByteIndex;
        /*Location2092*/        protected int _NullableArrayOfNullables_ByteIndex;
        /*Location2093*/        protected int _NullableDictionaryWithNonNullable_ByteIndex;
        /*Location2094*/        protected int _NullableDictionaryWithNullable_ByteIndex;
        /*Location2095*/        protected int _NullableLazinatorListNonNullable_ByteIndex;
        /*Location2096*/        protected int _NullableLazinatorListNullable_ByteIndex;
        /*Location2097*/        protected int _NullableListOfNonNullables_ByteIndex;
        /*Location2098*/        protected int _NullableListOfNullables_ByteIndex;
        /*Location2099*/        protected int _NullableMemoryOfBytes_ByteIndex;
        /*Location2100*/        protected int _NullableQueueOfNonNullables_ByteIndex;
        /*Location2101*/        protected int _NullableQueueOfNullables_ByteIndex;
        /*Location2102*/        protected int _NullableReadOnlyMemoryOfBytes_ByteIndex;
        /*Location2103*/        protected int _NullableRecordLikeClass_ByteIndex;
        /*Location2104*/        protected int _NullableRecordLikeStruct_ByteIndex;
        /*Location2105*/        protected int _NullableRegularTupleWithNonNullable_ByteIndex;
        /*Location2106*/        protected int _NullableRegularTupleWithNullable_ByteIndex;
        /*Location2107*/        protected int _NullableStackOfNonNullables_ByteIndex;
        /*Location2108*/        protected int _NullableStackOfNullables_ByteIndex;
        /*Location2109*/        protected int _NullableStruct_ByteIndex;
        /*Location2110*/        protected int _NullableValueTupleWithNonNullable_ByteIndex;
        /*Location2111*/        protected int _NullableValueTupleWithNullable_ByteIndex;
        /*Location2112*/        protected int _ValueTupleWithNonNullable_ByteIndex;
        /*Location2113*/        protected int _ValueTupleWithNullable_ByteIndex;
        /*Location2114*/protected virtual int _ByteReadOnlySpan_ByteLength => _ExplicitlyNullable_ByteIndex - _ByteReadOnlySpan_ByteIndex;
        /*Location2115*/protected virtual int _ExplicitlyNullable_ByteLength => _ExplicitlyNullableInterface_ByteIndex - _ExplicitlyNullable_ByteIndex;
        /*Location2116*/protected virtual int _ExplicitlyNullableInterface_ByteLength => _NonNullableArrayOfNonNullables_ByteIndex - _ExplicitlyNullableInterface_ByteIndex;
        /*Location2117*/protected virtual int _NonNullableArrayOfNonNullables_ByteLength => _NonNullableArrayOfNullables_ByteIndex - _NonNullableArrayOfNonNullables_ByteIndex;
        /*Location2118*/protected virtual int _NonNullableArrayOfNullables_ByteLength => _NonNullableClass_ByteIndex - _NonNullableArrayOfNullables_ByteIndex;
        /*Location2119*/protected virtual int _NonNullableClass_ByteLength => _NonNullableDictionaryWithNonNullable_ByteIndex - _NonNullableClass_ByteIndex;
        /*Location2120*/protected virtual int _NonNullableDictionaryWithNonNullable_ByteLength => _NonNullableDictionaryWithNullable_ByteIndex - _NonNullableDictionaryWithNonNullable_ByteIndex;
        /*Location2121*/protected virtual int _NonNullableDictionaryWithNullable_ByteLength => _NonNullableInterface_ByteIndex - _NonNullableDictionaryWithNullable_ByteIndex;
        /*Location2122*/protected virtual int _NonNullableInterface_ByteLength => _NonNullableLazinatorListNonNullable_ByteIndex - _NonNullableInterface_ByteIndex;
        /*Location2123*/protected virtual int _NonNullableLazinatorListNonNullable_ByteLength => _NonNullableLazinatorListNullable_ByteIndex - _NonNullableLazinatorListNonNullable_ByteIndex;
        /*Location2124*/protected virtual int _NonNullableLazinatorListNullable_ByteLength => _NonNullableListOfNonNullables_ByteIndex - _NonNullableLazinatorListNullable_ByteIndex;
        /*Location2125*/protected virtual int _NonNullableListOfNonNullables_ByteLength => _NonNullableListOfNullables_ByteIndex - _NonNullableListOfNonNullables_ByteIndex;
        /*Location2126*/protected virtual int _NonNullableListOfNullables_ByteLength => _NonNullableMemoryOfBytes_ByteIndex - _NonNullableListOfNullables_ByteIndex;
        /*Location2127*/protected virtual int _NonNullableMemoryOfBytes_ByteLength => _NonNullableQueueOfNonNullables_ByteIndex - _NonNullableMemoryOfBytes_ByteIndex;
        /*Location2128*/protected virtual int _NonNullableQueueOfNonNullables_ByteLength => _NonNullableQueueOfNullables_ByteIndex - _NonNullableQueueOfNonNullables_ByteIndex;
        /*Location2129*/protected virtual int _NonNullableQueueOfNullables_ByteLength => _NonNullableReadOnlyMemoryOfBytes_ByteIndex - _NonNullableQueueOfNullables_ByteIndex;
        /*Location2130*/protected virtual int _NonNullableReadOnlyMemoryOfBytes_ByteLength => _NonNullableRecordLikeClass_ByteIndex - _NonNullableReadOnlyMemoryOfBytes_ByteIndex;
        /*Location2131*/protected virtual int _NonNullableRecordLikeClass_ByteLength => _NonNullableRecordLikeStruct_ByteIndex - _NonNullableRecordLikeClass_ByteIndex;
        /*Location2132*/protected virtual int _NonNullableRecordLikeStruct_ByteLength => _NonNullableRegularTupleWithNonNullable_ByteIndex - _NonNullableRecordLikeStruct_ByteIndex;
        /*Location2133*/protected virtual int _NonNullableRegularTupleWithNonNullable_ByteLength => _NonNullableRegularTupleWithNullable_ByteIndex - _NonNullableRegularTupleWithNonNullable_ByteIndex;
        /*Location2134*/protected virtual int _NonNullableRegularTupleWithNullable_ByteLength => _NonNullableStackOfNonNullables_ByteIndex - _NonNullableRegularTupleWithNullable_ByteIndex;
        /*Location2135*/protected virtual int _NonNullableStackOfNonNullables_ByteLength => _NonNullableStackOfNullables_ByteIndex - _NonNullableStackOfNonNullables_ByteIndex;
        /*Location2136*/protected virtual int _NonNullableStackOfNullables_ByteLength => _NonNullableStruct_ByteIndex - _NonNullableStackOfNullables_ByteIndex;
        /*Location2137*/protected virtual int _NonNullableStruct_ByteLength => _NullableArrayOfNonNullables_ByteIndex - _NonNullableStruct_ByteIndex;
        /*Location2138*/protected virtual int _NullableArrayOfNonNullables_ByteLength => _NullableArrayOfNullables_ByteIndex - _NullableArrayOfNonNullables_ByteIndex;
        /*Location2139*/protected virtual int _NullableArrayOfNullables_ByteLength => _NullableDictionaryWithNonNullable_ByteIndex - _NullableArrayOfNullables_ByteIndex;
        /*Location2140*/protected virtual int _NullableDictionaryWithNonNullable_ByteLength => _NullableDictionaryWithNullable_ByteIndex - _NullableDictionaryWithNonNullable_ByteIndex;
        /*Location2141*/protected virtual int _NullableDictionaryWithNullable_ByteLength => _NullableLazinatorListNonNullable_ByteIndex - _NullableDictionaryWithNullable_ByteIndex;
        /*Location2142*/protected virtual int _NullableLazinatorListNonNullable_ByteLength => _NullableLazinatorListNullable_ByteIndex - _NullableLazinatorListNonNullable_ByteIndex;
        /*Location2143*/protected virtual int _NullableLazinatorListNullable_ByteLength => _NullableListOfNonNullables_ByteIndex - _NullableLazinatorListNullable_ByteIndex;
        /*Location2144*/protected virtual int _NullableListOfNonNullables_ByteLength => _NullableListOfNullables_ByteIndex - _NullableListOfNonNullables_ByteIndex;
        /*Location2145*/protected virtual int _NullableListOfNullables_ByteLength => _NullableMemoryOfBytes_ByteIndex - _NullableListOfNullables_ByteIndex;
        /*Location2146*/protected virtual int _NullableMemoryOfBytes_ByteLength => _NullableQueueOfNonNullables_ByteIndex - _NullableMemoryOfBytes_ByteIndex;
        /*Location2147*/protected virtual int _NullableQueueOfNonNullables_ByteLength => _NullableQueueOfNullables_ByteIndex - _NullableQueueOfNonNullables_ByteIndex;
        /*Location2148*/protected virtual int _NullableQueueOfNullables_ByteLength => _NullableReadOnlyMemoryOfBytes_ByteIndex - _NullableQueueOfNullables_ByteIndex;
        /*Location2149*/protected virtual int _NullableReadOnlyMemoryOfBytes_ByteLength => _NullableRecordLikeClass_ByteIndex - _NullableReadOnlyMemoryOfBytes_ByteIndex;
        /*Location2150*/protected virtual int _NullableRecordLikeClass_ByteLength => _NullableRecordLikeStruct_ByteIndex - _NullableRecordLikeClass_ByteIndex;
        /*Location2151*/protected virtual int _NullableRecordLikeStruct_ByteLength => _NullableRegularTupleWithNonNullable_ByteIndex - _NullableRecordLikeStruct_ByteIndex;
        /*Location2152*/protected virtual int _NullableRegularTupleWithNonNullable_ByteLength => _NullableRegularTupleWithNullable_ByteIndex - _NullableRegularTupleWithNonNullable_ByteIndex;
        /*Location2153*/protected virtual int _NullableRegularTupleWithNullable_ByteLength => _NullableStackOfNonNullables_ByteIndex - _NullableRegularTupleWithNullable_ByteIndex;
        /*Location2154*/protected virtual int _NullableStackOfNonNullables_ByteLength => _NullableStackOfNullables_ByteIndex - _NullableStackOfNonNullables_ByteIndex;
        /*Location2155*/protected virtual int _NullableStackOfNullables_ByteLength => _NullableStruct_ByteIndex - _NullableStackOfNullables_ByteIndex;
        /*Location2156*/protected virtual int _NullableStruct_ByteLength => _NullableValueTupleWithNonNullable_ByteIndex - _NullableStruct_ByteIndex;
        /*Location2157*/protected virtual int _NullableValueTupleWithNonNullable_ByteLength => _NullableValueTupleWithNullable_ByteIndex - _NullableValueTupleWithNonNullable_ByteIndex;
        /*Location2158*/protected virtual int _NullableValueTupleWithNullable_ByteLength => _ValueTupleWithNonNullable_ByteIndex - _NullableValueTupleWithNullable_ByteIndex;
        /*Location2159*/protected virtual int _ValueTupleWithNonNullable_ByteLength => _ValueTupleWithNullable_ByteIndex - _ValueTupleWithNonNullable_ByteIndex;
        /*Location2160*/private int _NullableEnabledContext_EndByteIndex;
        /*Location2161*/protected virtual int _ValueTupleWithNullable_ByteLength => _NullableEnabledContext_EndByteIndex - _ValueTupleWithNullable_ByteIndex;
        
        /*Location2162*/
        protected int _MyInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int MyInt
        {
            get
            {
                return _MyInt;
            }
            set
            {
                IsDirty = true;
                _MyInt = value;
            }
        }
        /*Location2163*/
        protected int? _MyNullableInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int? MyNullableInt
        {
            get
            {
                return _MyNullableInt;
            }
            set
            {
                IsDirty = true;
                _MyNullableInt = value;
            }
        }
        /*Location2164*/
        protected string _NonNullableString = "";
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string NonNullableString
        {
            get
            {
                return _NonNullableString;
            }
            set
            {
                IsDirty = true;
                _NonNullableString = value;
            }
        }
        /*Location2165*/
        protected string? _NullableString;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string? NullableString
        {
            get
            {
                return _NullableString;
            }
            set
            {
                IsDirty = true;
                _NullableString = value;
            }
        }
        /*Location2166*/private ReadOnlyMemory<byte> _ByteReadOnlySpan;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlySpan<byte> ByteReadOnlySpan
        {
            get
            {
                if (!_ByteReadOnlySpan_Accessed)
                {
                    LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ByteReadOnlySpan_ByteIndex, _ByteReadOnlySpan_ByteLength, false, false, null);
                    return childData.Span;
                }
                
                return _ByteReadOnlySpan.Span;
            }
            set
            {
                IsDirty = true;
                _ByteReadOnlySpan = new ReadOnlyMemory<byte>((value).ToArray());
                _ByteReadOnlySpan_Accessed = true;
                
            }
        }
        protected bool _ByteReadOnlySpan_Accessed;
        /*Location2167*/
        protected Example? _ExplicitlyNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example? ExplicitlyNullable
        {
            get
            {
                if (!_ExplicitlyNullable_Accessed)
                {
                    Lazinate_ExplicitlyNullable();
                } 
                return _ExplicitlyNullable;
            }
            set
            {
                if (_ExplicitlyNullable != null)
                {
                    _ExplicitlyNullable.LazinatorParents = _ExplicitlyNullable.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ExplicitlyNullable = value;
                _ExplicitlyNullable_Accessed = true;
            }
        }
        protected bool _ExplicitlyNullable_Accessed;
        private void Lazinate_ExplicitlyNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _ExplicitlyNullable = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ExplicitlyNullable_ByteIndex, _ExplicitlyNullable_ByteLength, false, false, null);
                
                _ExplicitlyNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(1012, (c, p) => new Example(c, p), childData, this); 
            }
            
            _ExplicitlyNullable_Accessed = true;
        }
        
        /*Location2168*/
        protected IExample? _ExplicitlyNullableInterface;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IExample? ExplicitlyNullableInterface
        {
            get
            {
                if (!_ExplicitlyNullableInterface_Accessed)
                {
                    Lazinate_ExplicitlyNullableInterface();
                } 
                return _ExplicitlyNullableInterface;
            }
            set
            {
                if (_ExplicitlyNullableInterface != null)
                {
                    _ExplicitlyNullableInterface.LazinatorParents = _ExplicitlyNullableInterface.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ExplicitlyNullableInterface = value;
                _ExplicitlyNullableInterface_Accessed = true;
            }
        }
        protected bool _ExplicitlyNullableInterface_Accessed;
        private void Lazinate_ExplicitlyNullableInterface()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _ExplicitlyNullableInterface = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ExplicitlyNullableInterface_ByteIndex, _ExplicitlyNullableInterface_ByteLength, false, false, null);
                
                _ExplicitlyNullableInterface = DeserializationFactory.Instance.CreateBasedOnType<IExample?>(childData, this); 
            }
            
            _ExplicitlyNullableInterface_Accessed = true;
        }
        
        /*Location2169*/
        protected Example[] _NonNullableArrayOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example[] NonNullableArrayOfNonNullables
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableArrayOfNonNullables!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableArrayOfNonNullables = value;
            }
        }
        
        /*Location2170*/
        protected Example?[] _NonNullableArrayOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example?[] NonNullableArrayOfNullables
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableArrayOfNullables!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableArrayOfNullables = value;
            }
        }
        
        /*Location2171*/
        protected Example _NonNullableClass;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example NonNullableClass
        {
            get
            {
                
                return _NonNullableClass!;
            }
            set
            {
                _ = value ?? throw new ArgumentNullException(nameof(value));
                if (_NonNullableClass != null)
                {
                    _NonNullableClass.LazinatorParents = _NonNullableClass.LazinatorParents.WithRemoved(this);
                }
                value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableClass = value;
            }
        }
        
        /*Location2172*/
        protected Dictionary<int, Example> _NonNullableDictionaryWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<int, Example> NonNullableDictionaryWithNonNullable
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableDictionaryWithNonNullable!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableDictionaryWithNonNullable = value;
            }
        }
        
        /*Location2173*/
        protected Dictionary<int, Example?> _NonNullableDictionaryWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<int, Example?> NonNullableDictionaryWithNullable
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableDictionaryWithNullable!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableDictionaryWithNullable = value;
            }
        }
        
        /*Location2174*/
        protected IExample _NonNullableInterface;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IExample NonNullableInterface
        {
            get
            {
                
                return _NonNullableInterface!;
            }
            set
            {
                _ = value ?? throw new ArgumentNullException(nameof(value));
                if (_NonNullableInterface != null)
                {
                    _NonNullableInterface.LazinatorParents = _NonNullableInterface.LazinatorParents.WithRemoved(this);
                }
                value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableInterface = value;
            }
        }
        
        /*Location2175*/
        protected LazinatorList<Example> _NonNullableLazinatorListNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorList<Example> NonNullableLazinatorListNonNullable
        {
            get
            {
                
                return _NonNullableLazinatorListNonNullable!;
            }
            set
            {
                _ = value ?? throw new ArgumentNullException(nameof(value));
                if (_NonNullableLazinatorListNonNullable != null)
                {
                    _NonNullableLazinatorListNonNullable.LazinatorParents = _NonNullableLazinatorListNonNullable.LazinatorParents.WithRemoved(this);
                }
                value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableLazinatorListNonNullable = value;
            }
        }
        
        /*Location2176*/
        protected LazinatorList<Example?> _NonNullableLazinatorListNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorList<Example?> NonNullableLazinatorListNullable
        {
            get
            {
                
                return _NonNullableLazinatorListNullable!;
            }
            set
            {
                _ = value ?? throw new ArgumentNullException(nameof(value));
                if (_NonNullableLazinatorListNullable != null)
                {
                    _NonNullableLazinatorListNullable.LazinatorParents = _NonNullableLazinatorListNullable.LazinatorParents.WithRemoved(this);
                }
                value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableLazinatorListNullable = value;
            }
        }
        
        /*Location2177*/
        protected List<Example> _NonNullableListOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Example> NonNullableListOfNonNullables
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableListOfNonNullables!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableListOfNonNullables = value;
            }
        }
        
        /*Location2178*/
        protected List<Example?> _NonNullableListOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Example?> NonNullableListOfNullables
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableListOfNullables!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableListOfNullables = value;
            }
        }
        
        /*Location2179*/
        protected Memory<byte> _NonNullableMemoryOfBytes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Memory<byte> NonNullableMemoryOfBytes
        {
            get
            {
                if (!_NonNullableMemoryOfBytes_Accessed)
                {
                    Lazinate_NonNullableMemoryOfBytes();
                }
                IsDirty = true; 
                return _NonNullableMemoryOfBytes;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableMemoryOfBytes = value;
                _NonNullableMemoryOfBytes_Accessed = true;
            }
        }
        protected bool _NonNullableMemoryOfBytes_Accessed;
        private void Lazinate_NonNullableMemoryOfBytes()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NonNullableMemoryOfBytes = default(Memory<byte>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableMemoryOfBytes_ByteIndex, _NonNullableMemoryOfBytes_ByteLength, false, false, null);
                _NonNullableMemoryOfBytes = ConvertFromBytes_Memory_Gbyte_g(childData);
            }
            
            _NonNullableMemoryOfBytes_Accessed = true;
        }
        
        /*Location2180*/
        protected Queue<Example> _NonNullableQueueOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Queue<Example> NonNullableQueueOfNonNullables
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableQueueOfNonNullables!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableQueueOfNonNullables = value;
            }
        }
        
        /*Location2181*/
        protected Queue<Example?> _NonNullableQueueOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Queue<Example?> NonNullableQueueOfNullables
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableQueueOfNullables!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableQueueOfNullables = value;
            }
        }
        
        /*Location2182*/
        protected ReadOnlyMemory<byte> _NonNullableReadOnlyMemoryOfBytes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlyMemory<byte> NonNullableReadOnlyMemoryOfBytes
        {
            get
            {
                if (!_NonNullableReadOnlyMemoryOfBytes_Accessed)
                {
                    Lazinate_NonNullableReadOnlyMemoryOfBytes();
                }
                IsDirty = true; 
                return _NonNullableReadOnlyMemoryOfBytes;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableReadOnlyMemoryOfBytes = value;
                _NonNullableReadOnlyMemoryOfBytes_Accessed = true;
            }
        }
        protected bool _NonNullableReadOnlyMemoryOfBytes_Accessed;
        private void Lazinate_NonNullableReadOnlyMemoryOfBytes()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NonNullableReadOnlyMemoryOfBytes = default(ReadOnlyMemory<byte>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableReadOnlyMemoryOfBytes_ByteIndex, _NonNullableReadOnlyMemoryOfBytes_ByteLength, false, false, null);
                _NonNullableReadOnlyMemoryOfBytes = ConvertFromBytes_ReadOnlyMemory_Gbyte_g(childData);
            }
            
            _NonNullableReadOnlyMemoryOfBytes_Accessed = true;
        }
        
        /*Location2183*/
        protected RecordLikeClass? _NonNullableRecordLikeClass;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RecordLikeClass? NonNullableRecordLikeClass
        {
            get
            {
                if (!_NonNullableRecordLikeClass_Accessed)
                {
                    Lazinate_NonNullableRecordLikeClass();
                }
                IsDirty = true; 
                return _NonNullableRecordLikeClass;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableRecordLikeClass = value;
                _NonNullableRecordLikeClass_Accessed = true;
            }
        }
        protected bool _NonNullableRecordLikeClass_Accessed;
        private void Lazinate_NonNullableRecordLikeClass()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NonNullableRecordLikeClass = default(RecordLikeClass?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableRecordLikeClass_ByteIndex, _NonNullableRecordLikeClass_ByteLength, false, false, null);
                _NonNullableRecordLikeClass = ConvertFromBytes_RecordLikeClass(childData);
            }
            
            _NonNullableRecordLikeClass_Accessed = true;
        }
        
        /*Location2184*/
        protected RecordLikeStruct _NonNullableRecordLikeStruct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RecordLikeStruct NonNullableRecordLikeStruct
        {
            get
            {
                if (!_NonNullableRecordLikeStruct_Accessed)
                {
                    Lazinate_NonNullableRecordLikeStruct();
                } 
                return _NonNullableRecordLikeStruct;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableRecordLikeStruct = value;
                _NonNullableRecordLikeStruct_Accessed = true;
            }
        }
        protected bool _NonNullableRecordLikeStruct_Accessed;
        private void Lazinate_NonNullableRecordLikeStruct()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NonNullableRecordLikeStruct = default(RecordLikeStruct);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableRecordLikeStruct_ByteIndex, _NonNullableRecordLikeStruct_ByteLength, false, false, null);
                _NonNullableRecordLikeStruct = ConvertFromBytes_RecordLikeStruct(childData);
            }
            
            _NonNullableRecordLikeStruct_Accessed = true;
        }
        
        /*Location2185*/
        protected Tuple<Example, int> _NonNullableRegularTupleWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<Example, int> NonNullableRegularTupleWithNonNullable
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableRegularTupleWithNonNullable!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableRegularTupleWithNonNullable = value;
            }
        }
        
        /*Location2186*/
        protected Tuple<Example?, int> _NonNullableRegularTupleWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<Example?, int> NonNullableRegularTupleWithNullable
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableRegularTupleWithNullable!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableRegularTupleWithNullable = value;
            }
        }
        
        /*Location2187*/
        protected Stack<Example> _NonNullableStackOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Stack<Example> NonNullableStackOfNonNullables
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableStackOfNonNullables!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableStackOfNonNullables = value;
            }
        }
        
        /*Location2188*/
        protected Stack<Example?> _NonNullableStackOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Stack<Example?> NonNullableStackOfNullables
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableStackOfNullables!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableStackOfNullables = value;
            }
        }
        
        /*Location2189*/
        protected ExampleStructWithoutClass _NonNullableStruct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleStructWithoutClass NonNullableStruct
        {
            get
            {
                if (!_NonNullableStruct_Accessed)
                {
                    Lazinate_NonNullableStruct();
                } 
                return _NonNullableStruct;
            }
            set
            {
                value.LazinatorParents = new LazinatorParentsCollection(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableStruct = value;
                _NonNullableStruct_Accessed = true;
            }
        }
        protected bool _NonNullableStruct_Accessed;
        private void Lazinate_NonNullableStruct()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NonNullableStruct = default(ExampleStructWithoutClass);
                _NonNullableStruct.LazinatorParents = new LazinatorParentsCollection(this);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableStruct_ByteIndex, _NonNullableStruct_ByteLength, false, false, null);
                _NonNullableStruct = new ExampleStructWithoutClass()
                {
                    LazinatorParents = new LazinatorParentsCollection(this)
                };
                _NonNullableStruct.DeserializeLazinator(childData);
            }
            
            _NonNullableStruct_Accessed = true;
        }
        
        /*Location2190*/[DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleStructWithoutClass NonNullableStruct_Copy
        {
            get
            {
                if (!_NonNullableStruct_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        return default(ExampleStructWithoutClass);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableStruct_ByteIndex, _NonNullableStruct_ByteLength, false, false, null);
                        var toReturn = new ExampleStructWithoutClass();
                        toReturn.DeserializeLazinator(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                
                var cleanCopy = _NonNullableStruct;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        /*Location2191*/
        protected Example[]? _NullableArrayOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example[]? NullableArrayOfNonNullables
        {
            get
            {
                if (!_NullableArrayOfNonNullables_Accessed)
                {
                    Lazinate_NullableArrayOfNonNullables();
                }
                IsDirty = true; 
                return _NullableArrayOfNonNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableArrayOfNonNullables = value;
                _NullableArrayOfNonNullables_Accessed = true;
            }
        }
        protected bool _NullableArrayOfNonNullables_Accessed;
        private void Lazinate_NullableArrayOfNonNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableArrayOfNonNullables = default(Example[]?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableArrayOfNonNullables_ByteIndex, _NullableArrayOfNonNullables_ByteLength, false, false, null);
                _NullableArrayOfNonNullables = ConvertFromBytes_Example_B_b_C63(childData);
            }
            
            _NullableArrayOfNonNullables_Accessed = true;
        }
        
        /*Location2192*/
        protected Example?[]? _NullableArrayOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example?[]? NullableArrayOfNullables
        {
            get
            {
                if (!_NullableArrayOfNullables_Accessed)
                {
                    Lazinate_NullableArrayOfNullables();
                }
                IsDirty = true; 
                return _NullableArrayOfNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableArrayOfNullables = value;
                _NullableArrayOfNullables_Accessed = true;
            }
        }
        protected bool _NullableArrayOfNullables_Accessed;
        private void Lazinate_NullableArrayOfNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableArrayOfNullables = default(Example?[]?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableArrayOfNullables_ByteIndex, _NullableArrayOfNullables_ByteLength, false, false, null);
                _NullableArrayOfNullables = ConvertFromBytes_Example_C63_B_b_C63(childData);
            }
            
            _NullableArrayOfNullables_Accessed = true;
        }
        
        /*Location2193*/
        protected Dictionary<int, Example>? _NullableDictionaryWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<int, Example>? NullableDictionaryWithNonNullable
        {
            get
            {
                if (!_NullableDictionaryWithNonNullable_Accessed)
                {
                    Lazinate_NullableDictionaryWithNonNullable();
                }
                IsDirty = true; 
                return _NullableDictionaryWithNonNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableDictionaryWithNonNullable = value;
                _NullableDictionaryWithNonNullable_Accessed = true;
            }
        }
        protected bool _NullableDictionaryWithNonNullable_Accessed;
        private void Lazinate_NullableDictionaryWithNonNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableDictionaryWithNonNullable = default(Dictionary<int, Example>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableDictionaryWithNonNullable_ByteIndex, _NullableDictionaryWithNonNullable_ByteLength, false, false, null);
                _NullableDictionaryWithNonNullable = ConvertFromBytes_Dictionary_Gint_c_C32Example_g_C63(childData);
            }
            
            _NullableDictionaryWithNonNullable_Accessed = true;
        }
        
        /*Location2194*/
        protected Dictionary<int, Example?>? _NullableDictionaryWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<int, Example?>? NullableDictionaryWithNullable
        {
            get
            {
                if (!_NullableDictionaryWithNullable_Accessed)
                {
                    Lazinate_NullableDictionaryWithNullable();
                }
                IsDirty = true; 
                return _NullableDictionaryWithNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableDictionaryWithNullable = value;
                _NullableDictionaryWithNullable_Accessed = true;
            }
        }
        protected bool _NullableDictionaryWithNullable_Accessed;
        private void Lazinate_NullableDictionaryWithNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableDictionaryWithNullable = default(Dictionary<int, Example?>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableDictionaryWithNullable_ByteIndex, _NullableDictionaryWithNullable_ByteLength, false, false, null);
                _NullableDictionaryWithNullable = ConvertFromBytes_Dictionary_Gint_c_C32Example_C63_g_C63(childData);
            }
            
            _NullableDictionaryWithNullable_Accessed = true;
        }
        
        /*Location2195*/
        protected LazinatorList<Example>? _NullableLazinatorListNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorList<Example>? NullableLazinatorListNonNullable
        {
            get
            {
                if (!_NullableLazinatorListNonNullable_Accessed)
                {
                    Lazinate_NullableLazinatorListNonNullable();
                } 
                return _NullableLazinatorListNonNullable;
            }
            set
            {
                if (_NullableLazinatorListNonNullable != null)
                {
                    _NullableLazinatorListNonNullable.LazinatorParents = _NullableLazinatorListNonNullable.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableLazinatorListNonNullable = value;
                _NullableLazinatorListNonNullable_Accessed = true;
            }
        }
        protected bool _NullableLazinatorListNonNullable_Accessed;
        private void Lazinate_NullableLazinatorListNonNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableLazinatorListNonNullable = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableLazinatorListNonNullable_ByteIndex, _NullableLazinatorListNonNullable_ByteLength, false, false, null);
                
                _NullableLazinatorListNonNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(201, (c, p) => new LazinatorList<Example>(c, p), childData, this); 
            }
            
            _NullableLazinatorListNonNullable_Accessed = true;
        }
        
        /*Location2196*/
        protected LazinatorList<Example?>? _NullableLazinatorListNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorList<Example?>? NullableLazinatorListNullable
        {
            get
            {
                if (!_NullableLazinatorListNullable_Accessed)
                {
                    Lazinate_NullableLazinatorListNullable();
                } 
                return _NullableLazinatorListNullable;
            }
            set
            {
                if (_NullableLazinatorListNullable != null)
                {
                    _NullableLazinatorListNullable.LazinatorParents = _NullableLazinatorListNullable.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableLazinatorListNullable = value;
                _NullableLazinatorListNullable_Accessed = true;
            }
        }
        protected bool _NullableLazinatorListNullable_Accessed;
        private void Lazinate_NullableLazinatorListNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableLazinatorListNullable = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableLazinatorListNullable_ByteIndex, _NullableLazinatorListNullable_ByteLength, false, false, null);
                
                _NullableLazinatorListNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(201, (c, p) => new LazinatorList<Example?>(c, p), childData, this); 
            }
            
            _NullableLazinatorListNullable_Accessed = true;
        }
        
        /*Location2197*/
        protected List<Example>? _NullableListOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Example>? NullableListOfNonNullables
        {
            get
            {
                if (!_NullableListOfNonNullables_Accessed)
                {
                    Lazinate_NullableListOfNonNullables();
                }
                IsDirty = true; 
                return _NullableListOfNonNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableListOfNonNullables = value;
                _NullableListOfNonNullables_Accessed = true;
            }
        }
        protected bool _NullableListOfNonNullables_Accessed;
        private void Lazinate_NullableListOfNonNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableListOfNonNullables = default(List<Example>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableListOfNonNullables_ByteIndex, _NullableListOfNonNullables_ByteLength, false, false, null);
                _NullableListOfNonNullables = ConvertFromBytes_List_GExample_g_C63(childData);
            }
            
            _NullableListOfNonNullables_Accessed = true;
        }
        
        /*Location2198*/
        protected List<Example?>? _NullableListOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Example?>? NullableListOfNullables
        {
            get
            {
                if (!_NullableListOfNullables_Accessed)
                {
                    Lazinate_NullableListOfNullables();
                }
                IsDirty = true; 
                return _NullableListOfNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableListOfNullables = value;
                _NullableListOfNullables_Accessed = true;
            }
        }
        protected bool _NullableListOfNullables_Accessed;
        private void Lazinate_NullableListOfNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableListOfNullables = default(List<Example?>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableListOfNullables_ByteIndex, _NullableListOfNullables_ByteLength, false, false, null);
                _NullableListOfNullables = ConvertFromBytes_List_GExample_C63_g_C63(childData);
            }
            
            _NullableListOfNullables_Accessed = true;
        }
        
        /*Location2199*/
        protected Memory<byte>? _NullableMemoryOfBytes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Memory<byte>? NullableMemoryOfBytes
        {
            get
            {
                if (!_NullableMemoryOfBytes_Accessed)
                {
                    Lazinate_NullableMemoryOfBytes();
                }
                IsDirty = true; 
                return _NullableMemoryOfBytes;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableMemoryOfBytes = value;
                _NullableMemoryOfBytes_Accessed = true;
            }
        }
        protected bool _NullableMemoryOfBytes_Accessed;
        private void Lazinate_NullableMemoryOfBytes()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableMemoryOfBytes = default(Memory<byte>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableMemoryOfBytes_ByteIndex, _NullableMemoryOfBytes_ByteLength, false, false, null);
                _NullableMemoryOfBytes = ConvertFromBytes_Memory_Gbyte_g_C63(childData);
            }
            
            _NullableMemoryOfBytes_Accessed = true;
        }
        
        /*Location2200*/
        protected Queue<Example>? _NullableQueueOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Queue<Example>? NullableQueueOfNonNullables
        {
            get
            {
                if (!_NullableQueueOfNonNullables_Accessed)
                {
                    Lazinate_NullableQueueOfNonNullables();
                }
                IsDirty = true; 
                return _NullableQueueOfNonNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableQueueOfNonNullables = value;
                _NullableQueueOfNonNullables_Accessed = true;
            }
        }
        protected bool _NullableQueueOfNonNullables_Accessed;
        private void Lazinate_NullableQueueOfNonNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableQueueOfNonNullables = default(Queue<Example>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableQueueOfNonNullables_ByteIndex, _NullableQueueOfNonNullables_ByteLength, false, false, null);
                _NullableQueueOfNonNullables = ConvertFromBytes_Queue_GExample_g_C63(childData);
            }
            
            _NullableQueueOfNonNullables_Accessed = true;
        }
        
        /*Location2201*/
        protected Queue<Example?>? _NullableQueueOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Queue<Example?>? NullableQueueOfNullables
        {
            get
            {
                if (!_NullableQueueOfNullables_Accessed)
                {
                    Lazinate_NullableQueueOfNullables();
                }
                IsDirty = true; 
                return _NullableQueueOfNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableQueueOfNullables = value;
                _NullableQueueOfNullables_Accessed = true;
            }
        }
        protected bool _NullableQueueOfNullables_Accessed;
        private void Lazinate_NullableQueueOfNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableQueueOfNullables = default(Queue<Example?>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableQueueOfNullables_ByteIndex, _NullableQueueOfNullables_ByteLength, false, false, null);
                _NullableQueueOfNullables = ConvertFromBytes_Queue_GExample_C63_g_C63(childData);
            }
            
            _NullableQueueOfNullables_Accessed = true;
        }
        
        /*Location2202*/
        protected ReadOnlyMemory<byte>? _NullableReadOnlyMemoryOfBytes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlyMemory<byte>? NullableReadOnlyMemoryOfBytes
        {
            get
            {
                if (!_NullableReadOnlyMemoryOfBytes_Accessed)
                {
                    Lazinate_NullableReadOnlyMemoryOfBytes();
                }
                IsDirty = true; 
                return _NullableReadOnlyMemoryOfBytes;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableReadOnlyMemoryOfBytes = value;
                _NullableReadOnlyMemoryOfBytes_Accessed = true;
            }
        }
        protected bool _NullableReadOnlyMemoryOfBytes_Accessed;
        private void Lazinate_NullableReadOnlyMemoryOfBytes()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableReadOnlyMemoryOfBytes = default(ReadOnlyMemory<byte>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableReadOnlyMemoryOfBytes_ByteIndex, _NullableReadOnlyMemoryOfBytes_ByteLength, false, false, null);
                _NullableReadOnlyMemoryOfBytes = ConvertFromBytes_ReadOnlyMemory_Gbyte_g_C63(childData);
            }
            
            _NullableReadOnlyMemoryOfBytes_Accessed = true;
        }
        
        /*Location2203*/
        protected RecordLikeClass? _NullableRecordLikeClass;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RecordLikeClass? NullableRecordLikeClass
        {
            get
            {
                if (!_NullableRecordLikeClass_Accessed)
                {
                    Lazinate_NullableRecordLikeClass();
                }
                IsDirty = true; 
                return _NullableRecordLikeClass;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableRecordLikeClass = value;
                _NullableRecordLikeClass_Accessed = true;
            }
        }
        protected bool _NullableRecordLikeClass_Accessed;
        private void Lazinate_NullableRecordLikeClass()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableRecordLikeClass = default(RecordLikeClass?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableRecordLikeClass_ByteIndex, _NullableRecordLikeClass_ByteLength, false, false, null);
                _NullableRecordLikeClass = ConvertFromBytes_RecordLikeClass(childData);
            }
            
            _NullableRecordLikeClass_Accessed = true;
        }
        
        /*Location2204*/
        protected RecordLikeStruct? _NullableRecordLikeStruct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RecordLikeStruct? NullableRecordLikeStruct
        {
            get
            {
                if (!_NullableRecordLikeStruct_Accessed)
                {
                    Lazinate_NullableRecordLikeStruct();
                }
                IsDirty = true; 
                return _NullableRecordLikeStruct;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableRecordLikeStruct = value;
                _NullableRecordLikeStruct_Accessed = true;
            }
        }
        protected bool _NullableRecordLikeStruct_Accessed;
        private void Lazinate_NullableRecordLikeStruct()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableRecordLikeStruct = default(RecordLikeStruct?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableRecordLikeStruct_ByteIndex, _NullableRecordLikeStruct_ByteLength, false, false, null);
                _NullableRecordLikeStruct = ConvertFromBytes_RecordLikeStruct_C63(childData);
            }
            
            _NullableRecordLikeStruct_Accessed = true;
        }
        
        /*Location2205*/
        protected Tuple<Example, int>? _NullableRegularTupleWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<Example, int>? NullableRegularTupleWithNonNullable
        {
            get
            {
                if (!_NullableRegularTupleWithNonNullable_Accessed)
                {
                    Lazinate_NullableRegularTupleWithNonNullable();
                }
                IsDirty = true; 
                return _NullableRegularTupleWithNonNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableRegularTupleWithNonNullable = value;
                _NullableRegularTupleWithNonNullable_Accessed = true;
            }
        }
        protected bool _NullableRegularTupleWithNonNullable_Accessed;
        private void Lazinate_NullableRegularTupleWithNonNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableRegularTupleWithNonNullable = default(Tuple<Example, int>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableRegularTupleWithNonNullable_ByteIndex, _NullableRegularTupleWithNonNullable_ByteLength, false, false, null);
                _NullableRegularTupleWithNonNullable = ConvertFromBytes_Tuple_GExample_c_C32int_g_C63(childData);
            }
            
            _NullableRegularTupleWithNonNullable_Accessed = true;
        }
        
        /*Location2206*/
        protected Tuple<Example?, int>? _NullableRegularTupleWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<Example?, int>? NullableRegularTupleWithNullable
        {
            get
            {
                if (!_NullableRegularTupleWithNullable_Accessed)
                {
                    Lazinate_NullableRegularTupleWithNullable();
                }
                IsDirty = true; 
                return _NullableRegularTupleWithNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableRegularTupleWithNullable = value;
                _NullableRegularTupleWithNullable_Accessed = true;
            }
        }
        protected bool _NullableRegularTupleWithNullable_Accessed;
        private void Lazinate_NullableRegularTupleWithNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableRegularTupleWithNullable = default(Tuple<Example?, int>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableRegularTupleWithNullable_ByteIndex, _NullableRegularTupleWithNullable_ByteLength, false, false, null);
                _NullableRegularTupleWithNullable = ConvertFromBytes_Tuple_GExample_C63_c_C32int_g_C63(childData);
            }
            
            _NullableRegularTupleWithNullable_Accessed = true;
        }
        
        /*Location2207*/
        protected Stack<Example>? _NullableStackOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Stack<Example>? NullableStackOfNonNullables
        {
            get
            {
                if (!_NullableStackOfNonNullables_Accessed)
                {
                    Lazinate_NullableStackOfNonNullables();
                }
                IsDirty = true; 
                return _NullableStackOfNonNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableStackOfNonNullables = value;
                _NullableStackOfNonNullables_Accessed = true;
            }
        }
        protected bool _NullableStackOfNonNullables_Accessed;
        private void Lazinate_NullableStackOfNonNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableStackOfNonNullables = default(Stack<Example>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableStackOfNonNullables_ByteIndex, _NullableStackOfNonNullables_ByteLength, false, false, null);
                _NullableStackOfNonNullables = ConvertFromBytes_Stack_GExample_g_C63(childData);
            }
            
            _NullableStackOfNonNullables_Accessed = true;
        }
        
        /*Location2208*/
        protected Stack<Example?>? _NullableStackOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Stack<Example?>? NullableStackOfNullables
        {
            get
            {
                if (!_NullableStackOfNullables_Accessed)
                {
                    Lazinate_NullableStackOfNullables();
                }
                IsDirty = true; 
                return _NullableStackOfNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableStackOfNullables = value;
                _NullableStackOfNullables_Accessed = true;
            }
        }
        protected bool _NullableStackOfNullables_Accessed;
        private void Lazinate_NullableStackOfNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableStackOfNullables = default(Stack<Example?>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableStackOfNullables_ByteIndex, _NullableStackOfNullables_ByteLength, false, false, null);
                _NullableStackOfNullables = ConvertFromBytes_Stack_GExample_C63_g_C63(childData);
            }
            
            _NullableStackOfNullables_Accessed = true;
        }
        
        /*Location2209*/
        protected ExampleStructWithoutClass? _NullableStruct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleStructWithoutClass? NullableStruct
        {
            get
            {
                if (!_NullableStruct_Accessed)
                {
                    Lazinate_NullableStruct();
                } 
                return _NullableStruct;
            }
            set
            {
                if (value.HasValue)
                {
                    var copy = value.Value;
                    copy.LazinatorParents = new LazinatorParentsCollection(this);
                    value = copy;
                }
                
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableStruct = value;
                _NullableStruct_Accessed = true;
            }
        }
        protected bool _NullableStruct_Accessed;
        private void Lazinate_NullableStruct()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableStruct = default(ExampleStructWithoutClass?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableStruct_ByteIndex, _NullableStruct_ByteLength, false, false, null);
                if (childData.Length == 0)
                {
                    _NullableStruct = default;
                }
                else 
                {
                    _NullableStruct = new ExampleStructWithoutClass()
                    {
                        LazinatorParents = new LazinatorParentsCollection(this)
                    };
                    var copy = _NullableStruct.Value;
                    copy.DeserializeLazinator(childData);
                    _NullableStruct = copy;
                }
            }
            
            _NullableStruct_Accessed = true;
        }
        
        /*Location2210*/[DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleStructWithoutClass? NullableStruct_Copy
        {
            get
            {
                if (!_NullableStruct_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        return null;
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableStruct_ByteIndex, _NullableStruct_ByteLength, false, false, null);
                        var toReturn = new ExampleStructWithoutClass();
                        toReturn.DeserializeLazinator(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                
                if (_NullableStruct == null)
                {
                    return null;
                }
                var cleanCopy = _NullableStruct.Value;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        /*Location2211*/
        protected (Example, int)? _NullableValueTupleWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (Example, int)? NullableValueTupleWithNonNullable
        {
            get
            {
                if (!_NullableValueTupleWithNonNullable_Accessed)
                {
                    Lazinate_NullableValueTupleWithNonNullable();
                }
                IsDirty = true; 
                return _NullableValueTupleWithNonNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableValueTupleWithNonNullable = value;
                _NullableValueTupleWithNonNullable_Accessed = true;
            }
        }
        protected bool _NullableValueTupleWithNonNullable_Accessed;
        private void Lazinate_NullableValueTupleWithNonNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableValueTupleWithNonNullable = default((Example, int)?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableValueTupleWithNonNullable_ByteIndex, _NullableValueTupleWithNonNullable_ByteLength, false, false, null);
                _NullableValueTupleWithNonNullable = ConvertFromBytes__PExample_c_C32int_p_C63(childData);
            }
            
            _NullableValueTupleWithNonNullable_Accessed = true;
        }
        
        /*Location2212*/
        protected (Example?, int)? _NullableValueTupleWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (Example?, int)? NullableValueTupleWithNullable
        {
            get
            {
                if (!_NullableValueTupleWithNullable_Accessed)
                {
                    Lazinate_NullableValueTupleWithNullable();
                }
                IsDirty = true; 
                return _NullableValueTupleWithNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableValueTupleWithNullable = value;
                _NullableValueTupleWithNullable_Accessed = true;
            }
        }
        protected bool _NullableValueTupleWithNullable_Accessed;
        private void Lazinate_NullableValueTupleWithNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableValueTupleWithNullable = default((Example?, int)?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableValueTupleWithNullable_ByteIndex, _NullableValueTupleWithNullable_ByteLength, false, false, null);
                _NullableValueTupleWithNullable = ConvertFromBytes__PExample_C63_c_C32int_p_C63(childData);
            }
            
            _NullableValueTupleWithNullable_Accessed = true;
        }
        
        /*Location2213*/
        protected (Example, int) _ValueTupleWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (Example, int) ValueTupleWithNonNullable
        {
            get
            {
                if (!_ValueTupleWithNonNullable_Accessed)
                {
                    Lazinate_ValueTupleWithNonNullable();
                }
                IsDirty = true; 
                return _ValueTupleWithNonNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _ValueTupleWithNonNullable = value;
                _ValueTupleWithNonNullable_Accessed = true;
            }
        }
        protected bool _ValueTupleWithNonNullable_Accessed;
        private void Lazinate_ValueTupleWithNonNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _ValueTupleWithNonNullable = default((Example, int));
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ValueTupleWithNonNullable_ByteIndex, _ValueTupleWithNonNullable_ByteLength, false, false, null);
                _ValueTupleWithNonNullable = ConvertFromBytes__PExample_c_C32int_p(childData);
            }
            
            _ValueTupleWithNonNullable_Accessed = true;
        }
        
        /*Location2214*/
        protected (Example?, int) _ValueTupleWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (Example?, int) ValueTupleWithNullable
        {
            get
            {
                if (!_ValueTupleWithNullable_Accessed)
                {
                    Lazinate_ValueTupleWithNullable();
                }
                IsDirty = true; 
                return _ValueTupleWithNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _ValueTupleWithNullable = value;
                _ValueTupleWithNullable_Accessed = true;
            }
        }
        protected bool _ValueTupleWithNullable_Accessed;
        private void Lazinate_ValueTupleWithNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _ValueTupleWithNullable = default((Example?, int));
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ValueTupleWithNullable_ByteIndex, _ValueTupleWithNullable_ByteLength, false, false, null);
                _ValueTupleWithNullable = ConvertFromBytes__PExample_C63_c_C32int_p(childData);
            }
            
            _ValueTupleWithNullable_Accessed = true;
        }
        
        /*Location2266*/
        /* Serialization, deserialization, and object relationships */
        
        public NullableEnabledContext(IncludeChildrenMode originalIncludeChildrenMode, Example[] nonNullableArrayOfNonNullables, Example?[] nonNullableArrayOfNullables, Example nonNullableClass, Dictionary<int, Example> nonNullableDictionaryWithNonNullable, Dictionary<int, Example?> nonNullableDictionaryWithNullable, IExample nonNullableInterface, LazinatorList<Example> nonNullableLazinatorListNonNullable, LazinatorList<Example?> nonNullableLazinatorListNullable, List<Example> nonNullableListOfNonNullables, List<Example?> nonNullableListOfNullables, Queue<Example> nonNullableQueueOfNonNullables, Queue<Example?> nonNullableQueueOfNullables, Tuple<Example, int> nonNullableRegularTupleWithNonNullable, Tuple<Example?, int> nonNullableRegularTupleWithNullable, Stack<Example> nonNullableStackOfNonNullables, Stack<Example?> nonNullableStackOfNullables)
        {
            _NonNullableArrayOfNonNullables = nonNullableArrayOfNonNullables;
            _NonNullableArrayOfNullables = nonNullableArrayOfNullables;
            _NonNullableClass = nonNullableClass;
            _NonNullableDictionaryWithNonNullable = nonNullableDictionaryWithNonNullable;
            _NonNullableDictionaryWithNullable = nonNullableDictionaryWithNullable;
            _NonNullableInterface = nonNullableInterface;
            _NonNullableLazinatorListNonNullable = nonNullableLazinatorListNonNullable;
            _NonNullableLazinatorListNullable = nonNullableLazinatorListNullable;
            _NonNullableListOfNonNullables = nonNullableListOfNonNullables;
            _NonNullableListOfNullables = nonNullableListOfNullables;
            _NonNullableQueueOfNonNullables = nonNullableQueueOfNonNullables;
            _NonNullableQueueOfNullables = nonNullableQueueOfNullables;
            _NonNullableRegularTupleWithNonNullable = nonNullableRegularTupleWithNonNullable;
            _NonNullableRegularTupleWithNullable = nonNullableRegularTupleWithNullable;
            _NonNullableStackOfNonNullables = nonNullableStackOfNonNullables;
            _NonNullableStackOfNullables = nonNullableStackOfNullables;
            
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public NullableEnabledContext(LazinatorMemory serializedBytes, ILazinator? parent = null)
        {
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;LazinatorMemory childData;
            
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableArrayOfNonNullables_ByteIndex, _NonNullableArrayOfNonNullables_ByteLength, false, false, null);
            _NonNullableArrayOfNonNullables = ConvertFromBytes_Example_B_b(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableArrayOfNullables_ByteIndex, _NonNullableArrayOfNullables_ByteLength, false, false, null);
            _NonNullableArrayOfNullables = ConvertFromBytes_Example_C63_B_b(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableClass_ByteIndex, _NonNullableClass_ByteLength, false, false, null);
            
            _NonNullableClass = DeserializationFactory.Instance.CreateBaseOrDerivedType(1012, (c, p) => new Example(c, p), childData, this); 
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableDictionaryWithNonNullable_ByteIndex, _NonNullableDictionaryWithNonNullable_ByteLength, false, false, null);
            _NonNullableDictionaryWithNonNullable = ConvertFromBytes_Dictionary_Gint_c_C32Example_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableDictionaryWithNullable_ByteIndex, _NonNullableDictionaryWithNullable_ByteLength, false, false, null);
            _NonNullableDictionaryWithNullable = ConvertFromBytes_Dictionary_Gint_c_C32Example_C63_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableInterface_ByteIndex, _NonNullableInterface_ByteLength, false, false, null);
            
            _NonNullableInterface = DeserializationFactory.Instance.CreateBasedOnType<IExample>(childData, this); 
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableLazinatorListNonNullable_ByteIndex, _NonNullableLazinatorListNonNullable_ByteLength, false, false, null);
            
            _NonNullableLazinatorListNonNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(201, (c, p) => new LazinatorList<Example>(c, p), childData, this); 
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableLazinatorListNullable_ByteIndex, _NonNullableLazinatorListNullable_ByteLength, false, false, null);
            
            _NonNullableLazinatorListNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(201, (c, p) => new LazinatorList<Example?>(c, p), childData, this); 
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableListOfNonNullables_ByteIndex, _NonNullableListOfNonNullables_ByteLength, false, false, null);
            _NonNullableListOfNonNullables = ConvertFromBytes_List_GExample_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableListOfNullables_ByteIndex, _NonNullableListOfNullables_ByteLength, false, false, null);
            _NonNullableListOfNullables = ConvertFromBytes_List_GExample_C63_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableQueueOfNonNullables_ByteIndex, _NonNullableQueueOfNonNullables_ByteLength, false, false, null);
            _NonNullableQueueOfNonNullables = ConvertFromBytes_Queue_GExample_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableQueueOfNullables_ByteIndex, _NonNullableQueueOfNullables_ByteLength, false, false, null);
            _NonNullableQueueOfNullables = ConvertFromBytes_Queue_GExample_C63_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableRegularTupleWithNonNullable_ByteIndex, _NonNullableRegularTupleWithNonNullable_ByteLength, false, false, null);
            _NonNullableRegularTupleWithNonNullable = ConvertFromBytes_Tuple_GExample_c_C32int_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableRegularTupleWithNullable_ByteIndex, _NonNullableRegularTupleWithNullable_ByteLength, false, false, null);
            _NonNullableRegularTupleWithNullable = ConvertFromBytes_Tuple_GExample_C63_c_C32int_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableStackOfNonNullables_ByteIndex, _NonNullableStackOfNonNullables_ByteLength, false, false, null);
            _NonNullableStackOfNonNullables = ConvertFromBytes_Stack_GExample_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableStackOfNullables_ByteIndex, _NonNullableStackOfNullables_ByteLength, false, false, null);
            _NonNullableStackOfNullables = ConvertFromBytes_Stack_GExample_C63_g(childData);
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator? CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            NullableEnabledContext clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new NullableEnabledContext(includeChildrenMode, NonNullableArrayOfNonNullables, NonNullableArrayOfNullables, NonNullableClass, NonNullableDictionaryWithNonNullable, NonNullableDictionaryWithNullable, NonNullableInterface, NonNullableLazinatorListNonNullable, NonNullableLazinatorListNullable, NonNullableListOfNonNullables, NonNullableListOfNullables, NonNullableQueueOfNonNullables, NonNullableQueueOfNullables, NonNullableRegularTupleWithNonNullable, NonNullableRegularTupleWithNullable, NonNullableStackOfNonNullables, NonNullableStackOfNullables);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (NullableEnabledContext)AssignCloneProperties(clone, includeChildrenMode)!;
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, false, this);
                clone = new NullableEnabledContext(bytes);
            }
            return clone;
        }
        
        public virtual ILazinator? AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            NullableEnabledContext typedClone = (NullableEnabledContext) clone;
            /*Location2215*/typedClone.MyInt = MyInt;
            /*Location2216*/typedClone.MyNullableInt = MyNullableInt;
            /*Location2217*/typedClone.NonNullableString = NonNullableString;
            /*Location2218*/typedClone.NullableString = NullableString;
            /*Location2219*/typedClone.ByteReadOnlySpan = CloneOrChange_ReadOnlySpan_Gbyte_g(ByteReadOnlySpan, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2220*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (ExplicitlyNullable == null)
                {
                    typedClone.ExplicitlyNullable = null;
                }
                else
                {
                    typedClone.ExplicitlyNullable = (Example?) ExplicitlyNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location2221*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (ExplicitlyNullableInterface == null)
                {
                    typedClone.ExplicitlyNullableInterface = null;
                }
                else
                {
                    typedClone.ExplicitlyNullableInterface = (IExample?) ExplicitlyNullableInterface.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location2222*/typedClone.NonNullableArrayOfNonNullables = CloneOrChange_Example_B_b(NonNullableArrayOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2223*/typedClone.NonNullableArrayOfNullables = CloneOrChange_Example_C63_B_b(NonNullableArrayOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2224*/typedClone.NonNullableClass = (Example) NonNullableClass.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            /*Location2225*/typedClone.NonNullableDictionaryWithNonNullable = CloneOrChange_Dictionary_Gint_c_C32Example_g(NonNullableDictionaryWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2226*/typedClone.NonNullableDictionaryWithNullable = CloneOrChange_Dictionary_Gint_c_C32Example_C63_g(NonNullableDictionaryWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2227*/typedClone.NonNullableInterface = (IExample) NonNullableInterface.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            /*Location2228*/typedClone.NonNullableLazinatorListNonNullable = (LazinatorList<Example>) NonNullableLazinatorListNonNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            /*Location2229*/typedClone.NonNullableLazinatorListNullable = (LazinatorList<Example?>) NonNullableLazinatorListNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            /*Location2230*/typedClone.NonNullableListOfNonNullables = CloneOrChange_List_GExample_g(NonNullableListOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2231*/typedClone.NonNullableListOfNullables = CloneOrChange_List_GExample_C63_g(NonNullableListOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2232*/typedClone.NonNullableMemoryOfBytes = CloneOrChange_Memory_Gbyte_g(NonNullableMemoryOfBytes, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2233*/typedClone.NonNullableQueueOfNonNullables = CloneOrChange_Queue_GExample_g(NonNullableQueueOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2234*/typedClone.NonNullableQueueOfNullables = CloneOrChange_Queue_GExample_C63_g(NonNullableQueueOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2235*/typedClone.NonNullableReadOnlyMemoryOfBytes = CloneOrChange_ReadOnlyMemory_Gbyte_g(NonNullableReadOnlyMemoryOfBytes, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2236*/typedClone.NonNullableRecordLikeClass = CloneOrChange_RecordLikeClass(NonNullableRecordLikeClass, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2237*/typedClone.NonNullableRecordLikeStruct = CloneOrChange_RecordLikeStruct(NonNullableRecordLikeStruct, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2238*/typedClone.NonNullableRegularTupleWithNonNullable = CloneOrChange_Tuple_GExample_c_C32int_g(NonNullableRegularTupleWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2239*/typedClone.NonNullableRegularTupleWithNullable = CloneOrChange_Tuple_GExample_C63_c_C32int_g(NonNullableRegularTupleWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2240*/typedClone.NonNullableStackOfNonNullables = CloneOrChange_Stack_GExample_g(NonNullableStackOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2241*/typedClone.NonNullableStackOfNullables = CloneOrChange_Stack_GExample_C63_g(NonNullableStackOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2242*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.NonNullableStruct = (ExampleStructWithoutClass) NonNullableStruct.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            
            /*Location2243*/typedClone.NullableArrayOfNonNullables = CloneOrChange_Example_B_b_C63(NullableArrayOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2244*/typedClone.NullableArrayOfNullables = CloneOrChange_Example_C63_B_b_C63(NullableArrayOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2245*/typedClone.NullableDictionaryWithNonNullable = CloneOrChange_Dictionary_Gint_c_C32Example_g_C63(NullableDictionaryWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2246*/typedClone.NullableDictionaryWithNullable = CloneOrChange_Dictionary_Gint_c_C32Example_C63_g_C63(NullableDictionaryWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2247*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (NullableLazinatorListNonNullable == null)
                {
                    typedClone.NullableLazinatorListNonNullable = null;
                }
                else
                {
                    typedClone.NullableLazinatorListNonNullable = (LazinatorList<Example>?) NullableLazinatorListNonNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location2248*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (NullableLazinatorListNullable == null)
                {
                    typedClone.NullableLazinatorListNullable = null;
                }
                else
                {
                    typedClone.NullableLazinatorListNullable = (LazinatorList<Example?>?) NullableLazinatorListNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location2249*/typedClone.NullableListOfNonNullables = CloneOrChange_List_GExample_g_C63(NullableListOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2250*/typedClone.NullableListOfNullables = CloneOrChange_List_GExample_C63_g_C63(NullableListOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2251*/typedClone.NullableMemoryOfBytes = CloneOrChange_Memory_Gbyte_g_C63(NullableMemoryOfBytes, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2252*/typedClone.NullableQueueOfNonNullables = CloneOrChange_Queue_GExample_g_C63(NullableQueueOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2253*/typedClone.NullableQueueOfNullables = CloneOrChange_Queue_GExample_C63_g_C63(NullableQueueOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2254*/typedClone.NullableReadOnlyMemoryOfBytes = CloneOrChange_ReadOnlyMemory_Gbyte_g_C63(NullableReadOnlyMemoryOfBytes, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2255*/typedClone.NullableRecordLikeClass = CloneOrChange_RecordLikeClass(NullableRecordLikeClass, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2256*/typedClone.NullableRecordLikeStruct = CloneOrChange_RecordLikeStruct_C63(NullableRecordLikeStruct, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2257*/typedClone.NullableRegularTupleWithNonNullable = CloneOrChange_Tuple_GExample_c_C32int_g_C63(NullableRegularTupleWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2258*/typedClone.NullableRegularTupleWithNullable = CloneOrChange_Tuple_GExample_C63_c_C32int_g_C63(NullableRegularTupleWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2259*/typedClone.NullableStackOfNonNullables = CloneOrChange_Stack_GExample_g_C63(NullableStackOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2260*/typedClone.NullableStackOfNullables = CloneOrChange_Stack_GExample_C63_g_C63(NullableStackOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2261*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (NullableStruct == null)
                {
                    typedClone.NullableStruct = null;
                }
                else
                {
                    typedClone.NullableStruct = (ExampleStructWithoutClass?) NullableStruct.Value.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location2262*/typedClone.NullableValueTupleWithNonNullable = CloneOrChange__PExample_c_C32int_p_C63(NullableValueTupleWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2263*/typedClone.NullableValueTupleWithNullable = CloneOrChange__PExample_C63_c_C32int_p_C63(NullableValueTupleWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2264*/typedClone.ValueTupleWithNonNullable = CloneOrChange__PExample_c_C32int_p(ValueTupleWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location2265*/typedClone.ValueTupleWithNullable = CloneOrChange__PExample_C63_c_C32int_p(ValueTupleWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        /*Location2267*/
        public IEnumerable<ILazinator?> EnumerateLazinatorNodes(Func<ILazinator?, bool>? matchCriterion, bool stopExploringBelowMatch, Func<ILazinator?, bool>? exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location2268*/public virtual IEnumerable<(string propertyName, ILazinator? descendant)> EnumerateLazinatorDescendants(Func<ILazinator?, bool>? matchCriterion, bool stopExploringBelowMatch, Func<ILazinator?, bool>? exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location2269*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ExplicitlyNullable_Accessed) && ExplicitlyNullable == null)
            {
                yield return ("ExplicitlyNullable", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ExplicitlyNullable != null) || (_ExplicitlyNullable_Accessed && _ExplicitlyNullable != null))
                {
                    bool isMatch_ExplicitlyNullable = matchCriterion == null || matchCriterion(ExplicitlyNullable);
                    bool shouldExplore_ExplicitlyNullable = exploreCriterion == null || exploreCriterion(ExplicitlyNullable);
                    if (isMatch_ExplicitlyNullable)
                    {
                        yield return ("ExplicitlyNullable", ExplicitlyNullable);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_ExplicitlyNullable) && shouldExplore_ExplicitlyNullable)
                    {
                        foreach (var toYield in ExplicitlyNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ExplicitlyNullable" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location2270*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ExplicitlyNullableInterface_Accessed) && ExplicitlyNullableInterface == null)
            {
                yield return ("ExplicitlyNullableInterface", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ExplicitlyNullableInterface != null) || (_ExplicitlyNullableInterface_Accessed && _ExplicitlyNullableInterface != null))
                {
                    bool isMatch_ExplicitlyNullableInterface = matchCriterion == null || matchCriterion(ExplicitlyNullableInterface);
                    bool shouldExplore_ExplicitlyNullableInterface = exploreCriterion == null || exploreCriterion(ExplicitlyNullableInterface);
                    if (isMatch_ExplicitlyNullableInterface)
                    {
                        yield return ("ExplicitlyNullableInterface", ExplicitlyNullableInterface);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_ExplicitlyNullableInterface) && shouldExplore_ExplicitlyNullableInterface)
                    {
                        foreach (var toYield in ExplicitlyNullableInterface!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ExplicitlyNullableInterface" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location2271*/if (enumerateNulls && NonNullableClass == null)
            {
                yield return ("NonNullableClass", default);
            }
            else
            {
                bool isMatch_NonNullableClass = matchCriterion == null || matchCriterion(NonNullableClass);
                bool shouldExplore_NonNullableClass = exploreCriterion == null || exploreCriterion(NonNullableClass);
                if (isMatch_NonNullableClass)
                {
                    yield return ("NonNullableClass", NonNullableClass);
                }
                if ((!stopExploringBelowMatch || !isMatch_NonNullableClass) && shouldExplore_NonNullableClass)
                {
                    foreach (var toYield in NonNullableClass!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                    {
                        yield return ("NonNullableClass" + "." + toYield.propertyName, toYield.descendant);
                    }
                }
            }
            
            /*Location2272*/if (enumerateNulls && NonNullableInterface == null)
            {
                yield return ("NonNullableInterface", default);
            }
            else
            {
                bool isMatch_NonNullableInterface = matchCriterion == null || matchCriterion(NonNullableInterface);
                bool shouldExplore_NonNullableInterface = exploreCriterion == null || exploreCriterion(NonNullableInterface);
                if (isMatch_NonNullableInterface)
                {
                    yield return ("NonNullableInterface", NonNullableInterface);
                }
                if ((!stopExploringBelowMatch || !isMatch_NonNullableInterface) && shouldExplore_NonNullableInterface)
                {
                    foreach (var toYield in NonNullableInterface!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                    {
                        yield return ("NonNullableInterface" + "." + toYield.propertyName, toYield.descendant);
                    }
                }
            }
            
            /*Location2273*/if (enumerateNulls && NonNullableLazinatorListNonNullable == null)
            {
                yield return ("NonNullableLazinatorListNonNullable", default);
            }
            else
            {
                bool isMatch_NonNullableLazinatorListNonNullable = matchCriterion == null || matchCriterion(NonNullableLazinatorListNonNullable);
                bool shouldExplore_NonNullableLazinatorListNonNullable = exploreCriterion == null || exploreCriterion(NonNullableLazinatorListNonNullable);
                if (isMatch_NonNullableLazinatorListNonNullable)
                {
                    yield return ("NonNullableLazinatorListNonNullable", NonNullableLazinatorListNonNullable);
                }
                if ((!stopExploringBelowMatch || !isMatch_NonNullableLazinatorListNonNullable) && shouldExplore_NonNullableLazinatorListNonNullable)
                {
                    foreach (var toYield in NonNullableLazinatorListNonNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                    {
                        yield return ("NonNullableLazinatorListNonNullable" + "." + toYield.propertyName, toYield.descendant);
                    }
                }
            }
            
            /*Location2274*/if (enumerateNulls && NonNullableLazinatorListNullable == null)
            {
                yield return ("NonNullableLazinatorListNullable", default);
            }
            else
            {
                bool isMatch_NonNullableLazinatorListNullable = matchCriterion == null || matchCriterion(NonNullableLazinatorListNullable);
                bool shouldExplore_NonNullableLazinatorListNullable = exploreCriterion == null || exploreCriterion(NonNullableLazinatorListNullable);
                if (isMatch_NonNullableLazinatorListNullable)
                {
                    yield return ("NonNullableLazinatorListNullable", NonNullableLazinatorListNullable);
                }
                if ((!stopExploringBelowMatch || !isMatch_NonNullableLazinatorListNullable) && shouldExplore_NonNullableLazinatorListNullable)
                {
                    foreach (var toYield in NonNullableLazinatorListNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                    {
                        yield return ("NonNullableLazinatorListNullable" + "." + toYield.propertyName, toYield.descendant);
                    }
                }
            }
            
            /*Location2275*/bool isMatch_NonNullableStruct = matchCriterion == null || matchCriterion(NonNullableStruct);
            bool shouldExplore_NonNullableStruct = exploreCriterion == null || exploreCriterion(NonNullableStruct);
            if (isMatch_NonNullableStruct)
            {
                yield return ("NonNullableStruct", NonNullableStruct);
            }
            if ((!stopExploringBelowMatch || !isMatch_NonNullableStruct) && shouldExplore_NonNullableStruct)
            {
                foreach (var toYield in NonNullableStruct!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("NonNullableStruct" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            /*Location2276*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _NullableLazinatorListNonNullable_Accessed) && NullableLazinatorListNonNullable == null)
            {
                yield return ("NullableLazinatorListNonNullable", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && NullableLazinatorListNonNullable != null) || (_NullableLazinatorListNonNullable_Accessed && _NullableLazinatorListNonNullable != null))
                {
                    bool isMatch_NullableLazinatorListNonNullable = matchCriterion == null || matchCriterion(NullableLazinatorListNonNullable);
                    bool shouldExplore_NullableLazinatorListNonNullable = exploreCriterion == null || exploreCriterion(NullableLazinatorListNonNullable);
                    if (isMatch_NullableLazinatorListNonNullable)
                    {
                        yield return ("NullableLazinatorListNonNullable", NullableLazinatorListNonNullable);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_NullableLazinatorListNonNullable) && shouldExplore_NullableLazinatorListNonNullable)
                    {
                        foreach (var toYield in NullableLazinatorListNonNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("NullableLazinatorListNonNullable" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location2277*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _NullableLazinatorListNullable_Accessed) && NullableLazinatorListNullable == null)
            {
                yield return ("NullableLazinatorListNullable", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && NullableLazinatorListNullable != null) || (_NullableLazinatorListNullable_Accessed && _NullableLazinatorListNullable != null))
                {
                    bool isMatch_NullableLazinatorListNullable = matchCriterion == null || matchCriterion(NullableLazinatorListNullable);
                    bool shouldExplore_NullableLazinatorListNullable = exploreCriterion == null || exploreCriterion(NullableLazinatorListNullable);
                    if (isMatch_NullableLazinatorListNullable)
                    {
                        yield return ("NullableLazinatorListNullable", NullableLazinatorListNullable);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_NullableLazinatorListNullable) && shouldExplore_NullableLazinatorListNullable)
                    {
                        foreach (var toYield in NullableLazinatorListNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("NullableLazinatorListNullable" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location2278*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _NullableStruct_Accessed) && NullableStruct == null)
            {
                yield return ("NullableStruct", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && NullableStruct != null) || (_NullableStruct_Accessed && _NullableStruct != null))
                {
                    bool isMatch_NullableStruct = matchCriterion == null || matchCriterion(NullableStruct);
                    bool shouldExplore_NullableStruct = exploreCriterion == null || exploreCriterion(NullableStruct);
                    if (isMatch_NullableStruct)
                    {
                        yield return ("NullableStruct", NullableStruct);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_NullableStruct) && shouldExplore_NullableStruct)
                    {
                        foreach (var toYield in NullableStruct!.Value.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("NullableStruct" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location2279*/yield break;
        }
        /*Location2280*/
        
        public virtual IEnumerable<(string propertyName, object? descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location2281*/yield return ("MyInt", (object?)MyInt);
            /*Location2282*/yield return ("MyNullableInt", (object?)MyNullableInt);
            /*Location2283*/yield return ("NonNullableString", (object?)NonNullableString);
            /*Location2284*/yield return ("NullableString", (object?)NullableString);
            /*Location2285*/yield return ("ByteReadOnlySpan", (object?)ByteReadOnlySpan.ToString());
            /*Location2286*/yield return ("NonNullableArrayOfNonNullables", (object?)NonNullableArrayOfNonNullables);
            /*Location2287*/yield return ("NonNullableArrayOfNullables", (object?)NonNullableArrayOfNullables);
            /*Location2288*/yield return ("NonNullableDictionaryWithNonNullable", (object?)NonNullableDictionaryWithNonNullable);
            /*Location2289*/yield return ("NonNullableDictionaryWithNullable", (object?)NonNullableDictionaryWithNullable);
            /*Location2290*/yield return ("NonNullableListOfNonNullables", (object?)NonNullableListOfNonNullables);
            /*Location2291*/yield return ("NonNullableListOfNullables", (object?)NonNullableListOfNullables);
            /*Location2292*/yield return ("NonNullableMemoryOfBytes", (object?)NonNullableMemoryOfBytes);
            /*Location2293*/yield return ("NonNullableQueueOfNonNullables", (object?)NonNullableQueueOfNonNullables);
            /*Location2294*/yield return ("NonNullableQueueOfNullables", (object?)NonNullableQueueOfNullables);
            /*Location2295*/yield return ("NonNullableReadOnlyMemoryOfBytes", (object?)NonNullableReadOnlyMemoryOfBytes);
            /*Location2296*/yield return ("NonNullableRecordLikeClass", (object?)NonNullableRecordLikeClass);
            /*Location2297*/yield return ("NonNullableRecordLikeStruct", (object?)NonNullableRecordLikeStruct);
            /*Location2298*/yield return ("NonNullableRegularTupleWithNonNullable", (object?)NonNullableRegularTupleWithNonNullable);
            /*Location2299*/yield return ("NonNullableRegularTupleWithNullable", (object?)NonNullableRegularTupleWithNullable);
            /*Location2300*/yield return ("NonNullableStackOfNonNullables", (object?)NonNullableStackOfNonNullables);
            /*Location2301*/yield return ("NonNullableStackOfNullables", (object?)NonNullableStackOfNullables);
            /*Location2302*/yield return ("NullableArrayOfNonNullables", (object?)NullableArrayOfNonNullables);
            /*Location2303*/yield return ("NullableArrayOfNullables", (object?)NullableArrayOfNullables);
            /*Location2304*/yield return ("NullableDictionaryWithNonNullable", (object?)NullableDictionaryWithNonNullable);
            /*Location2305*/yield return ("NullableDictionaryWithNullable", (object?)NullableDictionaryWithNullable);
            /*Location2306*/yield return ("NullableListOfNonNullables", (object?)NullableListOfNonNullables);
            /*Location2307*/yield return ("NullableListOfNullables", (object?)NullableListOfNullables);
            /*Location2308*/yield return ("NullableMemoryOfBytes", (object?)NullableMemoryOfBytes);
            /*Location2309*/yield return ("NullableQueueOfNonNullables", (object?)NullableQueueOfNonNullables);
            /*Location2310*/yield return ("NullableQueueOfNullables", (object?)NullableQueueOfNullables);
            /*Location2311*/yield return ("NullableReadOnlyMemoryOfBytes", (object?)NullableReadOnlyMemoryOfBytes);
            /*Location2312*/yield return ("NullableRecordLikeClass", (object?)NullableRecordLikeClass);
            /*Location2313*/yield return ("NullableRecordLikeStruct", (object?)NullableRecordLikeStruct);
            /*Location2314*/yield return ("NullableRegularTupleWithNonNullable", (object?)NullableRegularTupleWithNonNullable);
            /*Location2315*/yield return ("NullableRegularTupleWithNullable", (object?)NullableRegularTupleWithNullable);
            /*Location2316*/yield return ("NullableStackOfNonNullables", (object?)NullableStackOfNonNullables);
            /*Location2317*/yield return ("NullableStackOfNullables", (object?)NullableStackOfNullables);
            /*Location2318*/yield return ("NullableValueTupleWithNonNullable", (object?)NullableValueTupleWithNonNullable);
            /*Location2319*/yield return ("NullableValueTupleWithNullable", (object?)NullableValueTupleWithNullable);
            /*Location2320*/yield return ("ValueTupleWithNonNullable", (object?)ValueTupleWithNonNullable);
            /*Location2321*/yield return ("ValueTupleWithNullable", (object?)ValueTupleWithNullable);
            /*Location2322*/yield break;
        }
        /*Location2323*/
        public virtual ILazinator? ForEachLazinator(Func<ILazinator?, ILazinator?>? changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location2324*/if ((!exploreOnlyDeserializedChildren && ExplicitlyNullable != null) || (_ExplicitlyNullable_Accessed && _ExplicitlyNullable != null))
            {
                _ExplicitlyNullable = (Example?) _ExplicitlyNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location2325*/if ((!exploreOnlyDeserializedChildren && ExplicitlyNullableInterface != null) || (_ExplicitlyNullableInterface_Accessed && _ExplicitlyNullableInterface != null))
            {
                _ExplicitlyNullableInterface = (IExample?) _ExplicitlyNullableInterface!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location2326*/_NonNullableClass = (Example) _NonNullableClass!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);/*Location2327*/_NonNullableInterface = (IExample) _NonNullableInterface!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);/*Location2328*/_NonNullableLazinatorListNonNullable = (LazinatorList<Example>) _NonNullableLazinatorListNonNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);/*Location2329*/_NonNullableLazinatorListNullable = (LazinatorList<Example?>) _NonNullableLazinatorListNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);/*Location2330*/var deserialized_NonNullableStruct = NonNullableStruct;
            _NonNullableStruct = (ExampleStructWithoutClass) _NonNullableStruct!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);/*Location2331*/if ((!exploreOnlyDeserializedChildren && NullableLazinatorListNonNullable != null) || (_NullableLazinatorListNonNullable_Accessed && _NullableLazinatorListNonNullable != null))
            {
                _NullableLazinatorListNonNullable = (LazinatorList<Example>?) _NullableLazinatorListNonNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location2332*/if ((!exploreOnlyDeserializedChildren && NullableLazinatorListNullable != null) || (_NullableLazinatorListNullable_Accessed && _NullableLazinatorListNullable != null))
            {
                _NullableLazinatorListNullable = (LazinatorList<Example?>?) _NullableLazinatorListNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location2333*/if ((!exploreOnlyDeserializedChildren && NullableStruct != null) || (_NullableStruct_Accessed && _NullableStruct != null))
            {
                _NullableStruct = (ExampleStructWithoutClass?) _NullableStruct!.Value.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location2334*/_NonNullableArrayOfNonNullables = (Example[]) CloneOrChange_Example_B_b(_NonNullableArrayOfNonNullables!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);/*Location2335*/_NonNullableArrayOfNullables = (Example?[]) CloneOrChange_Example_C63_B_b(_NonNullableArrayOfNullables!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location2336*/_NonNullableDictionaryWithNonNullable = (Dictionary<int, Example>) CloneOrChange_Dictionary_Gint_c_C32Example_g(_NonNullableDictionaryWithNonNullable!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location2337*/_NonNullableDictionaryWithNullable = (Dictionary<int, Example?>) CloneOrChange_Dictionary_Gint_c_C32Example_C63_g(_NonNullableDictionaryWithNullable!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location2338*/_NonNullableListOfNonNullables = (List<Example>) CloneOrChange_List_GExample_g(_NonNullableListOfNonNullables!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);/*Location2339*/_NonNullableListOfNullables = (List<Example?>) CloneOrChange_List_GExample_C63_g(_NonNullableListOfNullables!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location2340*/_NonNullableQueueOfNonNullables = (Queue<Example>) CloneOrChange_Queue_GExample_g(_NonNullableQueueOfNonNullables!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);/*Location2341*/_NonNullableQueueOfNullables = (Queue<Example?>) CloneOrChange_Queue_GExample_C63_g(_NonNullableQueueOfNullables!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location2342*/if ((!exploreOnlyDeserializedChildren && NonNullableRecordLikeClass != null) || (_NonNullableRecordLikeClass_Accessed && _NonNullableRecordLikeClass != null))
            {
                _NonNullableRecordLikeClass = (RecordLikeClass?) CloneOrChange_RecordLikeClass(_NonNullableRecordLikeClass, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location2343*/var deserialized_NonNullableRecordLikeStruct = NonNullableRecordLikeStruct;
            _NonNullableRecordLikeStruct = (RecordLikeStruct) CloneOrChange_RecordLikeStruct(_NonNullableRecordLikeStruct, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location2344*/_NonNullableRegularTupleWithNonNullable = (Tuple<Example, int>) CloneOrChange_Tuple_GExample_c_C32int_g(_NonNullableRegularTupleWithNonNullable!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);/*Location2345*/_NonNullableRegularTupleWithNullable = (Tuple<Example?, int>) CloneOrChange_Tuple_GExample_C63_c_C32int_g(_NonNullableRegularTupleWithNullable!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location2346*/_NonNullableStackOfNonNullables = (Stack<Example>) CloneOrChange_Stack_GExample_g(_NonNullableStackOfNonNullables!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);/*Location2347*/_NonNullableStackOfNullables = (Stack<Example?>) CloneOrChange_Stack_GExample_C63_g(_NonNullableStackOfNullables!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location2348*/if ((!exploreOnlyDeserializedChildren && NullableArrayOfNonNullables != null) || (_NullableArrayOfNonNullables_Accessed && _NullableArrayOfNonNullables != null))
            {
                _NullableArrayOfNonNullables = (Example[]?) CloneOrChange_Example_B_b_C63(_NullableArrayOfNonNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            }
            /*Location2349*/if ((!exploreOnlyDeserializedChildren && NullableArrayOfNullables != null) || (_NullableArrayOfNullables_Accessed && _NullableArrayOfNullables != null))
            {
                _NullableArrayOfNullables = (Example?[]?) CloneOrChange_Example_C63_B_b_C63(_NullableArrayOfNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location2350*/if ((!exploreOnlyDeserializedChildren && NullableDictionaryWithNonNullable != null) || (_NullableDictionaryWithNonNullable_Accessed && _NullableDictionaryWithNonNullable != null))
            {
                _NullableDictionaryWithNonNullable = (Dictionary<int, Example>?) CloneOrChange_Dictionary_Gint_c_C32Example_g_C63(_NullableDictionaryWithNonNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location2351*/if ((!exploreOnlyDeserializedChildren && NullableDictionaryWithNullable != null) || (_NullableDictionaryWithNullable_Accessed && _NullableDictionaryWithNullable != null))
            {
                _NullableDictionaryWithNullable = (Dictionary<int, Example?>?) CloneOrChange_Dictionary_Gint_c_C32Example_C63_g_C63(_NullableDictionaryWithNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location2352*/if ((!exploreOnlyDeserializedChildren && NullableListOfNonNullables != null) || (_NullableListOfNonNullables_Accessed && _NullableListOfNonNullables != null))
            {
                _NullableListOfNonNullables = (List<Example>?) CloneOrChange_List_GExample_g_C63(_NullableListOfNonNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            }
            /*Location2353*/if ((!exploreOnlyDeserializedChildren && NullableListOfNullables != null) || (_NullableListOfNullables_Accessed && _NullableListOfNullables != null))
            {
                _NullableListOfNullables = (List<Example?>?) CloneOrChange_List_GExample_C63_g_C63(_NullableListOfNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location2354*/if ((!exploreOnlyDeserializedChildren && NullableQueueOfNonNullables != null) || (_NullableQueueOfNonNullables_Accessed && _NullableQueueOfNonNullables != null))
            {
                _NullableQueueOfNonNullables = (Queue<Example>?) CloneOrChange_Queue_GExample_g_C63(_NullableQueueOfNonNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            }
            /*Location2355*/if ((!exploreOnlyDeserializedChildren && NullableQueueOfNullables != null) || (_NullableQueueOfNullables_Accessed && _NullableQueueOfNullables != null))
            {
                _NullableQueueOfNullables = (Queue<Example?>?) CloneOrChange_Queue_GExample_C63_g_C63(_NullableQueueOfNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location2356*/if ((!exploreOnlyDeserializedChildren && NullableRecordLikeClass != null) || (_NullableRecordLikeClass_Accessed && _NullableRecordLikeClass != null))
            {
                _NullableRecordLikeClass = (RecordLikeClass?) CloneOrChange_RecordLikeClass(_NullableRecordLikeClass, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location2357*/if ((!exploreOnlyDeserializedChildren && NullableRecordLikeStruct != null) || (_NullableRecordLikeStruct_Accessed && _NullableRecordLikeStruct != null))
            {
                _NullableRecordLikeStruct = (RecordLikeStruct?) CloneOrChange_RecordLikeStruct_C63(_NullableRecordLikeStruct, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location2358*/if ((!exploreOnlyDeserializedChildren && NullableRegularTupleWithNonNullable != null) || (_NullableRegularTupleWithNonNullable_Accessed && _NullableRegularTupleWithNonNullable != null))
            {
                _NullableRegularTupleWithNonNullable = (Tuple<Example, int>?) CloneOrChange_Tuple_GExample_c_C32int_g_C63(_NullableRegularTupleWithNonNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            }
            /*Location2359*/if ((!exploreOnlyDeserializedChildren && NullableRegularTupleWithNullable != null) || (_NullableRegularTupleWithNullable_Accessed && _NullableRegularTupleWithNullable != null))
            {
                _NullableRegularTupleWithNullable = (Tuple<Example?, int>?) CloneOrChange_Tuple_GExample_C63_c_C32int_g_C63(_NullableRegularTupleWithNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location2360*/if ((!exploreOnlyDeserializedChildren && NullableStackOfNonNullables != null) || (_NullableStackOfNonNullables_Accessed && _NullableStackOfNonNullables != null))
            {
                _NullableStackOfNonNullables = (Stack<Example>?) CloneOrChange_Stack_GExample_g_C63(_NullableStackOfNonNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            }
            /*Location2361*/if ((!exploreOnlyDeserializedChildren && NullableStackOfNullables != null) || (_NullableStackOfNullables_Accessed && _NullableStackOfNullables != null))
            {
                _NullableStackOfNullables = (Stack<Example?>?) CloneOrChange_Stack_GExample_C63_g_C63(_NullableStackOfNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location2362*/if ((!exploreOnlyDeserializedChildren && NullableValueTupleWithNonNullable != null) || (_NullableValueTupleWithNonNullable_Accessed && _NullableValueTupleWithNonNullable != null))
            {
                _NullableValueTupleWithNonNullable = ((Example, int)?) CloneOrChange__PExample_c_C32int_p_C63(_NullableValueTupleWithNonNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            }
            /*Location2363*/if ((!exploreOnlyDeserializedChildren && NullableValueTupleWithNullable != null) || (_NullableValueTupleWithNullable_Accessed && _NullableValueTupleWithNullable != null))
            {
                _NullableValueTupleWithNullable = ((Example?, int)?) CloneOrChange__PExample_C63_c_C32int_p_C63(_NullableValueTupleWithNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location2364*/var deserialized_ValueTupleWithNonNullable = ValueTupleWithNonNullable;
            _ValueTupleWithNonNullable = ((Example, int)) CloneOrChange__PExample_c_C32int_p(_ValueTupleWithNonNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);/*Location2365*/var deserialized_ValueTupleWithNullable = ValueTupleWithNullable;
            _ValueTupleWithNullable = ((Example?, int)) CloneOrChange__PExample_C63_c_C32int_p(_ValueTupleWithNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location2366*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_ByteReadOnlySpan = ByteReadOnlySpan;
                if (!_ByteReadOnlySpan_Accessed)
                {
                    ByteReadOnlySpan = deserialized_ByteReadOnlySpan;
                }
            }
            /*Location2367*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_NonNullableMemoryOfBytes = NonNullableMemoryOfBytes;
            }
            /*Location2368*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_NonNullableReadOnlyMemoryOfBytes = NonNullableReadOnlyMemoryOfBytes;
            }
            /*Location2369*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_NullableMemoryOfBytes = NullableMemoryOfBytes;
            }
            /*Location2370*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_NullableReadOnlyMemoryOfBytes = NullableReadOnlyMemoryOfBytes;
            }
            /*Location2371*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location2372*/
        public virtual void FreeInMemoryObjects()
        {
            _ByteReadOnlySpan = default;
            _ExplicitlyNullable = default;
            _ExplicitlyNullableInterface = default;
            _NonNullableMemoryOfBytes = default;
            _NonNullableReadOnlyMemoryOfBytes = default;
            _NonNullableRecordLikeClass = default;
            _NonNullableRecordLikeStruct = default;
            _NonNullableStruct = default;
            _NullableArrayOfNonNullables = default;
            _NullableArrayOfNullables = default;
            _NullableDictionaryWithNonNullable = default;
            _NullableDictionaryWithNullable = default;
            _NullableLazinatorListNonNullable = default;
            _NullableLazinatorListNullable = default;
            _NullableListOfNonNullables = default;
            _NullableListOfNullables = default;
            _NullableMemoryOfBytes = default;
            _NullableQueueOfNonNullables = default;
            _NullableQueueOfNullables = default;
            _NullableReadOnlyMemoryOfBytes = default;
            _NullableRecordLikeClass = default;
            _NullableRecordLikeStruct = default;
            _NullableRegularTupleWithNonNullable = default;
            _NullableRegularTupleWithNullable = default;
            _NullableStackOfNonNullables = default;
            _NullableStackOfNullables = default;
            _NullableStruct = default;
            _NullableValueTupleWithNonNullable = default;
            _NullableValueTupleWithNullable = default;
            _ValueTupleWithNonNullable = default;
            _ValueTupleWithNullable = default;
            _ByteReadOnlySpan_Accessed = _ExplicitlyNullable_Accessed = _ExplicitlyNullableInterface_Accessed = _NonNullableMemoryOfBytes_Accessed = _NonNullableReadOnlyMemoryOfBytes_Accessed = _NonNullableRecordLikeClass_Accessed = _NonNullableRecordLikeStruct_Accessed = _NonNullableStruct_Accessed = _NullableArrayOfNonNullables_Accessed = _NullableArrayOfNullables_Accessed = _NullableDictionaryWithNonNullable_Accessed = _NullableDictionaryWithNullable_Accessed = _NullableLazinatorListNonNullable_Accessed = _NullableLazinatorListNullable_Accessed = _NullableListOfNonNullables_Accessed = _NullableListOfNullables_Accessed = _NullableMemoryOfBytes_Accessed = _NullableQueueOfNonNullables_Accessed = _NullableQueueOfNullables_Accessed = _NullableReadOnlyMemoryOfBytes_Accessed = _NullableRecordLikeClass_Accessed = _NullableRecordLikeStruct_Accessed = _NullableRegularTupleWithNonNullable_Accessed = _NullableRegularTupleWithNullable_Accessed = _NullableStackOfNonNullables_Accessed = _NullableStackOfNullables_Accessed = _NullableStruct_Accessed = _NullableValueTupleWithNonNullable_Accessed = _NullableValueTupleWithNullable_Accessed = _ValueTupleWithNonNullable_Accessed = _ValueTupleWithNullable_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location2373*/
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1085;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location2374*/public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location2375*/_MyInt = span.ToDecompressedInt(ref bytesSoFar);
            /*Location2376*/_MyNullableInt = span.ToDecompressedNullableInt(ref bytesSoFar);
            /*Location2377*/_NonNullableString = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            /*Location2378*/_NullableString = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            /*Location2379*/_ByteReadOnlySpan_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2380*/_ExplicitlyNullable_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location2381*/_ExplicitlyNullableInterface_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location2382*/_NonNullableArrayOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2383*/_NonNullableArrayOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2384*/_NonNullableClass_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2385*/_NonNullableDictionaryWithNonNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2386*/_NonNullableDictionaryWithNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2387*/_NonNullableInterface_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2388*/_NonNullableLazinatorListNonNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2389*/_NonNullableLazinatorListNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2390*/_NonNullableListOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2391*/_NonNullableListOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2392*/_NonNullableMemoryOfBytes_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2393*/_NonNullableQueueOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2394*/_NonNullableQueueOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2395*/_NonNullableReadOnlyMemoryOfBytes_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2396*/_NonNullableRecordLikeClass_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2397*/_NonNullableRecordLikeStruct_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2398*/_NonNullableRegularTupleWithNonNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2399*/_NonNullableRegularTupleWithNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2400*/_NonNullableStackOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2401*/_NonNullableStackOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2402*/_NonNullableStruct_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location2403*/_NullableArrayOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2404*/_NullableArrayOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2405*/_NullableDictionaryWithNonNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2406*/_NullableDictionaryWithNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2407*/_NullableLazinatorListNonNullable_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location2408*/_NullableLazinatorListNullable_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location2409*/_NullableListOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2410*/_NullableListOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2411*/_NullableMemoryOfBytes_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2412*/_NullableQueueOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2413*/_NullableQueueOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2414*/_NullableReadOnlyMemoryOfBytes_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2415*/_NullableRecordLikeClass_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2416*/_NullableRecordLikeStruct_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2417*/_NullableRegularTupleWithNonNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2418*/_NullableRegularTupleWithNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2419*/_NullableStackOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2420*/_NullableStackOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2421*/_NullableStruct_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location2422*/_NullableValueTupleWithNonNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2423*/_NullableValueTupleWithNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2424*/_ValueTupleWithNonNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2425*/_ValueTupleWithNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location2426*/_NullableEnabledContext_EndByteIndex = bytesSoFar;
            /*Location2427*/        }
            
            /*Location2428*/public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location2429*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location2430*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location2431*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location2432*/}
                    /*Location2433*/}
                    /*Location2434*/
                    public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location2435*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location2436*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location2437*/}
                                /*Location2438*/
                                _NonNullableStruct_Accessed = false;
                                _NullableStruct_Accessed = false;/*Location2439*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location2440*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location2441*/}
                            /*Location2442*/
                            protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                /*Location2443*/if (_ExplicitlyNullable_Accessed && _ExplicitlyNullable != null)
                                {
                                    ExplicitlyNullable!.UpdateStoredBuffer(ref writer, startPosition + _ExplicitlyNullable_ByteIndex + sizeof(int), _ExplicitlyNullable_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location2444*/if (_ExplicitlyNullableInterface_Accessed && _ExplicitlyNullableInterface != null)
                                {
                                    ExplicitlyNullableInterface!.UpdateStoredBuffer(ref writer, startPosition + _ExplicitlyNullableInterface_ByteIndex + sizeof(int), _ExplicitlyNullableInterface_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location2445*/NonNullableClass!.UpdateStoredBuffer(ref writer, startPosition + _NonNullableClass_ByteIndex + sizeof(int), _NonNullableClass_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                /*Location2446*/NonNullableInterface!.UpdateStoredBuffer(ref writer, startPosition + _NonNullableInterface_ByteIndex + sizeof(int), _NonNullableInterface_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                /*Location2447*/NonNullableLazinatorListNonNullable!.UpdateStoredBuffer(ref writer, startPosition + _NonNullableLazinatorListNonNullable_ByteIndex + sizeof(int), _NonNullableLazinatorListNonNullable_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                /*Location2448*/NonNullableLazinatorListNullable!.UpdateStoredBuffer(ref writer, startPosition + _NonNullableLazinatorListNullable_ByteIndex + sizeof(int), _NonNullableLazinatorListNullable_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                /*Location2449*/NonNullableStruct!.UpdateStoredBuffer(ref writer, startPosition + _NonNullableStruct_ByteIndex + sizeof(int), _NonNullableStruct_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                /*Location2450*/if (_NullableLazinatorListNonNullable_Accessed && _NullableLazinatorListNonNullable != null)
                                {
                                    NullableLazinatorListNonNullable!.UpdateStoredBuffer(ref writer, startPosition + _NullableLazinatorListNonNullable_ByteIndex + sizeof(int), _NullableLazinatorListNonNullable_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location2451*/if (_NullableLazinatorListNullable_Accessed && _NullableLazinatorListNullable != null)
                                {
                                    NullableLazinatorListNullable!.UpdateStoredBuffer(ref writer, startPosition + _NullableLazinatorListNullable_ByteIndex + sizeof(int), _NullableLazinatorListNullable_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location2452*/if (_NullableStruct_Accessed && _NullableStruct != null)
                                {
                                    NullableStruct!.Value.UpdateStoredBuffer(ref writer, startPosition + _NullableStruct_ByteIndex + sizeof(int), _NullableStruct_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location2453*/_NonNullableArrayOfNonNullables = (Example[]) CloneOrChange_Example_B_b(_NonNullableArrayOfNonNullables!, l => l.RemoveBufferInHierarchy(), true);/*Location2454*/_NonNullableArrayOfNullables = (Example?[]) CloneOrChange_Example_C63_B_b(_NonNullableArrayOfNullables!, l => l.RemoveBufferInHierarchy(), true);/*Location2455*/_NonNullableDictionaryWithNonNullable = (Dictionary<int, Example>) CloneOrChange_Dictionary_Gint_c_C32Example_g(_NonNullableDictionaryWithNonNullable!, l => l.RemoveBufferInHierarchy(), true);/*Location2456*/_NonNullableDictionaryWithNullable = (Dictionary<int, Example?>) CloneOrChange_Dictionary_Gint_c_C32Example_C63_g(_NonNullableDictionaryWithNullable!, l => l.RemoveBufferInHierarchy(), true);/*Location2457*/_NonNullableListOfNonNullables = (List<Example>) CloneOrChange_List_GExample_g(_NonNullableListOfNonNullables!, l => l.RemoveBufferInHierarchy(), true);/*Location2458*/_NonNullableListOfNullables = (List<Example?>) CloneOrChange_List_GExample_C63_g(_NonNullableListOfNullables!, l => l.RemoveBufferInHierarchy(), true);/*Location2459*/_NonNullableQueueOfNonNullables = (Queue<Example>) CloneOrChange_Queue_GExample_g(_NonNullableQueueOfNonNullables!, l => l.RemoveBufferInHierarchy(), true);/*Location2460*/_NonNullableQueueOfNullables = (Queue<Example?>) CloneOrChange_Queue_GExample_C63_g(_NonNullableQueueOfNullables!, l => l.RemoveBufferInHierarchy(), true);/*Location2461*/if (_NonNullableRecordLikeClass_Accessed && _NonNullableRecordLikeClass != null)
                                {
                                    _NonNullableRecordLikeClass = (RecordLikeClass?) CloneOrChange_RecordLikeClass(_NonNullableRecordLikeClass, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2462*/_NonNullableRecordLikeStruct = (RecordLikeStruct) CloneOrChange_RecordLikeStruct(_NonNullableRecordLikeStruct, l => l.RemoveBufferInHierarchy(), true);/*Location2463*/_NonNullableRegularTupleWithNonNullable = (Tuple<Example, int>) CloneOrChange_Tuple_GExample_c_C32int_g(_NonNullableRegularTupleWithNonNullable!, l => l.RemoveBufferInHierarchy(), true);/*Location2464*/_NonNullableRegularTupleWithNullable = (Tuple<Example?, int>) CloneOrChange_Tuple_GExample_C63_c_C32int_g(_NonNullableRegularTupleWithNullable!, l => l.RemoveBufferInHierarchy(), true);/*Location2465*/_NonNullableStackOfNonNullables = (Stack<Example>) CloneOrChange_Stack_GExample_g(_NonNullableStackOfNonNullables!, l => l.RemoveBufferInHierarchy(), true);/*Location2466*/_NonNullableStackOfNullables = (Stack<Example?>) CloneOrChange_Stack_GExample_C63_g(_NonNullableStackOfNullables!, l => l.RemoveBufferInHierarchy(), true);/*Location2467*/if (_NullableArrayOfNonNullables_Accessed && _NullableArrayOfNonNullables != null)
                                {
                                    _NullableArrayOfNonNullables = (Example[]?) CloneOrChange_Example_B_b_C63(_NullableArrayOfNonNullables, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2468*/if (_NullableArrayOfNullables_Accessed && _NullableArrayOfNullables != null)
                                {
                                    _NullableArrayOfNullables = (Example?[]?) CloneOrChange_Example_C63_B_b_C63(_NullableArrayOfNullables, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2469*/if (_NullableDictionaryWithNonNullable_Accessed && _NullableDictionaryWithNonNullable != null)
                                {
                                    _NullableDictionaryWithNonNullable = (Dictionary<int, Example>?) CloneOrChange_Dictionary_Gint_c_C32Example_g_C63(_NullableDictionaryWithNonNullable, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2470*/if (_NullableDictionaryWithNullable_Accessed && _NullableDictionaryWithNullable != null)
                                {
                                    _NullableDictionaryWithNullable = (Dictionary<int, Example?>?) CloneOrChange_Dictionary_Gint_c_C32Example_C63_g_C63(_NullableDictionaryWithNullable, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2471*/if (_NullableListOfNonNullables_Accessed && _NullableListOfNonNullables != null)
                                {
                                    _NullableListOfNonNullables = (List<Example>?) CloneOrChange_List_GExample_g_C63(_NullableListOfNonNullables, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2472*/if (_NullableListOfNullables_Accessed && _NullableListOfNullables != null)
                                {
                                    _NullableListOfNullables = (List<Example?>?) CloneOrChange_List_GExample_C63_g_C63(_NullableListOfNullables, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2473*/if (_NullableQueueOfNonNullables_Accessed && _NullableQueueOfNonNullables != null)
                                {
                                    _NullableQueueOfNonNullables = (Queue<Example>?) CloneOrChange_Queue_GExample_g_C63(_NullableQueueOfNonNullables, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2474*/if (_NullableQueueOfNullables_Accessed && _NullableQueueOfNullables != null)
                                {
                                    _NullableQueueOfNullables = (Queue<Example?>?) CloneOrChange_Queue_GExample_C63_g_C63(_NullableQueueOfNullables, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2475*/if (_NullableRecordLikeClass_Accessed && _NullableRecordLikeClass != null)
                                {
                                    _NullableRecordLikeClass = (RecordLikeClass?) CloneOrChange_RecordLikeClass(_NullableRecordLikeClass, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2476*/if (_NullableRecordLikeStruct_Accessed && _NullableRecordLikeStruct != null)
                                {
                                    _NullableRecordLikeStruct = (RecordLikeStruct?) CloneOrChange_RecordLikeStruct_C63(_NullableRecordLikeStruct, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2477*/if (_NullableRegularTupleWithNonNullable_Accessed && _NullableRegularTupleWithNonNullable != null)
                                {
                                    _NullableRegularTupleWithNonNullable = (Tuple<Example, int>?) CloneOrChange_Tuple_GExample_c_C32int_g_C63(_NullableRegularTupleWithNonNullable, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2478*/if (_NullableRegularTupleWithNullable_Accessed && _NullableRegularTupleWithNullable != null)
                                {
                                    _NullableRegularTupleWithNullable = (Tuple<Example?, int>?) CloneOrChange_Tuple_GExample_C63_c_C32int_g_C63(_NullableRegularTupleWithNullable, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2479*/if (_NullableStackOfNonNullables_Accessed && _NullableStackOfNonNullables != null)
                                {
                                    _NullableStackOfNonNullables = (Stack<Example>?) CloneOrChange_Stack_GExample_g_C63(_NullableStackOfNonNullables, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2480*/if (_NullableStackOfNullables_Accessed && _NullableStackOfNullables != null)
                                {
                                    _NullableStackOfNullables = (Stack<Example?>?) CloneOrChange_Stack_GExample_C63_g_C63(_NullableStackOfNullables, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2481*/if (_NullableValueTupleWithNonNullable_Accessed && _NullableValueTupleWithNonNullable != null)
                                {
                                    _NullableValueTupleWithNonNullable = ((Example, int)?) CloneOrChange__PExample_c_C32int_p_C63(_NullableValueTupleWithNonNullable, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2482*/if (_NullableValueTupleWithNullable_Accessed && _NullableValueTupleWithNullable != null)
                                {
                                    _NullableValueTupleWithNullable = ((Example?, int)?) CloneOrChange__PExample_C63_c_C32int_p_C63(_NullableValueTupleWithNullable, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location2483*/_ValueTupleWithNonNullable = ((Example, int)) CloneOrChange__PExample_c_C32int_p(_ValueTupleWithNonNullable, l => l.RemoveBufferInHierarchy(), true);/*Location2484*/_ValueTupleWithNullable = ((Example?, int)) CloneOrChange__PExample_C63_c_C32int_p(_ValueTupleWithNullable, l => l.RemoveBufferInHierarchy(), true);/*Location2485*/}
                                
                                /*Location2486*/
                                protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    int startPosition = writer.Position;
                                    int startOfObjectPosition = 0;
                                    // header information
                                    /*Location2487*/if (includeUniqueID)
                                    {
                                        if (!ContainsOpenGenericParameters)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                        }
                                        else
                                        {
                                            WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                                        }
                                    }
                                    /*Location2488*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                    writer.Write((byte)includeChildrenMode);
                                    /*Location2489*/// write properties
                                    /*Location2490*/CompressedIntegralTypes.WriteCompressedInt(ref writer, _MyInt);
                                    /*Location2491*/CompressedIntegralTypes.WriteCompressedNullableInt(ref writer, _MyNullableInt);
                                    /*Location2492*/EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _NonNullableString);
                                    /*Location2493*/EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _NullableString);
                                    /*Location2494*/startOfObjectPosition = writer.Position;
                                    /*Location2495*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ByteReadOnlySpan_Accessed)
                                    {
                                        var deserialized = ByteReadOnlySpan;
                                    }
                                    /*Location2496*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _ByteReadOnlySpan, isBelievedDirty: _ByteReadOnlySpan_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _ByteReadOnlySpan_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ByteReadOnlySpan_ByteIndex, _ByteReadOnlySpan_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_ReadOnlySpan_Gbyte_g(ref w, _ByteReadOnlySpan.Span,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2497*/if (updateStoredBuffer)
                                    {
                                        _ByteReadOnlySpan_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2498*/startOfObjectPosition = writer.Position;
                                    /*Location2499*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ExplicitlyNullable_Accessed)
                                        {
                                            var deserialized = ExplicitlyNullable;
                                        }
                                        WriteChild(ref writer, ref _ExplicitlyNullable, includeChildrenMode, _ExplicitlyNullable_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ExplicitlyNullable_ByteIndex, _ExplicitlyNullable_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location2500*/if (updateStoredBuffer)
                                    {
                                        _ExplicitlyNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2501*/startOfObjectPosition = writer.Position;
                                    /*Location2502*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ExplicitlyNullableInterface_Accessed)
                                        {
                                            var deserialized = ExplicitlyNullableInterface;
                                        }
                                        WriteChild(ref writer, ref _ExplicitlyNullableInterface, includeChildrenMode, _ExplicitlyNullableInterface_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ExplicitlyNullableInterface_ByteIndex, _ExplicitlyNullableInterface_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location2503*/if (updateStoredBuffer)
                                    {
                                        _ExplicitlyNullableInterface_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2504*/startOfObjectPosition = writer.Position;
                                    /*Location2505*//*Location2506*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableArrayOfNonNullables, isBelievedDirty: true,
                                    isAccessed: true, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableArrayOfNonNullables_ByteIndex, _NonNullableArrayOfNonNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Example_B_b(ref w, _NonNullableArrayOfNonNullables!,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2507*/if (updateStoredBuffer)
                                    {
                                        _NonNullableArrayOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2508*/startOfObjectPosition = writer.Position;
                                    /*Location2509*//*Location2510*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableArrayOfNullables, isBelievedDirty: true,
                                    isAccessed: true, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableArrayOfNullables_ByteIndex, _NonNullableArrayOfNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Example_C63_B_b(ref w, _NonNullableArrayOfNullables!,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2511*/if (updateStoredBuffer)
                                    {
                                        _NonNullableArrayOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2512*/startOfObjectPosition = writer.Position;
                                    /*Location2513*/WriteChild(ref writer, ref _NonNullableClass, includeChildrenMode, true, () => GetChildSlice(LazinatorMemoryStorage, _NonNullableClass_ByteIndex, _NonNullableClass_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    /*Location2514*/if (updateStoredBuffer)
                                    {
                                        _NonNullableClass_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2515*/startOfObjectPosition = writer.Position;
                                    /*Location2516*//*Location2517*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableDictionaryWithNonNullable, isBelievedDirty: true,
                                    isAccessed: true, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableDictionaryWithNonNullable_ByteIndex, _NonNullableDictionaryWithNonNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Dictionary_Gint_c_C32Example_g(ref w, _NonNullableDictionaryWithNonNullable!,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2518*/if (updateStoredBuffer)
                                    {
                                        _NonNullableDictionaryWithNonNullable_ByteIndex = startOfObjectPosition - startPosition; _NonNullableDictionaryWithNonNullable = (Dictionary<int, Example>) CloneOrChange_Dictionary_Gint_c_C32Example_g(_NonNullableDictionaryWithNonNullable!, l => l.RemoveBufferInHierarchy(), true);
                                    }
                                    /*Location2519*/startOfObjectPosition = writer.Position;
                                    /*Location2520*//*Location2521*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableDictionaryWithNullable, isBelievedDirty: true,
                                    isAccessed: true, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableDictionaryWithNullable_ByteIndex, _NonNullableDictionaryWithNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Dictionary_Gint_c_C32Example_C63_g(ref w, _NonNullableDictionaryWithNullable!,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2522*/if (updateStoredBuffer)
                                    {
                                        _NonNullableDictionaryWithNullable_ByteIndex = startOfObjectPosition - startPosition; _NonNullableDictionaryWithNullable = (Dictionary<int, Example?>) CloneOrChange_Dictionary_Gint_c_C32Example_C63_g(_NonNullableDictionaryWithNullable!, l => l.RemoveBufferInHierarchy(), true);
                                    }
                                    /*Location2523*/startOfObjectPosition = writer.Position;
                                    /*Location2524*/WriteChild(ref writer, ref _NonNullableInterface, includeChildrenMode, true, () => GetChildSlice(LazinatorMemoryStorage, _NonNullableInterface_ByteIndex, _NonNullableInterface_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    /*Location2525*/if (updateStoredBuffer)
                                    {
                                        _NonNullableInterface_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2526*/startOfObjectPosition = writer.Position;
                                    /*Location2527*/WriteChild(ref writer, ref _NonNullableLazinatorListNonNullable, includeChildrenMode, true, () => GetChildSlice(LazinatorMemoryStorage, _NonNullableLazinatorListNonNullable_ByteIndex, _NonNullableLazinatorListNonNullable_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    /*Location2528*/if (updateStoredBuffer)
                                    {
                                        _NonNullableLazinatorListNonNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2529*/startOfObjectPosition = writer.Position;
                                    /*Location2530*/WriteChild(ref writer, ref _NonNullableLazinatorListNullable, includeChildrenMode, true, () => GetChildSlice(LazinatorMemoryStorage, _NonNullableLazinatorListNullable_ByteIndex, _NonNullableLazinatorListNullable_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    /*Location2531*/if (updateStoredBuffer)
                                    {
                                        _NonNullableLazinatorListNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2532*/startOfObjectPosition = writer.Position;
                                    /*Location2533*//*Location2534*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableListOfNonNullables, isBelievedDirty: true,
                                    isAccessed: true, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableListOfNonNullables_ByteIndex, _NonNullableListOfNonNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_List_GExample_g(ref w, _NonNullableListOfNonNullables!,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2535*/if (updateStoredBuffer)
                                    {
                                        _NonNullableListOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2536*/startOfObjectPosition = writer.Position;
                                    /*Location2537*//*Location2538*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableListOfNullables, isBelievedDirty: true,
                                    isAccessed: true, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableListOfNullables_ByteIndex, _NonNullableListOfNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_List_GExample_C63_g(ref w, _NonNullableListOfNullables!,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2539*/if (updateStoredBuffer)
                                    {
                                        _NonNullableListOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2540*/startOfObjectPosition = writer.Position;
                                    /*Location2541*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableMemoryOfBytes_Accessed)
                                    {
                                        var deserialized = NonNullableMemoryOfBytes;
                                    }
                                    /*Location2542*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableMemoryOfBytes, isBelievedDirty: _NonNullableMemoryOfBytes_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableMemoryOfBytes_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableMemoryOfBytes_ByteIndex, _NonNullableMemoryOfBytes_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Memory_Gbyte_g(ref w, _NonNullableMemoryOfBytes,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2543*/if (updateStoredBuffer)
                                    {
                                        _NonNullableMemoryOfBytes_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2544*/startOfObjectPosition = writer.Position;
                                    /*Location2545*//*Location2546*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableQueueOfNonNullables, isBelievedDirty: true,
                                    isAccessed: true, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableQueueOfNonNullables_ByteIndex, _NonNullableQueueOfNonNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Queue_GExample_g(ref w, _NonNullableQueueOfNonNullables!,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2547*/if (updateStoredBuffer)
                                    {
                                        _NonNullableQueueOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2548*/startOfObjectPosition = writer.Position;
                                    /*Location2549*//*Location2550*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableQueueOfNullables, isBelievedDirty: true,
                                    isAccessed: true, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableQueueOfNullables_ByteIndex, _NonNullableQueueOfNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Queue_GExample_C63_g(ref w, _NonNullableQueueOfNullables!,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2551*/if (updateStoredBuffer)
                                    {
                                        _NonNullableQueueOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2552*/startOfObjectPosition = writer.Position;
                                    /*Location2553*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableReadOnlyMemoryOfBytes_Accessed)
                                    {
                                        var deserialized = NonNullableReadOnlyMemoryOfBytes;
                                    }
                                    /*Location2554*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableReadOnlyMemoryOfBytes, isBelievedDirty: _NonNullableReadOnlyMemoryOfBytes_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableReadOnlyMemoryOfBytes_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableReadOnlyMemoryOfBytes_ByteIndex, _NonNullableReadOnlyMemoryOfBytes_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_ReadOnlyMemory_Gbyte_g(ref w, _NonNullableReadOnlyMemoryOfBytes,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2555*/if (updateStoredBuffer)
                                    {
                                        _NonNullableReadOnlyMemoryOfBytes_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2556*/startOfObjectPosition = writer.Position;
                                    /*Location2557*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableRecordLikeClass_Accessed)
                                    {
                                        var deserialized = NonNullableRecordLikeClass;
                                    }
                                    /*Location2558*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableRecordLikeClass, isBelievedDirty: _NonNullableRecordLikeClass_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableRecordLikeClass_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableRecordLikeClass_ByteIndex, _NonNullableRecordLikeClass_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_RecordLikeClass(ref w, _NonNullableRecordLikeClass,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2559*/if (updateStoredBuffer)
                                    {
                                        _NonNullableRecordLikeClass_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2560*/startOfObjectPosition = writer.Position;
                                    /*Location2561*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableRecordLikeStruct_Accessed)
                                    {
                                        var deserialized = NonNullableRecordLikeStruct;
                                    }
                                    /*Location2562*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableRecordLikeStruct, isBelievedDirty: _NonNullableRecordLikeStruct_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableRecordLikeStruct_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableRecordLikeStruct_ByteIndex, _NonNullableRecordLikeStruct_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_RecordLikeStruct(ref w, _NonNullableRecordLikeStruct,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2563*/if (updateStoredBuffer)
                                    {
                                        _NonNullableRecordLikeStruct_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2564*/startOfObjectPosition = writer.Position;
                                    /*Location2565*//*Location2566*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableRegularTupleWithNonNullable, isBelievedDirty: true,
                                    isAccessed: true, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableRegularTupleWithNonNullable_ByteIndex, _NonNullableRegularTupleWithNonNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Tuple_GExample_c_C32int_g(ref w, _NonNullableRegularTupleWithNonNullable!,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2567*/if (updateStoredBuffer)
                                    {
                                        _NonNullableRegularTupleWithNonNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2568*/startOfObjectPosition = writer.Position;
                                    /*Location2569*//*Location2570*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableRegularTupleWithNullable, isBelievedDirty: true,
                                    isAccessed: true, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableRegularTupleWithNullable_ByteIndex, _NonNullableRegularTupleWithNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Tuple_GExample_C63_c_C32int_g(ref w, _NonNullableRegularTupleWithNullable!,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2571*/if (updateStoredBuffer)
                                    {
                                        _NonNullableRegularTupleWithNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2572*/startOfObjectPosition = writer.Position;
                                    /*Location2573*//*Location2574*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableStackOfNonNullables, isBelievedDirty: true,
                                    isAccessed: true, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableStackOfNonNullables_ByteIndex, _NonNullableStackOfNonNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Stack_GExample_g(ref w, _NonNullableStackOfNonNullables!,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2575*/if (updateStoredBuffer)
                                    {
                                        _NonNullableStackOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2576*/startOfObjectPosition = writer.Position;
                                    /*Location2577*//*Location2578*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableStackOfNullables, isBelievedDirty: true,
                                    isAccessed: true, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableStackOfNullables_ByteIndex, _NonNullableStackOfNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Stack_GExample_C63_g(ref w, _NonNullableStackOfNullables!,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2579*/if (updateStoredBuffer)
                                    {
                                        _NonNullableStackOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2580*/startOfObjectPosition = writer.Position;
                                    /*Location2581*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableStruct_Accessed)
                                        {
                                            var deserialized = NonNullableStruct;
                                        }
                                        WriteChild(ref writer, ref _NonNullableStruct, includeChildrenMode, _NonNullableStruct_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NonNullableStruct_ByteIndex, _NonNullableStruct_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location2582*/if (updateStoredBuffer)
                                    {
                                        _NonNullableStruct_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2583*/startOfObjectPosition = writer.Position;
                                    /*Location2584*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableArrayOfNonNullables_Accessed)
                                    {
                                        var deserialized = NullableArrayOfNonNullables;
                                    }
                                    /*Location2585*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableArrayOfNonNullables, isBelievedDirty: _NullableArrayOfNonNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableArrayOfNonNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableArrayOfNonNullables_ByteIndex, _NullableArrayOfNonNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Example_B_b_C63(ref w, _NullableArrayOfNonNullables,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2586*/if (updateStoredBuffer)
                                    {
                                        _NullableArrayOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2587*/startOfObjectPosition = writer.Position;
                                    /*Location2588*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableArrayOfNullables_Accessed)
                                    {
                                        var deserialized = NullableArrayOfNullables;
                                    }
                                    /*Location2589*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableArrayOfNullables, isBelievedDirty: _NullableArrayOfNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableArrayOfNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableArrayOfNullables_ByteIndex, _NullableArrayOfNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Example_C63_B_b_C63(ref w, _NullableArrayOfNullables,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2590*/if (updateStoredBuffer)
                                    {
                                        _NullableArrayOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2591*/startOfObjectPosition = writer.Position;
                                    /*Location2592*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableDictionaryWithNonNullable_Accessed)
                                    {
                                        var deserialized = NullableDictionaryWithNonNullable;
                                    }
                                    /*Location2593*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableDictionaryWithNonNullable, isBelievedDirty: _NullableDictionaryWithNonNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableDictionaryWithNonNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableDictionaryWithNonNullable_ByteIndex, _NullableDictionaryWithNonNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Dictionary_Gint_c_C32Example_g_C63(ref w, _NullableDictionaryWithNonNullable,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2594*/if (updateStoredBuffer)
                                    {
                                        _NullableDictionaryWithNonNullable_ByteIndex = startOfObjectPosition - startPosition;if (_NullableDictionaryWithNonNullable_Accessed && _NullableDictionaryWithNonNullable != null)
                                        {
                                            _NullableDictionaryWithNonNullable = (Dictionary<int, Example>?) CloneOrChange_Dictionary_Gint_c_C32Example_g_C63(_NullableDictionaryWithNonNullable, l => l.RemoveBufferInHierarchy(), true);
                                        }
                                        
                                    }
                                    /*Location2595*/startOfObjectPosition = writer.Position;
                                    /*Location2596*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableDictionaryWithNullable_Accessed)
                                    {
                                        var deserialized = NullableDictionaryWithNullable;
                                    }
                                    /*Location2597*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableDictionaryWithNullable, isBelievedDirty: _NullableDictionaryWithNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableDictionaryWithNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableDictionaryWithNullable_ByteIndex, _NullableDictionaryWithNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Dictionary_Gint_c_C32Example_C63_g_C63(ref w, _NullableDictionaryWithNullable,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2598*/if (updateStoredBuffer)
                                    {
                                        _NullableDictionaryWithNullable_ByteIndex = startOfObjectPosition - startPosition;if (_NullableDictionaryWithNullable_Accessed && _NullableDictionaryWithNullable != null)
                                        {
                                            _NullableDictionaryWithNullable = (Dictionary<int, Example?>?) CloneOrChange_Dictionary_Gint_c_C32Example_C63_g_C63(_NullableDictionaryWithNullable, l => l.RemoveBufferInHierarchy(), true);
                                        }
                                        
                                    }
                                    /*Location2599*/startOfObjectPosition = writer.Position;
                                    /*Location2600*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableLazinatorListNonNullable_Accessed)
                                        {
                                            var deserialized = NullableLazinatorListNonNullable;
                                        }
                                        WriteChild(ref writer, ref _NullableLazinatorListNonNullable, includeChildrenMode, _NullableLazinatorListNonNullable_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NullableLazinatorListNonNullable_ByteIndex, _NullableLazinatorListNonNullable_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location2601*/if (updateStoredBuffer)
                                    {
                                        _NullableLazinatorListNonNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2602*/startOfObjectPosition = writer.Position;
                                    /*Location2603*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableLazinatorListNullable_Accessed)
                                        {
                                            var deserialized = NullableLazinatorListNullable;
                                        }
                                        WriteChild(ref writer, ref _NullableLazinatorListNullable, includeChildrenMode, _NullableLazinatorListNullable_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NullableLazinatorListNullable_ByteIndex, _NullableLazinatorListNullable_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location2604*/if (updateStoredBuffer)
                                    {
                                        _NullableLazinatorListNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2605*/startOfObjectPosition = writer.Position;
                                    /*Location2606*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableListOfNonNullables_Accessed)
                                    {
                                        var deserialized = NullableListOfNonNullables;
                                    }
                                    /*Location2607*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableListOfNonNullables, isBelievedDirty: _NullableListOfNonNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableListOfNonNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableListOfNonNullables_ByteIndex, _NullableListOfNonNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_List_GExample_g_C63(ref w, _NullableListOfNonNullables,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2608*/if (updateStoredBuffer)
                                    {
                                        _NullableListOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2609*/startOfObjectPosition = writer.Position;
                                    /*Location2610*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableListOfNullables_Accessed)
                                    {
                                        var deserialized = NullableListOfNullables;
                                    }
                                    /*Location2611*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableListOfNullables, isBelievedDirty: _NullableListOfNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableListOfNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableListOfNullables_ByteIndex, _NullableListOfNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_List_GExample_C63_g_C63(ref w, _NullableListOfNullables,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2612*/if (updateStoredBuffer)
                                    {
                                        _NullableListOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2613*/startOfObjectPosition = writer.Position;
                                    /*Location2614*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableMemoryOfBytes_Accessed)
                                    {
                                        var deserialized = NullableMemoryOfBytes;
                                    }
                                    /*Location2615*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableMemoryOfBytes, isBelievedDirty: _NullableMemoryOfBytes_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableMemoryOfBytes_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableMemoryOfBytes_ByteIndex, _NullableMemoryOfBytes_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Memory_Gbyte_g_C63(ref w, _NullableMemoryOfBytes,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2616*/if (updateStoredBuffer)
                                    {
                                        _NullableMemoryOfBytes_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2617*/startOfObjectPosition = writer.Position;
                                    /*Location2618*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableQueueOfNonNullables_Accessed)
                                    {
                                        var deserialized = NullableQueueOfNonNullables;
                                    }
                                    /*Location2619*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableQueueOfNonNullables, isBelievedDirty: _NullableQueueOfNonNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableQueueOfNonNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableQueueOfNonNullables_ByteIndex, _NullableQueueOfNonNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Queue_GExample_g_C63(ref w, _NullableQueueOfNonNullables,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2620*/if (updateStoredBuffer)
                                    {
                                        _NullableQueueOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2621*/startOfObjectPosition = writer.Position;
                                    /*Location2622*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableQueueOfNullables_Accessed)
                                    {
                                        var deserialized = NullableQueueOfNullables;
                                    }
                                    /*Location2623*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableQueueOfNullables, isBelievedDirty: _NullableQueueOfNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableQueueOfNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableQueueOfNullables_ByteIndex, _NullableQueueOfNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Queue_GExample_C63_g_C63(ref w, _NullableQueueOfNullables,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2624*/if (updateStoredBuffer)
                                    {
                                        _NullableQueueOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2625*/startOfObjectPosition = writer.Position;
                                    /*Location2626*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableReadOnlyMemoryOfBytes_Accessed)
                                    {
                                        var deserialized = NullableReadOnlyMemoryOfBytes;
                                    }
                                    /*Location2627*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableReadOnlyMemoryOfBytes, isBelievedDirty: _NullableReadOnlyMemoryOfBytes_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableReadOnlyMemoryOfBytes_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableReadOnlyMemoryOfBytes_ByteIndex, _NullableReadOnlyMemoryOfBytes_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_ReadOnlyMemory_Gbyte_g_C63(ref w, _NullableReadOnlyMemoryOfBytes,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2628*/if (updateStoredBuffer)
                                    {
                                        _NullableReadOnlyMemoryOfBytes_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2629*/startOfObjectPosition = writer.Position;
                                    /*Location2630*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableRecordLikeClass_Accessed)
                                    {
                                        var deserialized = NullableRecordLikeClass;
                                    }
                                    /*Location2631*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableRecordLikeClass, isBelievedDirty: _NullableRecordLikeClass_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableRecordLikeClass_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableRecordLikeClass_ByteIndex, _NullableRecordLikeClass_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_RecordLikeClass(ref w, _NullableRecordLikeClass,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2632*/if (updateStoredBuffer)
                                    {
                                        _NullableRecordLikeClass_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2633*/startOfObjectPosition = writer.Position;
                                    /*Location2634*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableRecordLikeStruct_Accessed)
                                    {
                                        var deserialized = NullableRecordLikeStruct;
                                    }
                                    /*Location2635*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableRecordLikeStruct, isBelievedDirty: _NullableRecordLikeStruct_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableRecordLikeStruct_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableRecordLikeStruct_ByteIndex, _NullableRecordLikeStruct_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_RecordLikeStruct_C63(ref w, _NullableRecordLikeStruct,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2636*/if (updateStoredBuffer)
                                    {
                                        _NullableRecordLikeStruct_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2637*/startOfObjectPosition = writer.Position;
                                    /*Location2638*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableRegularTupleWithNonNullable_Accessed)
                                    {
                                        var deserialized = NullableRegularTupleWithNonNullable;
                                    }
                                    /*Location2639*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableRegularTupleWithNonNullable, isBelievedDirty: _NullableRegularTupleWithNonNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableRegularTupleWithNonNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableRegularTupleWithNonNullable_ByteIndex, _NullableRegularTupleWithNonNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Tuple_GExample_c_C32int_g_C63(ref w, _NullableRegularTupleWithNonNullable,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2640*/if (updateStoredBuffer)
                                    {
                                        _NullableRegularTupleWithNonNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2641*/startOfObjectPosition = writer.Position;
                                    /*Location2642*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableRegularTupleWithNullable_Accessed)
                                    {
                                        var deserialized = NullableRegularTupleWithNullable;
                                    }
                                    /*Location2643*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableRegularTupleWithNullable, isBelievedDirty: _NullableRegularTupleWithNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableRegularTupleWithNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableRegularTupleWithNullable_ByteIndex, _NullableRegularTupleWithNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Tuple_GExample_C63_c_C32int_g_C63(ref w, _NullableRegularTupleWithNullable,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2644*/if (updateStoredBuffer)
                                    {
                                        _NullableRegularTupleWithNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2645*/startOfObjectPosition = writer.Position;
                                    /*Location2646*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableStackOfNonNullables_Accessed)
                                    {
                                        var deserialized = NullableStackOfNonNullables;
                                    }
                                    /*Location2647*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableStackOfNonNullables, isBelievedDirty: _NullableStackOfNonNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableStackOfNonNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableStackOfNonNullables_ByteIndex, _NullableStackOfNonNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Stack_GExample_g_C63(ref w, _NullableStackOfNonNullables,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2648*/if (updateStoredBuffer)
                                    {
                                        _NullableStackOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2649*/startOfObjectPosition = writer.Position;
                                    /*Location2650*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableStackOfNullables_Accessed)
                                    {
                                        var deserialized = NullableStackOfNullables;
                                    }
                                    /*Location2651*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableStackOfNullables, isBelievedDirty: _NullableStackOfNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableStackOfNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableStackOfNullables_ByteIndex, _NullableStackOfNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Stack_GExample_C63_g_C63(ref w, _NullableStackOfNullables,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2652*/if (updateStoredBuffer)
                                    {
                                        _NullableStackOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2653*/startOfObjectPosition = writer.Position;
                                    /*Location2654*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableStruct_Accessed)
                                        {
                                            var deserialized = NullableStruct;
                                        }
                                        if (_NullableStruct == null)
                                        {
                                            WriteNullChild(ref writer, false, false);
                                        }
                                        else
                                        {
                                            var copy = _NullableStruct.Value;
                                            WriteChild(ref writer, ref copy, includeChildrenMode, _NullableStruct_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NullableStruct_ByteIndex, _NullableStruct_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                            _NullableStruct = copy;
                                        }
                                        
                                    }
                                    
                                    /*Location2655*/if (updateStoredBuffer)
                                    {
                                        _NullableStruct_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2656*/startOfObjectPosition = writer.Position;
                                    /*Location2657*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableValueTupleWithNonNullable_Accessed)
                                    {
                                        var deserialized = NullableValueTupleWithNonNullable;
                                    }
                                    /*Location2658*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableValueTupleWithNonNullable, isBelievedDirty: _NullableValueTupleWithNonNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableValueTupleWithNonNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableValueTupleWithNonNullable_ByteIndex, _NullableValueTupleWithNonNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes__PExample_c_C32int_p_C63(ref w, _NullableValueTupleWithNonNullable,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2659*/if (updateStoredBuffer)
                                    {
                                        _NullableValueTupleWithNonNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2660*/startOfObjectPosition = writer.Position;
                                    /*Location2661*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableValueTupleWithNullable_Accessed)
                                    {
                                        var deserialized = NullableValueTupleWithNullable;
                                    }
                                    /*Location2662*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableValueTupleWithNullable, isBelievedDirty: _NullableValueTupleWithNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableValueTupleWithNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableValueTupleWithNullable_ByteIndex, _NullableValueTupleWithNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes__PExample_C63_c_C32int_p_C63(ref w, _NullableValueTupleWithNullable,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2663*/if (updateStoredBuffer)
                                    {
                                        _NullableValueTupleWithNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2664*/startOfObjectPosition = writer.Position;
                                    /*Location2665*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ValueTupleWithNonNullable_Accessed)
                                    {
                                        var deserialized = ValueTupleWithNonNullable;
                                    }
                                    /*Location2666*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _ValueTupleWithNonNullable, isBelievedDirty: _ValueTupleWithNonNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _ValueTupleWithNonNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ValueTupleWithNonNullable_ByteIndex, _ValueTupleWithNonNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes__PExample_c_C32int_p(ref w, _ValueTupleWithNonNullable,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2667*/if (updateStoredBuffer)
                                    {
                                        _ValueTupleWithNonNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2668*/startOfObjectPosition = writer.Position;
                                    /*Location2669*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ValueTupleWithNullable_Accessed)
                                    {
                                        var deserialized = ValueTupleWithNullable;
                                    }
                                    /*Location2670*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _ValueTupleWithNullable, isBelievedDirty: _ValueTupleWithNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _ValueTupleWithNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ValueTupleWithNullable_ByteIndex, _ValueTupleWithNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes__PExample_C63_c_C32int_p(ref w, _ValueTupleWithNullable,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location2671*/if (updateStoredBuffer)
                                    {
                                        _ValueTupleWithNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location2672*/if (updateStoredBuffer)
                                    {
                                        /*Location2673*/_NullableEnabledContext_EndByteIndex = writer.Position - startPosition;
                                        /*Location2674*/}
                                        /*Location2675*/}
                                        /*Location2676*/
                                        /* Conversion of supported collections and tuples */
                                        /*Location2677*/
                                        private static void ConvertToBytes_ReadOnlySpan_Gbyte_g(ref BinaryBufferWriter writer, ReadOnlySpan<byte> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            ReadOnlySpan<byte> toConvert = (itemToConvert);
                                            for (int i = 0; i < toConvert.Length; i++)
                                            {
                                                writer.Write(toConvert[i]);
                                            }
                                        }
                                        /*Location2678*/private static ReadOnlySpan<byte> CloneOrChange_ReadOnlySpan_Gbyte_g(ReadOnlySpan<byte> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            var clone = new Span<byte>(new byte[itemToClone.Length * sizeof(byte)]);
                                            itemToClone.CopyTo(clone);
                                            return clone;
                                        }
                                        /*Location2679*/
                                        private static Example[] ConvertFromBytes_Example_B_b(LazinatorMemory storage)
                                        {
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            Example[] collection = new Example[collectionLength];
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                var item = new Example();
                                                item.DeserializeLazinator(childData);
                                                collection[itemIndex] = item;
                                                bytesSoFar += lengthCollectionMember;
                                            }
                                            
                                            return collection;
                                        }/*Location2680*/
                                        
                                        private static void ConvertToBytes_Example_B_b(ref BinaryBufferWriter writer, Example[] itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(Example[]))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
                                            int itemToConvertCount = itemToConvert.Length;
                                            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                            {
                                                void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                            }
                                        }
                                        /*Location2681*/
                                        private static Example[] CloneOrChange_Example_B_b(Example[] itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            int collectionLength = itemToClone.Length;
                                            Example[] collection = avoidCloningIfPossible ? itemToClone : new Example[collectionLength];
                                            int itemToCloneCount = itemToClone.Length;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                if (avoidCloningIfPossible)
                                                {
                                                    if (itemToClone[itemIndex] != null)
                                                    {
                                                        itemToClone[itemIndex] = (Example) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                                                    }
                                                    continue;
                                                }
                                                var itemCopied = (Example) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                                                collection[itemIndex] = itemCopied;
                                            }
                                            return collection;
                                        }
                                        /*Location2682*/
                                        private static Example?[] ConvertFromBytes_Example_C63_B_b(LazinatorMemory storage)
                                        {
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            Example?[] collection = new Example?[collectionLength];
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                if (lengthCollectionMember == 0)
                                                {
                                                    collection[itemIndex] = null;
                                                }
                                                else
                                                {
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                    var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                    collection[itemIndex] = item;
                                                }
                                                bytesSoFar += lengthCollectionMember;
                                            }
                                            
                                            return collection;
                                        }/*Location2683*/
                                        
                                        private static void ConvertToBytes_Example_C63_B_b(ref BinaryBufferWriter writer, Example?[] itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(Example?[]))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
                                            int itemToConvertCount = itemToConvert.Length;
                                            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                            {
                                                if (itemToConvert[itemIndex] == null)
                                                {
                                                    writer.Write((uint)0);
                                                }
                                                else 
                                                {
                                                    
                                                    void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                }
                                                
                                            }
                                        }
                                        /*Location2684*/
                                        private static Example?[] CloneOrChange_Example_C63_B_b(Example?[] itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            int collectionLength = itemToClone.Length;
                                            Example?[] collection = avoidCloningIfPossible ? itemToClone : new Example?[collectionLength];
                                            int itemToCloneCount = itemToClone.Length;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                if (avoidCloningIfPossible)
                                                {
                                                    if (itemToClone[itemIndex] != null)
                                                    {
                                                        itemToClone[itemIndex] = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                    }
                                                    continue;
                                                }
                                                if (itemToClone[itemIndex] == null)
                                                {
                                                    collection[itemIndex] = null;
                                                }
                                                else
                                                {
                                                    var itemCopied = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                    collection[itemIndex] = itemCopied;
                                                }
                                                
                                            }
                                            return collection;
                                        }
                                        /*Location2685*/
                                        private static Dictionary<int, Example> ConvertFromBytes_Dictionary_Gint_c_C32Example_g(LazinatorMemory storage)
                                        {
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            Dictionary<int, Example> collection = new Dictionary<int, Example>(collectionLength);
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                var item = ConvertFromBytes_KeyValuePair_Gint_c_C32Example_g(childData);
                                                collection.Add(item.Key, item.Value);
                                                bytesSoFar += lengthCollectionMember;
                                            }
                                            
                                            return collection;
                                        }/*Location2686*/
                                        
                                        private static void ConvertToBytes_Dictionary_Gint_c_C32Example_g(ref BinaryBufferWriter writer, Dictionary<int, Example> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(Dictionary<int, Example>))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                            foreach (var item in itemToConvert)
                                            {
                                                void action(ref BinaryBufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32Example_g(ref w, item, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                            }
                                        }
                                        /*Location2687*/
                                        private static Dictionary<int, Example> CloneOrChange_Dictionary_Gint_c_C32Example_g(Dictionary<int, Example> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            int collectionLength = itemToClone.Count;
                                            Dictionary<int, Example> collection = new Dictionary<int, Example>(collectionLength);
                                            foreach (var item in itemToClone)
                                            {
                                                var itemCopied = (KeyValuePair<int, Example>) CloneOrChange_KeyValuePair_Gint_c_C32Example_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                                                collection.Add(itemCopied.Key, itemCopied.Value);
                                            }
                                            return collection;
                                        }
                                        /*Location2688*/
                                        private static KeyValuePair<int, Example> ConvertFromBytes_KeyValuePair_Gint_c_C32Example_g(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default;
                                            }
                                            ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                            
                                            int bytesSoFar = 0;
                                            /*Location2689*/
                                            int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                            /*Location2690*/
                                            int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                            Example item2 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                                            bytesSoFar += lengthCollectionMember_item2;
                                            /*Location2691*/
                                            var tupleType = new KeyValuePair<int, Example>(item1, item2);
                                            
                                            return tupleType;
                                        }
                                        
                                        private static void ConvertToBytes_KeyValuePair_Gint_c_C32Example_g(ref BinaryBufferWriter writer, KeyValuePair<int, Example> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            /*Location2692*/
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Key);
                                            /*Location2693*/
                                            if (itemToConvert.Value == null)
                                            {
                                                writer.Write((uint)0);
                                            }
                                            else
                                            {
                                                void actionValue(ref BinaryBufferWriter w) => itemToConvert.Value.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                WriteToBinaryWithIntLengthPrefix(ref writer, actionValue);
                                            };
                                            /*Location2694*/}
                                            /*Location2695*/
                                            private static KeyValuePair<int, Example> CloneOrChange_KeyValuePair_Gint_c_C32Example_g(KeyValuePair<int, Example> itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                            {
                                                return new KeyValuePair<int, Example>((int) (itemToConvert.Key),(Example) (cloneOrChangeFunc((itemToConvert.Value))!));
                                            }
                                            /*Location2696*/
                                            private static Dictionary<int, Example?> ConvertFromBytes_Dictionary_Gint_c_C32Example_C63_g(LazinatorMemory storage)
                                            {
                                                ReadOnlySpan<byte> span = storage.Span;
                                                int bytesSoFar = 0;
                                                int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                
                                                Dictionary<int, Example?> collection = new Dictionary<int, Example?>(collectionLength);
                                                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                {
                                                    int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                    var item = ConvertFromBytes_KeyValuePair_Gint_c_C32Example_C63_g(childData);
                                                    collection.Add(item.Key, item.Value);
                                                    bytesSoFar += lengthCollectionMember;
                                                }
                                                
                                                return collection;
                                            }/*Location2697*/
                                            
                                            private static void ConvertToBytes_Dictionary_Gint_c_C32Example_C63_g(ref BinaryBufferWriter writer, Dictionary<int, Example?> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                            {
                                                if (itemToConvert == default(Dictionary<int, Example?>))
                                                {
                                                    return;
                                                }
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                foreach (var item in itemToConvert)
                                                {
                                                    void action(ref BinaryBufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32Example_C63_g(ref w, item, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                }
                                            }
                                            /*Location2698*/
                                            private static Dictionary<int, Example?> CloneOrChange_Dictionary_Gint_c_C32Example_C63_g(Dictionary<int, Example?> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                            {
                                                int collectionLength = itemToClone.Count;
                                                Dictionary<int, Example?> collection = new Dictionary<int, Example?>(collectionLength);
                                                foreach (var item in itemToClone)
                                                {
                                                    var itemCopied = (KeyValuePair<int, Example?>) CloneOrChange_KeyValuePair_Gint_c_C32Example_C63_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                                                    collection.Add(itemCopied.Key, itemCopied.Value);
                                                }
                                                return collection;
                                            }
                                            /*Location2699*/
                                            private static KeyValuePair<int, Example?> ConvertFromBytes_KeyValuePair_Gint_c_C32Example_C63_g(LazinatorMemory storage)
                                            {
                                                if (storage.Length == 0)
                                                {
                                                    return default;
                                                }
                                                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                
                                                int bytesSoFar = 0;
                                                /*Location2700*/
                                                int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                                /*Location2701*/
                                                Example? item2 = default(Example?);
                                                int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                                if (lengthCollectionMember_item2 != 0)
                                                {
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                    item2 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                }
                                                bytesSoFar += lengthCollectionMember_item2;
                                                /*Location2702*/
                                                var tupleType = new KeyValuePair<int, Example?>(item1, item2);
                                                
                                                return tupleType;
                                            }
                                            
                                            private static void ConvertToBytes_KeyValuePair_Gint_c_C32Example_C63_g(ref BinaryBufferWriter writer, KeyValuePair<int, Example?> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                            {
                                                /*Location2703*/
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Key);
                                                /*Location2704*/
                                                if (itemToConvert.Value == null)
                                                {
                                                    writer.Write((uint)0);
                                                }
                                                else
                                                {
                                                    void actionValue(ref BinaryBufferWriter w) => itemToConvert.Value.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, actionValue);
                                                };
                                                /*Location2705*/}
                                                /*Location2706*/
                                                private static KeyValuePair<int, Example?> CloneOrChange_KeyValuePair_Gint_c_C32Example_C63_g(KeyValuePair<int, Example?> itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    return new KeyValuePair<int, Example?>((int) (itemToConvert.Key),(Example?) (cloneOrChangeFunc((itemToConvert.Value))));
                                                }
                                                /*Location2707*/
                                                private static List<Example> ConvertFromBytes_List_GExample_g(LazinatorMemory storage)
                                                {
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    List<Example> collection = new List<Example>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = new Example();
                                                        item.DeserializeLazinator(childData);
                                                        collection.Add(item);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location2708*/
                                                
                                                private static void ConvertToBytes_List_GExample_g(ref BinaryBufferWriter writer, List<Example> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(List<Example>))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location2709*/
                                                private static List<Example> CloneOrChange_List_GExample_g(List<Example> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    int collectionLength = itemToClone.Count;
                                                    List<Example> collection = avoidCloningIfPossible ? itemToClone : new List<Example>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (avoidCloningIfPossible)
                                                        {
                                                            if (itemToClone[itemIndex] != null)
                                                            {
                                                                itemToClone[itemIndex] = (Example) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                                                            }
                                                            continue;
                                                        }
                                                        var itemCopied = (Example) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                                                        collection.Add(itemCopied);
                                                    }
                                                    return collection;
                                                }
                                                /*Location2710*/
                                                private static List<Example?> ConvertFromBytes_List_GExample_C63_g(LazinatorMemory storage)
                                                {
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    List<Example?> collection = new List<Example?>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember == 0)
                                                        {
                                                            collection.Add(null);
                                                        }
                                                        else
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                            var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                            collection.Add(item);
                                                        }
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location2711*/
                                                
                                                private static void ConvertToBytes_List_GExample_C63_g(ref BinaryBufferWriter writer, List<Example?> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(List<Example?>))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        if (itemToConvert[itemIndex] == null)
                                                        {
                                                            writer.Write((uint)0);
                                                        }
                                                        else 
                                                        {
                                                            
                                                            void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                            WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                        }
                                                        
                                                    }
                                                }
                                                /*Location2712*/
                                                private static List<Example?> CloneOrChange_List_GExample_C63_g(List<Example?> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    int collectionLength = itemToClone.Count;
                                                    List<Example?> collection = avoidCloningIfPossible ? itemToClone : new List<Example?>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (avoidCloningIfPossible)
                                                        {
                                                            if (itemToClone[itemIndex] != null)
                                                            {
                                                                itemToClone[itemIndex] = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                            }
                                                            continue;
                                                        }
                                                        if (itemToClone[itemIndex] == null)
                                                        {
                                                            collection.Add(null);
                                                        }
                                                        else
                                                        {
                                                            var itemCopied = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                            collection.Add(itemCopied);
                                                        }
                                                        
                                                    }
                                                    return collection;
                                                }
                                                /*Location2713*/
                                                private static Memory<byte> ConvertFromBytes_Memory_Gbyte_g(LazinatorMemory storage)
                                                {
                                                    /*Location2714*/return storage.Memory.ToArray();
                                                }/*Location2715*/
                                                
                                                private static void ConvertToBytes_Memory_Gbyte_g(ref BinaryBufferWriter writer, Memory<byte> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    /*Location2716*/writer.Write(itemToConvert.Span);
                                                }
                                                /*Location2717*/
                                                private static Memory<byte> CloneOrChange_Memory_Gbyte_g(Memory<byte> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    int collectionLength = itemToClone.Length;
                                                    Memory<byte> collection = new Memory<byte>(new byte[collectionLength]);
                                                    var collectionAsSpan = collection.Span;
                                                    var itemToCloneSpan = itemToClone.Span;
                                                    int itemToCloneCount = itemToCloneSpan.Length;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        var itemCopied = (byte) itemToCloneSpan[itemIndex];
                                                        collectionAsSpan[itemIndex] = itemCopied;
                                                    }
                                                    return collection;
                                                }
                                                /*Location2718*/
                                                private static Queue<Example> ConvertFromBytes_Queue_GExample_g(LazinatorMemory storage)
                                                {
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Queue<Example> collection = new Queue<Example>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = new Example();
                                                        item.DeserializeLazinator(childData);
                                                        collection.Enqueue(item);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location2719*/
                                                
                                                private static void ConvertToBytes_Queue_GExample_g(ref BinaryBufferWriter writer, Queue<Example> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Queue<Example>))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    var q = System.Linq.Enumerable.ToList(itemToConvert);
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => q[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location2720*/
                                                private static Queue<Example> CloneOrChange_Queue_GExample_g(Queue<Example> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    int collectionLength = itemToClone.Count;
                                                    Queue<Example> collection = new Queue<Example>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    var q = System.Linq.Enumerable.ToList(itemToClone);
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        var itemCopied = (Example) (cloneOrChangeFunc(q[itemIndex])!);
                                                        collection.Enqueue(itemCopied);
                                                    }
                                                    return collection;
                                                }
                                                /*Location2721*/
                                                private static Queue<Example?> ConvertFromBytes_Queue_GExample_C63_g(LazinatorMemory storage)
                                                {
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Queue<Example?> collection = new Queue<Example?>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember == 0)
                                                        {
                                                            collection.Enqueue(null);
                                                        }
                                                        else
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                            var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                            collection.Enqueue(item);
                                                        }
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location2722*/
                                                
                                                private static void ConvertToBytes_Queue_GExample_C63_g(ref BinaryBufferWriter writer, Queue<Example?> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Queue<Example?>))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    var q = System.Linq.Enumerable.ToList(itemToConvert);
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        if (q[itemIndex] == null)
                                                        {
                                                            writer.Write((uint)0);
                                                        }
                                                        else 
                                                        {
                                                            
                                                            void action(ref BinaryBufferWriter w) => q[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                            WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                        }
                                                        
                                                    }
                                                }
                                                /*Location2723*/
                                                private static Queue<Example?> CloneOrChange_Queue_GExample_C63_g(Queue<Example?> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    int collectionLength = itemToClone.Count;
                                                    Queue<Example?> collection = new Queue<Example?>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    var q = System.Linq.Enumerable.ToList(itemToClone);
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (q[itemIndex] == null)
                                                        {
                                                            collection.Enqueue(null);
                                                        }
                                                        else
                                                        {
                                                            var itemCopied = (Example?) (cloneOrChangeFunc(q[itemIndex]));
                                                            collection.Enqueue(itemCopied);
                                                        }
                                                        
                                                    }
                                                    return collection;
                                                }
                                                /*Location2724*/
                                                private static ReadOnlyMemory<byte> ConvertFromBytes_ReadOnlyMemory_Gbyte_g(LazinatorMemory storage)
                                                {
                                                    /*Location2725*/return storage.Memory.ToArray();
                                                }/*Location2726*/
                                                
                                                private static void ConvertToBytes_ReadOnlyMemory_Gbyte_g(ref BinaryBufferWriter writer, ReadOnlyMemory<byte> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    /*Location2727*/writer.Write(itemToConvert.Span);
                                                }
                                                /*Location2728*/
                                                private static ReadOnlyMemory<byte> CloneOrChange_ReadOnlyMemory_Gbyte_g(ReadOnlyMemory<byte> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    int collectionLength = itemToClone.Length;
                                                    Memory<byte> collection = new Memory<byte>(new byte[collectionLength]);
                                                    var collectionAsSpan = collection.Span;
                                                    var itemToCloneSpan = itemToClone.Span;
                                                    int itemToCloneCount = itemToCloneSpan.Length;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        var itemCopied = (byte) itemToCloneSpan[itemIndex];
                                                        collectionAsSpan[itemIndex] = itemCopied;
                                                    }
                                                    return collection;
                                                }
                                                /*Location2729*/
                                                private static Stack<Example> ConvertFromBytes_Stack_GExample_g(LazinatorMemory storage)
                                                {
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Stack<Example> collection = new Stack<Example>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = new Example();
                                                        item.DeserializeLazinator(childData);
                                                        collection.Push(item);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location2730*/
                                                
                                                private static void ConvertToBytes_Stack_GExample_g(ref BinaryBufferWriter writer, Stack<Example> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Stack<Example>))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    var stackReversed = System.Linq.Enumerable.ToList(itemToConvert);
                                                    stackReversed.Reverse();
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => stackReversed[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location2731*/
                                                private static Stack<Example> CloneOrChange_Stack_GExample_g(Stack<Example> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    int collectionLength = itemToClone.Count;
                                                    Stack<Example> collection = new Stack<Example>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    var stackReversed = System.Linq.Enumerable.ToList(itemToClone);
                                                    stackReversed.Reverse();
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        var itemCopied = (Example) (cloneOrChangeFunc(stackReversed[itemIndex])!);
                                                        collection.Push(itemCopied);
                                                    }
                                                    return collection;
                                                }
                                                /*Location2732*/
                                                private static Stack<Example?> ConvertFromBytes_Stack_GExample_C63_g(LazinatorMemory storage)
                                                {
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Stack<Example?> collection = new Stack<Example?>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember == 0)
                                                        {
                                                            collection.Push(null);
                                                        }
                                                        else
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                            var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                            collection.Push(item);
                                                        }
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location2733*/
                                                
                                                private static void ConvertToBytes_Stack_GExample_C63_g(ref BinaryBufferWriter writer, Stack<Example?> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Stack<Example?>))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    var stackReversed = System.Linq.Enumerable.ToList(itemToConvert);
                                                    stackReversed.Reverse();
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        if (stackReversed[itemIndex] == null)
                                                        {
                                                            writer.Write((uint)0);
                                                        }
                                                        else 
                                                        {
                                                            
                                                            void action(ref BinaryBufferWriter w) => stackReversed[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                            WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                        }
                                                        
                                                    }
                                                }
                                                /*Location2734*/
                                                private static Stack<Example?> CloneOrChange_Stack_GExample_C63_g(Stack<Example?> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    int collectionLength = itemToClone.Count;
                                                    Stack<Example?> collection = new Stack<Example?>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    var stackReversed = System.Linq.Enumerable.ToList(itemToClone);
                                                    stackReversed.Reverse();
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (stackReversed[itemIndex] == null)
                                                        {
                                                            collection.Push(null);
                                                        }
                                                        else
                                                        {
                                                            var itemCopied = (Example?) (cloneOrChangeFunc(stackReversed[itemIndex]));
                                                            collection.Push(itemCopied);
                                                        }
                                                        
                                                    }
                                                    return collection;
                                                }
                                                /*Location2735*/
                                                private static Example[]? ConvertFromBytes_Example_B_b_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(Example[]?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Example[]? collection = new Example[collectionLength];
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = new Example();
                                                        item.DeserializeLazinator(childData);
                                                        collection[itemIndex] = item;
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location2736*/
                                                
                                                private static void ConvertToBytes_Example_B_b_C63(ref BinaryBufferWriter writer, Example[]? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Example[]?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
                                                    int itemToConvertCount = itemToConvert.Length;
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location2737*/
                                                private static Example[]? CloneOrChange_Example_B_b_C63(Example[]? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Length;
                                                    Example[]? collection = avoidCloningIfPossible ? itemToClone : new Example[collectionLength];
                                                    int itemToCloneCount = itemToClone.Length;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (avoidCloningIfPossible)
                                                        {
                                                            if (itemToClone[itemIndex] != null)
                                                            {
                                                                itemToClone[itemIndex] = (Example) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                                                            }
                                                            continue;
                                                        }
                                                        var itemCopied = (Example) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                                                        collection[itemIndex] = itemCopied;
                                                    }
                                                    return collection;
                                                }
                                                /*Location2738*/
                                                private static Example?[]? ConvertFromBytes_Example_C63_B_b_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(Example?[]?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Example?[]? collection = new Example?[collectionLength];
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember == 0)
                                                        {
                                                            collection[itemIndex] = null;
                                                        }
                                                        else
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                            var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                            collection[itemIndex] = item;
                                                        }
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location2739*/
                                                
                                                private static void ConvertToBytes_Example_C63_B_b_C63(ref BinaryBufferWriter writer, Example?[]? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Example?[]?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
                                                    int itemToConvertCount = itemToConvert.Length;
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        if (itemToConvert[itemIndex] == null)
                                                        {
                                                            writer.Write((uint)0);
                                                        }
                                                        else 
                                                        {
                                                            
                                                            void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                            WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                        }
                                                        
                                                    }
                                                }
                                                /*Location2740*/
                                                private static Example?[]? CloneOrChange_Example_C63_B_b_C63(Example?[]? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Length;
                                                    Example?[]? collection = avoidCloningIfPossible ? itemToClone : new Example?[collectionLength];
                                                    int itemToCloneCount = itemToClone.Length;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (avoidCloningIfPossible)
                                                        {
                                                            if (itemToClone[itemIndex] != null)
                                                            {
                                                                itemToClone[itemIndex] = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                            }
                                                            continue;
                                                        }
                                                        if (itemToClone[itemIndex] == null)
                                                        {
                                                            collection[itemIndex] = null;
                                                        }
                                                        else
                                                        {
                                                            var itemCopied = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                            collection[itemIndex] = itemCopied;
                                                        }
                                                        
                                                    }
                                                    return collection;
                                                }
                                                /*Location2741*/
                                                private static Dictionary<int, Example>? ConvertFromBytes_Dictionary_Gint_c_C32Example_g_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(Dictionary<int, Example>?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Dictionary<int, Example>? collection = new Dictionary<int, Example>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = ConvertFromBytes_KeyValuePair_Gint_c_C32Example_g(childData);
                                                        collection.Add(item.Key, item.Value);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location2742*/
                                                
                                                private static void ConvertToBytes_Dictionary_Gint_c_C32Example_g_C63(ref BinaryBufferWriter writer, Dictionary<int, Example>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Dictionary<int, Example>?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    foreach (var item in itemToConvert)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32Example_g(ref w, item, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location2743*/
                                                private static Dictionary<int, Example>? CloneOrChange_Dictionary_Gint_c_C32Example_g_C63(Dictionary<int, Example>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    Dictionary<int, Example>? collection = new Dictionary<int, Example>(collectionLength);
                                                    foreach (var item in itemToClone)
                                                    {
                                                        var itemCopied = (KeyValuePair<int, Example>) CloneOrChange_KeyValuePair_Gint_c_C32Example_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                                                        collection.Add(itemCopied.Key, itemCopied.Value);
                                                    }
                                                    return collection;
                                                }
                                                /*Location2744*/
                                                private static Dictionary<int, Example?>? ConvertFromBytes_Dictionary_Gint_c_C32Example_C63_g_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(Dictionary<int, Example?>?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Dictionary<int, Example?>? collection = new Dictionary<int, Example?>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = ConvertFromBytes_KeyValuePair_Gint_c_C32Example_C63_g(childData);
                                                        collection.Add(item.Key, item.Value);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location2745*/
                                                
                                                private static void ConvertToBytes_Dictionary_Gint_c_C32Example_C63_g_C63(ref BinaryBufferWriter writer, Dictionary<int, Example?>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Dictionary<int, Example?>?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    foreach (var item in itemToConvert)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32Example_C63_g(ref w, item, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location2746*/
                                                private static Dictionary<int, Example?>? CloneOrChange_Dictionary_Gint_c_C32Example_C63_g_C63(Dictionary<int, Example?>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    Dictionary<int, Example?>? collection = new Dictionary<int, Example?>(collectionLength);
                                                    foreach (var item in itemToClone)
                                                    {
                                                        var itemCopied = (KeyValuePair<int, Example?>) CloneOrChange_KeyValuePair_Gint_c_C32Example_C63_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                                                        collection.Add(itemCopied.Key, itemCopied.Value);
                                                    }
                                                    return collection;
                                                }
                                                /*Location2747*/
                                                private static List<Example>? ConvertFromBytes_List_GExample_g_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(List<Example>?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    List<Example>? collection = new List<Example>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = new Example();
                                                        item.DeserializeLazinator(childData);
                                                        collection.Add(item);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location2748*/
                                                
                                                private static void ConvertToBytes_List_GExample_g_C63(ref BinaryBufferWriter writer, List<Example>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(List<Example>?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location2749*/
                                                private static List<Example>? CloneOrChange_List_GExample_g_C63(List<Example>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    List<Example>? collection = avoidCloningIfPossible ? itemToClone : new List<Example>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (avoidCloningIfPossible)
                                                        {
                                                            if (itemToClone[itemIndex] != null)
                                                            {
                                                                itemToClone[itemIndex] = (Example) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                                                            }
                                                            continue;
                                                        }
                                                        var itemCopied = (Example) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                                                        collection.Add(itemCopied);
                                                    }
                                                    return collection;
                                                }
                                                /*Location2750*/
                                                private static List<Example?>? ConvertFromBytes_List_GExample_C63_g_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(List<Example?>?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    List<Example?>? collection = new List<Example?>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember == 0)
                                                        {
                                                            collection.Add(null);
                                                        }
                                                        else
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                            var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                            collection.Add(item);
                                                        }
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location2751*/
                                                
                                                private static void ConvertToBytes_List_GExample_C63_g_C63(ref BinaryBufferWriter writer, List<Example?>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(List<Example?>?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        if (itemToConvert[itemIndex] == null)
                                                        {
                                                            writer.Write((uint)0);
                                                        }
                                                        else 
                                                        {
                                                            
                                                            void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                            WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                        }
                                                        
                                                    }
                                                }
                                                /*Location2752*/
                                                private static List<Example?>? CloneOrChange_List_GExample_C63_g_C63(List<Example?>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    List<Example?>? collection = avoidCloningIfPossible ? itemToClone : new List<Example?>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (avoidCloningIfPossible)
                                                        {
                                                            if (itemToClone[itemIndex] != null)
                                                            {
                                                                itemToClone[itemIndex] = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                            }
                                                            continue;
                                                        }
                                                        if (itemToClone[itemIndex] == null)
                                                        {
                                                            collection.Add(null);
                                                        }
                                                        else
                                                        {
                                                            var itemCopied = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                            collection.Add(itemCopied);
                                                        }
                                                        
                                                    }
                                                    return collection;
                                                }
                                                /*Location2753*/
                                                private static Memory<byte>? ConvertFromBytes_Memory_Gbyte_g_C63(LazinatorMemory storage)
                                                {
                                                    /*Location2754*/int index = 0;
                                                    bool isNull = storage.ReadOnlySpan.ToBoolean(ref index);
                                                    if (isNull)
                                                    {
                                                        return null;
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span.Slice(1);
                                                    return span.ToArray();
                                                }/*Location2755*/
                                                
                                                private static void ConvertToBytes_Memory_Gbyte_g_C63(ref BinaryBufferWriter writer, Memory<byte>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    /*Location2756*/if (itemToConvert == null)
                                                    {
                                                        writer.Write((bool)true);
                                                        return;
                                                    }
                                                    writer.Write((bool)false);
                                                    writer.Write(itemToConvert.Value.Span);
                                                }
                                                /*Location2757*/
                                                private static Memory<byte>? CloneOrChange_Memory_Gbyte_g_C63(Memory<byte>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Value.Length;
                                                    Memory<byte> collection = new Memory<byte>(new byte[collectionLength]);
                                                    var collectionAsSpan = collection.Span;
                                                    var itemToCloneSpan = itemToClone.Value.Span;
                                                    int itemToCloneCount = itemToCloneSpan.Length;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        var itemCopied = (byte) itemToCloneSpan[itemIndex];
                                                        collectionAsSpan[itemIndex] = itemCopied;
                                                    }
                                                    return collection;
                                                }
                                                /*Location2758*/
                                                private static Queue<Example>? ConvertFromBytes_Queue_GExample_g_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(Queue<Example>?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Queue<Example>? collection = new Queue<Example>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = new Example();
                                                        item.DeserializeLazinator(childData);
                                                        collection.Enqueue(item);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location2759*/
                                                
                                                private static void ConvertToBytes_Queue_GExample_g_C63(ref BinaryBufferWriter writer, Queue<Example>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Queue<Example>?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    var q = System.Linq.Enumerable.ToList(itemToConvert);
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => q[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location2760*/
                                                private static Queue<Example>? CloneOrChange_Queue_GExample_g_C63(Queue<Example>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    Queue<Example>? collection = new Queue<Example>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    var q = System.Linq.Enumerable.ToList(itemToClone);
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        var itemCopied = (Example) (cloneOrChangeFunc(q[itemIndex])!);
                                                        collection.Enqueue(itemCopied);
                                                    }
                                                    return collection;
                                                }
                                                /*Location2761*/
                                                private static Queue<Example?>? ConvertFromBytes_Queue_GExample_C63_g_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(Queue<Example?>?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Queue<Example?>? collection = new Queue<Example?>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember == 0)
                                                        {
                                                            collection.Enqueue(null);
                                                        }
                                                        else
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                            var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                            collection.Enqueue(item);
                                                        }
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location2762*/
                                                
                                                private static void ConvertToBytes_Queue_GExample_C63_g_C63(ref BinaryBufferWriter writer, Queue<Example?>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Queue<Example?>?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    var q = System.Linq.Enumerable.ToList(itemToConvert);
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        if (q[itemIndex] == null)
                                                        {
                                                            writer.Write((uint)0);
                                                        }
                                                        else 
                                                        {
                                                            
                                                            void action(ref BinaryBufferWriter w) => q[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                            WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                        }
                                                        
                                                    }
                                                }
                                                /*Location2763*/
                                                private static Queue<Example?>? CloneOrChange_Queue_GExample_C63_g_C63(Queue<Example?>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    Queue<Example?>? collection = new Queue<Example?>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    var q = System.Linq.Enumerable.ToList(itemToClone);
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (q[itemIndex] == null)
                                                        {
                                                            collection.Enqueue(null);
                                                        }
                                                        else
                                                        {
                                                            var itemCopied = (Example?) (cloneOrChangeFunc(q[itemIndex]));
                                                            collection.Enqueue(itemCopied);
                                                        }
                                                        
                                                    }
                                                    return collection;
                                                }
                                                /*Location2764*/
                                                private static ReadOnlyMemory<byte>? ConvertFromBytes_ReadOnlyMemory_Gbyte_g_C63(LazinatorMemory storage)
                                                {
                                                    /*Location2765*/int index = 0;
                                                    bool isNull = storage.ReadOnlySpan.ToBoolean(ref index);
                                                    if (isNull)
                                                    {
                                                        return null;
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span.Slice(1);
                                                    return span.ToArray();
                                                }/*Location2766*/
                                                
                                                private static void ConvertToBytes_ReadOnlyMemory_Gbyte_g_C63(ref BinaryBufferWriter writer, ReadOnlyMemory<byte>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == null)
                                                    {
                                                        writer.Write((bool)true);
                                                        return;
                                                    }
                                                    writer.Write((bool)false);
                                                    ConvertToBytes_ReadOnlyMemory_Gbyte_g(ref writer, itemToConvert.Value, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                }
                                                /*Location2767*/
                                                private static ReadOnlyMemory<byte>? CloneOrChange_ReadOnlyMemory_Gbyte_g_C63(ReadOnlyMemory<byte>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Value.Length;
                                                    Memory<byte> collection = new Memory<byte>(new byte[collectionLength]);
                                                    var collectionAsSpan = collection.Span;
                                                    var itemToCloneSpan = itemToClone.Value.Span;
                                                    int itemToCloneCount = itemToCloneSpan.Length;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        var itemCopied = (byte) itemToCloneSpan[itemIndex];
                                                        collectionAsSpan[itemIndex] = itemCopied;
                                                    }
                                                    return collection;
                                                }
                                                /*Location2768*/
                                                private static Stack<Example>? ConvertFromBytes_Stack_GExample_g_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(Stack<Example>?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Stack<Example>? collection = new Stack<Example>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = new Example();
                                                        item.DeserializeLazinator(childData);
                                                        collection.Push(item);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location2769*/
                                                
                                                private static void ConvertToBytes_Stack_GExample_g_C63(ref BinaryBufferWriter writer, Stack<Example>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Stack<Example>?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    var stackReversed = System.Linq.Enumerable.ToList(itemToConvert);
                                                    stackReversed.Reverse();
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => stackReversed[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location2770*/
                                                private static Stack<Example>? CloneOrChange_Stack_GExample_g_C63(Stack<Example>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    Stack<Example>? collection = new Stack<Example>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    var stackReversed = System.Linq.Enumerable.ToList(itemToClone);
                                                    stackReversed.Reverse();
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        var itemCopied = (Example) (cloneOrChangeFunc(stackReversed[itemIndex])!);
                                                        collection.Push(itemCopied);
                                                    }
                                                    return collection;
                                                }
                                                /*Location2771*/
                                                private static Stack<Example?>? ConvertFromBytes_Stack_GExample_C63_g_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(Stack<Example?>?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Stack<Example?>? collection = new Stack<Example?>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember == 0)
                                                        {
                                                            collection.Push(null);
                                                        }
                                                        else
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                            var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                            collection.Push(item);
                                                        }
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location2772*/
                                                
                                                private static void ConvertToBytes_Stack_GExample_C63_g_C63(ref BinaryBufferWriter writer, Stack<Example?>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Stack<Example?>?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    var stackReversed = System.Linq.Enumerable.ToList(itemToConvert);
                                                    stackReversed.Reverse();
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        if (stackReversed[itemIndex] == null)
                                                        {
                                                            writer.Write((uint)0);
                                                        }
                                                        else 
                                                        {
                                                            
                                                            void action(ref BinaryBufferWriter w) => stackReversed[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                            WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                        }
                                                        
                                                    }
                                                }
                                                /*Location2773*/
                                                private static Stack<Example?>? CloneOrChange_Stack_GExample_C63_g_C63(Stack<Example?>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    Stack<Example?>? collection = new Stack<Example?>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    var stackReversed = System.Linq.Enumerable.ToList(itemToClone);
                                                    stackReversed.Reverse();
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (stackReversed[itemIndex] == null)
                                                        {
                                                            collection.Push(null);
                                                        }
                                                        else
                                                        {
                                                            var itemCopied = (Example?) (cloneOrChangeFunc(stackReversed[itemIndex]));
                                                            collection.Push(itemCopied);
                                                        }
                                                        
                                                    }
                                                    return collection;
                                                }
                                                /*Location2774*/
                                                private static RecordLikeClass? ConvertFromBytes_RecordLikeClass(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default;
                                                    }
                                                    ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                    
                                                    int bytesSoFar = 0;
                                                    /*Location2775*/
                                                    int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                                    /*Location2776*/
                                                    int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                    Example item2 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                                                    bytesSoFar += lengthCollectionMember_item2;
                                                    /*Location2777*/
                                                    var tupleType = new RecordLikeClass(item1, item2);
                                                    
                                                    return tupleType;
                                                }
                                                
                                                private static void ConvertToBytes_RecordLikeClass(ref BinaryBufferWriter writer, RecordLikeClass? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    /*Location2778*/if (itemToConvert == null)
                                                    {
                                                        return;
                                                    }
                                                    /*Location2779*/
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
                                                    /*Location2780*/
                                                    if (itemToConvert.Example == null)
                                                    {
                                                        writer.Write((uint)0);
                                                    }
                                                    else
                                                    {
                                                        void actionExample(ref BinaryBufferWriter w) => itemToConvert.Example.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, actionExample);
                                                    };
                                                    /*Location2781*/}
                                                    /*Location2782*/
                                                    private static RecordLikeClass? CloneOrChange_RecordLikeClass(RecordLikeClass? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                    {
                                                        if (itemToConvert == null)
                                                        {
                                                            return default(RecordLikeClass?);
                                                        }
                                                        
                                                        return new RecordLikeClass((int) (itemToConvert?.Age ?? default),(Example) (cloneOrChangeFunc((itemToConvert?.Example ?? default))!));
                                                    }
                                                    /*Location2783*/
                                                    private static RecordLikeStruct ConvertFromBytes_RecordLikeStruct(LazinatorMemory storage)
                                                    {
                                                        if (storage.Length == 0)
                                                        {
                                                            return default;
                                                        }
                                                        ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                        
                                                        int bytesSoFar = 0;
                                                        /*Location2784*/
                                                        int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                                        /*Location2785*/
                                                        string item2 = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
                                                        /*Location2786*/
                                                        var tupleType = new RecordLikeStruct(item1, item2);
                                                        
                                                        return tupleType;
                                                    }
                                                    
                                                    private static void ConvertToBytes_RecordLikeStruct(ref BinaryBufferWriter writer, RecordLikeStruct itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                    {
                                                        /*Location2787*/
                                                        CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
                                                        /*Location2788*/
                                                        EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, itemToConvert.Name);
                                                        /*Location2789*/}
                                                        /*Location2790*/
                                                        private static RecordLikeStruct CloneOrChange_RecordLikeStruct(RecordLikeStruct itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                        {
                                                            return new RecordLikeStruct((int) (itemToConvert.Age),(string) (itemToConvert.Name));
                                                        }
                                                        /*Location2791*/
                                                        private static Tuple<Example, int> ConvertFromBytes_Tuple_GExample_c_C32int_g(LazinatorMemory storage)
                                                        {
                                                            ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                            
                                                            int bytesSoFar = 0;
                                                            /*Location2792*/
                                                            int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                            Example item1 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                                                            bytesSoFar += lengthCollectionMember_item1;
                                                            /*Location2793*/
                                                            int item2 = span.ToDecompressedInt(ref bytesSoFar);
                                                            /*Location2794*/
                                                            var tupleType = new Tuple<Example, int>(item1, item2);
                                                            
                                                            return tupleType;
                                                        }
                                                        
                                                        private static void ConvertToBytes_Tuple_GExample_c_C32int_g(ref BinaryBufferWriter writer, Tuple<Example, int> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                        {
                                                            /*Location2795*/
                                                            if (itemToConvert.Item1 == null)
                                                            {
                                                                writer.Write((uint)0);
                                                            }
                                                            else
                                                            {
                                                                void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                            };
                                                            /*Location2796*/
                                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
                                                            /*Location2797*/}
                                                            /*Location2798*/
                                                            private static Tuple<Example, int> CloneOrChange_Tuple_GExample_c_C32int_g(Tuple<Example, int> itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                            {
                                                                return new Tuple<Example, int>((Example) (cloneOrChangeFunc((itemToConvert.Item1))!),(int) (itemToConvert.Item2));
                                                            }
                                                            /*Location2799*/
                                                            private static Tuple<Example?, int> ConvertFromBytes_Tuple_GExample_C63_c_C32int_g(LazinatorMemory storage)
                                                            {
                                                                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                                
                                                                int bytesSoFar = 0;
                                                                /*Location2800*/
                                                                Example? item1 = default(Example?);
                                                                int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                                if (lengthCollectionMember_item1 != 0)
                                                                {
                                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                                    item1 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                                }
                                                                bytesSoFar += lengthCollectionMember_item1;
                                                                /*Location2801*/
                                                                int item2 = span.ToDecompressedInt(ref bytesSoFar);
                                                                /*Location2802*/
                                                                var tupleType = new Tuple<Example?, int>(item1, item2);
                                                                
                                                                return tupleType;
                                                            }
                                                            
                                                            private static void ConvertToBytes_Tuple_GExample_C63_c_C32int_g(ref BinaryBufferWriter writer, Tuple<Example?, int> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                            {
                                                                /*Location2803*/
                                                                if (itemToConvert.Item1 == null)
                                                                {
                                                                    writer.Write((uint)0);
                                                                }
                                                                else
                                                                {
                                                                    void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                    WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                                };
                                                                /*Location2804*/
                                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
                                                                /*Location2805*/}
                                                                /*Location2806*/
                                                                private static Tuple<Example?, int> CloneOrChange_Tuple_GExample_C63_c_C32int_g(Tuple<Example?, int> itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                                {
                                                                    return new Tuple<Example?, int>((Example?) (cloneOrChangeFunc((itemToConvert.Item1))),(int) (itemToConvert.Item2));
                                                                }
                                                                /*Location2807*/
                                                                private static RecordLikeStruct? ConvertFromBytes_RecordLikeStruct_C63(LazinatorMemory storage)
                                                                {
                                                                    if (storage.Length == 0)
                                                                    {
                                                                        return default;
                                                                    }
                                                                    ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                                    
                                                                    int bytesSoFar = 0;
                                                                    /*Location2808*/
                                                                    int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                                                    /*Location2809*/
                                                                    string item2 = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
                                                                    /*Location2810*/
                                                                    var tupleType = new RecordLikeStruct(item1, item2);
                                                                    
                                                                    return tupleType;
                                                                }
                                                                
                                                                private static void ConvertToBytes_RecordLikeStruct_C63(ref BinaryBufferWriter writer, RecordLikeStruct? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                                {
                                                                    /*Location2811*/if (itemToConvert == null)
                                                                    {
                                                                        return;
                                                                    }
                                                                    /*Location2812*/
                                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Value.Age);
                                                                    /*Location2813*/
                                                                    EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, itemToConvert.Value.Name);
                                                                    /*Location2814*/}
                                                                    /*Location2815*/
                                                                    private static RecordLikeStruct? CloneOrChange_RecordLikeStruct_C63(RecordLikeStruct? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                                    {
                                                                        if (itemToConvert == null)
                                                                        {
                                                                            return default(RecordLikeStruct?);
                                                                        }
                                                                        
                                                                        return new RecordLikeStruct((int) (itemToConvert?.Age ?? default),(string) (itemToConvert?.Name ?? default));
                                                                    }
                                                                    /*Location2816*/
                                                                    private static Tuple<Example, int>? ConvertFromBytes_Tuple_GExample_c_C32int_g_C63(LazinatorMemory storage)
                                                                    {
                                                                        if (storage.Length == 0)
                                                                        {
                                                                            return default;
                                                                        }
                                                                        ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                                        
                                                                        int bytesSoFar = 0;
                                                                        /*Location2817*/
                                                                        int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                                        Example item1 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                                                                        bytesSoFar += lengthCollectionMember_item1;
                                                                        /*Location2818*/
                                                                        int item2 = span.ToDecompressedInt(ref bytesSoFar);
                                                                        /*Location2819*/
                                                                        var tupleType = new Tuple<Example, int>(item1, item2);
                                                                        
                                                                        return tupleType;
                                                                    }
                                                                    
                                                                    private static void ConvertToBytes_Tuple_GExample_c_C32int_g_C63(ref BinaryBufferWriter writer, Tuple<Example, int>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                                    {
                                                                        /*Location2820*/if (itemToConvert == null)
                                                                        {
                                                                            return;
                                                                        }
                                                                        /*Location2821*/
                                                                        if (itemToConvert.Item1 == null)
                                                                        {
                                                                            writer.Write((uint)0);
                                                                        }
                                                                        else
                                                                        {
                                                                            void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                            WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                                        };
                                                                        /*Location2822*/
                                                                        CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
                                                                        /*Location2823*/}
                                                                        /*Location2824*/
                                                                        private static Tuple<Example, int>? CloneOrChange_Tuple_GExample_c_C32int_g_C63(Tuple<Example, int>? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                                        {
                                                                            if (itemToConvert == null)
                                                                            {
                                                                                return default(Tuple<Example, int>?);
                                                                            }
                                                                            
                                                                            return new Tuple<Example, int>((Example) (cloneOrChangeFunc((itemToConvert?.Item1 ?? default))!),(int) (itemToConvert?.Item2 ?? default));
                                                                        }
                                                                        /*Location2825*/
                                                                        private static Tuple<Example?, int>? ConvertFromBytes_Tuple_GExample_C63_c_C32int_g_C63(LazinatorMemory storage)
                                                                        {
                                                                            if (storage.Length == 0)
                                                                            {
                                                                                return default;
                                                                            }
                                                                            ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                                            
                                                                            int bytesSoFar = 0;
                                                                            /*Location2826*/
                                                                            Example? item1 = default(Example?);
                                                                            int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                                            if (lengthCollectionMember_item1 != 0)
                                                                            {
                                                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                                                item1 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                                            }
                                                                            bytesSoFar += lengthCollectionMember_item1;
                                                                            /*Location2827*/
                                                                            int item2 = span.ToDecompressedInt(ref bytesSoFar);
                                                                            /*Location2828*/
                                                                            var tupleType = new Tuple<Example?, int>(item1, item2);
                                                                            
                                                                            return tupleType;
                                                                        }
                                                                        
                                                                        private static void ConvertToBytes_Tuple_GExample_C63_c_C32int_g_C63(ref BinaryBufferWriter writer, Tuple<Example?, int>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                                        {
                                                                            /*Location2829*/if (itemToConvert == null)
                                                                            {
                                                                                return;
                                                                            }
                                                                            /*Location2830*/
                                                                            if (itemToConvert.Item1 == null)
                                                                            {
                                                                                writer.Write((uint)0);
                                                                            }
                                                                            else
                                                                            {
                                                                                void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                                WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                                            };
                                                                            /*Location2831*/
                                                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
                                                                            /*Location2832*/}
                                                                            /*Location2833*/
                                                                            private static Tuple<Example?, int>? CloneOrChange_Tuple_GExample_C63_c_C32int_g_C63(Tuple<Example?, int>? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                                            {
                                                                                if (itemToConvert == null)
                                                                                {
                                                                                    return default(Tuple<Example?, int>?);
                                                                                }
                                                                                
                                                                                return new Tuple<Example?, int>((Example?) (cloneOrChangeFunc((itemToConvert?.Item1))),(int) (itemToConvert?.Item2 ?? default));
                                                                            }
                                                                            /*Location2834*/
                                                                            private static (Example, int)? ConvertFromBytes__PExample_c_C32int_p_C63(LazinatorMemory storage)
                                                                            {
                                                                                if (storage.Length == 0)
                                                                                {
                                                                                    return default;
                                                                                }
                                                                                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                                                
                                                                                int bytesSoFar = 0;
                                                                                /*Location2835*/
                                                                                int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                                                Example item1 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                                                                                bytesSoFar += lengthCollectionMember_item1;
                                                                                /*Location2836*/
                                                                                int item2 = span.ToDecompressedInt(ref bytesSoFar);
                                                                                /*Location2837*/
                                                                                var tupleType = (item1, item2);
                                                                                
                                                                                return tupleType;
                                                                            }
                                                                            
                                                                            private static void ConvertToBytes__PExample_c_C32int_p_C63(ref BinaryBufferWriter writer, (Example, int)? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                                            {
                                                                                /*Location2838*/if (itemToConvert == null)
                                                                                {
                                                                                    return;
                                                                                }
                                                                                /*Location2839*/
                                                                                if (itemToConvert.Value.Item1 == null)
                                                                                {
                                                                                    writer.Write((uint)0);
                                                                                }
                                                                                else
                                                                                {
                                                                                    void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Value.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                                    WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                                                };
                                                                                /*Location2840*/
                                                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Value.Item2);
                                                                                /*Location2841*/}
                                                                                /*Location2842*/
                                                                                private static (Example, int)? CloneOrChange__PExample_c_C32int_p_C63((Example, int)? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                                                {
                                                                                    if (itemToConvert == null)
                                                                                    {
                                                                                        return default((Example, int)?);
                                                                                    }
                                                                                    
                                                                                    return ((Example) (cloneOrChangeFunc((itemToConvert?.Item1 ?? default))!),(int) (itemToConvert?.Item2 ?? default));
                                                                                }
                                                                                /*Location2843*/
                                                                                private static (Example?, int)? ConvertFromBytes__PExample_C63_c_C32int_p_C63(LazinatorMemory storage)
                                                                                {
                                                                                    if (storage.Length == 0)
                                                                                    {
                                                                                        return default;
                                                                                    }
                                                                                    ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                                                    
                                                                                    int bytesSoFar = 0;
                                                                                    /*Location2844*/
                                                                                    Example? item1 = default(Example?);
                                                                                    int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                                                    if (lengthCollectionMember_item1 != 0)
                                                                                    {
                                                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                                                        item1 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                                                    }
                                                                                    bytesSoFar += lengthCollectionMember_item1;
                                                                                    /*Location2845*/
                                                                                    int item2 = span.ToDecompressedInt(ref bytesSoFar);
                                                                                    /*Location2846*/
                                                                                    var tupleType = (item1, item2);
                                                                                    
                                                                                    return tupleType;
                                                                                }
                                                                                
                                                                                private static void ConvertToBytes__PExample_C63_c_C32int_p_C63(ref BinaryBufferWriter writer, (Example?, int)? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                                                {
                                                                                    /*Location2847*/if (itemToConvert == null)
                                                                                    {
                                                                                        return;
                                                                                    }
                                                                                    /*Location2848*/
                                                                                    if (itemToConvert.Value.Item1 == null)
                                                                                    {
                                                                                        writer.Write((uint)0);
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Value.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                                        WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                                                    };
                                                                                    /*Location2849*/
                                                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Value.Item2);
                                                                                    /*Location2850*/}
                                                                                    /*Location2851*/
                                                                                    private static (Example?, int)? CloneOrChange__PExample_C63_c_C32int_p_C63((Example?, int)? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                                                    {
                                                                                        if (itemToConvert == null)
                                                                                        {
                                                                                            return default((Example?, int)?);
                                                                                        }
                                                                                        
                                                                                        return ((Example?) (cloneOrChangeFunc((itemToConvert?.Item1))),(int) (itemToConvert?.Item2 ?? default));
                                                                                    }
                                                                                    /*Location2852*/
                                                                                    private static (Example, int) ConvertFromBytes__PExample_c_C32int_p(LazinatorMemory storage)
                                                                                    {
                                                                                        if (storage.Length == 0)
                                                                                        {
                                                                                            return default;
                                                                                        }
                                                                                        ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                                                        
                                                                                        int bytesSoFar = 0;
                                                                                        /*Location2853*/
                                                                                        int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                                                        Example item1 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                                                                                        bytesSoFar += lengthCollectionMember_item1;
                                                                                        /*Location2854*/
                                                                                        int item2 = span.ToDecompressedInt(ref bytesSoFar);
                                                                                        /*Location2855*/
                                                                                        var tupleType = (item1, item2);
                                                                                        
                                                                                        return tupleType;
                                                                                    }
                                                                                    
                                                                                    private static void ConvertToBytes__PExample_c_C32int_p(ref BinaryBufferWriter writer, (Example, int) itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                                                    {
                                                                                        /*Location2856*/
                                                                                        if (itemToConvert.Item1 == null)
                                                                                        {
                                                                                            writer.Write((uint)0);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                                            WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                                                        };
                                                                                        /*Location2857*/
                                                                                        CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
                                                                                        /*Location2858*/}
                                                                                        /*Location2859*/
                                                                                        private static (Example, int) CloneOrChange__PExample_c_C32int_p((Example, int) itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                                                        {
                                                                                            return ((Example) (cloneOrChangeFunc((itemToConvert.Item1))!),(int) (itemToConvert.Item2));
                                                                                        }
                                                                                        /*Location2860*/
                                                                                        private static (Example?, int) ConvertFromBytes__PExample_C63_c_C32int_p(LazinatorMemory storage)
                                                                                        {
                                                                                            if (storage.Length == 0)
                                                                                            {
                                                                                                return default;
                                                                                            }
                                                                                            ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                                                            
                                                                                            int bytesSoFar = 0;
                                                                                            /*Location2861*/
                                                                                            Example? item1 = default(Example?);
                                                                                            int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                                                            if (lengthCollectionMember_item1 != 0)
                                                                                            {
                                                                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                                                                item1 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                                                            }
                                                                                            bytesSoFar += lengthCollectionMember_item1;
                                                                                            /*Location2862*/
                                                                                            int item2 = span.ToDecompressedInt(ref bytesSoFar);
                                                                                            /*Location2863*/
                                                                                            var tupleType = (item1, item2);
                                                                                            
                                                                                            return tupleType;
                                                                                        }
                                                                                        
                                                                                        private static void ConvertToBytes__PExample_C63_c_C32int_p(ref BinaryBufferWriter writer, (Example?, int) itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                                                        {
                                                                                            /*Location2864*/
                                                                                            if (itemToConvert.Item1 == null)
                                                                                            {
                                                                                                writer.Write((uint)0);
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                                                WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                                                            };
                                                                                            /*Location2865*/
                                                                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
                                                                                            /*Location2866*/}
                                                                                            /*Location2867*/
                                                                                            private static (Example?, int) CloneOrChange__PExample_C63_c_C32int_p((Example?, int) itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                                                            {
                                                                                                return ((Example?) (cloneOrChangeFunc((itemToConvert.Item1))),(int) (itemToConvert.Item2));
                                                                                            }
                                                                                            /*Location2868*/
                                                                                        }
                                                                                    }
