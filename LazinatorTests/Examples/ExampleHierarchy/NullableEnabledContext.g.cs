/*Location17*//*Location0*///c228a3b5-2e16-6fb8-75a7-e386b33590ca
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
namespace LazinatorTests.Examples.ExampleHierarchy
{/*Location1*/
    using Lazinator.Attributes;/*Location2*/
    using Lazinator.Buffers;/*Location3*/
    using Lazinator.Core;/*Location4*/
    using Lazinator.Exceptions;/*Location5*/
    using Lazinator.Support;/*Location6*/
    using LazinatorCollections;/*Location7*/
    using LazinatorTests.Examples;/*Location8*/
    using LazinatorTests.Examples.Structs;/*Location9*/
    using System;/*Location10*/
    using System.Buffers;/*Location11*/
    using System.Collections.Generic;/*Location12*/
    using System.Diagnostics;/*Location13*/
    using System.IO;/*Location14*/
    using System.Linq;/*Location15*/
    using System.Runtime.InteropServices;/*Location16*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class NullableEnabledContext : ILazinator
    {
        /*Location18*/public bool IsStruct => false;
        
        /*Location19*//* Property definitions */
        
        /*Location20*/        protected int _ByteReadOnlySpan_ByteIndex;
        /*Location21*/        protected int _ExplicitlyNullable_ByteIndex;
        /*Location22*/        protected int _ExplicitlyNullableInterface_ByteIndex;
        /*Location23*/        protected int _NonNullableArrayOfNonNullables_ByteIndex;
        /*Location24*/        protected int _NonNullableArrayOfNullables_ByteIndex;
        /*Location25*/        protected int _NonNullableClass_ByteIndex;
        /*Location26*/        protected int _NonNullableDictionaryWithNonNullable_ByteIndex;
        /*Location27*/        protected int _NonNullableDictionaryWithNullable_ByteIndex;
        /*Location28*/        protected int _NonNullableInterface_ByteIndex;
        /*Location29*/        protected int _NonNullableLazinatorListNonNullable_ByteIndex;
        /*Location30*/        protected int _NonNullableLazinatorListNullable_ByteIndex;
        /*Location31*/        protected int _NonNullableListOfNonNullables_ByteIndex;
        /*Location32*/        protected int _NonNullableListOfNullables_ByteIndex;
        /*Location33*/        protected int _NonNullableMemoryOfBytes_ByteIndex;
        /*Location34*/        protected int _NonNullableQueueOfNonNullables_ByteIndex;
        /*Location35*/        protected int _NonNullableQueueOfNullables_ByteIndex;
        /*Location36*/        protected int _NonNullableReadOnlyMemoryOfBytes_ByteIndex;
        /*Location37*/        protected int _NonNullableRegularTupleWithNonNullable_ByteIndex;
        /*Location38*/        protected int _NonNullableRegularTupleWithNullable_ByteIndex;
        /*Location39*/        protected int _NonNullableStackOfNonNullables_ByteIndex;
        /*Location40*/        protected int _NonNullableStackOfNullables_ByteIndex;
        /*Location41*/        protected int _NonNullableStruct_ByteIndex;
        /*Location42*/        protected int _NullableArrayOfNonNullables_ByteIndex;
        /*Location43*/        protected int _NullableArrayOfNullables_ByteIndex;
        /*Location44*/        protected int _NullableDictionaryWithNonNullable_ByteIndex;
        /*Location45*/        protected int _NullableDictionaryWithNullable_ByteIndex;
        /*Location46*/        protected int _NullableLazinatorListNonNullable_ByteIndex;
        /*Location47*/        protected int _NullableLazinatorListNullable_ByteIndex;
        /*Location48*/        protected int _NullableListOfNonNullables_ByteIndex;
        /*Location49*/        protected int _NullableListOfNullables_ByteIndex;
        /*Location50*/        protected int _NullableMemoryOfBytes_ByteIndex;
        /*Location51*/        protected int _NullableQueueOfNonNullables_ByteIndex;
        /*Location52*/        protected int _NullableQueueOfNullables_ByteIndex;
        /*Location53*/        protected int _NullableReadOnlyMemoryOfBytes_ByteIndex;
        /*Location54*/        protected int _NullableRegularTupleWithNonNullable_ByteIndex;
        /*Location55*/        protected int _NullableRegularTupleWithNullable_ByteIndex;
        /*Location56*/        protected int _NullableStackOfNonNullables_ByteIndex;
        /*Location57*/        protected int _NullableStackOfNullables_ByteIndex;
        /*Location58*/        protected int _NullableStruct_ByteIndex;
        /*Location59*/        protected int _NullableValueTupleWithNonNullable_ByteIndex;
        /*Location60*/        protected int _NullableValueTupleWithNullable_ByteIndex;
        /*Location61*/        protected int _ValueTupleWithNonNullable_ByteIndex;
        /*Location62*/        protected int _ValueTupleWithNullable_ByteIndex;
        /*Location63*/protected virtual int _ByteReadOnlySpan_ByteLength => _ExplicitlyNullable_ByteIndex - _ByteReadOnlySpan_ByteIndex;
        /*Location64*/protected virtual int _ExplicitlyNullable_ByteLength => _ExplicitlyNullableInterface_ByteIndex - _ExplicitlyNullable_ByteIndex;
        /*Location65*/protected virtual int _ExplicitlyNullableInterface_ByteLength => _NonNullableArrayOfNonNullables_ByteIndex - _ExplicitlyNullableInterface_ByteIndex;
        /*Location66*/protected virtual int _NonNullableArrayOfNonNullables_ByteLength => _NonNullableArrayOfNullables_ByteIndex - _NonNullableArrayOfNonNullables_ByteIndex;
        /*Location67*/protected virtual int _NonNullableArrayOfNullables_ByteLength => _NonNullableClass_ByteIndex - _NonNullableArrayOfNullables_ByteIndex;
        /*Location68*/protected virtual int _NonNullableClass_ByteLength => _NonNullableDictionaryWithNonNullable_ByteIndex - _NonNullableClass_ByteIndex;
        /*Location69*/protected virtual int _NonNullableDictionaryWithNonNullable_ByteLength => _NonNullableDictionaryWithNullable_ByteIndex - _NonNullableDictionaryWithNonNullable_ByteIndex;
        /*Location70*/protected virtual int _NonNullableDictionaryWithNullable_ByteLength => _NonNullableInterface_ByteIndex - _NonNullableDictionaryWithNullable_ByteIndex;
        /*Location71*/protected virtual int _NonNullableInterface_ByteLength => _NonNullableLazinatorListNonNullable_ByteIndex - _NonNullableInterface_ByteIndex;
        /*Location72*/protected virtual int _NonNullableLazinatorListNonNullable_ByteLength => _NonNullableLazinatorListNullable_ByteIndex - _NonNullableLazinatorListNonNullable_ByteIndex;
        /*Location73*/protected virtual int _NonNullableLazinatorListNullable_ByteLength => _NonNullableListOfNonNullables_ByteIndex - _NonNullableLazinatorListNullable_ByteIndex;
        /*Location74*/protected virtual int _NonNullableListOfNonNullables_ByteLength => _NonNullableListOfNullables_ByteIndex - _NonNullableListOfNonNullables_ByteIndex;
        /*Location75*/protected virtual int _NonNullableListOfNullables_ByteLength => _NonNullableMemoryOfBytes_ByteIndex - _NonNullableListOfNullables_ByteIndex;
        /*Location76*/protected virtual int _NonNullableMemoryOfBytes_ByteLength => _NonNullableQueueOfNonNullables_ByteIndex - _NonNullableMemoryOfBytes_ByteIndex;
        /*Location77*/protected virtual int _NonNullableQueueOfNonNullables_ByteLength => _NonNullableQueueOfNullables_ByteIndex - _NonNullableQueueOfNonNullables_ByteIndex;
        /*Location78*/protected virtual int _NonNullableQueueOfNullables_ByteLength => _NonNullableReadOnlyMemoryOfBytes_ByteIndex - _NonNullableQueueOfNullables_ByteIndex;
        /*Location79*/protected virtual int _NonNullableReadOnlyMemoryOfBytes_ByteLength => _NonNullableRegularTupleWithNonNullable_ByteIndex - _NonNullableReadOnlyMemoryOfBytes_ByteIndex;
        /*Location80*/protected virtual int _NonNullableRegularTupleWithNonNullable_ByteLength => _NonNullableRegularTupleWithNullable_ByteIndex - _NonNullableRegularTupleWithNonNullable_ByteIndex;
        /*Location81*/protected virtual int _NonNullableRegularTupleWithNullable_ByteLength => _NonNullableStackOfNonNullables_ByteIndex - _NonNullableRegularTupleWithNullable_ByteIndex;
        /*Location82*/protected virtual int _NonNullableStackOfNonNullables_ByteLength => _NonNullableStackOfNullables_ByteIndex - _NonNullableStackOfNonNullables_ByteIndex;
        /*Location83*/protected virtual int _NonNullableStackOfNullables_ByteLength => _NonNullableStruct_ByteIndex - _NonNullableStackOfNullables_ByteIndex;
        /*Location84*/protected virtual int _NonNullableStruct_ByteLength => _NullableArrayOfNonNullables_ByteIndex - _NonNullableStruct_ByteIndex;
        /*Location85*/protected virtual int _NullableArrayOfNonNullables_ByteLength => _NullableArrayOfNullables_ByteIndex - _NullableArrayOfNonNullables_ByteIndex;
        /*Location86*/protected virtual int _NullableArrayOfNullables_ByteLength => _NullableDictionaryWithNonNullable_ByteIndex - _NullableArrayOfNullables_ByteIndex;
        /*Location87*/protected virtual int _NullableDictionaryWithNonNullable_ByteLength => _NullableDictionaryWithNullable_ByteIndex - _NullableDictionaryWithNonNullable_ByteIndex;
        /*Location88*/protected virtual int _NullableDictionaryWithNullable_ByteLength => _NullableLazinatorListNonNullable_ByteIndex - _NullableDictionaryWithNullable_ByteIndex;
        /*Location89*/protected virtual int _NullableLazinatorListNonNullable_ByteLength => _NullableLazinatorListNullable_ByteIndex - _NullableLazinatorListNonNullable_ByteIndex;
        /*Location90*/protected virtual int _NullableLazinatorListNullable_ByteLength => _NullableListOfNonNullables_ByteIndex - _NullableLazinatorListNullable_ByteIndex;
        /*Location91*/protected virtual int _NullableListOfNonNullables_ByteLength => _NullableListOfNullables_ByteIndex - _NullableListOfNonNullables_ByteIndex;
        /*Location92*/protected virtual int _NullableListOfNullables_ByteLength => _NullableMemoryOfBytes_ByteIndex - _NullableListOfNullables_ByteIndex;
        /*Location93*/protected virtual int _NullableMemoryOfBytes_ByteLength => _NullableQueueOfNonNullables_ByteIndex - _NullableMemoryOfBytes_ByteIndex;
        /*Location94*/protected virtual int _NullableQueueOfNonNullables_ByteLength => _NullableQueueOfNullables_ByteIndex - _NullableQueueOfNonNullables_ByteIndex;
        /*Location95*/protected virtual int _NullableQueueOfNullables_ByteLength => _NullableReadOnlyMemoryOfBytes_ByteIndex - _NullableQueueOfNullables_ByteIndex;
        /*Location96*/protected virtual int _NullableReadOnlyMemoryOfBytes_ByteLength => _NullableRegularTupleWithNonNullable_ByteIndex - _NullableReadOnlyMemoryOfBytes_ByteIndex;
        /*Location97*/protected virtual int _NullableRegularTupleWithNonNullable_ByteLength => _NullableRegularTupleWithNullable_ByteIndex - _NullableRegularTupleWithNonNullable_ByteIndex;
        /*Location98*/protected virtual int _NullableRegularTupleWithNullable_ByteLength => _NullableStackOfNonNullables_ByteIndex - _NullableRegularTupleWithNullable_ByteIndex;
        /*Location99*/protected virtual int _NullableStackOfNonNullables_ByteLength => _NullableStackOfNullables_ByteIndex - _NullableStackOfNonNullables_ByteIndex;
        /*Location100*/protected virtual int _NullableStackOfNullables_ByteLength => _NullableStruct_ByteIndex - _NullableStackOfNullables_ByteIndex;
        /*Location101*/protected virtual int _NullableStruct_ByteLength => _NullableValueTupleWithNonNullable_ByteIndex - _NullableStruct_ByteIndex;
        /*Location102*/protected virtual int _NullableValueTupleWithNonNullable_ByteLength => _NullableValueTupleWithNullable_ByteIndex - _NullableValueTupleWithNonNullable_ByteIndex;
        /*Location103*/protected virtual int _NullableValueTupleWithNullable_ByteLength => _ValueTupleWithNonNullable_ByteIndex - _NullableValueTupleWithNullable_ByteIndex;
        /*Location104*/protected virtual int _ValueTupleWithNonNullable_ByteLength => _ValueTupleWithNullable_ByteIndex - _ValueTupleWithNonNullable_ByteIndex;
        /*Location105*/private int _NullableEnabledContext_EndByteIndex;
        /*Location106*/protected virtual int _ValueTupleWithNullable_ByteLength => _NullableEnabledContext_EndByteIndex - _ValueTupleWithNullable_ByteIndex;
        
        /*Location107*/
        protected int _MyInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int MyInt
        {
            get
            {
                return _MyInt;
            }
            set
            {
                IsDirty = true;
                _MyInt = value;
            }
        }
        /*Location108*/
        protected int? _MyNullableInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int? MyNullableInt
        {
            get
            {
                return _MyNullableInt;
            }
            set
            {
                IsDirty = true;
                _MyNullableInt = value;
            }
        }
        /*Location109*/
        protected string _NonNullableString = "";
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string NonNullableString
        {
            get
            {
                return _NonNullableString;
            }
            set
            {
                IsDirty = true;
                _NonNullableString = value;
            }
        }
        /*Location110*/
        protected string? _NullableString;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string? NullableString
        {
            get
            {
                return _NullableString;
            }
            set
            {
                IsDirty = true;
                _NullableString = value;
            }
        }
        /*Location111*/private ReadOnlyMemory<byte> _ByteReadOnlySpan;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlySpan<byte> ByteReadOnlySpan
        {
            get
            {
                if (!_ByteReadOnlySpan_Accessed)
                {
                    LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ByteReadOnlySpan_ByteIndex, _ByteReadOnlySpan_ByteLength, false, false, null);
                    return childData.Span;
                }
                return _ByteReadOnlySpan.Span;
            }
            set
            {
                IsDirty = true;
                _ByteReadOnlySpan = new ReadOnlyMemory<byte>((value).ToArray());
                _ByteReadOnlySpan_Accessed = true;
            }
        }
        protected bool _ByteReadOnlySpan_Accessed;
        /*Location112*/
        protected Example? _ExplicitlyNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example? ExplicitlyNullable
        {
            get
            {
                if (!_ExplicitlyNullable_Accessed)
                {
                    Lazinate_ExplicitlyNullable();
                } 
                return _ExplicitlyNullable;
            }
            set
            {
                if (_ExplicitlyNullable != null)
                {
                    _ExplicitlyNullable.LazinatorParents = _ExplicitlyNullable.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ExplicitlyNullable = value;
                _ExplicitlyNullable_Accessed = true;
            }
        }
        protected bool _ExplicitlyNullable_Accessed;
        private void Lazinate_ExplicitlyNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _ExplicitlyNullable = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ExplicitlyNullable_ByteIndex, _ExplicitlyNullable_ByteLength, false, false, null);
                
                _ExplicitlyNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(1012, (c, p) => new Example(c, p), childData, this); 
            }
            
            _ExplicitlyNullable_Accessed = true;
        }
        
        /*Location113*/
        protected IExample? _ExplicitlyNullableInterface;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IExample? ExplicitlyNullableInterface
        {
            get
            {
                if (!_ExplicitlyNullableInterface_Accessed)
                {
                    Lazinate_ExplicitlyNullableInterface();
                } 
                return _ExplicitlyNullableInterface;
            }
            set
            {
                if (_ExplicitlyNullableInterface != null)
                {
                    _ExplicitlyNullableInterface.LazinatorParents = _ExplicitlyNullableInterface.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ExplicitlyNullableInterface = value;
                _ExplicitlyNullableInterface_Accessed = true;
            }
        }
        protected bool _ExplicitlyNullableInterface_Accessed;
        private void Lazinate_ExplicitlyNullableInterface()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _ExplicitlyNullableInterface = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ExplicitlyNullableInterface_ByteIndex, _ExplicitlyNullableInterface_ByteLength, false, false, null);
                
                _ExplicitlyNullableInterface = DeserializationFactory.Instance.CreateBasedOnType<IExample?>(childData, this); 
            }
            
            _ExplicitlyNullableInterface_Accessed = true;
        }
        
        /*Location114*/
        protected Example[]? _NonNullableArrayOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example[] NonNullableArrayOfNonNullables
        {
            get
            {
                if (!_NonNullableArrayOfNonNullables_Accessed)
                {
                    Lazinate_NonNullableArrayOfNonNullables();
                }
                IsDirty = true; 
                return _NonNullableArrayOfNonNullables ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableArrayOfNonNullables = value;
                _NonNullableArrayOfNonNullables_Accessed = true;
            }
        }
        protected bool _NonNullableArrayOfNonNullables_Accessed;
        private void Lazinate_NonNullableArrayOfNonNullables()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableArrayOfNonNullables_ByteIndex, _NonNullableArrayOfNonNullables_ByteLength, false, false, null);
            _NonNullableArrayOfNonNullables = ConvertFromBytes_Example_B_b(childData);
            _NonNullableArrayOfNonNullables_Accessed = true;
        }
        
        /*Location115*/
        protected Example?[]? _NonNullableArrayOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example?[] NonNullableArrayOfNullables
        {
            get
            {
                if (!_NonNullableArrayOfNullables_Accessed)
                {
                    Lazinate_NonNullableArrayOfNullables();
                }
                IsDirty = true; 
                return _NonNullableArrayOfNullables ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableArrayOfNullables = value;
                _NonNullableArrayOfNullables_Accessed = true;
            }
        }
        protected bool _NonNullableArrayOfNullables_Accessed;
        private void Lazinate_NonNullableArrayOfNullables()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableArrayOfNullables_ByteIndex, _NonNullableArrayOfNullables_ByteLength, false, false, null);
            _NonNullableArrayOfNullables = ConvertFromBytes_Example_C63_B_b(childData);
            _NonNullableArrayOfNullables_Accessed = true;
        }
        
        /*Location116*/
        protected Example? _NonNullableClass;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example NonNullableClass
        {
            get
            {
                if (!_NonNullableClass_Accessed)
                {
                    Lazinate_NonNullableClass();
                } 
                return _NonNullableClass ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                _ = value ?? throw new ArgumentNullException(nameof(value));
                if (_NonNullableClass != null)
                {
                    _NonNullableClass.LazinatorParents = _NonNullableClass.LazinatorParents.WithRemoved(this);
                }
                value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableClass = value;
                _NonNullableClass_Accessed = true;
            }
        }
        protected bool _NonNullableClass_Accessed;
        private void Lazinate_NonNullableClass()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableClass_ByteIndex, _NonNullableClass_ByteLength, false, false, null);
            
            _NonNullableClass = DeserializationFactory.Instance.CreateBaseOrDerivedType(1012, (c, p) => new Example(c, p), childData, this); 
            _NonNullableClass_Accessed = true;
        }
        
        /*Location117*/
        protected Dictionary<int, Example>? _NonNullableDictionaryWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<int, Example> NonNullableDictionaryWithNonNullable
        {
            get
            {
                if (!_NonNullableDictionaryWithNonNullable_Accessed)
                {
                    Lazinate_NonNullableDictionaryWithNonNullable();
                }
                IsDirty = true; 
                return _NonNullableDictionaryWithNonNullable ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableDictionaryWithNonNullable = value;
                _NonNullableDictionaryWithNonNullable_Accessed = true;
            }
        }
        protected bool _NonNullableDictionaryWithNonNullable_Accessed;
        private void Lazinate_NonNullableDictionaryWithNonNullable()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableDictionaryWithNonNullable_ByteIndex, _NonNullableDictionaryWithNonNullable_ByteLength, false, false, null);
            _NonNullableDictionaryWithNonNullable = ConvertFromBytes_Dictionary_Gint_c_C32Example_g(childData);
            _NonNullableDictionaryWithNonNullable_Accessed = true;
        }
        
        /*Location118*/
        protected Dictionary<int, Example?>? _NonNullableDictionaryWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<int, Example?> NonNullableDictionaryWithNullable
        {
            get
            {
                if (!_NonNullableDictionaryWithNullable_Accessed)
                {
                    Lazinate_NonNullableDictionaryWithNullable();
                }
                IsDirty = true; 
                return _NonNullableDictionaryWithNullable ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableDictionaryWithNullable = value;
                _NonNullableDictionaryWithNullable_Accessed = true;
            }
        }
        protected bool _NonNullableDictionaryWithNullable_Accessed;
        private void Lazinate_NonNullableDictionaryWithNullable()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableDictionaryWithNullable_ByteIndex, _NonNullableDictionaryWithNullable_ByteLength, false, false, null);
            _NonNullableDictionaryWithNullable = ConvertFromBytes_Dictionary_Gint_c_C32Example_C63_g(childData);
            _NonNullableDictionaryWithNullable_Accessed = true;
        }
        
        /*Location119*/
        protected IExample? _NonNullableInterface;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IExample NonNullableInterface
        {
            get
            {
                if (!_NonNullableInterface_Accessed)
                {
                    Lazinate_NonNullableInterface();
                } 
                return _NonNullableInterface ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                _ = value ?? throw new ArgumentNullException(nameof(value));
                if (_NonNullableInterface != null)
                {
                    _NonNullableInterface.LazinatorParents = _NonNullableInterface.LazinatorParents.WithRemoved(this);
                }
                value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableInterface = value;
                _NonNullableInterface_Accessed = true;
            }
        }
        protected bool _NonNullableInterface_Accessed;
        private void Lazinate_NonNullableInterface()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableInterface_ByteIndex, _NonNullableInterface_ByteLength, false, false, null);
            
            _NonNullableInterface = DeserializationFactory.Instance.CreateBasedOnType<IExample>(childData, this); 
            _NonNullableInterface_Accessed = true;
        }
        
        /*Location120*/
        protected LazinatorList<Example>? _NonNullableLazinatorListNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorList<Example> NonNullableLazinatorListNonNullable
        {
            get
            {
                if (!_NonNullableLazinatorListNonNullable_Accessed)
                {
                    Lazinate_NonNullableLazinatorListNonNullable();
                } 
                return _NonNullableLazinatorListNonNullable ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                _ = value ?? throw new ArgumentNullException(nameof(value));
                if (_NonNullableLazinatorListNonNullable != null)
                {
                    _NonNullableLazinatorListNonNullable.LazinatorParents = _NonNullableLazinatorListNonNullable.LazinatorParents.WithRemoved(this);
                }
                value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableLazinatorListNonNullable = value;
                _NonNullableLazinatorListNonNullable_Accessed = true;
            }
        }
        protected bool _NonNullableLazinatorListNonNullable_Accessed;
        private void Lazinate_NonNullableLazinatorListNonNullable()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableLazinatorListNonNullable_ByteIndex, _NonNullableLazinatorListNonNullable_ByteLength, false, false, null);
            
            _NonNullableLazinatorListNonNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(201, (c, p) => new LazinatorList<Example>(c, p), childData, this); 
            _NonNullableLazinatorListNonNullable_Accessed = true;
        }
        
        /*Location121*/
        protected LazinatorList<Example?>? _NonNullableLazinatorListNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorList<Example?> NonNullableLazinatorListNullable
        {
            get
            {
                if (!_NonNullableLazinatorListNullable_Accessed)
                {
                    Lazinate_NonNullableLazinatorListNullable();
                } 
                return _NonNullableLazinatorListNullable ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                _ = value ?? throw new ArgumentNullException(nameof(value));
                if (_NonNullableLazinatorListNullable != null)
                {
                    _NonNullableLazinatorListNullable.LazinatorParents = _NonNullableLazinatorListNullable.LazinatorParents.WithRemoved(this);
                }
                value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableLazinatorListNullable = value;
                _NonNullableLazinatorListNullable_Accessed = true;
            }
        }
        protected bool _NonNullableLazinatorListNullable_Accessed;
        private void Lazinate_NonNullableLazinatorListNullable()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableLazinatorListNullable_ByteIndex, _NonNullableLazinatorListNullable_ByteLength, false, false, null);
            
            _NonNullableLazinatorListNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(201, (c, p) => new LazinatorList<Example?>(c, p), childData, this); 
            _NonNullableLazinatorListNullable_Accessed = true;
        }
        
        /*Location122*/
        protected List<Example>? _NonNullableListOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Example> NonNullableListOfNonNullables
        {
            get
            {
                if (!_NonNullableListOfNonNullables_Accessed)
                {
                    Lazinate_NonNullableListOfNonNullables();
                }
                IsDirty = true; 
                return _NonNullableListOfNonNullables ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableListOfNonNullables = value;
                _NonNullableListOfNonNullables_Accessed = true;
            }
        }
        protected bool _NonNullableListOfNonNullables_Accessed;
        private void Lazinate_NonNullableListOfNonNullables()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableListOfNonNullables_ByteIndex, _NonNullableListOfNonNullables_ByteLength, false, false, null);
            _NonNullableListOfNonNullables = ConvertFromBytes_List_GExample_g(childData);
            _NonNullableListOfNonNullables_Accessed = true;
        }
        
        /*Location123*/
        protected List<Example?>? _NonNullableListOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Example?> NonNullableListOfNullables
        {
            get
            {
                if (!_NonNullableListOfNullables_Accessed)
                {
                    Lazinate_NonNullableListOfNullables();
                }
                IsDirty = true; 
                return _NonNullableListOfNullables ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableListOfNullables = value;
                _NonNullableListOfNullables_Accessed = true;
            }
        }
        protected bool _NonNullableListOfNullables_Accessed;
        private void Lazinate_NonNullableListOfNullables()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableListOfNullables_ByteIndex, _NonNullableListOfNullables_ByteLength, false, false, null);
            _NonNullableListOfNullables = ConvertFromBytes_List_GExample_C63_g(childData);
            _NonNullableListOfNullables_Accessed = true;
        }
        
        /*Location124*/
        protected Memory<byte> _NonNullableMemoryOfBytes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Memory<byte> NonNullableMemoryOfBytes
        {
            get
            {
                if (!_NonNullableMemoryOfBytes_Accessed)
                {
                    Lazinate_NonNullableMemoryOfBytes();
                }
                IsDirty = true; 
                return _NonNullableMemoryOfBytes;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableMemoryOfBytes = value;
                _NonNullableMemoryOfBytes_Accessed = true;
            }
        }
        protected bool _NonNullableMemoryOfBytes_Accessed;
        private void Lazinate_NonNullableMemoryOfBytes()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NonNullableMemoryOfBytes = default(Memory<byte>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableMemoryOfBytes_ByteIndex, _NonNullableMemoryOfBytes_ByteLength, false, false, null);
                _NonNullableMemoryOfBytes = ConvertFromBytes_Memory_Gbyte_g(childData);
            }
            
            _NonNullableMemoryOfBytes_Accessed = true;
        }
        
        /*Location125*/
        protected Queue<Example>? _NonNullableQueueOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Queue<Example> NonNullableQueueOfNonNullables
        {
            get
            {
                if (!_NonNullableQueueOfNonNullables_Accessed)
                {
                    Lazinate_NonNullableQueueOfNonNullables();
                }
                IsDirty = true; 
                return _NonNullableQueueOfNonNullables ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableQueueOfNonNullables = value;
                _NonNullableQueueOfNonNullables_Accessed = true;
            }
        }
        protected bool _NonNullableQueueOfNonNullables_Accessed;
        private void Lazinate_NonNullableQueueOfNonNullables()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableQueueOfNonNullables_ByteIndex, _NonNullableQueueOfNonNullables_ByteLength, false, false, null);
            _NonNullableQueueOfNonNullables = ConvertFromBytes_Queue_GExample_g(childData);
            _NonNullableQueueOfNonNullables_Accessed = true;
        }
        
        /*Location126*/
        protected Queue<Example?>? _NonNullableQueueOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Queue<Example?> NonNullableQueueOfNullables
        {
            get
            {
                if (!_NonNullableQueueOfNullables_Accessed)
                {
                    Lazinate_NonNullableQueueOfNullables();
                }
                IsDirty = true; 
                return _NonNullableQueueOfNullables ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableQueueOfNullables = value;
                _NonNullableQueueOfNullables_Accessed = true;
            }
        }
        protected bool _NonNullableQueueOfNullables_Accessed;
        private void Lazinate_NonNullableQueueOfNullables()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableQueueOfNullables_ByteIndex, _NonNullableQueueOfNullables_ByteLength, false, false, null);
            _NonNullableQueueOfNullables = ConvertFromBytes_Queue_GExample_C63_g(childData);
            _NonNullableQueueOfNullables_Accessed = true;
        }
        
        /*Location127*/
        protected ReadOnlyMemory<byte> _NonNullableReadOnlyMemoryOfBytes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlyMemory<byte> NonNullableReadOnlyMemoryOfBytes
        {
            get
            {
                if (!_NonNullableReadOnlyMemoryOfBytes_Accessed)
                {
                    Lazinate_NonNullableReadOnlyMemoryOfBytes();
                }
                IsDirty = true; 
                return _NonNullableReadOnlyMemoryOfBytes;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableReadOnlyMemoryOfBytes = value;
                _NonNullableReadOnlyMemoryOfBytes_Accessed = true;
            }
        }
        protected bool _NonNullableReadOnlyMemoryOfBytes_Accessed;
        private void Lazinate_NonNullableReadOnlyMemoryOfBytes()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NonNullableReadOnlyMemoryOfBytes = default(ReadOnlyMemory<byte>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableReadOnlyMemoryOfBytes_ByteIndex, _NonNullableReadOnlyMemoryOfBytes_ByteLength, false, false, null);
                _NonNullableReadOnlyMemoryOfBytes = ConvertFromBytes_ReadOnlyMemory_Gbyte_g(childData);
            }
            
            _NonNullableReadOnlyMemoryOfBytes_Accessed = true;
        }
        
        /*Location128*/
        protected Tuple<Example, int>? _NonNullableRegularTupleWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<Example, int> NonNullableRegularTupleWithNonNullable
        {
            get
            {
                if (!_NonNullableRegularTupleWithNonNullable_Accessed)
                {
                    Lazinate_NonNullableRegularTupleWithNonNullable();
                }
                IsDirty = true; 
                return _NonNullableRegularTupleWithNonNullable ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableRegularTupleWithNonNullable = value;
                _NonNullableRegularTupleWithNonNullable_Accessed = true;
            }
        }
        protected bool _NonNullableRegularTupleWithNonNullable_Accessed;
        private void Lazinate_NonNullableRegularTupleWithNonNullable()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableRegularTupleWithNonNullable_ByteIndex, _NonNullableRegularTupleWithNonNullable_ByteLength, false, false, null);
            _NonNullableRegularTupleWithNonNullable = ConvertFromBytes_Tuple_GExample_c_C32int_g(childData);
            _NonNullableRegularTupleWithNonNullable_Accessed = true;
        }
        
        /*Location129*/
        protected Tuple<Example?, int>? _NonNullableRegularTupleWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<Example?, int> NonNullableRegularTupleWithNullable
        {
            get
            {
                if (!_NonNullableRegularTupleWithNullable_Accessed)
                {
                    Lazinate_NonNullableRegularTupleWithNullable();
                }
                IsDirty = true; 
                return _NonNullableRegularTupleWithNullable ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableRegularTupleWithNullable = value;
                _NonNullableRegularTupleWithNullable_Accessed = true;
            }
        }
        protected bool _NonNullableRegularTupleWithNullable_Accessed;
        private void Lazinate_NonNullableRegularTupleWithNullable()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableRegularTupleWithNullable_ByteIndex, _NonNullableRegularTupleWithNullable_ByteLength, false, false, null);
            _NonNullableRegularTupleWithNullable = ConvertFromBytes_Tuple_GExample_C63_c_C32int_g(childData);
            _NonNullableRegularTupleWithNullable_Accessed = true;
        }
        
        /*Location130*/
        protected Stack<Example>? _NonNullableStackOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Stack<Example> NonNullableStackOfNonNullables
        {
            get
            {
                if (!_NonNullableStackOfNonNullables_Accessed)
                {
                    Lazinate_NonNullableStackOfNonNullables();
                }
                IsDirty = true; 
                return _NonNullableStackOfNonNullables ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableStackOfNonNullables = value;
                _NonNullableStackOfNonNullables_Accessed = true;
            }
        }
        protected bool _NonNullableStackOfNonNullables_Accessed;
        private void Lazinate_NonNullableStackOfNonNullables()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableStackOfNonNullables_ByteIndex, _NonNullableStackOfNonNullables_ByteLength, false, false, null);
            _NonNullableStackOfNonNullables = ConvertFromBytes_Stack_GExample_g(childData);
            _NonNullableStackOfNonNullables_Accessed = true;
        }
        
        /*Location131*/
        protected Stack<Example?>? _NonNullableStackOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Stack<Example?> NonNullableStackOfNullables
        {
            get
            {
                if (!_NonNullableStackOfNullables_Accessed)
                {
                    Lazinate_NonNullableStackOfNullables();
                }
                IsDirty = true; 
                return _NonNullableStackOfNullables ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableStackOfNullables = value;
                _NonNullableStackOfNullables_Accessed = true;
            }
        }
        protected bool _NonNullableStackOfNullables_Accessed;
        private void Lazinate_NonNullableStackOfNullables()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableStackOfNullables_ByteIndex, _NonNullableStackOfNullables_ByteLength, false, false, null);
            _NonNullableStackOfNullables = ConvertFromBytes_Stack_GExample_C63_g(childData);
            _NonNullableStackOfNullables_Accessed = true;
        }
        
        /*Location132*/
        protected ExampleStructWithoutClass _NonNullableStruct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleStructWithoutClass NonNullableStruct
        {
            get
            {
                if (!_NonNullableStruct_Accessed)
                {
                    Lazinate_NonNullableStruct();
                } 
                return _NonNullableStruct;
            }
            set
            {
                value.LazinatorParents = new LazinatorParentsCollection(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableStruct = value;
                _NonNullableStruct_Accessed = true;
            }
        }
        protected bool _NonNullableStruct_Accessed;
        private void Lazinate_NonNullableStruct()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NonNullableStruct = default(ExampleStructWithoutClass);
                _NonNullableStruct.LazinatorParents = new LazinatorParentsCollection(this);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableStruct_ByteIndex, _NonNullableStruct_ByteLength, false, false, null);
                _NonNullableStruct = new ExampleStructWithoutClass()
                {
                    LazinatorParents = new LazinatorParentsCollection(this)
                };
                _NonNullableStruct.DeserializeLazinator(childData);
            }
            
            _NonNullableStruct_Accessed = true;
        }
        
        /*Location133*/[DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleStructWithoutClass NonNullableStruct_Copy
        {
            get
            {
                if (!_NonNullableStruct_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        return default(ExampleStructWithoutClass);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableStruct_ByteIndex, _NonNullableStruct_ByteLength, false, false, null);
                        var toReturn = new ExampleStructWithoutClass();
                        toReturn.DeserializeLazinator(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                var cleanCopy = _NonNullableStruct;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        /*Location134*/
        protected Example[]? _NullableArrayOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example[]? NullableArrayOfNonNullables
        {
            get
            {
                if (!_NullableArrayOfNonNullables_Accessed)
                {
                    Lazinate_NullableArrayOfNonNullables();
                }
                IsDirty = true; 
                return _NullableArrayOfNonNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableArrayOfNonNullables = value;
                _NullableArrayOfNonNullables_Accessed = true;
            }
        }
        protected bool _NullableArrayOfNonNullables_Accessed;
        private void Lazinate_NullableArrayOfNonNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableArrayOfNonNullables = default(Example[]?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableArrayOfNonNullables_ByteIndex, _NullableArrayOfNonNullables_ByteLength, false, false, null);
                _NullableArrayOfNonNullables = ConvertFromBytes_Example_B_b_C63(childData);
            }
            
            _NullableArrayOfNonNullables_Accessed = true;
        }
        
        /*Location135*/
        protected Example?[]? _NullableArrayOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example?[]? NullableArrayOfNullables
        {
            get
            {
                if (!_NullableArrayOfNullables_Accessed)
                {
                    Lazinate_NullableArrayOfNullables();
                }
                IsDirty = true; 
                return _NullableArrayOfNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableArrayOfNullables = value;
                _NullableArrayOfNullables_Accessed = true;
            }
        }
        protected bool _NullableArrayOfNullables_Accessed;
        private void Lazinate_NullableArrayOfNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableArrayOfNullables = default(Example?[]?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableArrayOfNullables_ByteIndex, _NullableArrayOfNullables_ByteLength, false, false, null);
                _NullableArrayOfNullables = ConvertFromBytes_Example_C63_B_b_C63(childData);
            }
            
            _NullableArrayOfNullables_Accessed = true;
        }
        
        /*Location136*/
        protected Dictionary<int, Example>? _NullableDictionaryWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<int, Example>? NullableDictionaryWithNonNullable
        {
            get
            {
                if (!_NullableDictionaryWithNonNullable_Accessed)
                {
                    Lazinate_NullableDictionaryWithNonNullable();
                }
                IsDirty = true; 
                return _NullableDictionaryWithNonNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableDictionaryWithNonNullable = value;
                _NullableDictionaryWithNonNullable_Accessed = true;
            }
        }
        protected bool _NullableDictionaryWithNonNullable_Accessed;
        private void Lazinate_NullableDictionaryWithNonNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableDictionaryWithNonNullable = default(Dictionary<int, Example>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableDictionaryWithNonNullable_ByteIndex, _NullableDictionaryWithNonNullable_ByteLength, false, false, null);
                _NullableDictionaryWithNonNullable = ConvertFromBytes_Dictionary_Gint_c_C32Example_g_C63(childData);
            }
            
            _NullableDictionaryWithNonNullable_Accessed = true;
        }
        
        /*Location137*/
        protected Dictionary<int, Example?>? _NullableDictionaryWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<int, Example?>? NullableDictionaryWithNullable
        {
            get
            {
                if (!_NullableDictionaryWithNullable_Accessed)
                {
                    Lazinate_NullableDictionaryWithNullable();
                }
                IsDirty = true; 
                return _NullableDictionaryWithNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableDictionaryWithNullable = value;
                _NullableDictionaryWithNullable_Accessed = true;
            }
        }
        protected bool _NullableDictionaryWithNullable_Accessed;
        private void Lazinate_NullableDictionaryWithNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableDictionaryWithNullable = default(Dictionary<int, Example?>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableDictionaryWithNullable_ByteIndex, _NullableDictionaryWithNullable_ByteLength, false, false, null);
                _NullableDictionaryWithNullable = ConvertFromBytes_Dictionary_Gint_c_C32Example_C63_g_C63(childData);
            }
            
            _NullableDictionaryWithNullable_Accessed = true;
        }
        
        /*Location138*/
        protected LazinatorList<Example>? _NullableLazinatorListNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorList<Example>? NullableLazinatorListNonNullable
        {
            get
            {
                if (!_NullableLazinatorListNonNullable_Accessed)
                {
                    Lazinate_NullableLazinatorListNonNullable();
                } 
                return _NullableLazinatorListNonNullable;
            }
            set
            {
                if (_NullableLazinatorListNonNullable != null)
                {
                    _NullableLazinatorListNonNullable.LazinatorParents = _NullableLazinatorListNonNullable.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableLazinatorListNonNullable = value;
                _NullableLazinatorListNonNullable_Accessed = true;
            }
        }
        protected bool _NullableLazinatorListNonNullable_Accessed;
        private void Lazinate_NullableLazinatorListNonNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableLazinatorListNonNullable = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableLazinatorListNonNullable_ByteIndex, _NullableLazinatorListNonNullable_ByteLength, false, false, null);
                
                _NullableLazinatorListNonNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(201, (c, p) => new LazinatorList<Example>(c, p), childData, this); 
            }
            
            _NullableLazinatorListNonNullable_Accessed = true;
        }
        
        /*Location139*/
        protected LazinatorList<Example?>? _NullableLazinatorListNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorList<Example?>? NullableLazinatorListNullable
        {
            get
            {
                if (!_NullableLazinatorListNullable_Accessed)
                {
                    Lazinate_NullableLazinatorListNullable();
                } 
                return _NullableLazinatorListNullable;
            }
            set
            {
                if (_NullableLazinatorListNullable != null)
                {
                    _NullableLazinatorListNullable.LazinatorParents = _NullableLazinatorListNullable.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableLazinatorListNullable = value;
                _NullableLazinatorListNullable_Accessed = true;
            }
        }
        protected bool _NullableLazinatorListNullable_Accessed;
        private void Lazinate_NullableLazinatorListNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableLazinatorListNullable = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableLazinatorListNullable_ByteIndex, _NullableLazinatorListNullable_ByteLength, false, false, null);
                
                _NullableLazinatorListNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(201, (c, p) => new LazinatorList<Example?>(c, p), childData, this); 
            }
            
            _NullableLazinatorListNullable_Accessed = true;
        }
        
        /*Location140*/
        protected List<Example>? _NullableListOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Example>? NullableListOfNonNullables
        {
            get
            {
                if (!_NullableListOfNonNullables_Accessed)
                {
                    Lazinate_NullableListOfNonNullables();
                }
                IsDirty = true; 
                return _NullableListOfNonNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableListOfNonNullables = value;
                _NullableListOfNonNullables_Accessed = true;
            }
        }
        protected bool _NullableListOfNonNullables_Accessed;
        private void Lazinate_NullableListOfNonNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableListOfNonNullables = default(List<Example>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableListOfNonNullables_ByteIndex, _NullableListOfNonNullables_ByteLength, false, false, null);
                _NullableListOfNonNullables = ConvertFromBytes_List_GExample_g_C63(childData);
            }
            
            _NullableListOfNonNullables_Accessed = true;
        }
        
        /*Location141*/
        protected List<Example?>? _NullableListOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Example?>? NullableListOfNullables
        {
            get
            {
                if (!_NullableListOfNullables_Accessed)
                {
                    Lazinate_NullableListOfNullables();
                }
                IsDirty = true; 
                return _NullableListOfNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableListOfNullables = value;
                _NullableListOfNullables_Accessed = true;
            }
        }
        protected bool _NullableListOfNullables_Accessed;
        private void Lazinate_NullableListOfNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableListOfNullables = default(List<Example?>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableListOfNullables_ByteIndex, _NullableListOfNullables_ByteLength, false, false, null);
                _NullableListOfNullables = ConvertFromBytes_List_GExample_C63_g_C63(childData);
            }
            
            _NullableListOfNullables_Accessed = true;
        }
        
        /*Location142*/
        protected Memory<byte>? _NullableMemoryOfBytes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Memory<byte>? NullableMemoryOfBytes
        {
            get
            {
                if (!_NullableMemoryOfBytes_Accessed)
                {
                    Lazinate_NullableMemoryOfBytes();
                }
                IsDirty = true; 
                return _NullableMemoryOfBytes;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableMemoryOfBytes = value;
                _NullableMemoryOfBytes_Accessed = true;
            }
        }
        protected bool _NullableMemoryOfBytes_Accessed;
        private void Lazinate_NullableMemoryOfBytes()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableMemoryOfBytes = default(Memory<byte>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableMemoryOfBytes_ByteIndex, _NullableMemoryOfBytes_ByteLength, false, false, null);
                _NullableMemoryOfBytes = ConvertFromBytes_Memory_Gbyte_g_C63(childData);
            }
            
            _NullableMemoryOfBytes_Accessed = true;
        }
        
        /*Location143*/
        protected Queue<Example>? _NullableQueueOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Queue<Example>? NullableQueueOfNonNullables
        {
            get
            {
                if (!_NullableQueueOfNonNullables_Accessed)
                {
                    Lazinate_NullableQueueOfNonNullables();
                }
                IsDirty = true; 
                return _NullableQueueOfNonNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableQueueOfNonNullables = value;
                _NullableQueueOfNonNullables_Accessed = true;
            }
        }
        protected bool _NullableQueueOfNonNullables_Accessed;
        private void Lazinate_NullableQueueOfNonNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableQueueOfNonNullables = default(Queue<Example>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableQueueOfNonNullables_ByteIndex, _NullableQueueOfNonNullables_ByteLength, false, false, null);
                _NullableQueueOfNonNullables = ConvertFromBytes_Queue_GExample_g_C63(childData);
            }
            
            _NullableQueueOfNonNullables_Accessed = true;
        }
        
        /*Location144*/
        protected Queue<Example?>? _NullableQueueOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Queue<Example?>? NullableQueueOfNullables
        {
            get
            {
                if (!_NullableQueueOfNullables_Accessed)
                {
                    Lazinate_NullableQueueOfNullables();
                }
                IsDirty = true; 
                return _NullableQueueOfNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableQueueOfNullables = value;
                _NullableQueueOfNullables_Accessed = true;
            }
        }
        protected bool _NullableQueueOfNullables_Accessed;
        private void Lazinate_NullableQueueOfNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableQueueOfNullables = default(Queue<Example?>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableQueueOfNullables_ByteIndex, _NullableQueueOfNullables_ByteLength, false, false, null);
                _NullableQueueOfNullables = ConvertFromBytes_Queue_GExample_C63_g_C63(childData);
            }
            
            _NullableQueueOfNullables_Accessed = true;
        }
        
        /*Location145*/
        protected ReadOnlyMemory<byte>? _NullableReadOnlyMemoryOfBytes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlyMemory<byte>? NullableReadOnlyMemoryOfBytes
        {
            get
            {
                if (!_NullableReadOnlyMemoryOfBytes_Accessed)
                {
                    Lazinate_NullableReadOnlyMemoryOfBytes();
                }
                IsDirty = true; 
                return _NullableReadOnlyMemoryOfBytes;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableReadOnlyMemoryOfBytes = value;
                _NullableReadOnlyMemoryOfBytes_Accessed = true;
            }
        }
        protected bool _NullableReadOnlyMemoryOfBytes_Accessed;
        private void Lazinate_NullableReadOnlyMemoryOfBytes()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableReadOnlyMemoryOfBytes = default(ReadOnlyMemory<byte>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableReadOnlyMemoryOfBytes_ByteIndex, _NullableReadOnlyMemoryOfBytes_ByteLength, false, false, null);
                _NullableReadOnlyMemoryOfBytes = ConvertFromBytes_ReadOnlyMemory_Gbyte_g_C63(childData);
            }
            
            _NullableReadOnlyMemoryOfBytes_Accessed = true;
        }
        
        /*Location146*/
        protected Tuple<Example, int>? _NullableRegularTupleWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<Example, int>? NullableRegularTupleWithNonNullable
        {
            get
            {
                if (!_NullableRegularTupleWithNonNullable_Accessed)
                {
                    Lazinate_NullableRegularTupleWithNonNullable();
                }
                IsDirty = true; 
                return _NullableRegularTupleWithNonNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableRegularTupleWithNonNullable = value;
                _NullableRegularTupleWithNonNullable_Accessed = true;
            }
        }
        protected bool _NullableRegularTupleWithNonNullable_Accessed;
        private void Lazinate_NullableRegularTupleWithNonNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableRegularTupleWithNonNullable = default(Tuple<Example, int>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableRegularTupleWithNonNullable_ByteIndex, _NullableRegularTupleWithNonNullable_ByteLength, false, false, null);
                _NullableRegularTupleWithNonNullable = ConvertFromBytes_Tuple_GExample_c_C32int_g_C63(childData);
            }
            
            _NullableRegularTupleWithNonNullable_Accessed = true;
        }
        
        /*Location147*/
        protected Tuple<Example?, int>? _NullableRegularTupleWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<Example?, int>? NullableRegularTupleWithNullable
        {
            get
            {
                if (!_NullableRegularTupleWithNullable_Accessed)
                {
                    Lazinate_NullableRegularTupleWithNullable();
                }
                IsDirty = true; 
                return _NullableRegularTupleWithNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableRegularTupleWithNullable = value;
                _NullableRegularTupleWithNullable_Accessed = true;
            }
        }
        protected bool _NullableRegularTupleWithNullable_Accessed;
        private void Lazinate_NullableRegularTupleWithNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableRegularTupleWithNullable = default(Tuple<Example?, int>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableRegularTupleWithNullable_ByteIndex, _NullableRegularTupleWithNullable_ByteLength, false, false, null);
                _NullableRegularTupleWithNullable = ConvertFromBytes_Tuple_GExample_C63_c_C32int_g_C63(childData);
            }
            
            _NullableRegularTupleWithNullable_Accessed = true;
        }
        
        /*Location148*/
        protected Stack<Example>? _NullableStackOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Stack<Example>? NullableStackOfNonNullables
        {
            get
            {
                if (!_NullableStackOfNonNullables_Accessed)
                {
                    Lazinate_NullableStackOfNonNullables();
                }
                IsDirty = true; 
                return _NullableStackOfNonNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableStackOfNonNullables = value;
                _NullableStackOfNonNullables_Accessed = true;
            }
        }
        protected bool _NullableStackOfNonNullables_Accessed;
        private void Lazinate_NullableStackOfNonNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableStackOfNonNullables = default(Stack<Example>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableStackOfNonNullables_ByteIndex, _NullableStackOfNonNullables_ByteLength, false, false, null);
                _NullableStackOfNonNullables = ConvertFromBytes_Stack_GExample_g_C63(childData);
            }
            
            _NullableStackOfNonNullables_Accessed = true;
        }
        
        /*Location149*/
        protected Stack<Example?>? _NullableStackOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Stack<Example?>? NullableStackOfNullables
        {
            get
            {
                if (!_NullableStackOfNullables_Accessed)
                {
                    Lazinate_NullableStackOfNullables();
                }
                IsDirty = true; 
                return _NullableStackOfNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableStackOfNullables = value;
                _NullableStackOfNullables_Accessed = true;
            }
        }
        protected bool _NullableStackOfNullables_Accessed;
        private void Lazinate_NullableStackOfNullables()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableStackOfNullables = default(Stack<Example?>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableStackOfNullables_ByteIndex, _NullableStackOfNullables_ByteLength, false, false, null);
                _NullableStackOfNullables = ConvertFromBytes_Stack_GExample_C63_g_C63(childData);
            }
            
            _NullableStackOfNullables_Accessed = true;
        }
        
        /*Location150*/
        protected ExampleStructWithoutClass? _NullableStruct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleStructWithoutClass? NullableStruct
        {
            get
            {
                if (!_NullableStruct_Accessed)
                {
                    Lazinate_NullableStruct();
                } 
                return _NullableStruct;
            }
            set
            {
                if (value.HasValue)
                {
                    var copy = value.Value;
                    copy.LazinatorParents = new LazinatorParentsCollection(this);
                    value = copy;
                }
                
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableStruct = value;
                _NullableStruct_Accessed = true;
            }
        }
        protected bool _NullableStruct_Accessed;
        private void Lazinate_NullableStruct()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableStruct = default(ExampleStructWithoutClass?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableStruct_ByteIndex, _NullableStruct_ByteLength, false, false, null);
                if (childData.Length == 0)
                {
                    _NullableStruct = default;
                }
                else 
                {
                    _NullableStruct = new ExampleStructWithoutClass()
                    {
                        LazinatorParents = new LazinatorParentsCollection(this)
                    };
                    var copy = _NullableStruct.Value;
                    copy.DeserializeLazinator(childData);
                    _NullableStruct = copy;
                }
            }
            
            _NullableStruct_Accessed = true;
        }
        
        /*Location151*/[DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleStructWithoutClass? NullableStruct_Copy
        {
            get
            {
                if (!_NullableStruct_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        return null;
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableStruct_ByteIndex, _NullableStruct_ByteLength, false, false, null);
                        var toReturn = new ExampleStructWithoutClass();
                        toReturn.DeserializeLazinator(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                if (_NullableStruct == null)
                {
                    return null;
                }
                var cleanCopy = _NullableStruct.Value;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        /*Location152*/
        protected (Example, int)? _NullableValueTupleWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (Example, int)? NullableValueTupleWithNonNullable
        {
            get
            {
                if (!_NullableValueTupleWithNonNullable_Accessed)
                {
                    Lazinate_NullableValueTupleWithNonNullable();
                }
                IsDirty = true; 
                return _NullableValueTupleWithNonNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableValueTupleWithNonNullable = value;
                _NullableValueTupleWithNonNullable_Accessed = true;
            }
        }
        protected bool _NullableValueTupleWithNonNullable_Accessed;
        private void Lazinate_NullableValueTupleWithNonNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableValueTupleWithNonNullable = default((Example, int)?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableValueTupleWithNonNullable_ByteIndex, _NullableValueTupleWithNonNullable_ByteLength, false, false, null);
                _NullableValueTupleWithNonNullable = ConvertFromBytes__PExample_c_C32int_p_C63(childData);
            }
            
            _NullableValueTupleWithNonNullable_Accessed = true;
        }
        
        /*Location153*/
        protected (Example?, int)? _NullableValueTupleWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (Example?, int)? NullableValueTupleWithNullable
        {
            get
            {
                if (!_NullableValueTupleWithNullable_Accessed)
                {
                    Lazinate_NullableValueTupleWithNullable();
                }
                IsDirty = true; 
                return _NullableValueTupleWithNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableValueTupleWithNullable = value;
                _NullableValueTupleWithNullable_Accessed = true;
            }
        }
        protected bool _NullableValueTupleWithNullable_Accessed;
        private void Lazinate_NullableValueTupleWithNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _NullableValueTupleWithNullable = default((Example?, int)?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableValueTupleWithNullable_ByteIndex, _NullableValueTupleWithNullable_ByteLength, false, false, null);
                _NullableValueTupleWithNullable = ConvertFromBytes__PExample_C63_c_C32int_p_C63(childData);
            }
            
            _NullableValueTupleWithNullable_Accessed = true;
        }
        
        /*Location154*/
        protected (Example, int)? _ValueTupleWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (Example, int) ValueTupleWithNonNullable
        {
            get
            {
                if (!_ValueTupleWithNonNullable_Accessed)
                {
                    Lazinate_ValueTupleWithNonNullable();
                }
                IsDirty = true; 
                return _ValueTupleWithNonNullable ?? throw new UnsetNonnullableLazinatorException();
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _ValueTupleWithNonNullable = value;
                _ValueTupleWithNonNullable_Accessed = true;
            }
        }
        protected bool _ValueTupleWithNonNullable_Accessed;
        private void Lazinate_ValueTupleWithNonNullable()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ValueTupleWithNonNullable_ByteIndex, _ValueTupleWithNonNullable_ByteLength, false, false, null);
            _ValueTupleWithNonNullable = ConvertFromBytes__PExample_c_C32int_p(childData);
            _ValueTupleWithNonNullable_Accessed = true;
        }
        
        /*Location155*/
        protected (Example?, int) _ValueTupleWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (Example?, int) ValueTupleWithNullable
        {
            get
            {
                if (!_ValueTupleWithNullable_Accessed)
                {
                    Lazinate_ValueTupleWithNullable();
                }
                IsDirty = true; 
                return _ValueTupleWithNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _ValueTupleWithNullable = value;
                _ValueTupleWithNullable_Accessed = true;
            }
        }
        protected bool _ValueTupleWithNullable_Accessed;
        private void Lazinate_ValueTupleWithNullable()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _ValueTupleWithNullable = default((Example?, int));
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ValueTupleWithNullable_ByteIndex, _ValueTupleWithNullable_ByteLength, false, false, null);
                _ValueTupleWithNullable = ConvertFromBytes__PExample_C63_c_C32int_p(childData);
            }
            
            _ValueTupleWithNullable_Accessed = true;
        }
        
        /*Location203*/
        /* Serialization, deserialization, and object relationships */
        
        public NullableEnabledContext(LazinatorConstructorEnum constructorEnum)
        {
        }
        
        public NullableEnabledContext(LazinatorMemory serializedBytes, ILazinator? parent = null)
        {
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator? CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            var clone = new NullableEnabledContext(LazinatorConstructorEnum.LazinatorConstructor)
            {
                OriginalIncludeChildrenMode = includeChildrenMode
            };
            clone = CompleteClone(this, clone, includeChildrenMode, cloneBufferOptions);
            return clone;
        }
        
        public virtual ILazinator? AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            NullableEnabledContext typedClone = (NullableEnabledContext) clone;
            /*Location156*/typedClone.MyInt = MyInt;
            /*Location157*/typedClone.MyNullableInt = MyNullableInt;
            /*Location158*/typedClone.NonNullableString = NonNullableString;
            /*Location159*/typedClone.NullableString = NullableString;
            /*Location160*/typedClone.ByteReadOnlySpan = CloneOrChange_ReadOnlySpan_Gbyte_g(ByteReadOnlySpan, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location161*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (ExplicitlyNullable == null)
                {
                    typedClone.ExplicitlyNullable = null;
                }
                else
                {
                    typedClone.ExplicitlyNullable = (Example?) ExplicitlyNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location162*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (ExplicitlyNullableInterface == null)
                {
                    typedClone.ExplicitlyNullableInterface = null;
                }
                else
                {
                    typedClone.ExplicitlyNullableInterface = (IExample?) ExplicitlyNullableInterface.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location163*/typedClone.NonNullableArrayOfNonNullables = CloneOrChange_Example_B_b(NonNullableArrayOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location164*/typedClone.NonNullableArrayOfNullables = CloneOrChange_Example_C63_B_b(NonNullableArrayOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location165*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.NonNullableClass = (Example) NonNullableClass.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            
            /*Location166*/typedClone.NonNullableDictionaryWithNonNullable = CloneOrChange_Dictionary_Gint_c_C32Example_g(NonNullableDictionaryWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location167*/typedClone.NonNullableDictionaryWithNullable = CloneOrChange_Dictionary_Gint_c_C32Example_C63_g(NonNullableDictionaryWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location168*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.NonNullableInterface = (IExample) NonNullableInterface.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            
            /*Location169*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.NonNullableLazinatorListNonNullable = (LazinatorList<Example>) NonNullableLazinatorListNonNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            
            /*Location170*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.NonNullableLazinatorListNullable = (LazinatorList<Example?>) NonNullableLazinatorListNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            
            /*Location171*/typedClone.NonNullableListOfNonNullables = CloneOrChange_List_GExample_g(NonNullableListOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location172*/typedClone.NonNullableListOfNullables = CloneOrChange_List_GExample_C63_g(NonNullableListOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location173*/typedClone.NonNullableMemoryOfBytes = CloneOrChange_Memory_Gbyte_g(NonNullableMemoryOfBytes, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location174*/typedClone.NonNullableQueueOfNonNullables = CloneOrChange_Queue_GExample_g(NonNullableQueueOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location175*/typedClone.NonNullableQueueOfNullables = CloneOrChange_Queue_GExample_C63_g(NonNullableQueueOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location176*/typedClone.NonNullableReadOnlyMemoryOfBytes = CloneOrChange_ReadOnlyMemory_Gbyte_g(NonNullableReadOnlyMemoryOfBytes, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location177*/typedClone.NonNullableRegularTupleWithNonNullable = CloneOrChange_Tuple_GExample_c_C32int_g(NonNullableRegularTupleWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location178*/typedClone.NonNullableRegularTupleWithNullable = CloneOrChange_Tuple_GExample_C63_c_C32int_g(NonNullableRegularTupleWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location179*/typedClone.NonNullableStackOfNonNullables = CloneOrChange_Stack_GExample_g(NonNullableStackOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location180*/typedClone.NonNullableStackOfNullables = CloneOrChange_Stack_GExample_C63_g(NonNullableStackOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location181*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.NonNullableStruct = (ExampleStructWithoutClass) NonNullableStruct.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            
            /*Location182*/typedClone.NullableArrayOfNonNullables = CloneOrChange_Example_B_b_C63(NullableArrayOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location183*/typedClone.NullableArrayOfNullables = CloneOrChange_Example_C63_B_b_C63(NullableArrayOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location184*/typedClone.NullableDictionaryWithNonNullable = CloneOrChange_Dictionary_Gint_c_C32Example_g_C63(NullableDictionaryWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location185*/typedClone.NullableDictionaryWithNullable = CloneOrChange_Dictionary_Gint_c_C32Example_C63_g_C63(NullableDictionaryWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location186*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (NullableLazinatorListNonNullable == null)
                {
                    typedClone.NullableLazinatorListNonNullable = null;
                }
                else
                {
                    typedClone.NullableLazinatorListNonNullable = (LazinatorList<Example>?) NullableLazinatorListNonNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location187*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (NullableLazinatorListNullable == null)
                {
                    typedClone.NullableLazinatorListNullable = null;
                }
                else
                {
                    typedClone.NullableLazinatorListNullable = (LazinatorList<Example?>?) NullableLazinatorListNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location188*/typedClone.NullableListOfNonNullables = CloneOrChange_List_GExample_g_C63(NullableListOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location189*/typedClone.NullableListOfNullables = CloneOrChange_List_GExample_C63_g_C63(NullableListOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location190*/typedClone.NullableMemoryOfBytes = CloneOrChange_Memory_Gbyte_g_C63(NullableMemoryOfBytes, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location191*/typedClone.NullableQueueOfNonNullables = CloneOrChange_Queue_GExample_g_C63(NullableQueueOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location192*/typedClone.NullableQueueOfNullables = CloneOrChange_Queue_GExample_C63_g_C63(NullableQueueOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location193*/typedClone.NullableReadOnlyMemoryOfBytes = CloneOrChange_ReadOnlyMemory_Gbyte_g_C63(NullableReadOnlyMemoryOfBytes, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location194*/typedClone.NullableRegularTupleWithNonNullable = CloneOrChange_Tuple_GExample_c_C32int_g_C63(NullableRegularTupleWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location195*/typedClone.NullableRegularTupleWithNullable = CloneOrChange_Tuple_GExample_C63_c_C32int_g_C63(NullableRegularTupleWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location196*/typedClone.NullableStackOfNonNullables = CloneOrChange_Stack_GExample_g_C63(NullableStackOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location197*/typedClone.NullableStackOfNullables = CloneOrChange_Stack_GExample_C63_g_C63(NullableStackOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location198*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (NullableStruct == null)
                {
                    typedClone.NullableStruct = null;
                }
                else
                {
                    typedClone.NullableStruct = (ExampleStructWithoutClass?) NullableStruct.Value.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location199*/typedClone.NullableValueTupleWithNonNullable = CloneOrChange__PExample_c_C32int_p_C63(NullableValueTupleWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location200*/typedClone.NullableValueTupleWithNullable = CloneOrChange__PExample_C63_c_C32int_p_C63(NullableValueTupleWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location201*/typedClone.ValueTupleWithNonNullable = CloneOrChange__PExample_c_C32int_p(ValueTupleWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location202*/typedClone.ValueTupleWithNullable = CloneOrChange__PExample_C63_c_C32int_p(ValueTupleWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        /*Location204*/
        public IEnumerable<ILazinator?> EnumerateLazinatorNodes(Func<ILazinator?, bool>? matchCriterion, bool stopExploringBelowMatch, Func<ILazinator?, bool>? exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location205*/public virtual IEnumerable<(string propertyName, ILazinator? descendant)> EnumerateLazinatorDescendants(Func<ILazinator?, bool>? matchCriterion, bool stopExploringBelowMatch, Func<ILazinator?, bool>? exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location206*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ExplicitlyNullable_Accessed) && ExplicitlyNullable == null)
            {
                yield return ("ExplicitlyNullable", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ExplicitlyNullable != null) || (_ExplicitlyNullable_Accessed && _ExplicitlyNullable != null))
                {
                    bool isMatch_ExplicitlyNullable = matchCriterion == null || matchCriterion(ExplicitlyNullable);
                    bool shouldExplore_ExplicitlyNullable = exploreCriterion == null || exploreCriterion(ExplicitlyNullable);
                    if (isMatch_ExplicitlyNullable)
                    {
                        yield return ("ExplicitlyNullable", ExplicitlyNullable);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_ExplicitlyNullable) && shouldExplore_ExplicitlyNullable)
                    {
                        foreach (var toYield in ExplicitlyNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ExplicitlyNullable" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location207*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ExplicitlyNullableInterface_Accessed) && ExplicitlyNullableInterface == null)
            {
                yield return ("ExplicitlyNullableInterface", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ExplicitlyNullableInterface != null) || (_ExplicitlyNullableInterface_Accessed && _ExplicitlyNullableInterface != null))
                {
                    bool isMatch_ExplicitlyNullableInterface = matchCriterion == null || matchCriterion(ExplicitlyNullableInterface);
                    bool shouldExplore_ExplicitlyNullableInterface = exploreCriterion == null || exploreCriterion(ExplicitlyNullableInterface);
                    if (isMatch_ExplicitlyNullableInterface)
                    {
                        yield return ("ExplicitlyNullableInterface", ExplicitlyNullableInterface);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_ExplicitlyNullableInterface) && shouldExplore_ExplicitlyNullableInterface)
                    {
                        foreach (var toYield in ExplicitlyNullableInterface!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ExplicitlyNullableInterface" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location208*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _NonNullableClass_Accessed) && NonNullableClass == null)
            {
                yield return ("NonNullableClass", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && NonNullableClass != null) || (_NonNullableClass_Accessed && _NonNullableClass != null))
                {
                    bool isMatch_NonNullableClass = matchCriterion == null || matchCriterion(NonNullableClass);
                    bool shouldExplore_NonNullableClass = exploreCriterion == null || exploreCriterion(NonNullableClass);
                    if (isMatch_NonNullableClass)
                    {
                        yield return ("NonNullableClass", NonNullableClass);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_NonNullableClass) && shouldExplore_NonNullableClass)
                    {
                        foreach (var toYield in NonNullableClass!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("NonNullableClass" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location209*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _NonNullableInterface_Accessed) && NonNullableInterface == null)
            {
                yield return ("NonNullableInterface", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && NonNullableInterface != null) || (_NonNullableInterface_Accessed && _NonNullableInterface != null))
                {
                    bool isMatch_NonNullableInterface = matchCriterion == null || matchCriterion(NonNullableInterface);
                    bool shouldExplore_NonNullableInterface = exploreCriterion == null || exploreCriterion(NonNullableInterface);
                    if (isMatch_NonNullableInterface)
                    {
                        yield return ("NonNullableInterface", NonNullableInterface);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_NonNullableInterface) && shouldExplore_NonNullableInterface)
                    {
                        foreach (var toYield in NonNullableInterface!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("NonNullableInterface" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location210*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _NonNullableLazinatorListNonNullable_Accessed) && NonNullableLazinatorListNonNullable == null)
            {
                yield return ("NonNullableLazinatorListNonNullable", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && NonNullableLazinatorListNonNullable != null) || (_NonNullableLazinatorListNonNullable_Accessed && _NonNullableLazinatorListNonNullable != null))
                {
                    bool isMatch_NonNullableLazinatorListNonNullable = matchCriterion == null || matchCriterion(NonNullableLazinatorListNonNullable);
                    bool shouldExplore_NonNullableLazinatorListNonNullable = exploreCriterion == null || exploreCriterion(NonNullableLazinatorListNonNullable);
                    if (isMatch_NonNullableLazinatorListNonNullable)
                    {
                        yield return ("NonNullableLazinatorListNonNullable", NonNullableLazinatorListNonNullable);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_NonNullableLazinatorListNonNullable) && shouldExplore_NonNullableLazinatorListNonNullable)
                    {
                        foreach (var toYield in NonNullableLazinatorListNonNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("NonNullableLazinatorListNonNullable" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location211*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _NonNullableLazinatorListNullable_Accessed) && NonNullableLazinatorListNullable == null)
            {
                yield return ("NonNullableLazinatorListNullable", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && NonNullableLazinatorListNullable != null) || (_NonNullableLazinatorListNullable_Accessed && _NonNullableLazinatorListNullable != null))
                {
                    bool isMatch_NonNullableLazinatorListNullable = matchCriterion == null || matchCriterion(NonNullableLazinatorListNullable);
                    bool shouldExplore_NonNullableLazinatorListNullable = exploreCriterion == null || exploreCriterion(NonNullableLazinatorListNullable);
                    if (isMatch_NonNullableLazinatorListNullable)
                    {
                        yield return ("NonNullableLazinatorListNullable", NonNullableLazinatorListNullable);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_NonNullableLazinatorListNullable) && shouldExplore_NonNullableLazinatorListNullable)
                    {
                        foreach (var toYield in NonNullableLazinatorListNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("NonNullableLazinatorListNullable" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location212*/bool isMatch_NonNullableStruct = matchCriterion == null || matchCriterion(NonNullableStruct);
            bool shouldExplore_NonNullableStruct = exploreCriterion == null || exploreCriterion(NonNullableStruct);
            if (isMatch_NonNullableStruct)
            {
                yield return ("NonNullableStruct", NonNullableStruct);
            }
            if ((!stopExploringBelowMatch || !isMatch_NonNullableStruct) && shouldExplore_NonNullableStruct)
            {
                foreach (var toYield in NonNullableStruct!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("NonNullableStruct" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            /*Location213*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _NullableLazinatorListNonNullable_Accessed) && NullableLazinatorListNonNullable == null)
            {
                yield return ("NullableLazinatorListNonNullable", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && NullableLazinatorListNonNullable != null) || (_NullableLazinatorListNonNullable_Accessed && _NullableLazinatorListNonNullable != null))
                {
                    bool isMatch_NullableLazinatorListNonNullable = matchCriterion == null || matchCriterion(NullableLazinatorListNonNullable);
                    bool shouldExplore_NullableLazinatorListNonNullable = exploreCriterion == null || exploreCriterion(NullableLazinatorListNonNullable);
                    if (isMatch_NullableLazinatorListNonNullable)
                    {
                        yield return ("NullableLazinatorListNonNullable", NullableLazinatorListNonNullable);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_NullableLazinatorListNonNullable) && shouldExplore_NullableLazinatorListNonNullable)
                    {
                        foreach (var toYield in NullableLazinatorListNonNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("NullableLazinatorListNonNullable" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location214*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _NullableLazinatorListNullable_Accessed) && NullableLazinatorListNullable == null)
            {
                yield return ("NullableLazinatorListNullable", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && NullableLazinatorListNullable != null) || (_NullableLazinatorListNullable_Accessed && _NullableLazinatorListNullable != null))
                {
                    bool isMatch_NullableLazinatorListNullable = matchCriterion == null || matchCriterion(NullableLazinatorListNullable);
                    bool shouldExplore_NullableLazinatorListNullable = exploreCriterion == null || exploreCriterion(NullableLazinatorListNullable);
                    if (isMatch_NullableLazinatorListNullable)
                    {
                        yield return ("NullableLazinatorListNullable", NullableLazinatorListNullable);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_NullableLazinatorListNullable) && shouldExplore_NullableLazinatorListNullable)
                    {
                        foreach (var toYield in NullableLazinatorListNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("NullableLazinatorListNullable" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location215*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _NullableStruct_Accessed) && NullableStruct == null)
            {
                yield return ("NullableStruct", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && NullableStruct != null) || (_NullableStruct_Accessed && _NullableStruct != null))
                {
                    bool isMatch_NullableStruct = matchCriterion == null || matchCriterion(NullableStruct);
                    bool shouldExplore_NullableStruct = exploreCriterion == null || exploreCriterion(NullableStruct);
                    if (isMatch_NullableStruct)
                    {
                        yield return ("NullableStruct", NullableStruct);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_NullableStruct) && shouldExplore_NullableStruct)
                    {
                        foreach (var toYield in NullableStruct!.Value.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("NullableStruct" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location216*/yield break;
        }
        /*Location217*/
        
        public virtual IEnumerable<(string propertyName, object? descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location218*/yield return ("MyInt", (object?)MyInt);
            /*Location219*/yield return ("MyNullableInt", (object?)MyNullableInt);
            /*Location220*/yield return ("NonNullableString", (object?)NonNullableString);
            /*Location221*/yield return ("NullableString", (object?)NullableString);
            /*Location222*/yield return ("ByteReadOnlySpan", (object?)ByteReadOnlySpan.ToString());
            /*Location223*/yield return ("NonNullableArrayOfNonNullables", (object?)NonNullableArrayOfNonNullables);
            /*Location224*/yield return ("NonNullableArrayOfNullables", (object?)NonNullableArrayOfNullables);
            /*Location225*/yield return ("NonNullableDictionaryWithNonNullable", (object?)NonNullableDictionaryWithNonNullable);
            /*Location226*/yield return ("NonNullableDictionaryWithNullable", (object?)NonNullableDictionaryWithNullable);
            /*Location227*/yield return ("NonNullableListOfNonNullables", (object?)NonNullableListOfNonNullables);
            /*Location228*/yield return ("NonNullableListOfNullables", (object?)NonNullableListOfNullables);
            /*Location229*/yield return ("NonNullableMemoryOfBytes", (object?)NonNullableMemoryOfBytes);
            /*Location230*/yield return ("NonNullableQueueOfNonNullables", (object?)NonNullableQueueOfNonNullables);
            /*Location231*/yield return ("NonNullableQueueOfNullables", (object?)NonNullableQueueOfNullables);
            /*Location232*/yield return ("NonNullableReadOnlyMemoryOfBytes", (object?)NonNullableReadOnlyMemoryOfBytes);
            /*Location233*/yield return ("NonNullableRegularTupleWithNonNullable", (object?)NonNullableRegularTupleWithNonNullable);
            /*Location234*/yield return ("NonNullableRegularTupleWithNullable", (object?)NonNullableRegularTupleWithNullable);
            /*Location235*/yield return ("NonNullableStackOfNonNullables", (object?)NonNullableStackOfNonNullables);
            /*Location236*/yield return ("NonNullableStackOfNullables", (object?)NonNullableStackOfNullables);
            /*Location237*/yield return ("NullableArrayOfNonNullables", (object?)NullableArrayOfNonNullables);
            /*Location238*/yield return ("NullableArrayOfNullables", (object?)NullableArrayOfNullables);
            /*Location239*/yield return ("NullableDictionaryWithNonNullable", (object?)NullableDictionaryWithNonNullable);
            /*Location240*/yield return ("NullableDictionaryWithNullable", (object?)NullableDictionaryWithNullable);
            /*Location241*/yield return ("NullableListOfNonNullables", (object?)NullableListOfNonNullables);
            /*Location242*/yield return ("NullableListOfNullables", (object?)NullableListOfNullables);
            /*Location243*/yield return ("NullableMemoryOfBytes", (object?)NullableMemoryOfBytes);
            /*Location244*/yield return ("NullableQueueOfNonNullables", (object?)NullableQueueOfNonNullables);
            /*Location245*/yield return ("NullableQueueOfNullables", (object?)NullableQueueOfNullables);
            /*Location246*/yield return ("NullableReadOnlyMemoryOfBytes", (object?)NullableReadOnlyMemoryOfBytes);
            /*Location247*/yield return ("NullableRegularTupleWithNonNullable", (object?)NullableRegularTupleWithNonNullable);
            /*Location248*/yield return ("NullableRegularTupleWithNullable", (object?)NullableRegularTupleWithNullable);
            /*Location249*/yield return ("NullableStackOfNonNullables", (object?)NullableStackOfNonNullables);
            /*Location250*/yield return ("NullableStackOfNullables", (object?)NullableStackOfNullables);
            /*Location251*/yield return ("NullableValueTupleWithNonNullable", (object?)NullableValueTupleWithNonNullable);
            /*Location252*/yield return ("NullableValueTupleWithNullable", (object?)NullableValueTupleWithNullable);
            /*Location253*/yield return ("ValueTupleWithNonNullable", (object?)ValueTupleWithNonNullable);
            /*Location254*/yield return ("ValueTupleWithNullable", (object?)ValueTupleWithNullable);
            /*Location255*/yield break;
        }
        /*Location256*/
        public virtual ILazinator? ForEachLazinator(Func<ILazinator?, ILazinator?>? changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location257*/if ((!exploreOnlyDeserializedChildren && ExplicitlyNullable != null) || (_ExplicitlyNullable_Accessed && _ExplicitlyNullable != null))
            {
                _ExplicitlyNullable = (Example?) _ExplicitlyNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location258*/if ((!exploreOnlyDeserializedChildren && ExplicitlyNullableInterface != null) || (_ExplicitlyNullableInterface_Accessed && _ExplicitlyNullableInterface != null))
            {
                _ExplicitlyNullableInterface = (IExample?) _ExplicitlyNullableInterface!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location259*/if ((!exploreOnlyDeserializedChildren && NonNullableClass != null) || (_NonNullableClass_Accessed && _NonNullableClass != null))
            {
                _NonNullableClass = (Example) _NonNullableClass!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location260*/if ((!exploreOnlyDeserializedChildren && NonNullableInterface != null) || (_NonNullableInterface_Accessed && _NonNullableInterface != null))
            {
                _NonNullableInterface = (IExample) _NonNullableInterface!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location261*/if ((!exploreOnlyDeserializedChildren && NonNullableLazinatorListNonNullable != null) || (_NonNullableLazinatorListNonNullable_Accessed && _NonNullableLazinatorListNonNullable != null))
            {
                _NonNullableLazinatorListNonNullable = (LazinatorList<Example>) _NonNullableLazinatorListNonNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location262*/if ((!exploreOnlyDeserializedChildren && NonNullableLazinatorListNullable != null) || (_NonNullableLazinatorListNullable_Accessed && _NonNullableLazinatorListNullable != null))
            {
                _NonNullableLazinatorListNullable = (LazinatorList<Example?>) _NonNullableLazinatorListNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location263*/var deserialized_NonNullableStruct = NonNullableStruct;
            _NonNullableStruct = (ExampleStructWithoutClass) _NonNullableStruct!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);/*Location264*/if ((!exploreOnlyDeserializedChildren && NullableLazinatorListNonNullable != null) || (_NullableLazinatorListNonNullable_Accessed && _NullableLazinatorListNonNullable != null))
            {
                _NullableLazinatorListNonNullable = (LazinatorList<Example>?) _NullableLazinatorListNonNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location265*/if ((!exploreOnlyDeserializedChildren && NullableLazinatorListNullable != null) || (_NullableLazinatorListNullable_Accessed && _NullableLazinatorListNullable != null))
            {
                _NullableLazinatorListNullable = (LazinatorList<Example?>?) _NullableLazinatorListNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location266*/if ((!exploreOnlyDeserializedChildren && NullableStruct != null) || (_NullableStruct_Accessed && _NullableStruct != null))
            {
                _NullableStruct = (ExampleStructWithoutClass?) _NullableStruct!.Value.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location267*/if ((!exploreOnlyDeserializedChildren && NonNullableArrayOfNonNullables != null) || (_NonNullableArrayOfNonNullables_Accessed && _NonNullableArrayOfNonNullables != null))
            {
                _NonNullableArrayOfNonNullables = (Example[]) CloneOrChange_Example_B_b(_NonNullableArrayOfNonNullables ?? throw new UnsetNonnullableLazinatorException(), l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true) ?? throw new UnsetNonnullableLazinatorException(), true);
            }
            /*Location268*/if ((!exploreOnlyDeserializedChildren && NonNullableArrayOfNullables != null) || (_NonNullableArrayOfNullables_Accessed && _NonNullableArrayOfNullables != null))
            {
                _NonNullableArrayOfNullables = (Example?[]) CloneOrChange_Example_C63_B_b(_NonNullableArrayOfNullables ?? throw new UnsetNonnullableLazinatorException(), l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location269*/if ((!exploreOnlyDeserializedChildren && NonNullableDictionaryWithNonNullable != null) || (_NonNullableDictionaryWithNonNullable_Accessed && _NonNullableDictionaryWithNonNullable != null))
            {
                _NonNullableDictionaryWithNonNullable = (Dictionary<int, Example>) CloneOrChange_Dictionary_Gint_c_C32Example_g(_NonNullableDictionaryWithNonNullable ?? throw new UnsetNonnullableLazinatorException(), l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true) ?? throw new UnsetNonnullableLazinatorException(), true);
            }
            /*Location270*/if ((!exploreOnlyDeserializedChildren && NonNullableDictionaryWithNullable != null) || (_NonNullableDictionaryWithNullable_Accessed && _NonNullableDictionaryWithNullable != null))
            {
                _NonNullableDictionaryWithNullable = (Dictionary<int, Example?>) CloneOrChange_Dictionary_Gint_c_C32Example_C63_g(_NonNullableDictionaryWithNullable ?? throw new UnsetNonnullableLazinatorException(), l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location271*/if ((!exploreOnlyDeserializedChildren && NonNullableListOfNonNullables != null) || (_NonNullableListOfNonNullables_Accessed && _NonNullableListOfNonNullables != null))
            {
                _NonNullableListOfNonNullables = (List<Example>) CloneOrChange_List_GExample_g(_NonNullableListOfNonNullables ?? throw new UnsetNonnullableLazinatorException(), l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true) ?? throw new UnsetNonnullableLazinatorException(), true);
            }
            /*Location272*/if ((!exploreOnlyDeserializedChildren && NonNullableListOfNullables != null) || (_NonNullableListOfNullables_Accessed && _NonNullableListOfNullables != null))
            {
                _NonNullableListOfNullables = (List<Example?>) CloneOrChange_List_GExample_C63_g(_NonNullableListOfNullables ?? throw new UnsetNonnullableLazinatorException(), l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location273*/if ((!exploreOnlyDeserializedChildren && NonNullableQueueOfNonNullables != null) || (_NonNullableQueueOfNonNullables_Accessed && _NonNullableQueueOfNonNullables != null))
            {
                _NonNullableQueueOfNonNullables = (Queue<Example>) CloneOrChange_Queue_GExample_g(_NonNullableQueueOfNonNullables ?? throw new UnsetNonnullableLazinatorException(), l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true) ?? throw new UnsetNonnullableLazinatorException(), true);
            }
            /*Location274*/if ((!exploreOnlyDeserializedChildren && NonNullableQueueOfNullables != null) || (_NonNullableQueueOfNullables_Accessed && _NonNullableQueueOfNullables != null))
            {
                _NonNullableQueueOfNullables = (Queue<Example?>) CloneOrChange_Queue_GExample_C63_g(_NonNullableQueueOfNullables ?? throw new UnsetNonnullableLazinatorException(), l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location275*/if ((!exploreOnlyDeserializedChildren && NonNullableRegularTupleWithNonNullable != null) || (_NonNullableRegularTupleWithNonNullable_Accessed && _NonNullableRegularTupleWithNonNullable != null))
            {
                _NonNullableRegularTupleWithNonNullable = (Tuple<Example, int>) CloneOrChange_Tuple_GExample_c_C32int_g(_NonNullableRegularTupleWithNonNullable ?? throw new UnsetNonnullableLazinatorException(), l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true) ?? throw new UnsetNonnullableLazinatorException(), true);
            }
            /*Location276*/if ((!exploreOnlyDeserializedChildren && NonNullableRegularTupleWithNullable != null) || (_NonNullableRegularTupleWithNullable_Accessed && _NonNullableRegularTupleWithNullable != null))
            {
                _NonNullableRegularTupleWithNullable = (Tuple<Example?, int>) CloneOrChange_Tuple_GExample_C63_c_C32int_g(_NonNullableRegularTupleWithNullable ?? throw new UnsetNonnullableLazinatorException(), l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location277*/if ((!exploreOnlyDeserializedChildren && NonNullableStackOfNonNullables != null) || (_NonNullableStackOfNonNullables_Accessed && _NonNullableStackOfNonNullables != null))
            {
                _NonNullableStackOfNonNullables = (Stack<Example>) CloneOrChange_Stack_GExample_g(_NonNullableStackOfNonNullables ?? throw new UnsetNonnullableLazinatorException(), l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true) ?? throw new UnsetNonnullableLazinatorException(), true);
            }
            /*Location278*/if ((!exploreOnlyDeserializedChildren && NonNullableStackOfNullables != null) || (_NonNullableStackOfNullables_Accessed && _NonNullableStackOfNullables != null))
            {
                _NonNullableStackOfNullables = (Stack<Example?>) CloneOrChange_Stack_GExample_C63_g(_NonNullableStackOfNullables ?? throw new UnsetNonnullableLazinatorException(), l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location279*/if ((!exploreOnlyDeserializedChildren && NullableArrayOfNonNullables != null) || (_NullableArrayOfNonNullables_Accessed && _NullableArrayOfNonNullables != null))
            {
                _NullableArrayOfNonNullables = (Example[]?) CloneOrChange_Example_B_b_C63(_NullableArrayOfNonNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true) ?? throw new UnsetNonnullableLazinatorException(), true);
            }
            /*Location280*/if ((!exploreOnlyDeserializedChildren && NullableArrayOfNullables != null) || (_NullableArrayOfNullables_Accessed && _NullableArrayOfNullables != null))
            {
                _NullableArrayOfNullables = (Example?[]?) CloneOrChange_Example_C63_B_b_C63(_NullableArrayOfNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location281*/if ((!exploreOnlyDeserializedChildren && NullableDictionaryWithNonNullable != null) || (_NullableDictionaryWithNonNullable_Accessed && _NullableDictionaryWithNonNullable != null))
            {
                _NullableDictionaryWithNonNullable = (Dictionary<int, Example>?) CloneOrChange_Dictionary_Gint_c_C32Example_g_C63(_NullableDictionaryWithNonNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true) ?? throw new UnsetNonnullableLazinatorException(), true);
            }
            /*Location282*/if ((!exploreOnlyDeserializedChildren && NullableDictionaryWithNullable != null) || (_NullableDictionaryWithNullable_Accessed && _NullableDictionaryWithNullable != null))
            {
                _NullableDictionaryWithNullable = (Dictionary<int, Example?>?) CloneOrChange_Dictionary_Gint_c_C32Example_C63_g_C63(_NullableDictionaryWithNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location283*/if ((!exploreOnlyDeserializedChildren && NullableListOfNonNullables != null) || (_NullableListOfNonNullables_Accessed && _NullableListOfNonNullables != null))
            {
                _NullableListOfNonNullables = (List<Example>?) CloneOrChange_List_GExample_g_C63(_NullableListOfNonNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true) ?? throw new UnsetNonnullableLazinatorException(), true);
            }
            /*Location284*/if ((!exploreOnlyDeserializedChildren && NullableListOfNullables != null) || (_NullableListOfNullables_Accessed && _NullableListOfNullables != null))
            {
                _NullableListOfNullables = (List<Example?>?) CloneOrChange_List_GExample_C63_g_C63(_NullableListOfNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location285*/if ((!exploreOnlyDeserializedChildren && NullableQueueOfNonNullables != null) || (_NullableQueueOfNonNullables_Accessed && _NullableQueueOfNonNullables != null))
            {
                _NullableQueueOfNonNullables = (Queue<Example>?) CloneOrChange_Queue_GExample_g_C63(_NullableQueueOfNonNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true) ?? throw new UnsetNonnullableLazinatorException(), true);
            }
            /*Location286*/if ((!exploreOnlyDeserializedChildren && NullableQueueOfNullables != null) || (_NullableQueueOfNullables_Accessed && _NullableQueueOfNullables != null))
            {
                _NullableQueueOfNullables = (Queue<Example?>?) CloneOrChange_Queue_GExample_C63_g_C63(_NullableQueueOfNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location287*/if ((!exploreOnlyDeserializedChildren && NullableRegularTupleWithNonNullable != null) || (_NullableRegularTupleWithNonNullable_Accessed && _NullableRegularTupleWithNonNullable != null))
            {
                _NullableRegularTupleWithNonNullable = (Tuple<Example, int>?) CloneOrChange_Tuple_GExample_c_C32int_g_C63(_NullableRegularTupleWithNonNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true) ?? throw new UnsetNonnullableLazinatorException(), true);
            }
            /*Location288*/if ((!exploreOnlyDeserializedChildren && NullableRegularTupleWithNullable != null) || (_NullableRegularTupleWithNullable_Accessed && _NullableRegularTupleWithNullable != null))
            {
                _NullableRegularTupleWithNullable = (Tuple<Example?, int>?) CloneOrChange_Tuple_GExample_C63_c_C32int_g_C63(_NullableRegularTupleWithNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location289*/if ((!exploreOnlyDeserializedChildren && NullableStackOfNonNullables != null) || (_NullableStackOfNonNullables_Accessed && _NullableStackOfNonNullables != null))
            {
                _NullableStackOfNonNullables = (Stack<Example>?) CloneOrChange_Stack_GExample_g_C63(_NullableStackOfNonNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true) ?? throw new UnsetNonnullableLazinatorException(), true);
            }
            /*Location290*/if ((!exploreOnlyDeserializedChildren && NullableStackOfNullables != null) || (_NullableStackOfNullables_Accessed && _NullableStackOfNullables != null))
            {
                _NullableStackOfNullables = (Stack<Example?>?) CloneOrChange_Stack_GExample_C63_g_C63(_NullableStackOfNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location291*/if ((!exploreOnlyDeserializedChildren && NullableValueTupleWithNonNullable != null) || (_NullableValueTupleWithNonNullable_Accessed && _NullableValueTupleWithNonNullable != null))
            {
                _NullableValueTupleWithNonNullable = ((Example, int)?) CloneOrChange__PExample_c_C32int_p_C63(_NullableValueTupleWithNonNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true) ?? throw new UnsetNonnullableLazinatorException(), true);
            }
            /*Location292*/if ((!exploreOnlyDeserializedChildren && NullableValueTupleWithNullable != null) || (_NullableValueTupleWithNullable_Accessed && _NullableValueTupleWithNullable != null))
            {
                _NullableValueTupleWithNullable = ((Example?, int)?) CloneOrChange__PExample_C63_c_C32int_p_C63(_NullableValueTupleWithNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location293*/var deserialized_ValueTupleWithNonNullable = ValueTupleWithNonNullable;
            _ValueTupleWithNonNullable = ((Example, int)) CloneOrChange__PExample_c_C32int_p(_ValueTupleWithNonNullable ?? throw new UnsetNonnullableLazinatorException(), l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true) ?? throw new UnsetNonnullableLazinatorException(), true);/*Location294*/var deserialized_ValueTupleWithNullable = ValueTupleWithNullable;
            _ValueTupleWithNullable = ((Example?, int)) CloneOrChange__PExample_C63_c_C32int_p(_ValueTupleWithNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location295*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_ByteReadOnlySpan = ByteReadOnlySpan;
                if (!_ByteReadOnlySpan_Accessed)
                {
                    ByteReadOnlySpan = deserialized_ByteReadOnlySpan;
                }
            }
            /*Location296*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_NonNullableMemoryOfBytes = NonNullableMemoryOfBytes;
            }
            /*Location297*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_NonNullableReadOnlyMemoryOfBytes = NonNullableReadOnlyMemoryOfBytes;
            }
            /*Location298*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_NullableMemoryOfBytes = NullableMemoryOfBytes;
            }
            /*Location299*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_NullableReadOnlyMemoryOfBytes = NullableReadOnlyMemoryOfBytes;
            }
            /*Location300*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location301*/
        public virtual void FreeInMemoryObjects()
        {
            _ByteReadOnlySpan = default;
            _ExplicitlyNullable = default;
            _ExplicitlyNullableInterface = default;
            _NonNullableMemoryOfBytes = default;
            _NonNullableReadOnlyMemoryOfBytes = default;
            _NonNullableStruct = default;
            _NullableArrayOfNonNullables = default;
            _NullableArrayOfNullables = default;
            _NullableDictionaryWithNonNullable = default;
            _NullableDictionaryWithNullable = default;
            _NullableLazinatorListNonNullable = default;
            _NullableLazinatorListNullable = default;
            _NullableListOfNonNullables = default;
            _NullableListOfNullables = default;
            _NullableMemoryOfBytes = default;
            _NullableQueueOfNonNullables = default;
            _NullableQueueOfNullables = default;
            _NullableReadOnlyMemoryOfBytes = default;
            _NullableRegularTupleWithNonNullable = default;
            _NullableRegularTupleWithNullable = default;
            _NullableStackOfNonNullables = default;
            _NullableStackOfNullables = default;
            _NullableStruct = default;
            _NullableValueTupleWithNonNullable = default;
            _NullableValueTupleWithNullable = default;
            _ValueTupleWithNullable = default;
            _ByteReadOnlySpan_Accessed = _ExplicitlyNullable_Accessed = _ExplicitlyNullableInterface_Accessed = _NonNullableArrayOfNonNullables_Accessed = _NonNullableArrayOfNullables_Accessed = _NonNullableClass_Accessed = _NonNullableDictionaryWithNonNullable_Accessed = _NonNullableDictionaryWithNullable_Accessed = _NonNullableInterface_Accessed = _NonNullableLazinatorListNonNullable_Accessed = _NonNullableLazinatorListNullable_Accessed = _NonNullableListOfNonNullables_Accessed = _NonNullableListOfNullables_Accessed = _NonNullableMemoryOfBytes_Accessed = _NonNullableQueueOfNonNullables_Accessed = _NonNullableQueueOfNullables_Accessed = _NonNullableReadOnlyMemoryOfBytes_Accessed = _NonNullableRegularTupleWithNonNullable_Accessed = _NonNullableRegularTupleWithNullable_Accessed = _NonNullableStackOfNonNullables_Accessed = _NonNullableStackOfNullables_Accessed = _NonNullableStruct_Accessed = _NullableArrayOfNonNullables_Accessed = _NullableArrayOfNullables_Accessed = _NullableDictionaryWithNonNullable_Accessed = _NullableDictionaryWithNullable_Accessed = _NullableLazinatorListNonNullable_Accessed = _NullableLazinatorListNullable_Accessed = _NullableListOfNonNullables_Accessed = _NullableListOfNullables_Accessed = _NullableMemoryOfBytes_Accessed = _NullableQueueOfNonNullables_Accessed = _NullableQueueOfNullables_Accessed = _NullableReadOnlyMemoryOfBytes_Accessed = _NullableRegularTupleWithNonNullable_Accessed = _NullableRegularTupleWithNullable_Accessed = _NullableStackOfNonNullables_Accessed = _NullableStackOfNullables_Accessed = _NullableStruct_Accessed = _NullableValueTupleWithNonNullable_Accessed = _NullableValueTupleWithNullable_Accessed = _ValueTupleWithNonNullable_Accessed = _ValueTupleWithNullable_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location302*/
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1085;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location303*/public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location304*/_MyInt = span.ToDecompressedInt(ref bytesSoFar);
            /*Location305*/_MyNullableInt = span.ToDecompressedNullableInt(ref bytesSoFar);
            /*Location306*/_NonNullableString = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            /*Location307*/_NullableString = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            /*Location308*/_ByteReadOnlySpan_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location309*/_ExplicitlyNullable_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location310*/_ExplicitlyNullableInterface_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location311*/_NonNullableArrayOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location312*/_NonNullableArrayOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location313*/_NonNullableClass_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location314*/_NonNullableDictionaryWithNonNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location315*/_NonNullableDictionaryWithNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location316*/_NonNullableInterface_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location317*/_NonNullableLazinatorListNonNullable_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location318*/_NonNullableLazinatorListNullable_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location319*/_NonNullableListOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location320*/_NonNullableListOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location321*/_NonNullableMemoryOfBytes_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location322*/_NonNullableQueueOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location323*/_NonNullableQueueOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location324*/_NonNullableReadOnlyMemoryOfBytes_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location325*/_NonNullableRegularTupleWithNonNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location326*/_NonNullableRegularTupleWithNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location327*/_NonNullableStackOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location328*/_NonNullableStackOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location329*/_NonNullableStruct_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location330*/_NullableArrayOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location331*/_NullableArrayOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location332*/_NullableDictionaryWithNonNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location333*/_NullableDictionaryWithNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location334*/_NullableLazinatorListNonNullable_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location335*/_NullableLazinatorListNullable_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location336*/_NullableListOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location337*/_NullableListOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location338*/_NullableMemoryOfBytes_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location339*/_NullableQueueOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location340*/_NullableQueueOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location341*/_NullableReadOnlyMemoryOfBytes_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location342*/_NullableRegularTupleWithNonNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location343*/_NullableRegularTupleWithNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location344*/_NullableStackOfNonNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location345*/_NullableStackOfNullables_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location346*/_NullableStruct_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location347*/_NullableValueTupleWithNonNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location348*/_NullableValueTupleWithNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location349*/_ValueTupleWithNonNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location350*/_ValueTupleWithNullable_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location351*/_NullableEnabledContext_EndByteIndex = bytesSoFar;
            /*Location352*/        }
            
            /*Location353*/public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location354*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location355*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location356*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location357*/}
                    /*Location358*/}
                    /*Location359*/
                    public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location360*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location361*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location362*/}
                                /*Location363*/
                                _NonNullableStruct_Accessed = false;
                                _NullableStruct_Accessed = false;/*Location364*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location365*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location366*/}
                            /*Location367*/
                            protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                /*Location368*/if (_ExplicitlyNullable_Accessed && _ExplicitlyNullable != null)
                                {
                                    ExplicitlyNullable!.UpdateStoredBuffer(ref writer, startPosition + _ExplicitlyNullable_ByteIndex + sizeof(int), _ExplicitlyNullable_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location369*/if (_ExplicitlyNullableInterface_Accessed && _ExplicitlyNullableInterface != null)
                                {
                                    ExplicitlyNullableInterface!.UpdateStoredBuffer(ref writer, startPosition + _ExplicitlyNullableInterface_ByteIndex + sizeof(int), _ExplicitlyNullableInterface_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location370*/if (_NonNullableClass_Accessed && _NonNullableClass != null)
                                {
                                    NonNullableClass!.UpdateStoredBuffer(ref writer, startPosition + _NonNullableClass_ByteIndex + sizeof(int), _NonNullableClass_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location371*/if (_NonNullableInterface_Accessed && _NonNullableInterface != null)
                                {
                                    NonNullableInterface!.UpdateStoredBuffer(ref writer, startPosition + _NonNullableInterface_ByteIndex + sizeof(int), _NonNullableInterface_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location372*/if (_NonNullableLazinatorListNonNullable_Accessed && _NonNullableLazinatorListNonNullable != null)
                                {
                                    NonNullableLazinatorListNonNullable!.UpdateStoredBuffer(ref writer, startPosition + _NonNullableLazinatorListNonNullable_ByteIndex + sizeof(int), _NonNullableLazinatorListNonNullable_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location373*/if (_NonNullableLazinatorListNullable_Accessed && _NonNullableLazinatorListNullable != null)
                                {
                                    NonNullableLazinatorListNullable!.UpdateStoredBuffer(ref writer, startPosition + _NonNullableLazinatorListNullable_ByteIndex + sizeof(int), _NonNullableLazinatorListNullable_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location374*/NonNullableStruct!.UpdateStoredBuffer(ref writer, startPosition + _NonNullableStruct_ByteIndex + sizeof(int), _NonNullableStruct_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                /*Location375*/if (_NullableLazinatorListNonNullable_Accessed && _NullableLazinatorListNonNullable != null)
                                {
                                    NullableLazinatorListNonNullable!.UpdateStoredBuffer(ref writer, startPosition + _NullableLazinatorListNonNullable_ByteIndex + sizeof(int), _NullableLazinatorListNonNullable_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location376*/if (_NullableLazinatorListNullable_Accessed && _NullableLazinatorListNullable != null)
                                {
                                    NullableLazinatorListNullable!.UpdateStoredBuffer(ref writer, startPosition + _NullableLazinatorListNullable_ByteIndex + sizeof(int), _NullableLazinatorListNullable_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location377*/if (_NullableStruct_Accessed && _NullableStruct != null)
                                {
                                    NullableStruct!.Value.UpdateStoredBuffer(ref writer, startPosition + _NullableStruct_ByteIndex + sizeof(int), _NullableStruct_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location378*/if (_NonNullableArrayOfNonNullables_Accessed && _NonNullableArrayOfNonNullables != null)
                                {
                                    _NonNullableArrayOfNonNullables = (Example[]) CloneOrChange_Example_B_b(_NonNullableArrayOfNonNullables ?? throw new UnsetNonnullableLazinatorException(), l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location379*/if (_NonNullableArrayOfNullables_Accessed && _NonNullableArrayOfNullables != null)
                                {
                                    _NonNullableArrayOfNullables = (Example?[]) CloneOrChange_Example_C63_B_b(_NonNullableArrayOfNullables ?? throw new UnsetNonnullableLazinatorException(), l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location380*/if (_NonNullableDictionaryWithNonNullable_Accessed && _NonNullableDictionaryWithNonNullable != null)
                                {
                                    _NonNullableDictionaryWithNonNullable = (Dictionary<int, Example>) CloneOrChange_Dictionary_Gint_c_C32Example_g(_NonNullableDictionaryWithNonNullable ?? throw new UnsetNonnullableLazinatorException(), l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location381*/if (_NonNullableDictionaryWithNullable_Accessed && _NonNullableDictionaryWithNullable != null)
                                {
                                    _NonNullableDictionaryWithNullable = (Dictionary<int, Example?>) CloneOrChange_Dictionary_Gint_c_C32Example_C63_g(_NonNullableDictionaryWithNullable ?? throw new UnsetNonnullableLazinatorException(), l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location382*/if (_NonNullableListOfNonNullables_Accessed && _NonNullableListOfNonNullables != null)
                                {
                                    _NonNullableListOfNonNullables = (List<Example>) CloneOrChange_List_GExample_g(_NonNullableListOfNonNullables ?? throw new UnsetNonnullableLazinatorException(), l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location383*/if (_NonNullableListOfNullables_Accessed && _NonNullableListOfNullables != null)
                                {
                                    _NonNullableListOfNullables = (List<Example?>) CloneOrChange_List_GExample_C63_g(_NonNullableListOfNullables ?? throw new UnsetNonnullableLazinatorException(), l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location384*/if (_NonNullableQueueOfNonNullables_Accessed && _NonNullableQueueOfNonNullables != null)
                                {
                                    _NonNullableQueueOfNonNullables = (Queue<Example>) CloneOrChange_Queue_GExample_g(_NonNullableQueueOfNonNullables ?? throw new UnsetNonnullableLazinatorException(), l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location385*/if (_NonNullableQueueOfNullables_Accessed && _NonNullableQueueOfNullables != null)
                                {
                                    _NonNullableQueueOfNullables = (Queue<Example?>) CloneOrChange_Queue_GExample_C63_g(_NonNullableQueueOfNullables ?? throw new UnsetNonnullableLazinatorException(), l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location386*/if (_NonNullableRegularTupleWithNonNullable_Accessed && _NonNullableRegularTupleWithNonNullable != null)
                                {
                                    _NonNullableRegularTupleWithNonNullable = (Tuple<Example, int>) CloneOrChange_Tuple_GExample_c_C32int_g(_NonNullableRegularTupleWithNonNullable ?? throw new UnsetNonnullableLazinatorException(), l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location387*/if (_NonNullableRegularTupleWithNullable_Accessed && _NonNullableRegularTupleWithNullable != null)
                                {
                                    _NonNullableRegularTupleWithNullable = (Tuple<Example?, int>) CloneOrChange_Tuple_GExample_C63_c_C32int_g(_NonNullableRegularTupleWithNullable ?? throw new UnsetNonnullableLazinatorException(), l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location388*/if (_NonNullableStackOfNonNullables_Accessed && _NonNullableStackOfNonNullables != null)
                                {
                                    _NonNullableStackOfNonNullables = (Stack<Example>) CloneOrChange_Stack_GExample_g(_NonNullableStackOfNonNullables ?? throw new UnsetNonnullableLazinatorException(), l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location389*/if (_NonNullableStackOfNullables_Accessed && _NonNullableStackOfNullables != null)
                                {
                                    _NonNullableStackOfNullables = (Stack<Example?>) CloneOrChange_Stack_GExample_C63_g(_NonNullableStackOfNullables ?? throw new UnsetNonnullableLazinatorException(), l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location390*/if (_NullableArrayOfNonNullables_Accessed && _NullableArrayOfNonNullables != null)
                                {
                                    _NullableArrayOfNonNullables = (Example[]?) CloneOrChange_Example_B_b_C63(_NullableArrayOfNonNullables, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location391*/if (_NullableArrayOfNullables_Accessed && _NullableArrayOfNullables != null)
                                {
                                    _NullableArrayOfNullables = (Example?[]?) CloneOrChange_Example_C63_B_b_C63(_NullableArrayOfNullables, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location392*/if (_NullableDictionaryWithNonNullable_Accessed && _NullableDictionaryWithNonNullable != null)
                                {
                                    _NullableDictionaryWithNonNullable = (Dictionary<int, Example>?) CloneOrChange_Dictionary_Gint_c_C32Example_g_C63(_NullableDictionaryWithNonNullable, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location393*/if (_NullableDictionaryWithNullable_Accessed && _NullableDictionaryWithNullable != null)
                                {
                                    _NullableDictionaryWithNullable = (Dictionary<int, Example?>?) CloneOrChange_Dictionary_Gint_c_C32Example_C63_g_C63(_NullableDictionaryWithNullable, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location394*/if (_NullableListOfNonNullables_Accessed && _NullableListOfNonNullables != null)
                                {
                                    _NullableListOfNonNullables = (List<Example>?) CloneOrChange_List_GExample_g_C63(_NullableListOfNonNullables, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location395*/if (_NullableListOfNullables_Accessed && _NullableListOfNullables != null)
                                {
                                    _NullableListOfNullables = (List<Example?>?) CloneOrChange_List_GExample_C63_g_C63(_NullableListOfNullables, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location396*/if (_NullableQueueOfNonNullables_Accessed && _NullableQueueOfNonNullables != null)
                                {
                                    _NullableQueueOfNonNullables = (Queue<Example>?) CloneOrChange_Queue_GExample_g_C63(_NullableQueueOfNonNullables, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location397*/if (_NullableQueueOfNullables_Accessed && _NullableQueueOfNullables != null)
                                {
                                    _NullableQueueOfNullables = (Queue<Example?>?) CloneOrChange_Queue_GExample_C63_g_C63(_NullableQueueOfNullables, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location398*/if (_NullableRegularTupleWithNonNullable_Accessed && _NullableRegularTupleWithNonNullable != null)
                                {
                                    _NullableRegularTupleWithNonNullable = (Tuple<Example, int>?) CloneOrChange_Tuple_GExample_c_C32int_g_C63(_NullableRegularTupleWithNonNullable, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location399*/if (_NullableRegularTupleWithNullable_Accessed && _NullableRegularTupleWithNullable != null)
                                {
                                    _NullableRegularTupleWithNullable = (Tuple<Example?, int>?) CloneOrChange_Tuple_GExample_C63_c_C32int_g_C63(_NullableRegularTupleWithNullable, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location400*/if (_NullableStackOfNonNullables_Accessed && _NullableStackOfNonNullables != null)
                                {
                                    _NullableStackOfNonNullables = (Stack<Example>?) CloneOrChange_Stack_GExample_g_C63(_NullableStackOfNonNullables, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location401*/if (_NullableStackOfNullables_Accessed && _NullableStackOfNullables != null)
                                {
                                    _NullableStackOfNullables = (Stack<Example?>?) CloneOrChange_Stack_GExample_C63_g_C63(_NullableStackOfNullables, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location402*/if (_NullableValueTupleWithNonNullable_Accessed && _NullableValueTupleWithNonNullable != null)
                                {
                                    _NullableValueTupleWithNonNullable = ((Example, int)?) CloneOrChange__PExample_c_C32int_p_C63(_NullableValueTupleWithNonNullable, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location403*/if (_NullableValueTupleWithNullable_Accessed && _NullableValueTupleWithNullable != null)
                                {
                                    _NullableValueTupleWithNullable = ((Example?, int)?) CloneOrChange__PExample_C63_c_C32int_p_C63(_NullableValueTupleWithNullable, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location404*/_ValueTupleWithNonNullable = ((Example, int)) CloneOrChange__PExample_c_C32int_p(_ValueTupleWithNonNullable ?? throw new UnsetNonnullableLazinatorException(), l => l.RemoveBufferInHierarchy(), true);/*Location405*/_ValueTupleWithNullable = ((Example?, int)) CloneOrChange__PExample_C63_c_C32int_p(_ValueTupleWithNullable, l => l.RemoveBufferInHierarchy(), true);/*Location406*/}
                                
                                /*Location407*/
                                protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    int startPosition = writer.Position;
                                    int startOfObjectPosition = 0;
                                    // header information
                                    /*Location408*/if (includeUniqueID)
                                    {
                                        if (!ContainsOpenGenericParameters)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                        }
                                        else
                                        {
                                            WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                                        }
                                    }
                                    /*Location409*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                    writer.Write((byte)includeChildrenMode);
                                    /*Location410*/// write properties
                                    /*Location411*/CompressedIntegralTypes.WriteCompressedInt(ref writer, _MyInt);
                                    /*Location412*/CompressedIntegralTypes.WriteCompressedNullableInt(ref writer, _MyNullableInt);
                                    /*Location413*/EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _NonNullableString);
                                    /*Location414*/EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _NullableString);
                                    /*Location415*/startOfObjectPosition = writer.Position;
                                    /*Location416*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ByteReadOnlySpan_Accessed)
                                    {
                                        var deserialized = ByteReadOnlySpan;
                                    }
                                    /*Location417*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _ByteReadOnlySpan, isBelievedDirty: _ByteReadOnlySpan_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _ByteReadOnlySpan_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ByteReadOnlySpan_ByteIndex, _ByteReadOnlySpan_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_ReadOnlySpan_Gbyte_g(ref w, _ByteReadOnlySpan.Span,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location418*/if (updateStoredBuffer)
                                    {
                                        _ByteReadOnlySpan_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location419*/startOfObjectPosition = writer.Position;
                                    /*Location420*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ExplicitlyNullable_Accessed)
                                        {
                                            var deserialized = ExplicitlyNullable;
                                        }
                                        WriteChild(ref writer, ref _ExplicitlyNullable, includeChildrenMode, _ExplicitlyNullable_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ExplicitlyNullable_ByteIndex, _ExplicitlyNullable_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location421*/if (updateStoredBuffer)
                                    {
                                        _ExplicitlyNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location422*/startOfObjectPosition = writer.Position;
                                    /*Location423*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ExplicitlyNullableInterface_Accessed)
                                        {
                                            var deserialized = ExplicitlyNullableInterface;
                                        }
                                        WriteChild(ref writer, ref _ExplicitlyNullableInterface, includeChildrenMode, _ExplicitlyNullableInterface_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ExplicitlyNullableInterface_ByteIndex, _ExplicitlyNullableInterface_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location424*/if (updateStoredBuffer)
                                    {
                                        _ExplicitlyNullableInterface_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location425*/startOfObjectPosition = writer.Position;
                                    /*Location426*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableArrayOfNonNullables_Accessed)
                                    {
                                        var deserialized = NonNullableArrayOfNonNullables;
                                    }
                                    /*Location427*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableArrayOfNonNullables, isBelievedDirty: _NonNullableArrayOfNonNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableArrayOfNonNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableArrayOfNonNullables_ByteIndex, _NonNullableArrayOfNonNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Example_B_b(ref w, _NonNullableArrayOfNonNullables ?? throw new UnsetNonnullableLazinatorException(),
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location428*/if (updateStoredBuffer)
                                    {
                                        _NonNullableArrayOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location429*/startOfObjectPosition = writer.Position;
                                    /*Location430*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableArrayOfNullables_Accessed)
                                    {
                                        var deserialized = NonNullableArrayOfNullables;
                                    }
                                    /*Location431*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableArrayOfNullables, isBelievedDirty: _NonNullableArrayOfNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableArrayOfNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableArrayOfNullables_ByteIndex, _NonNullableArrayOfNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Example_C63_B_b(ref w, _NonNullableArrayOfNullables ?? throw new UnsetNonnullableLazinatorException(),
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location432*/if (updateStoredBuffer)
                                    {
                                        _NonNullableArrayOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location433*/startOfObjectPosition = writer.Position;
                                    /*Location434*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableClass_Accessed)
                                        {
                                            var deserialized = NonNullableClass;
                                        }
                                        WriteChild(ref writer, ref _NonNullableClass, includeChildrenMode, _NonNullableClass_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NonNullableClass_ByteIndex, _NonNullableClass_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location435*/if (updateStoredBuffer)
                                    {
                                        _NonNullableClass_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location436*/startOfObjectPosition = writer.Position;
                                    /*Location437*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableDictionaryWithNonNullable_Accessed)
                                    {
                                        var deserialized = NonNullableDictionaryWithNonNullable;
                                    }
                                    /*Location438*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableDictionaryWithNonNullable, isBelievedDirty: _NonNullableDictionaryWithNonNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableDictionaryWithNonNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableDictionaryWithNonNullable_ByteIndex, _NonNullableDictionaryWithNonNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Dictionary_Gint_c_C32Example_g(ref w, _NonNullableDictionaryWithNonNullable ?? throw new UnsetNonnullableLazinatorException(),
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location439*/if (updateStoredBuffer)
                                    {
                                        _NonNullableDictionaryWithNonNullable_ByteIndex = startOfObjectPosition - startPosition;if (_NonNullableDictionaryWithNonNullable_Accessed && _NonNullableDictionaryWithNonNullable != null)
                                        {
                                            _NonNullableDictionaryWithNonNullable = (Dictionary<int, Example>) CloneOrChange_Dictionary_Gint_c_C32Example_g(_NonNullableDictionaryWithNonNullable ?? throw new UnsetNonnullableLazinatorException(), l => l.RemoveBufferInHierarchy(), true);
                                        }
                                        
                                    }
                                    /*Location440*/startOfObjectPosition = writer.Position;
                                    /*Location441*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableDictionaryWithNullable_Accessed)
                                    {
                                        var deserialized = NonNullableDictionaryWithNullable;
                                    }
                                    /*Location442*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableDictionaryWithNullable, isBelievedDirty: _NonNullableDictionaryWithNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableDictionaryWithNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableDictionaryWithNullable_ByteIndex, _NonNullableDictionaryWithNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Dictionary_Gint_c_C32Example_C63_g(ref w, _NonNullableDictionaryWithNullable ?? throw new UnsetNonnullableLazinatorException(),
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location443*/if (updateStoredBuffer)
                                    {
                                        _NonNullableDictionaryWithNullable_ByteIndex = startOfObjectPosition - startPosition;if (_NonNullableDictionaryWithNullable_Accessed && _NonNullableDictionaryWithNullable != null)
                                        {
                                            _NonNullableDictionaryWithNullable = (Dictionary<int, Example?>) CloneOrChange_Dictionary_Gint_c_C32Example_C63_g(_NonNullableDictionaryWithNullable ?? throw new UnsetNonnullableLazinatorException(), l => l.RemoveBufferInHierarchy(), true);
                                        }
                                        
                                    }
                                    /*Location444*/startOfObjectPosition = writer.Position;
                                    /*Location445*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableInterface_Accessed)
                                        {
                                            var deserialized = NonNullableInterface;
                                        }
                                        WriteChild(ref writer, ref _NonNullableInterface, includeChildrenMode, _NonNullableInterface_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NonNullableInterface_ByteIndex, _NonNullableInterface_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location446*/if (updateStoredBuffer)
                                    {
                                        _NonNullableInterface_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location447*/startOfObjectPosition = writer.Position;
                                    /*Location448*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableLazinatorListNonNullable_Accessed)
                                        {
                                            var deserialized = NonNullableLazinatorListNonNullable;
                                        }
                                        WriteChild(ref writer, ref _NonNullableLazinatorListNonNullable, includeChildrenMode, _NonNullableLazinatorListNonNullable_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NonNullableLazinatorListNonNullable_ByteIndex, _NonNullableLazinatorListNonNullable_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location449*/if (updateStoredBuffer)
                                    {
                                        _NonNullableLazinatorListNonNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location450*/startOfObjectPosition = writer.Position;
                                    /*Location451*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableLazinatorListNullable_Accessed)
                                        {
                                            var deserialized = NonNullableLazinatorListNullable;
                                        }
                                        WriteChild(ref writer, ref _NonNullableLazinatorListNullable, includeChildrenMode, _NonNullableLazinatorListNullable_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NonNullableLazinatorListNullable_ByteIndex, _NonNullableLazinatorListNullable_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location452*/if (updateStoredBuffer)
                                    {
                                        _NonNullableLazinatorListNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location453*/startOfObjectPosition = writer.Position;
                                    /*Location454*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableListOfNonNullables_Accessed)
                                    {
                                        var deserialized = NonNullableListOfNonNullables;
                                    }
                                    /*Location455*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableListOfNonNullables, isBelievedDirty: _NonNullableListOfNonNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableListOfNonNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableListOfNonNullables_ByteIndex, _NonNullableListOfNonNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_List_GExample_g(ref w, _NonNullableListOfNonNullables ?? throw new UnsetNonnullableLazinatorException(),
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location456*/if (updateStoredBuffer)
                                    {
                                        _NonNullableListOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location457*/startOfObjectPosition = writer.Position;
                                    /*Location458*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableListOfNullables_Accessed)
                                    {
                                        var deserialized = NonNullableListOfNullables;
                                    }
                                    /*Location459*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableListOfNullables, isBelievedDirty: _NonNullableListOfNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableListOfNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableListOfNullables_ByteIndex, _NonNullableListOfNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_List_GExample_C63_g(ref w, _NonNullableListOfNullables ?? throw new UnsetNonnullableLazinatorException(),
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location460*/if (updateStoredBuffer)
                                    {
                                        _NonNullableListOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location461*/startOfObjectPosition = writer.Position;
                                    /*Location462*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableMemoryOfBytes_Accessed)
                                    {
                                        var deserialized = NonNullableMemoryOfBytes;
                                    }
                                    /*Location463*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableMemoryOfBytes, isBelievedDirty: _NonNullableMemoryOfBytes_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableMemoryOfBytes_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableMemoryOfBytes_ByteIndex, _NonNullableMemoryOfBytes_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Memory_Gbyte_g(ref w, _NonNullableMemoryOfBytes,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location464*/if (updateStoredBuffer)
                                    {
                                        _NonNullableMemoryOfBytes_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location465*/startOfObjectPosition = writer.Position;
                                    /*Location466*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableQueueOfNonNullables_Accessed)
                                    {
                                        var deserialized = NonNullableQueueOfNonNullables;
                                    }
                                    /*Location467*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableQueueOfNonNullables, isBelievedDirty: _NonNullableQueueOfNonNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableQueueOfNonNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableQueueOfNonNullables_ByteIndex, _NonNullableQueueOfNonNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Queue_GExample_g(ref w, _NonNullableQueueOfNonNullables ?? throw new UnsetNonnullableLazinatorException(),
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location468*/if (updateStoredBuffer)
                                    {
                                        _NonNullableQueueOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location469*/startOfObjectPosition = writer.Position;
                                    /*Location470*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableQueueOfNullables_Accessed)
                                    {
                                        var deserialized = NonNullableQueueOfNullables;
                                    }
                                    /*Location471*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableQueueOfNullables, isBelievedDirty: _NonNullableQueueOfNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableQueueOfNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableQueueOfNullables_ByteIndex, _NonNullableQueueOfNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Queue_GExample_C63_g(ref w, _NonNullableQueueOfNullables ?? throw new UnsetNonnullableLazinatorException(),
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location472*/if (updateStoredBuffer)
                                    {
                                        _NonNullableQueueOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location473*/startOfObjectPosition = writer.Position;
                                    /*Location474*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableReadOnlyMemoryOfBytes_Accessed)
                                    {
                                        var deserialized = NonNullableReadOnlyMemoryOfBytes;
                                    }
                                    /*Location475*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableReadOnlyMemoryOfBytes, isBelievedDirty: _NonNullableReadOnlyMemoryOfBytes_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableReadOnlyMemoryOfBytes_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableReadOnlyMemoryOfBytes_ByteIndex, _NonNullableReadOnlyMemoryOfBytes_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_ReadOnlyMemory_Gbyte_g(ref w, _NonNullableReadOnlyMemoryOfBytes,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location476*/if (updateStoredBuffer)
                                    {
                                        _NonNullableReadOnlyMemoryOfBytes_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location477*/startOfObjectPosition = writer.Position;
                                    /*Location478*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableRegularTupleWithNonNullable_Accessed)
                                    {
                                        var deserialized = NonNullableRegularTupleWithNonNullable;
                                    }
                                    /*Location479*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableRegularTupleWithNonNullable, isBelievedDirty: _NonNullableRegularTupleWithNonNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableRegularTupleWithNonNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableRegularTupleWithNonNullable_ByteIndex, _NonNullableRegularTupleWithNonNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Tuple_GExample_c_C32int_g(ref w, _NonNullableRegularTupleWithNonNullable ?? throw new UnsetNonnullableLazinatorException(),
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location480*/if (updateStoredBuffer)
                                    {
                                        _NonNullableRegularTupleWithNonNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location481*/startOfObjectPosition = writer.Position;
                                    /*Location482*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableRegularTupleWithNullable_Accessed)
                                    {
                                        var deserialized = NonNullableRegularTupleWithNullable;
                                    }
                                    /*Location483*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableRegularTupleWithNullable, isBelievedDirty: _NonNullableRegularTupleWithNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableRegularTupleWithNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableRegularTupleWithNullable_ByteIndex, _NonNullableRegularTupleWithNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Tuple_GExample_C63_c_C32int_g(ref w, _NonNullableRegularTupleWithNullable ?? throw new UnsetNonnullableLazinatorException(),
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location484*/if (updateStoredBuffer)
                                    {
                                        _NonNullableRegularTupleWithNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location485*/startOfObjectPosition = writer.Position;
                                    /*Location486*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableStackOfNonNullables_Accessed)
                                    {
                                        var deserialized = NonNullableStackOfNonNullables;
                                    }
                                    /*Location487*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableStackOfNonNullables, isBelievedDirty: _NonNullableStackOfNonNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableStackOfNonNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableStackOfNonNullables_ByteIndex, _NonNullableStackOfNonNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Stack_GExample_g(ref w, _NonNullableStackOfNonNullables ?? throw new UnsetNonnullableLazinatorException(),
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location488*/if (updateStoredBuffer)
                                    {
                                        _NonNullableStackOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location489*/startOfObjectPosition = writer.Position;
                                    /*Location490*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableStackOfNullables_Accessed)
                                    {
                                        var deserialized = NonNullableStackOfNullables;
                                    }
                                    /*Location491*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NonNullableStackOfNullables, isBelievedDirty: _NonNullableStackOfNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NonNullableStackOfNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableStackOfNullables_ByteIndex, _NonNullableStackOfNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Stack_GExample_C63_g(ref w, _NonNullableStackOfNullables ?? throw new UnsetNonnullableLazinatorException(),
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location492*/if (updateStoredBuffer)
                                    {
                                        _NonNullableStackOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location493*/startOfObjectPosition = writer.Position;
                                    /*Location494*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableStruct_Accessed)
                                        {
                                            var deserialized = NonNullableStruct;
                                        }
                                        WriteChild(ref writer, ref _NonNullableStruct, includeChildrenMode, _NonNullableStruct_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NonNullableStruct_ByteIndex, _NonNullableStruct_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location495*/if (updateStoredBuffer)
                                    {
                                        _NonNullableStruct_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location496*/startOfObjectPosition = writer.Position;
                                    /*Location497*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableArrayOfNonNullables_Accessed)
                                    {
                                        var deserialized = NullableArrayOfNonNullables;
                                    }
                                    /*Location498*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableArrayOfNonNullables, isBelievedDirty: _NullableArrayOfNonNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableArrayOfNonNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableArrayOfNonNullables_ByteIndex, _NullableArrayOfNonNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Example_B_b_C63(ref w, _NullableArrayOfNonNullables,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location499*/if (updateStoredBuffer)
                                    {
                                        _NullableArrayOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location500*/startOfObjectPosition = writer.Position;
                                    /*Location501*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableArrayOfNullables_Accessed)
                                    {
                                        var deserialized = NullableArrayOfNullables;
                                    }
                                    /*Location502*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableArrayOfNullables, isBelievedDirty: _NullableArrayOfNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableArrayOfNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableArrayOfNullables_ByteIndex, _NullableArrayOfNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Example_C63_B_b_C63(ref w, _NullableArrayOfNullables,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location503*/if (updateStoredBuffer)
                                    {
                                        _NullableArrayOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location504*/startOfObjectPosition = writer.Position;
                                    /*Location505*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableDictionaryWithNonNullable_Accessed)
                                    {
                                        var deserialized = NullableDictionaryWithNonNullable;
                                    }
                                    /*Location506*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableDictionaryWithNonNullable, isBelievedDirty: _NullableDictionaryWithNonNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableDictionaryWithNonNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableDictionaryWithNonNullable_ByteIndex, _NullableDictionaryWithNonNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Dictionary_Gint_c_C32Example_g_C63(ref w, _NullableDictionaryWithNonNullable,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location507*/if (updateStoredBuffer)
                                    {
                                        _NullableDictionaryWithNonNullable_ByteIndex = startOfObjectPosition - startPosition;if (_NullableDictionaryWithNonNullable_Accessed && _NullableDictionaryWithNonNullable != null)
                                        {
                                            _NullableDictionaryWithNonNullable = (Dictionary<int, Example>?) CloneOrChange_Dictionary_Gint_c_C32Example_g_C63(_NullableDictionaryWithNonNullable, l => l.RemoveBufferInHierarchy(), true);
                                        }
                                        
                                    }
                                    /*Location508*/startOfObjectPosition = writer.Position;
                                    /*Location509*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableDictionaryWithNullable_Accessed)
                                    {
                                        var deserialized = NullableDictionaryWithNullable;
                                    }
                                    /*Location510*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableDictionaryWithNullable, isBelievedDirty: _NullableDictionaryWithNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableDictionaryWithNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableDictionaryWithNullable_ByteIndex, _NullableDictionaryWithNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Dictionary_Gint_c_C32Example_C63_g_C63(ref w, _NullableDictionaryWithNullable,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location511*/if (updateStoredBuffer)
                                    {
                                        _NullableDictionaryWithNullable_ByteIndex = startOfObjectPosition - startPosition;if (_NullableDictionaryWithNullable_Accessed && _NullableDictionaryWithNullable != null)
                                        {
                                            _NullableDictionaryWithNullable = (Dictionary<int, Example?>?) CloneOrChange_Dictionary_Gint_c_C32Example_C63_g_C63(_NullableDictionaryWithNullable, l => l.RemoveBufferInHierarchy(), true);
                                        }
                                        
                                    }
                                    /*Location512*/startOfObjectPosition = writer.Position;
                                    /*Location513*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableLazinatorListNonNullable_Accessed)
                                        {
                                            var deserialized = NullableLazinatorListNonNullable;
                                        }
                                        WriteChild(ref writer, ref _NullableLazinatorListNonNullable, includeChildrenMode, _NullableLazinatorListNonNullable_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NullableLazinatorListNonNullable_ByteIndex, _NullableLazinatorListNonNullable_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location514*/if (updateStoredBuffer)
                                    {
                                        _NullableLazinatorListNonNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location515*/startOfObjectPosition = writer.Position;
                                    /*Location516*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableLazinatorListNullable_Accessed)
                                        {
                                            var deserialized = NullableLazinatorListNullable;
                                        }
                                        WriteChild(ref writer, ref _NullableLazinatorListNullable, includeChildrenMode, _NullableLazinatorListNullable_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NullableLazinatorListNullable_ByteIndex, _NullableLazinatorListNullable_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location517*/if (updateStoredBuffer)
                                    {
                                        _NullableLazinatorListNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location518*/startOfObjectPosition = writer.Position;
                                    /*Location519*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableListOfNonNullables_Accessed)
                                    {
                                        var deserialized = NullableListOfNonNullables;
                                    }
                                    /*Location520*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableListOfNonNullables, isBelievedDirty: _NullableListOfNonNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableListOfNonNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableListOfNonNullables_ByteIndex, _NullableListOfNonNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_List_GExample_g_C63(ref w, _NullableListOfNonNullables,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location521*/if (updateStoredBuffer)
                                    {
                                        _NullableListOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location522*/startOfObjectPosition = writer.Position;
                                    /*Location523*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableListOfNullables_Accessed)
                                    {
                                        var deserialized = NullableListOfNullables;
                                    }
                                    /*Location524*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableListOfNullables, isBelievedDirty: _NullableListOfNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableListOfNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableListOfNullables_ByteIndex, _NullableListOfNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_List_GExample_C63_g_C63(ref w, _NullableListOfNullables,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location525*/if (updateStoredBuffer)
                                    {
                                        _NullableListOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location526*/startOfObjectPosition = writer.Position;
                                    /*Location527*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableMemoryOfBytes_Accessed)
                                    {
                                        var deserialized = NullableMemoryOfBytes;
                                    }
                                    /*Location528*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableMemoryOfBytes, isBelievedDirty: _NullableMemoryOfBytes_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableMemoryOfBytes_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableMemoryOfBytes_ByteIndex, _NullableMemoryOfBytes_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Memory_Gbyte_g_C63(ref w, _NullableMemoryOfBytes,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location529*/if (updateStoredBuffer)
                                    {
                                        _NullableMemoryOfBytes_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location530*/startOfObjectPosition = writer.Position;
                                    /*Location531*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableQueueOfNonNullables_Accessed)
                                    {
                                        var deserialized = NullableQueueOfNonNullables;
                                    }
                                    /*Location532*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableQueueOfNonNullables, isBelievedDirty: _NullableQueueOfNonNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableQueueOfNonNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableQueueOfNonNullables_ByteIndex, _NullableQueueOfNonNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Queue_GExample_g_C63(ref w, _NullableQueueOfNonNullables,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location533*/if (updateStoredBuffer)
                                    {
                                        _NullableQueueOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location534*/startOfObjectPosition = writer.Position;
                                    /*Location535*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableQueueOfNullables_Accessed)
                                    {
                                        var deserialized = NullableQueueOfNullables;
                                    }
                                    /*Location536*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableQueueOfNullables, isBelievedDirty: _NullableQueueOfNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableQueueOfNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableQueueOfNullables_ByteIndex, _NullableQueueOfNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Queue_GExample_C63_g_C63(ref w, _NullableQueueOfNullables,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location537*/if (updateStoredBuffer)
                                    {
                                        _NullableQueueOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location538*/startOfObjectPosition = writer.Position;
                                    /*Location539*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableReadOnlyMemoryOfBytes_Accessed)
                                    {
                                        var deserialized = NullableReadOnlyMemoryOfBytes;
                                    }
                                    /*Location540*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableReadOnlyMemoryOfBytes, isBelievedDirty: _NullableReadOnlyMemoryOfBytes_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableReadOnlyMemoryOfBytes_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableReadOnlyMemoryOfBytes_ByteIndex, _NullableReadOnlyMemoryOfBytes_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_ReadOnlyMemory_Gbyte_g_C63(ref w, _NullableReadOnlyMemoryOfBytes,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location541*/if (updateStoredBuffer)
                                    {
                                        _NullableReadOnlyMemoryOfBytes_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location542*/startOfObjectPosition = writer.Position;
                                    /*Location543*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableRegularTupleWithNonNullable_Accessed)
                                    {
                                        var deserialized = NullableRegularTupleWithNonNullable;
                                    }
                                    /*Location544*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableRegularTupleWithNonNullable, isBelievedDirty: _NullableRegularTupleWithNonNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableRegularTupleWithNonNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableRegularTupleWithNonNullable_ByteIndex, _NullableRegularTupleWithNonNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Tuple_GExample_c_C32int_g_C63(ref w, _NullableRegularTupleWithNonNullable,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location545*/if (updateStoredBuffer)
                                    {
                                        _NullableRegularTupleWithNonNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location546*/startOfObjectPosition = writer.Position;
                                    /*Location547*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableRegularTupleWithNullable_Accessed)
                                    {
                                        var deserialized = NullableRegularTupleWithNullable;
                                    }
                                    /*Location548*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableRegularTupleWithNullable, isBelievedDirty: _NullableRegularTupleWithNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableRegularTupleWithNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableRegularTupleWithNullable_ByteIndex, _NullableRegularTupleWithNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Tuple_GExample_C63_c_C32int_g_C63(ref w, _NullableRegularTupleWithNullable,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location549*/if (updateStoredBuffer)
                                    {
                                        _NullableRegularTupleWithNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location550*/startOfObjectPosition = writer.Position;
                                    /*Location551*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableStackOfNonNullables_Accessed)
                                    {
                                        var deserialized = NullableStackOfNonNullables;
                                    }
                                    /*Location552*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableStackOfNonNullables, isBelievedDirty: _NullableStackOfNonNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableStackOfNonNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableStackOfNonNullables_ByteIndex, _NullableStackOfNonNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Stack_GExample_g_C63(ref w, _NullableStackOfNonNullables,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location553*/if (updateStoredBuffer)
                                    {
                                        _NullableStackOfNonNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location554*/startOfObjectPosition = writer.Position;
                                    /*Location555*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableStackOfNullables_Accessed)
                                    {
                                        var deserialized = NullableStackOfNullables;
                                    }
                                    /*Location556*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableStackOfNullables, isBelievedDirty: _NullableStackOfNullables_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableStackOfNullables_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableStackOfNullables_ByteIndex, _NullableStackOfNullables_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Stack_GExample_C63_g_C63(ref w, _NullableStackOfNullables,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location557*/if (updateStoredBuffer)
                                    {
                                        _NullableStackOfNullables_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location558*/startOfObjectPosition = writer.Position;
                                    /*Location559*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableStruct_Accessed)
                                        {
                                            var deserialized = NullableStruct;
                                        }
                                        if (_NullableStruct == null)
                                        {
                                            WriteNullChild(ref writer, false, false);
                                        }
                                        else
                                        {
                                            var copy = _NullableStruct.Value;
                                            WriteChild(ref writer, ref copy, includeChildrenMode, _NullableStruct_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NullableStruct_ByteIndex, _NullableStruct_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                            _NullableStruct = copy;
                                        }
                                        
                                    }
                                    
                                    /*Location560*/if (updateStoredBuffer)
                                    {
                                        _NullableStruct_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location561*/startOfObjectPosition = writer.Position;
                                    /*Location562*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableValueTupleWithNonNullable_Accessed)
                                    {
                                        var deserialized = NullableValueTupleWithNonNullable;
                                    }
                                    /*Location563*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableValueTupleWithNonNullable, isBelievedDirty: _NullableValueTupleWithNonNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableValueTupleWithNonNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableValueTupleWithNonNullable_ByteIndex, _NullableValueTupleWithNonNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes__PExample_c_C32int_p_C63(ref w, _NullableValueTupleWithNonNullable,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location564*/if (updateStoredBuffer)
                                    {
                                        _NullableValueTupleWithNonNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location565*/startOfObjectPosition = writer.Position;
                                    /*Location566*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_NullableValueTupleWithNullable_Accessed)
                                    {
                                        var deserialized = NullableValueTupleWithNullable;
                                    }
                                    /*Location567*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _NullableValueTupleWithNullable, isBelievedDirty: _NullableValueTupleWithNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _NullableValueTupleWithNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableValueTupleWithNullable_ByteIndex, _NullableValueTupleWithNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes__PExample_C63_c_C32int_p_C63(ref w, _NullableValueTupleWithNullable,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location568*/if (updateStoredBuffer)
                                    {
                                        _NullableValueTupleWithNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location569*/startOfObjectPosition = writer.Position;
                                    /*Location570*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ValueTupleWithNonNullable_Accessed)
                                    {
                                        var deserialized = ValueTupleWithNonNullable;
                                    }
                                    /*Location571*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _ValueTupleWithNonNullable, isBelievedDirty: _ValueTupleWithNonNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _ValueTupleWithNonNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ValueTupleWithNonNullable_ByteIndex, _ValueTupleWithNonNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes__PExample_c_C32int_p(ref w, _ValueTupleWithNonNullable ?? throw new UnsetNonnullableLazinatorException(),
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location572*/if (updateStoredBuffer)
                                    {
                                        _ValueTupleWithNonNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location573*/startOfObjectPosition = writer.Position;
                                    /*Location574*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ValueTupleWithNullable_Accessed)
                                    {
                                        var deserialized = ValueTupleWithNullable;
                                    }
                                    /*Location575*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _ValueTupleWithNullable, isBelievedDirty: _ValueTupleWithNullable_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _ValueTupleWithNullable_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ValueTupleWithNullable_ByteIndex, _ValueTupleWithNullable_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes__PExample_C63_c_C32int_p(ref w, _ValueTupleWithNullable,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location576*/if (updateStoredBuffer)
                                    {
                                        _ValueTupleWithNullable_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location577*/if (updateStoredBuffer)
                                    {
                                        /*Location578*/_NullableEnabledContext_EndByteIndex = writer.Position - startPosition;
                                        /*Location579*/}
                                        /*Location580*/}
                                        /*Location581*/
                                        /* Conversion of supported collections and tuples */
                                        /*Location582*/
                                        private static void ConvertToBytes_ReadOnlySpan_Gbyte_g(ref BinaryBufferWriter writer, ReadOnlySpan<byte> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            ReadOnlySpan<byte> toConvert = (itemToConvert);
                                            for (int i = 0; i < toConvert.Length; i++)
                                            {
                                                writer.Write(toConvert[i]);
                                            }
                                        }
                                        /*Location583*/private static ReadOnlySpan<byte> CloneOrChange_ReadOnlySpan_Gbyte_g(ReadOnlySpan<byte> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            var clone = new Span<byte>(new byte[itemToClone.Length * sizeof(byte)]);
                                            itemToClone.CopyTo(clone);
                                            return clone;
                                        }
                                        /*Location584*/
                                        private static Example[] ConvertFromBytes_Example_B_b(LazinatorMemory storage)
                                        {
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            Example[] collection = new Example[collectionLength];
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                var item = new Example();
                                                item.DeserializeLazinator(childData);
                                                collection[itemIndex] = item;
                                                bytesSoFar += lengthCollectionMember;
                                            }
                                            
                                            return collection;
                                        }/*Location585*/
                                        
                                        private static void ConvertToBytes_Example_B_b(ref BinaryBufferWriter writer, Example[] itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(Example[]))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
                                            int itemToConvertCount = itemToConvert.Length;
                                            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                            {
                                                void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                            }
                                        }
                                        /*Location586*/
                                        private static Example[] CloneOrChange_Example_B_b(Example[] itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            int collectionLength = itemToClone.Length;
                                            Example[] collection = avoidCloningIfPossible ? itemToClone : new Example[collectionLength];
                                            int itemToCloneCount = itemToClone.Length;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                if (avoidCloningIfPossible)
                                                {
                                                    if (itemToClone[itemIndex] != null)
                                                    {
                                                        itemToClone[itemIndex] = (Example) (cloneOrChangeFunc(itemToClone[itemIndex]) ?? throw new UnsetNonnullableLazinatorException());
                                                    }
                                                    continue;
                                                }
                                                var itemCopied = (Example) (cloneOrChangeFunc(itemToClone[itemIndex]) ?? throw new UnsetNonnullableLazinatorException());
                                                collection[itemIndex] = itemCopied;
                                            }
                                            return collection;
                                        }
                                        /*Location587*/
                                        private static Example?[] ConvertFromBytes_Example_C63_B_b(LazinatorMemory storage)
                                        {
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            Example?[] collection = new Example?[collectionLength];
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                if (lengthCollectionMember == 0)
                                                {
                                                    collection[itemIndex] = null;
                                                }
                                                else
                                                {
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                    var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                    collection[itemIndex] = item;
                                                }
                                                bytesSoFar += lengthCollectionMember;
                                            }
                                            
                                            return collection;
                                        }/*Location588*/
                                        
                                        private static void ConvertToBytes_Example_C63_B_b(ref BinaryBufferWriter writer, Example?[] itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(Example?[]))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
                                            int itemToConvertCount = itemToConvert.Length;
                                            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                            {
                                                if (itemToConvert[itemIndex] == null)
                                                {
                                                    writer.Write((uint)0);
                                                }
                                                else 
                                                {
                                                    
                                                    void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                }
                                                
                                            }
                                        }
                                        /*Location589*/
                                        private static Example?[] CloneOrChange_Example_C63_B_b(Example?[] itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            int collectionLength = itemToClone.Length;
                                            Example?[] collection = avoidCloningIfPossible ? itemToClone : new Example?[collectionLength];
                                            int itemToCloneCount = itemToClone.Length;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                if (avoidCloningIfPossible)
                                                {
                                                    if (itemToClone[itemIndex] != null)
                                                    {
                                                        itemToClone[itemIndex] = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                    }
                                                    continue;
                                                }
                                                if (itemToClone[itemIndex] == null)
                                                {
                                                    collection[itemIndex] = null;
                                                }
                                                else
                                                {
                                                    var itemCopied = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                    collection[itemIndex] = itemCopied;
                                                }
                                                
                                            }
                                            return collection;
                                        }
                                        /*Location590*/
                                        private static Dictionary<int, Example> ConvertFromBytes_Dictionary_Gint_c_C32Example_g(LazinatorMemory storage)
                                        {
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            Dictionary<int, Example> collection = new Dictionary<int, Example>(collectionLength);
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                var item = ConvertFromBytes_KeyValuePair_Gint_c_C32Example_g(childData);
                                                collection.Add(item.Key, item.Value);
                                                bytesSoFar += lengthCollectionMember;
                                            }
                                            
                                            return collection;
                                        }/*Location591*/
                                        
                                        private static void ConvertToBytes_Dictionary_Gint_c_C32Example_g(ref BinaryBufferWriter writer, Dictionary<int, Example> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(Dictionary<int, Example>))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                            foreach (var item in itemToConvert)
                                            {
                                                void action(ref BinaryBufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32Example_g(ref w, item, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                            }
                                        }
                                        /*Location592*/
                                        private static Dictionary<int, Example> CloneOrChange_Dictionary_Gint_c_C32Example_g(Dictionary<int, Example> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            int collectionLength = itemToClone.Count;
                                            Dictionary<int, Example> collection = new Dictionary<int, Example>(collectionLength);
                                            foreach (var item in itemToClone)
                                            {
                                                var itemCopied = (KeyValuePair<int, Example>) CloneOrChange_KeyValuePair_Gint_c_C32Example_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                                                collection.Add(itemCopied.Key, itemCopied.Value);
                                            }
                                            return collection;
                                        }
                                        /*Location593*/
                                        private static KeyValuePair<int, Example> ConvertFromBytes_KeyValuePair_Gint_c_C32Example_g(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default;
                                            }
                                            ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                            
                                            int bytesSoFar = 0;
                                            /*Location594*/
                                            int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                            /*Location595*/
                                            Example item2;
                                            int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                            if (lengthCollectionMember_item2 != 0)
                                            {
                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                item2 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                                            }
                                            else 
                                            { 
                                                throw new UnsetNonnullableLazinatorException(); 
                                            }
                                            bytesSoFar += lengthCollectionMember_item2;
                                            /*Location596*/
                                            var tupleType = new KeyValuePair<int, Example>(item1, item2);
                                            
                                            return tupleType;
                                        }
                                        
                                        private static void ConvertToBytes_KeyValuePair_Gint_c_C32Example_g(ref BinaryBufferWriter writer, KeyValuePair<int, Example> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            /*Location597*/
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Key);
                                            /*Location598*/
                                            if (itemToConvert.Value == null)
                                            {
                                                writer.Write((uint)0);
                                            }
                                            else
                                            {
                                                void actionValue(ref BinaryBufferWriter w) => itemToConvert.Value.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                WriteToBinaryWithIntLengthPrefix(ref writer, actionValue);
                                            };
                                            /*Location599*/}
                                            /*Location600*/
                                            private static KeyValuePair<int, Example> CloneOrChange_KeyValuePair_Gint_c_C32Example_g(KeyValuePair<int, Example> itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                            {
                                                return new KeyValuePair<int, Example>((int) (itemToConvert.Key),(Example) (cloneOrChangeFunc((itemToConvert.Value)) ?? throw new UnsetNonnullableLazinatorException()));
                                            }
                                            /*Location601*/
                                            private static Dictionary<int, Example?> ConvertFromBytes_Dictionary_Gint_c_C32Example_C63_g(LazinatorMemory storage)
                                            {
                                                ReadOnlySpan<byte> span = storage.Span;
                                                int bytesSoFar = 0;
                                                int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                
                                                Dictionary<int, Example?> collection = new Dictionary<int, Example?>(collectionLength);
                                                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                {
                                                    int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                    var item = ConvertFromBytes_KeyValuePair_Gint_c_C32Example_C63_g(childData);
                                                    collection.Add(item.Key, item.Value);
                                                    bytesSoFar += lengthCollectionMember;
                                                }
                                                
                                                return collection;
                                            }/*Location602*/
                                            
                                            private static void ConvertToBytes_Dictionary_Gint_c_C32Example_C63_g(ref BinaryBufferWriter writer, Dictionary<int, Example?> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                            {
                                                if (itemToConvert == default(Dictionary<int, Example?>))
                                                {
                                                    return;
                                                }
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                foreach (var item in itemToConvert)
                                                {
                                                    void action(ref BinaryBufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32Example_C63_g(ref w, item, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                }
                                            }
                                            /*Location603*/
                                            private static Dictionary<int, Example?> CloneOrChange_Dictionary_Gint_c_C32Example_C63_g(Dictionary<int, Example?> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                            {
                                                int collectionLength = itemToClone.Count;
                                                Dictionary<int, Example?> collection = new Dictionary<int, Example?>(collectionLength);
                                                foreach (var item in itemToClone)
                                                {
                                                    var itemCopied = (KeyValuePair<int, Example?>) CloneOrChange_KeyValuePair_Gint_c_C32Example_C63_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                                                    collection.Add(itemCopied.Key, itemCopied.Value);
                                                }
                                                return collection;
                                            }
                                            /*Location604*/
                                            private static KeyValuePair<int, Example?> ConvertFromBytes_KeyValuePair_Gint_c_C32Example_C63_g(LazinatorMemory storage)
                                            {
                                                if (storage.Length == 0)
                                                {
                                                    return default;
                                                }
                                                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                
                                                int bytesSoFar = 0;
                                                /*Location605*/
                                                int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                                /*Location606*/
                                                Example? item2 = default(Example?);
                                                int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                                if (lengthCollectionMember_item2 != 0)
                                                {
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                    item2 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                }
                                                bytesSoFar += lengthCollectionMember_item2;
                                                /*Location607*/
                                                var tupleType = new KeyValuePair<int, Example?>(item1, item2);
                                                
                                                return tupleType;
                                            }
                                            
                                            private static void ConvertToBytes_KeyValuePair_Gint_c_C32Example_C63_g(ref BinaryBufferWriter writer, KeyValuePair<int, Example?> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                            {
                                                /*Location608*/
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Key);
                                                /*Location609*/
                                                if (itemToConvert.Value == null)
                                                {
                                                    writer.Write((uint)0);
                                                }
                                                else
                                                {
                                                    void actionValue(ref BinaryBufferWriter w) => itemToConvert.Value.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, actionValue);
                                                };
                                                /*Location610*/}
                                                /*Location611*/
                                                private static KeyValuePair<int, Example?> CloneOrChange_KeyValuePair_Gint_c_C32Example_C63_g(KeyValuePair<int, Example?> itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    return new KeyValuePair<int, Example?>((int) (itemToConvert.Key),(Example?) (cloneOrChangeFunc((itemToConvert.Value))));
                                                }
                                                /*Location612*/
                                                private static List<Example> ConvertFromBytes_List_GExample_g(LazinatorMemory storage)
                                                {
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    List<Example> collection = new List<Example>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = new Example();
                                                        item.DeserializeLazinator(childData);
                                                        collection.Add(item);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location613*/
                                                
                                                private static void ConvertToBytes_List_GExample_g(ref BinaryBufferWriter writer, List<Example> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(List<Example>))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location614*/
                                                private static List<Example> CloneOrChange_List_GExample_g(List<Example> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    int collectionLength = itemToClone.Count;
                                                    List<Example> collection = avoidCloningIfPossible ? itemToClone : new List<Example>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (avoidCloningIfPossible)
                                                        {
                                                            if (itemToClone[itemIndex] != null)
                                                            {
                                                                itemToClone[itemIndex] = (Example) (cloneOrChangeFunc(itemToClone[itemIndex]) ?? throw new UnsetNonnullableLazinatorException());
                                                            }
                                                            continue;
                                                        }
                                                        var itemCopied = (Example) (cloneOrChangeFunc(itemToClone[itemIndex]) ?? throw new UnsetNonnullableLazinatorException());
                                                        collection.Add(itemCopied);
                                                    }
                                                    return collection;
                                                }
                                                /*Location615*/
                                                private static List<Example?> ConvertFromBytes_List_GExample_C63_g(LazinatorMemory storage)
                                                {
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    List<Example?> collection = new List<Example?>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember == 0)
                                                        {
                                                            collection.Add(null);
                                                        }
                                                        else
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                            var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                            collection.Add(item);
                                                        }
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location616*/
                                                
                                                private static void ConvertToBytes_List_GExample_C63_g(ref BinaryBufferWriter writer, List<Example?> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(List<Example?>))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        if (itemToConvert[itemIndex] == null)
                                                        {
                                                            writer.Write((uint)0);
                                                        }
                                                        else 
                                                        {
                                                            
                                                            void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                            WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                        }
                                                        
                                                    }
                                                }
                                                /*Location617*/
                                                private static List<Example?> CloneOrChange_List_GExample_C63_g(List<Example?> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    int collectionLength = itemToClone.Count;
                                                    List<Example?> collection = avoidCloningIfPossible ? itemToClone : new List<Example?>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (avoidCloningIfPossible)
                                                        {
                                                            if (itemToClone[itemIndex] != null)
                                                            {
                                                                itemToClone[itemIndex] = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                            }
                                                            continue;
                                                        }
                                                        if (itemToClone[itemIndex] == null)
                                                        {
                                                            collection.Add(null);
                                                        }
                                                        else
                                                        {
                                                            var itemCopied = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                            collection.Add(itemCopied);
                                                        }
                                                        
                                                    }
                                                    return collection;
                                                }
                                                /*Location618*/
                                                private static Memory<byte> ConvertFromBytes_Memory_Gbyte_g(LazinatorMemory storage)
                                                {
                                                    /*Location619*/return storage.Memory.ToArray();
                                                }/*Location620*/
                                                
                                                private static void ConvertToBytes_Memory_Gbyte_g(ref BinaryBufferWriter writer, Memory<byte> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    /*Location621*/writer.Write(itemToConvert.Span);
                                                }
                                                /*Location622*/
                                                private static Memory<byte> CloneOrChange_Memory_Gbyte_g(Memory<byte> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    int collectionLength = itemToClone.Length;
                                                    Memory<byte> collection = new Memory<byte>(new byte[collectionLength]);
                                                    var collectionAsSpan = collection.Span;
                                                    var itemToCloneSpan = itemToClone.Span;
                                                    int itemToCloneCount = itemToCloneSpan.Length;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        var itemCopied = (byte) itemToCloneSpan[itemIndex];
                                                        collectionAsSpan[itemIndex] = itemCopied;
                                                    }
                                                    return collection;
                                                }
                                                /*Location623*/
                                                private static Queue<Example> ConvertFromBytes_Queue_GExample_g(LazinatorMemory storage)
                                                {
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Queue<Example> collection = new Queue<Example>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = new Example();
                                                        item.DeserializeLazinator(childData);
                                                        collection.Enqueue(item);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location624*/
                                                
                                                private static void ConvertToBytes_Queue_GExample_g(ref BinaryBufferWriter writer, Queue<Example> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Queue<Example>))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    var q = System.Linq.Enumerable.ToList(itemToConvert);
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => q[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location625*/
                                                private static Queue<Example> CloneOrChange_Queue_GExample_g(Queue<Example> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    int collectionLength = itemToClone.Count;
                                                    Queue<Example> collection = new Queue<Example>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    var q = System.Linq.Enumerable.ToList(itemToClone);
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        var itemCopied = (Example) (cloneOrChangeFunc(q[itemIndex]) ?? throw new UnsetNonnullableLazinatorException());
                                                        collection.Enqueue(itemCopied);
                                                    }
                                                    return collection;
                                                }
                                                /*Location626*/
                                                private static Queue<Example?> ConvertFromBytes_Queue_GExample_C63_g(LazinatorMemory storage)
                                                {
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Queue<Example?> collection = new Queue<Example?>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember == 0)
                                                        {
                                                            collection.Enqueue(null);
                                                        }
                                                        else
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                            var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                            collection.Enqueue(item);
                                                        }
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location627*/
                                                
                                                private static void ConvertToBytes_Queue_GExample_C63_g(ref BinaryBufferWriter writer, Queue<Example?> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Queue<Example?>))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    var q = System.Linq.Enumerable.ToList(itemToConvert);
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        if (q[itemIndex] == null)
                                                        {
                                                            writer.Write((uint)0);
                                                        }
                                                        else 
                                                        {
                                                            
                                                            void action(ref BinaryBufferWriter w) => q[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                            WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                        }
                                                        
                                                    }
                                                }
                                                /*Location628*/
                                                private static Queue<Example?> CloneOrChange_Queue_GExample_C63_g(Queue<Example?> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    int collectionLength = itemToClone.Count;
                                                    Queue<Example?> collection = new Queue<Example?>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    var q = System.Linq.Enumerable.ToList(itemToClone);
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (q[itemIndex] == null)
                                                        {
                                                            collection.Enqueue(null);
                                                        }
                                                        else
                                                        {
                                                            var itemCopied = (Example?) (cloneOrChangeFunc(q[itemIndex]));
                                                            collection.Enqueue(itemCopied);
                                                        }
                                                        
                                                    }
                                                    return collection;
                                                }
                                                /*Location629*/
                                                private static ReadOnlyMemory<byte> ConvertFromBytes_ReadOnlyMemory_Gbyte_g(LazinatorMemory storage)
                                                {
                                                    /*Location630*/return storage.Memory.ToArray();
                                                }/*Location631*/
                                                
                                                private static void ConvertToBytes_ReadOnlyMemory_Gbyte_g(ref BinaryBufferWriter writer, ReadOnlyMemory<byte> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    /*Location632*/writer.Write(itemToConvert.Span);
                                                }
                                                /*Location633*/
                                                private static ReadOnlyMemory<byte> CloneOrChange_ReadOnlyMemory_Gbyte_g(ReadOnlyMemory<byte> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    int collectionLength = itemToClone.Length;
                                                    Memory<byte> collection = new Memory<byte>(new byte[collectionLength]);
                                                    var collectionAsSpan = collection.Span;
                                                    var itemToCloneSpan = itemToClone.Span;
                                                    int itemToCloneCount = itemToCloneSpan.Length;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        var itemCopied = (byte) itemToCloneSpan[itemIndex];
                                                        collectionAsSpan[itemIndex] = itemCopied;
                                                    }
                                                    return collection;
                                                }
                                                /*Location634*/
                                                private static Stack<Example> ConvertFromBytes_Stack_GExample_g(LazinatorMemory storage)
                                                {
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Stack<Example> collection = new Stack<Example>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = new Example();
                                                        item.DeserializeLazinator(childData);
                                                        collection.Push(item);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location635*/
                                                
                                                private static void ConvertToBytes_Stack_GExample_g(ref BinaryBufferWriter writer, Stack<Example> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Stack<Example>))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    var stackReversed = System.Linq.Enumerable.ToList(itemToConvert);
                                                    stackReversed.Reverse();
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => stackReversed[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location636*/
                                                private static Stack<Example> CloneOrChange_Stack_GExample_g(Stack<Example> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    int collectionLength = itemToClone.Count;
                                                    Stack<Example> collection = new Stack<Example>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    var stackReversed = System.Linq.Enumerable.ToList(itemToClone);
                                                    stackReversed.Reverse();
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        var itemCopied = (Example) (cloneOrChangeFunc(stackReversed[itemIndex]) ?? throw new UnsetNonnullableLazinatorException());
                                                        collection.Push(itemCopied);
                                                    }
                                                    return collection;
                                                }
                                                /*Location637*/
                                                private static Stack<Example?> ConvertFromBytes_Stack_GExample_C63_g(LazinatorMemory storage)
                                                {
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Stack<Example?> collection = new Stack<Example?>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember == 0)
                                                        {
                                                            collection.Push(null);
                                                        }
                                                        else
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                            var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                            collection.Push(item);
                                                        }
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location638*/
                                                
                                                private static void ConvertToBytes_Stack_GExample_C63_g(ref BinaryBufferWriter writer, Stack<Example?> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Stack<Example?>))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    var stackReversed = System.Linq.Enumerable.ToList(itemToConvert);
                                                    stackReversed.Reverse();
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        if (stackReversed[itemIndex] == null)
                                                        {
                                                            writer.Write((uint)0);
                                                        }
                                                        else 
                                                        {
                                                            
                                                            void action(ref BinaryBufferWriter w) => stackReversed[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                            WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                        }
                                                        
                                                    }
                                                }
                                                /*Location639*/
                                                private static Stack<Example?> CloneOrChange_Stack_GExample_C63_g(Stack<Example?> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    int collectionLength = itemToClone.Count;
                                                    Stack<Example?> collection = new Stack<Example?>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    var stackReversed = System.Linq.Enumerable.ToList(itemToClone);
                                                    stackReversed.Reverse();
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (stackReversed[itemIndex] == null)
                                                        {
                                                            collection.Push(null);
                                                        }
                                                        else
                                                        {
                                                            var itemCopied = (Example?) (cloneOrChangeFunc(stackReversed[itemIndex]));
                                                            collection.Push(itemCopied);
                                                        }
                                                        
                                                    }
                                                    return collection;
                                                }
                                                /*Location640*/
                                                private static Example[]? ConvertFromBytes_Example_B_b_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(Example[]?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Example[]? collection = new Example[collectionLength];
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = new Example();
                                                        item.DeserializeLazinator(childData);
                                                        collection[itemIndex] = item;
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location641*/
                                                
                                                private static void ConvertToBytes_Example_B_b_C63(ref BinaryBufferWriter writer, Example[]? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Example[]?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
                                                    int itemToConvertCount = itemToConvert.Length;
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location642*/
                                                private static Example[]? CloneOrChange_Example_B_b_C63(Example[]? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Length;
                                                    Example[]? collection = avoidCloningIfPossible ? itemToClone : new Example[collectionLength];
                                                    int itemToCloneCount = itemToClone.Length;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (avoidCloningIfPossible)
                                                        {
                                                            if (itemToClone[itemIndex] != null)
                                                            {
                                                                itemToClone[itemIndex] = (Example) (cloneOrChangeFunc(itemToClone[itemIndex]) ?? throw new UnsetNonnullableLazinatorException());
                                                            }
                                                            continue;
                                                        }
                                                        var itemCopied = (Example) (cloneOrChangeFunc(itemToClone[itemIndex]) ?? throw new UnsetNonnullableLazinatorException());
                                                        collection[itemIndex] = itemCopied;
                                                    }
                                                    return collection;
                                                }
                                                /*Location643*/
                                                private static Example?[]? ConvertFromBytes_Example_C63_B_b_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(Example?[]?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Example?[]? collection = new Example?[collectionLength];
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember == 0)
                                                        {
                                                            collection[itemIndex] = null;
                                                        }
                                                        else
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                            var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                            collection[itemIndex] = item;
                                                        }
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location644*/
                                                
                                                private static void ConvertToBytes_Example_C63_B_b_C63(ref BinaryBufferWriter writer, Example?[]? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Example?[]?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
                                                    int itemToConvertCount = itemToConvert.Length;
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        if (itemToConvert[itemIndex] == null)
                                                        {
                                                            writer.Write((uint)0);
                                                        }
                                                        else 
                                                        {
                                                            
                                                            void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                            WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                        }
                                                        
                                                    }
                                                }
                                                /*Location645*/
                                                private static Example?[]? CloneOrChange_Example_C63_B_b_C63(Example?[]? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Length;
                                                    Example?[]? collection = avoidCloningIfPossible ? itemToClone : new Example?[collectionLength];
                                                    int itemToCloneCount = itemToClone.Length;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (avoidCloningIfPossible)
                                                        {
                                                            if (itemToClone[itemIndex] != null)
                                                            {
                                                                itemToClone[itemIndex] = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                            }
                                                            continue;
                                                        }
                                                        if (itemToClone[itemIndex] == null)
                                                        {
                                                            collection[itemIndex] = null;
                                                        }
                                                        else
                                                        {
                                                            var itemCopied = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                            collection[itemIndex] = itemCopied;
                                                        }
                                                        
                                                    }
                                                    return collection;
                                                }
                                                /*Location646*/
                                                private static Dictionary<int, Example>? ConvertFromBytes_Dictionary_Gint_c_C32Example_g_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(Dictionary<int, Example>?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Dictionary<int, Example>? collection = new Dictionary<int, Example>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = ConvertFromBytes_KeyValuePair_Gint_c_C32Example_g(childData);
                                                        collection.Add(item.Key, item.Value);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location647*/
                                                
                                                private static void ConvertToBytes_Dictionary_Gint_c_C32Example_g_C63(ref BinaryBufferWriter writer, Dictionary<int, Example>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Dictionary<int, Example>?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    foreach (var item in itemToConvert)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32Example_g(ref w, item, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location648*/
                                                private static Dictionary<int, Example>? CloneOrChange_Dictionary_Gint_c_C32Example_g_C63(Dictionary<int, Example>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    Dictionary<int, Example>? collection = new Dictionary<int, Example>(collectionLength);
                                                    foreach (var item in itemToClone)
                                                    {
                                                        var itemCopied = (KeyValuePair<int, Example>) CloneOrChange_KeyValuePair_Gint_c_C32Example_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                                                        collection.Add(itemCopied.Key, itemCopied.Value);
                                                    }
                                                    return collection;
                                                }
                                                /*Location649*/
                                                private static Dictionary<int, Example?>? ConvertFromBytes_Dictionary_Gint_c_C32Example_C63_g_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(Dictionary<int, Example?>?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Dictionary<int, Example?>? collection = new Dictionary<int, Example?>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = ConvertFromBytes_KeyValuePair_Gint_c_C32Example_C63_g(childData);
                                                        collection.Add(item.Key, item.Value);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location650*/
                                                
                                                private static void ConvertToBytes_Dictionary_Gint_c_C32Example_C63_g_C63(ref BinaryBufferWriter writer, Dictionary<int, Example?>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Dictionary<int, Example?>?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    foreach (var item in itemToConvert)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32Example_C63_g(ref w, item, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location651*/
                                                private static Dictionary<int, Example?>? CloneOrChange_Dictionary_Gint_c_C32Example_C63_g_C63(Dictionary<int, Example?>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    Dictionary<int, Example?>? collection = new Dictionary<int, Example?>(collectionLength);
                                                    foreach (var item in itemToClone)
                                                    {
                                                        var itemCopied = (KeyValuePair<int, Example?>) CloneOrChange_KeyValuePair_Gint_c_C32Example_C63_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                                                        collection.Add(itemCopied.Key, itemCopied.Value);
                                                    }
                                                    return collection;
                                                }
                                                /*Location652*/
                                                private static List<Example>? ConvertFromBytes_List_GExample_g_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(List<Example>?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    List<Example>? collection = new List<Example>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = new Example();
                                                        item.DeserializeLazinator(childData);
                                                        collection.Add(item);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location653*/
                                                
                                                private static void ConvertToBytes_List_GExample_g_C63(ref BinaryBufferWriter writer, List<Example>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(List<Example>?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location654*/
                                                private static List<Example>? CloneOrChange_List_GExample_g_C63(List<Example>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    List<Example>? collection = avoidCloningIfPossible ? itemToClone : new List<Example>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (avoidCloningIfPossible)
                                                        {
                                                            if (itemToClone[itemIndex] != null)
                                                            {
                                                                itemToClone[itemIndex] = (Example) (cloneOrChangeFunc(itemToClone[itemIndex]) ?? throw new UnsetNonnullableLazinatorException());
                                                            }
                                                            continue;
                                                        }
                                                        var itemCopied = (Example) (cloneOrChangeFunc(itemToClone[itemIndex]) ?? throw new UnsetNonnullableLazinatorException());
                                                        collection.Add(itemCopied);
                                                    }
                                                    return collection;
                                                }
                                                /*Location655*/
                                                private static List<Example?>? ConvertFromBytes_List_GExample_C63_g_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(List<Example?>?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    List<Example?>? collection = new List<Example?>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember == 0)
                                                        {
                                                            collection.Add(null);
                                                        }
                                                        else
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                            var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                            collection.Add(item);
                                                        }
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location656*/
                                                
                                                private static void ConvertToBytes_List_GExample_C63_g_C63(ref BinaryBufferWriter writer, List<Example?>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(List<Example?>?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        if (itemToConvert[itemIndex] == null)
                                                        {
                                                            writer.Write((uint)0);
                                                        }
                                                        else 
                                                        {
                                                            
                                                            void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                            WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                        }
                                                        
                                                    }
                                                }
                                                /*Location657*/
                                                private static List<Example?>? CloneOrChange_List_GExample_C63_g_C63(List<Example?>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    List<Example?>? collection = avoidCloningIfPossible ? itemToClone : new List<Example?>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (avoidCloningIfPossible)
                                                        {
                                                            if (itemToClone[itemIndex] != null)
                                                            {
                                                                itemToClone[itemIndex] = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                            }
                                                            continue;
                                                        }
                                                        if (itemToClone[itemIndex] == null)
                                                        {
                                                            collection.Add(null);
                                                        }
                                                        else
                                                        {
                                                            var itemCopied = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                            collection.Add(itemCopied);
                                                        }
                                                        
                                                    }
                                                    return collection;
                                                }
                                                /*Location658*/
                                                private static Memory<byte>? ConvertFromBytes_Memory_Gbyte_g_C63(LazinatorMemory storage)
                                                {
                                                    /*Location659*/int index = 0;
                                                    bool isNull = storage.ReadOnlySpan.ToBoolean(ref index);
                                                    if (isNull)
                                                    {
                                                        return null;
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span.Slice(1);
                                                    return span.ToArray();
                                                }/*Location660*/
                                                
                                                private static void ConvertToBytes_Memory_Gbyte_g_C63(ref BinaryBufferWriter writer, Memory<byte>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    /*Location661*/if (itemToConvert == null)
                                                    {
                                                        writer.Write((bool)true);
                                                        return;
                                                    }
                                                    writer.Write((bool)false);
                                                    writer.Write(itemToConvert.Value.Span);
                                                }
                                                /*Location662*/
                                                private static Memory<byte>? CloneOrChange_Memory_Gbyte_g_C63(Memory<byte>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Value.Length;
                                                    Memory<byte> collection = new Memory<byte>(new byte[collectionLength]);
                                                    var collectionAsSpan = collection.Span;
                                                    var itemToCloneSpan = itemToClone.Value.Span;
                                                    int itemToCloneCount = itemToCloneSpan.Length;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        var itemCopied = (byte) itemToCloneSpan[itemIndex];
                                                        collectionAsSpan[itemIndex] = itemCopied;
                                                    }
                                                    return collection;
                                                }
                                                /*Location663*/
                                                private static Queue<Example>? ConvertFromBytes_Queue_GExample_g_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(Queue<Example>?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Queue<Example>? collection = new Queue<Example>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = new Example();
                                                        item.DeserializeLazinator(childData);
                                                        collection.Enqueue(item);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location664*/
                                                
                                                private static void ConvertToBytes_Queue_GExample_g_C63(ref BinaryBufferWriter writer, Queue<Example>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Queue<Example>?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    var q = System.Linq.Enumerable.ToList(itemToConvert);
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => q[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location665*/
                                                private static Queue<Example>? CloneOrChange_Queue_GExample_g_C63(Queue<Example>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    Queue<Example>? collection = new Queue<Example>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    var q = System.Linq.Enumerable.ToList(itemToClone);
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        var itemCopied = (Example) (cloneOrChangeFunc(q[itemIndex]) ?? throw new UnsetNonnullableLazinatorException());
                                                        collection.Enqueue(itemCopied);
                                                    }
                                                    return collection;
                                                }
                                                /*Location666*/
                                                private static Queue<Example?>? ConvertFromBytes_Queue_GExample_C63_g_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(Queue<Example?>?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Queue<Example?>? collection = new Queue<Example?>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember == 0)
                                                        {
                                                            collection.Enqueue(null);
                                                        }
                                                        else
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                            var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                            collection.Enqueue(item);
                                                        }
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location667*/
                                                
                                                private static void ConvertToBytes_Queue_GExample_C63_g_C63(ref BinaryBufferWriter writer, Queue<Example?>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Queue<Example?>?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    var q = System.Linq.Enumerable.ToList(itemToConvert);
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        if (q[itemIndex] == null)
                                                        {
                                                            writer.Write((uint)0);
                                                        }
                                                        else 
                                                        {
                                                            
                                                            void action(ref BinaryBufferWriter w) => q[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                            WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                        }
                                                        
                                                    }
                                                }
                                                /*Location668*/
                                                private static Queue<Example?>? CloneOrChange_Queue_GExample_C63_g_C63(Queue<Example?>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    Queue<Example?>? collection = new Queue<Example?>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    var q = System.Linq.Enumerable.ToList(itemToClone);
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (q[itemIndex] == null)
                                                        {
                                                            collection.Enqueue(null);
                                                        }
                                                        else
                                                        {
                                                            var itemCopied = (Example?) (cloneOrChangeFunc(q[itemIndex]));
                                                            collection.Enqueue(itemCopied);
                                                        }
                                                        
                                                    }
                                                    return collection;
                                                }
                                                /*Location669*/
                                                private static ReadOnlyMemory<byte>? ConvertFromBytes_ReadOnlyMemory_Gbyte_g_C63(LazinatorMemory storage)
                                                {
                                                    /*Location670*/int index = 0;
                                                    bool isNull = storage.ReadOnlySpan.ToBoolean(ref index);
                                                    if (isNull)
                                                    {
                                                        return null;
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span.Slice(1);
                                                    return span.ToArray();
                                                }/*Location671*/
                                                
                                                private static void ConvertToBytes_ReadOnlyMemory_Gbyte_g_C63(ref BinaryBufferWriter writer, ReadOnlyMemory<byte>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == null)
                                                    {
                                                        writer.Write((bool)true);
                                                        return;
                                                    }
                                                    writer.Write((bool)false);
                                                    ConvertToBytes_ReadOnlyMemory_Gbyte_g(ref writer, itemToConvert.Value, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                }
                                                /*Location672*/
                                                private static ReadOnlyMemory<byte>? CloneOrChange_ReadOnlyMemory_Gbyte_g_C63(ReadOnlyMemory<byte>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Value.Length;
                                                    Memory<byte> collection = new Memory<byte>(new byte[collectionLength]);
                                                    var collectionAsSpan = collection.Span;
                                                    var itemToCloneSpan = itemToClone.Value.Span;
                                                    int itemToCloneCount = itemToCloneSpan.Length;
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        var itemCopied = (byte) itemToCloneSpan[itemIndex];
                                                        collectionAsSpan[itemIndex] = itemCopied;
                                                    }
                                                    return collection;
                                                }
                                                /*Location673*/
                                                private static Stack<Example>? ConvertFromBytes_Stack_GExample_g_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(Stack<Example>?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Stack<Example>? collection = new Stack<Example>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = new Example();
                                                        item.DeserializeLazinator(childData);
                                                        collection.Push(item);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location674*/
                                                
                                                private static void ConvertToBytes_Stack_GExample_g_C63(ref BinaryBufferWriter writer, Stack<Example>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Stack<Example>?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    var stackReversed = System.Linq.Enumerable.ToList(itemToConvert);
                                                    stackReversed.Reverse();
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => stackReversed[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location675*/
                                                private static Stack<Example>? CloneOrChange_Stack_GExample_g_C63(Stack<Example>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    Stack<Example>? collection = new Stack<Example>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    var stackReversed = System.Linq.Enumerable.ToList(itemToClone);
                                                    stackReversed.Reverse();
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        var itemCopied = (Example) (cloneOrChangeFunc(stackReversed[itemIndex]) ?? throw new UnsetNonnullableLazinatorException());
                                                        collection.Push(itemCopied);
                                                    }
                                                    return collection;
                                                }
                                                /*Location676*/
                                                private static Stack<Example?>? ConvertFromBytes_Stack_GExample_C63_g_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(Stack<Example?>?);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    Stack<Example?>? collection = new Stack<Example?>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember == 0)
                                                        {
                                                            collection.Push(null);
                                                        }
                                                        else
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                            var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                            collection.Push(item);
                                                        }
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location677*/
                                                
                                                private static void ConvertToBytes_Stack_GExample_C63_g_C63(ref BinaryBufferWriter writer, Stack<Example?>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(Stack<Example?>?))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    int itemToConvertCount = itemToConvert.Count;
                                                    var stackReversed = System.Linq.Enumerable.ToList(itemToConvert);
                                                    stackReversed.Reverse();
                                                    for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                                    {
                                                        if (stackReversed[itemIndex] == null)
                                                        {
                                                            writer.Write((uint)0);
                                                        }
                                                        else 
                                                        {
                                                            
                                                            void action(ref BinaryBufferWriter w) => stackReversed[itemIndex]!.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                            WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                        }
                                                        
                                                    }
                                                }
                                                /*Location678*/
                                                private static Stack<Example?>? CloneOrChange_Stack_GExample_C63_g_C63(Stack<Example?>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    Stack<Example?>? collection = new Stack<Example?>(collectionLength);
                                                    int itemToCloneCount = itemToClone.Count;
                                                    var stackReversed = System.Linq.Enumerable.ToList(itemToClone);
                                                    stackReversed.Reverse();
                                                    for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                                    {
                                                        if (stackReversed[itemIndex] == null)
                                                        {
                                                            collection.Push(null);
                                                        }
                                                        else
                                                        {
                                                            var itemCopied = (Example?) (cloneOrChangeFunc(stackReversed[itemIndex]));
                                                            collection.Push(itemCopied);
                                                        }
                                                        
                                                    }
                                                    return collection;
                                                }
                                                /*Location679*/
                                                private static Tuple<Example, int> ConvertFromBytes_Tuple_GExample_c_C32int_g(LazinatorMemory storage)
                                                {
                                                    ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                    
                                                    int bytesSoFar = 0;
                                                    /*Location680*/
                                                    Example item1;
                                                    int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                    if (lengthCollectionMember_item1 != 0)
                                                    {
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                        item1 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                                                    }
                                                    else 
                                                    { 
                                                        throw new UnsetNonnullableLazinatorException(); 
                                                    }
                                                    bytesSoFar += lengthCollectionMember_item1;
                                                    /*Location681*/
                                                    int item2 = span.ToDecompressedInt(ref bytesSoFar);
                                                    /*Location682*/
                                                    var tupleType = new Tuple<Example, int>(item1, item2);
                                                    
                                                    return tupleType;
                                                }
                                                
                                                private static void ConvertToBytes_Tuple_GExample_c_C32int_g(ref BinaryBufferWriter writer, Tuple<Example, int> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    /*Location683*/
                                                    if (itemToConvert.Item1 == null)
                                                    {
                                                        writer.Write((uint)0);
                                                    }
                                                    else
                                                    {
                                                        void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                    };
                                                    /*Location684*/
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
                                                    /*Location685*/}
                                                    /*Location686*/
                                                    private static Tuple<Example, int> CloneOrChange_Tuple_GExample_c_C32int_g(Tuple<Example, int> itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                    {
                                                        return new Tuple<Example, int>((Example) (cloneOrChangeFunc((itemToConvert.Item1)) ?? throw new UnsetNonnullableLazinatorException()),(int) (itemToConvert.Item2));
                                                    }
                                                    /*Location687*/
                                                    private static Tuple<Example?, int> ConvertFromBytes_Tuple_GExample_C63_c_C32int_g(LazinatorMemory storage)
                                                    {
                                                        ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                        
                                                        int bytesSoFar = 0;
                                                        /*Location688*/
                                                        Example? item1 = default(Example?);
                                                        int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember_item1 != 0)
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                            item1 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                        }
                                                        bytesSoFar += lengthCollectionMember_item1;
                                                        /*Location689*/
                                                        int item2 = span.ToDecompressedInt(ref bytesSoFar);
                                                        /*Location690*/
                                                        var tupleType = new Tuple<Example?, int>(item1, item2);
                                                        
                                                        return tupleType;
                                                    }
                                                    
                                                    private static void ConvertToBytes_Tuple_GExample_C63_c_C32int_g(ref BinaryBufferWriter writer, Tuple<Example?, int> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                    {
                                                        /*Location691*/
                                                        if (itemToConvert.Item1 == null)
                                                        {
                                                            writer.Write((uint)0);
                                                        }
                                                        else
                                                        {
                                                            void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                            WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                        };
                                                        /*Location692*/
                                                        CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
                                                        /*Location693*/}
                                                        /*Location694*/
                                                        private static Tuple<Example?, int> CloneOrChange_Tuple_GExample_C63_c_C32int_g(Tuple<Example?, int> itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                        {
                                                            return new Tuple<Example?, int>((Example?) (cloneOrChangeFunc((itemToConvert.Item1))),(int) (itemToConvert.Item2));
                                                        }
                                                        /*Location695*/
                                                        private static Tuple<Example, int>? ConvertFromBytes_Tuple_GExample_c_C32int_g_C63(LazinatorMemory storage)
                                                        {
                                                            if (storage.Length == 0)
                                                            {
                                                                return default;
                                                            }
                                                            ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                            
                                                            int bytesSoFar = 0;
                                                            /*Location696*/
                                                            Example item1;
                                                            int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                            if (lengthCollectionMember_item1 != 0)
                                                            {
                                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                                item1 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                                                            }
                                                            else 
                                                            { 
                                                                throw new UnsetNonnullableLazinatorException(); 
                                                            }
                                                            bytesSoFar += lengthCollectionMember_item1;
                                                            /*Location697*/
                                                            int item2 = span.ToDecompressedInt(ref bytesSoFar);
                                                            /*Location698*/
                                                            var tupleType = new Tuple<Example, int>(item1, item2);
                                                            
                                                            return tupleType;
                                                        }
                                                        
                                                        private static void ConvertToBytes_Tuple_GExample_c_C32int_g_C63(ref BinaryBufferWriter writer, Tuple<Example, int>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                        {
                                                            /*Location699*/if (itemToConvert == null)
                                                            {
                                                                return;
                                                            }
                                                            /*Location700*/
                                                            if (itemToConvert.Item1 == null)
                                                            {
                                                                writer.Write((uint)0);
                                                            }
                                                            else
                                                            {
                                                                void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                            };
                                                            /*Location701*/
                                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
                                                            /*Location702*/}
                                                            /*Location703*/
                                                            private static Tuple<Example, int>? CloneOrChange_Tuple_GExample_c_C32int_g_C63(Tuple<Example, int>? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                            {
                                                                if (itemToConvert == null)
                                                                {
                                                                    return default(Tuple<Example, int>?);
                                                                }
                                                                
                                                                return new Tuple<Example, int>((Example) (cloneOrChangeFunc((itemToConvert?.Item1 ?? default)) ?? throw new UnsetNonnullableLazinatorException()),(int) (itemToConvert?.Item2 ?? default));
                                                            }
                                                            /*Location704*/
                                                            private static Tuple<Example?, int>? ConvertFromBytes_Tuple_GExample_C63_c_C32int_g_C63(LazinatorMemory storage)
                                                            {
                                                                if (storage.Length == 0)
                                                                {
                                                                    return default;
                                                                }
                                                                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                                
                                                                int bytesSoFar = 0;
                                                                /*Location705*/
                                                                Example? item1 = default(Example?);
                                                                int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                                if (lengthCollectionMember_item1 != 0)
                                                                {
                                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                                    item1 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                                }
                                                                bytesSoFar += lengthCollectionMember_item1;
                                                                /*Location706*/
                                                                int item2 = span.ToDecompressedInt(ref bytesSoFar);
                                                                /*Location707*/
                                                                var tupleType = new Tuple<Example?, int>(item1, item2);
                                                                
                                                                return tupleType;
                                                            }
                                                            
                                                            private static void ConvertToBytes_Tuple_GExample_C63_c_C32int_g_C63(ref BinaryBufferWriter writer, Tuple<Example?, int>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                            {
                                                                /*Location708*/if (itemToConvert == null)
                                                                {
                                                                    return;
                                                                }
                                                                /*Location709*/
                                                                if (itemToConvert.Item1 == null)
                                                                {
                                                                    writer.Write((uint)0);
                                                                }
                                                                else
                                                                {
                                                                    void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                    WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                                };
                                                                /*Location710*/
                                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
                                                                /*Location711*/}
                                                                /*Location712*/
                                                                private static Tuple<Example?, int>? CloneOrChange_Tuple_GExample_C63_c_C32int_g_C63(Tuple<Example?, int>? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                                {
                                                                    if (itemToConvert == null)
                                                                    {
                                                                        return default(Tuple<Example?, int>?);
                                                                    }
                                                                    
                                                                    return new Tuple<Example?, int>((Example?) (cloneOrChangeFunc((itemToConvert?.Item1))),(int) (itemToConvert?.Item2 ?? default));
                                                                }
                                                                /*Location713*/
                                                                private static (Example, int)? ConvertFromBytes__PExample_c_C32int_p_C63(LazinatorMemory storage)
                                                                {
                                                                    if (storage.Length == 0)
                                                                    {
                                                                        return default;
                                                                    }
                                                                    ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                                    
                                                                    int bytesSoFar = 0;
                                                                    /*Location714*/
                                                                    Example item1;
                                                                    int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                                    if (lengthCollectionMember_item1 != 0)
                                                                    {
                                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                                        item1 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                                                                    }
                                                                    else 
                                                                    { 
                                                                        throw new UnsetNonnullableLazinatorException(); 
                                                                    }
                                                                    bytesSoFar += lengthCollectionMember_item1;
                                                                    /*Location715*/
                                                                    int item2 = span.ToDecompressedInt(ref bytesSoFar);
                                                                    /*Location716*/
                                                                    var tupleType = (item1, item2);
                                                                    
                                                                    return tupleType;
                                                                }
                                                                
                                                                private static void ConvertToBytes__PExample_c_C32int_p_C63(ref BinaryBufferWriter writer, (Example, int)? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                                {
                                                                    /*Location717*/if (itemToConvert == null)
                                                                    {
                                                                        return;
                                                                    }
                                                                    /*Location718*/
                                                                    if (itemToConvert.Value.Item1 == null)
                                                                    {
                                                                        writer.Write((uint)0);
                                                                    }
                                                                    else
                                                                    {
                                                                        void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Value.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                        WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                                    };
                                                                    /*Location719*/
                                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Value.Item2);
                                                                    /*Location720*/}
                                                                    /*Location721*/
                                                                    private static (Example, int)? CloneOrChange__PExample_c_C32int_p_C63((Example, int)? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                                    {
                                                                        if (itemToConvert == null)
                                                                        {
                                                                            return default((Example, int)?);
                                                                        }
                                                                        
                                                                        return ((Example) (cloneOrChangeFunc((itemToConvert?.Item1 ?? default)) ?? throw new UnsetNonnullableLazinatorException()),(int) (itemToConvert?.Item2 ?? default));
                                                                    }
                                                                    /*Location722*/
                                                                    private static (Example?, int)? ConvertFromBytes__PExample_C63_c_C32int_p_C63(LazinatorMemory storage)
                                                                    {
                                                                        if (storage.Length == 0)
                                                                        {
                                                                            return default;
                                                                        }
                                                                        ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                                        
                                                                        int bytesSoFar = 0;
                                                                        /*Location723*/
                                                                        Example? item1 = default(Example?);
                                                                        int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                                        if (lengthCollectionMember_item1 != 0)
                                                                        {
                                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                                            item1 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                                        }
                                                                        bytesSoFar += lengthCollectionMember_item1;
                                                                        /*Location724*/
                                                                        int item2 = span.ToDecompressedInt(ref bytesSoFar);
                                                                        /*Location725*/
                                                                        var tupleType = (item1, item2);
                                                                        
                                                                        return tupleType;
                                                                    }
                                                                    
                                                                    private static void ConvertToBytes__PExample_C63_c_C32int_p_C63(ref BinaryBufferWriter writer, (Example?, int)? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                                    {
                                                                        /*Location726*/if (itemToConvert == null)
                                                                        {
                                                                            return;
                                                                        }
                                                                        /*Location727*/
                                                                        if (itemToConvert.Value.Item1 == null)
                                                                        {
                                                                            writer.Write((uint)0);
                                                                        }
                                                                        else
                                                                        {
                                                                            void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Value.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                            WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                                        };
                                                                        /*Location728*/
                                                                        CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Value.Item2);
                                                                        /*Location729*/}
                                                                        /*Location730*/
                                                                        private static (Example?, int)? CloneOrChange__PExample_C63_c_C32int_p_C63((Example?, int)? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                                        {
                                                                            if (itemToConvert == null)
                                                                            {
                                                                                return default((Example?, int)?);
                                                                            }
                                                                            
                                                                            return ((Example?) (cloneOrChangeFunc((itemToConvert?.Item1))),(int) (itemToConvert?.Item2 ?? default));
                                                                        }
                                                                        /*Location731*/
                                                                        private static (Example, int) ConvertFromBytes__PExample_c_C32int_p(LazinatorMemory storage)
                                                                        {
                                                                            if (storage.Length == 0)
                                                                            {
                                                                                return default;
                                                                            }
                                                                            ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                                            
                                                                            int bytesSoFar = 0;
                                                                            /*Location732*/
                                                                            Example item1;
                                                                            int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                                            if (lengthCollectionMember_item1 != 0)
                                                                            {
                                                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                                                item1 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                                                                            }
                                                                            else 
                                                                            { 
                                                                                throw new UnsetNonnullableLazinatorException(); 
                                                                            }
                                                                            bytesSoFar += lengthCollectionMember_item1;
                                                                            /*Location733*/
                                                                            int item2 = span.ToDecompressedInt(ref bytesSoFar);
                                                                            /*Location734*/
                                                                            var tupleType = (item1, item2);
                                                                            
                                                                            return tupleType;
                                                                        }
                                                                        
                                                                        private static void ConvertToBytes__PExample_c_C32int_p(ref BinaryBufferWriter writer, (Example, int) itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                                        {
                                                                            /*Location735*/
                                                                            if (itemToConvert.Item1 == null)
                                                                            {
                                                                                writer.Write((uint)0);
                                                                            }
                                                                            else
                                                                            {
                                                                                void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                                WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                                            };
                                                                            /*Location736*/
                                                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
                                                                            /*Location737*/}
                                                                            /*Location738*/
                                                                            private static (Example, int) CloneOrChange__PExample_c_C32int_p((Example, int) itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                                            {
                                                                                return ((Example) (cloneOrChangeFunc((itemToConvert.Item1)) ?? throw new UnsetNonnullableLazinatorException()),(int) (itemToConvert.Item2));
                                                                            }
                                                                            /*Location739*/
                                                                            private static (Example?, int) ConvertFromBytes__PExample_C63_c_C32int_p(LazinatorMemory storage)
                                                                            {
                                                                                if (storage.Length == 0)
                                                                                {
                                                                                    return default;
                                                                                }
                                                                                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                                                
                                                                                int bytesSoFar = 0;
                                                                                /*Location740*/
                                                                                Example? item1 = default(Example?);
                                                                                int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                                                if (lengthCollectionMember_item1 != 0)
                                                                                {
                                                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                                                    item1 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                                                                                }
                                                                                bytesSoFar += lengthCollectionMember_item1;
                                                                                /*Location741*/
                                                                                int item2 = span.ToDecompressedInt(ref bytesSoFar);
                                                                                /*Location742*/
                                                                                var tupleType = (item1, item2);
                                                                                
                                                                                return tupleType;
                                                                            }
                                                                            
                                                                            private static void ConvertToBytes__PExample_C63_c_C32int_p(ref BinaryBufferWriter writer, (Example?, int) itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                                            {
                                                                                /*Location743*/
                                                                                if (itemToConvert.Item1 == null)
                                                                                {
                                                                                    writer.Write((uint)0);
                                                                                }
                                                                                else
                                                                                {
                                                                                    void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                                    WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                                                };
                                                                                /*Location744*/
                                                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
                                                                                /*Location745*/}
                                                                                /*Location746*/
                                                                                private static (Example?, int) CloneOrChange__PExample_C63_c_C32int_p((Example?, int) itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                                                {
                                                                                    return ((Example?) (cloneOrChangeFunc((itemToConvert.Item1))),(int) (itemToConvert.Item2));
                                                                                }
                                                                                /*Location747*/
                                                                            }
                                                                        }
