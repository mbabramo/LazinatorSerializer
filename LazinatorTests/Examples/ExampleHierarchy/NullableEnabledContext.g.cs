//21dd93ab-fe10-358a-ed11-6ef31ef42a44
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.406, on 2024/01/27 06:46:02.786 PM.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
namespace LazinatorTests.Examples.ExampleHierarchy
{
    #pragma warning disable 8019
    using Lazinator.Attributes;
    using Lazinator.Buffers;
    using Lazinator.Collections;
    using Lazinator.Core;
    using Lazinator.Exceptions;
    using Lazinator.Support;
    using LazinatorTests.Examples;
    using LazinatorTests.Examples.Structs;
    using static Lazinator.Buffers.WriteUncompressedPrimitives;
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using static Lazinator.Core.LazinatorUtilities;
    #pragma warning restore 8019
    
    [Autogenerated]
    public partial class NullableEnabledContext : ILazinator
    {
        public bool IsStruct => false;
        
        public virtual bool IsNullableContext => true;
        /* Property definitions */
        
        protected int _ByteReadOnlySpan_ByteIndex;
        protected int _ExplicitlyNullable_ByteIndex;
        protected int _ExplicitlyNullableInterface_ByteIndex;
        protected int _NonNullableArrayOfNonNullables_ByteIndex;
        protected int _NonNullableArrayOfNullables_ByteIndex;
        protected int _NonNullableClass_ByteIndex;
        protected int _NonNullableDictionaryWithNonNullable_ByteIndex;
        protected int _NonNullableDictionaryWithNullable_ByteIndex;
        protected int _NonNullableInterface_ByteIndex;
        protected int _NonNullableLazinatorListNonNullable_ByteIndex;
        protected int _NonNullableLazinatorListNullable_ByteIndex;
        protected int _NonNullableListOfNonNullables_ByteIndex;
        protected int _NonNullableListOfNullables_ByteIndex;
        protected int _NonNullableMemoryOfBytes_ByteIndex;
        protected int _NonNullableQueueOfNonNullables_ByteIndex;
        protected int _NonNullableQueueOfNullables_ByteIndex;
        protected int _NonNullableReadOnlyMemoryOfBytes_ByteIndex;
        protected int _NonNullableRecordLikeClass_ByteIndex;
        protected int _NonNullableRecordLikeStruct_ByteIndex;
        protected int _NonNullableRegularTupleWithNonNullable_ByteIndex;
        protected int _NonNullableRegularTupleWithNullable_ByteIndex;
        protected int _NonNullableStackOfNonNullables_ByteIndex;
        protected int _NonNullableStackOfNullables_ByteIndex;
        protected int _NonNullableStruct_ByteIndex;
        protected int _NullableArrayOfNonNullables_ByteIndex;
        protected int _NullableArrayOfNullables_ByteIndex;
        protected int _NullableDictionaryWithNonNullable_ByteIndex;
        protected int _NullableDictionaryWithNullable_ByteIndex;
        protected int _NullableLazinatorListNonNullable_ByteIndex;
        protected int _NullableLazinatorListNullable_ByteIndex;
        protected int _NullableListOfNonNullables_ByteIndex;
        protected int _NullableListOfNullables_ByteIndex;
        protected int _NullableMemoryOfBytes_ByteIndex;
        protected int _NullableQueueOfNonNullables_ByteIndex;
        protected int _NullableQueueOfNullables_ByteIndex;
        protected int _NullableReadOnlyMemoryOfBytes_ByteIndex;
        protected int _NullableRecordLikeClass_ByteIndex;
        protected int _NullableRecordLikeStruct_ByteIndex;
        protected int _NullableRegularTupleWithNonNullable_ByteIndex;
        protected int _NullableRegularTupleWithNullable_ByteIndex;
        protected int _NullableStackOfNonNullables_ByteIndex;
        protected int _NullableStackOfNullables_ByteIndex;
        protected int _NullableStruct_ByteIndex;
        protected int _NullableValueTupleWithNonNullable_ByteIndex;
        protected int _NullableValueTupleWithNullable_ByteIndex;
        protected int _ValueTupleWithNonNullable_ByteIndex;
        protected int _ValueTupleWithNullable_ByteIndex;
        protected virtual int _ByteReadOnlySpan_ByteLength => _ExplicitlyNullable_ByteIndex - _ByteReadOnlySpan_ByteIndex;
        protected virtual int _ExplicitlyNullable_ByteLength => _ExplicitlyNullableInterface_ByteIndex - _ExplicitlyNullable_ByteIndex;
        protected virtual int _ExplicitlyNullableInterface_ByteLength => _NonNullableArrayOfNonNullables_ByteIndex - _ExplicitlyNullableInterface_ByteIndex;
        protected virtual int _NonNullableArrayOfNonNullables_ByteLength => _NonNullableArrayOfNullables_ByteIndex - _NonNullableArrayOfNonNullables_ByteIndex;
        protected virtual int _NonNullableArrayOfNullables_ByteLength => _NonNullableClass_ByteIndex - _NonNullableArrayOfNullables_ByteIndex;
        protected virtual int _NonNullableClass_ByteLength => _NonNullableDictionaryWithNonNullable_ByteIndex - _NonNullableClass_ByteIndex;
        protected virtual int _NonNullableDictionaryWithNonNullable_ByteLength => _NonNullableDictionaryWithNullable_ByteIndex - _NonNullableDictionaryWithNonNullable_ByteIndex;
        protected virtual int _NonNullableDictionaryWithNullable_ByteLength => _NonNullableInterface_ByteIndex - _NonNullableDictionaryWithNullable_ByteIndex;
        protected virtual int _NonNullableInterface_ByteLength => _NonNullableLazinatorListNonNullable_ByteIndex - _NonNullableInterface_ByteIndex;
        protected virtual int _NonNullableLazinatorListNonNullable_ByteLength => _NonNullableLazinatorListNullable_ByteIndex - _NonNullableLazinatorListNonNullable_ByteIndex;
        protected virtual int _NonNullableLazinatorListNullable_ByteLength => _NonNullableListOfNonNullables_ByteIndex - _NonNullableLazinatorListNullable_ByteIndex;
        protected virtual int _NonNullableListOfNonNullables_ByteLength => _NonNullableListOfNullables_ByteIndex - _NonNullableListOfNonNullables_ByteIndex;
        protected virtual int _NonNullableListOfNullables_ByteLength => _NonNullableMemoryOfBytes_ByteIndex - _NonNullableListOfNullables_ByteIndex;
        protected virtual int _NonNullableMemoryOfBytes_ByteLength => _NonNullableQueueOfNonNullables_ByteIndex - _NonNullableMemoryOfBytes_ByteIndex;
        protected virtual int _NonNullableQueueOfNonNullables_ByteLength => _NonNullableQueueOfNullables_ByteIndex - _NonNullableQueueOfNonNullables_ByteIndex;
        protected virtual int _NonNullableQueueOfNullables_ByteLength => _NonNullableReadOnlyMemoryOfBytes_ByteIndex - _NonNullableQueueOfNullables_ByteIndex;
        protected virtual int _NonNullableReadOnlyMemoryOfBytes_ByteLength => _NonNullableRecordLikeClass_ByteIndex - _NonNullableReadOnlyMemoryOfBytes_ByteIndex;
        protected virtual int _NonNullableRecordLikeClass_ByteLength => _NonNullableRecordLikeStruct_ByteIndex - _NonNullableRecordLikeClass_ByteIndex;
        protected virtual int _NonNullableRecordLikeStruct_ByteLength => _NonNullableRegularTupleWithNonNullable_ByteIndex - _NonNullableRecordLikeStruct_ByteIndex;
        protected virtual int _NonNullableRegularTupleWithNonNullable_ByteLength => _NonNullableRegularTupleWithNullable_ByteIndex - _NonNullableRegularTupleWithNonNullable_ByteIndex;
        protected virtual int _NonNullableRegularTupleWithNullable_ByteLength => _NonNullableStackOfNonNullables_ByteIndex - _NonNullableRegularTupleWithNullable_ByteIndex;
        protected virtual int _NonNullableStackOfNonNullables_ByteLength => _NonNullableStackOfNullables_ByteIndex - _NonNullableStackOfNonNullables_ByteIndex;
        protected virtual int _NonNullableStackOfNullables_ByteLength => _NonNullableStruct_ByteIndex - _NonNullableStackOfNullables_ByteIndex;
        protected virtual int _NonNullableStruct_ByteLength => _NullableArrayOfNonNullables_ByteIndex - _NonNullableStruct_ByteIndex;
        protected virtual int _NullableArrayOfNonNullables_ByteLength => _NullableArrayOfNullables_ByteIndex - _NullableArrayOfNonNullables_ByteIndex;
        protected virtual int _NullableArrayOfNullables_ByteLength => _NullableDictionaryWithNonNullable_ByteIndex - _NullableArrayOfNullables_ByteIndex;
        protected virtual int _NullableDictionaryWithNonNullable_ByteLength => _NullableDictionaryWithNullable_ByteIndex - _NullableDictionaryWithNonNullable_ByteIndex;
        protected virtual int _NullableDictionaryWithNullable_ByteLength => _NullableLazinatorListNonNullable_ByteIndex - _NullableDictionaryWithNullable_ByteIndex;
        protected virtual int _NullableLazinatorListNonNullable_ByteLength => _NullableLazinatorListNullable_ByteIndex - _NullableLazinatorListNonNullable_ByteIndex;
        protected virtual int _NullableLazinatorListNullable_ByteLength => _NullableListOfNonNullables_ByteIndex - _NullableLazinatorListNullable_ByteIndex;
        protected virtual int _NullableListOfNonNullables_ByteLength => _NullableListOfNullables_ByteIndex - _NullableListOfNonNullables_ByteIndex;
        protected virtual int _NullableListOfNullables_ByteLength => _NullableMemoryOfBytes_ByteIndex - _NullableListOfNullables_ByteIndex;
        protected virtual int _NullableMemoryOfBytes_ByteLength => _NullableQueueOfNonNullables_ByteIndex - _NullableMemoryOfBytes_ByteIndex;
        protected virtual int _NullableQueueOfNonNullables_ByteLength => _NullableQueueOfNullables_ByteIndex - _NullableQueueOfNonNullables_ByteIndex;
        protected virtual int _NullableQueueOfNullables_ByteLength => _NullableReadOnlyMemoryOfBytes_ByteIndex - _NullableQueueOfNullables_ByteIndex;
        protected virtual int _NullableReadOnlyMemoryOfBytes_ByteLength => _NullableRecordLikeClass_ByteIndex - _NullableReadOnlyMemoryOfBytes_ByteIndex;
        protected virtual int _NullableRecordLikeClass_ByteLength => _NullableRecordLikeStruct_ByteIndex - _NullableRecordLikeClass_ByteIndex;
        protected virtual int _NullableRecordLikeStruct_ByteLength => _NullableRegularTupleWithNonNullable_ByteIndex - _NullableRecordLikeStruct_ByteIndex;
        protected virtual int _NullableRegularTupleWithNonNullable_ByteLength => _NullableRegularTupleWithNullable_ByteIndex - _NullableRegularTupleWithNonNullable_ByteIndex;
        protected virtual int _NullableRegularTupleWithNullable_ByteLength => _NullableStackOfNonNullables_ByteIndex - _NullableRegularTupleWithNullable_ByteIndex;
        protected virtual int _NullableStackOfNonNullables_ByteLength => _NullableStackOfNullables_ByteIndex - _NullableStackOfNonNullables_ByteIndex;
        protected virtual int _NullableStackOfNullables_ByteLength => _NullableStruct_ByteIndex - _NullableStackOfNullables_ByteIndex;
        protected virtual int _NullableStruct_ByteLength => _NullableValueTupleWithNonNullable_ByteIndex - _NullableStruct_ByteIndex;
        protected virtual int _NullableValueTupleWithNonNullable_ByteLength => _NullableValueTupleWithNullable_ByteIndex - _NullableValueTupleWithNonNullable_ByteIndex;
        protected virtual int _NullableValueTupleWithNullable_ByteLength => _ValueTupleWithNonNullable_ByteIndex - _NullableValueTupleWithNullable_ByteIndex;
        protected virtual int _ValueTupleWithNonNullable_ByteLength => _ValueTupleWithNullable_ByteIndex - _ValueTupleWithNonNullable_ByteIndex;
        private int _NullableEnabledContext_EndByteIndex;
        protected virtual  int _ValueTupleWithNullable_ByteLength => _NullableEnabledContext_EndByteIndex - _ValueTupleWithNullable_ByteIndex;
        protected virtual int _OverallEndByteIndex => _NullableEnabledContext_EndByteIndex;
        
        
        protected int _MyInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int MyInt
        {
            get
            {
                return _MyInt;
            }
            set
            {
                IsDirty = true;
                _MyInt = value;
            }
        }
        
        protected int? _MyNullableInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int? MyNullableInt
        {
            get
            {
                return _MyNullableInt;
            }
            set
            {
                IsDirty = true;
                _MyNullableInt = value;
            }
        }
        
        protected string _NonNullableString = "";
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string NonNullableString
        {
            get
            {
                return _NonNullableString;
            }
            set
            {
                IsDirty = true;
                _NonNullableString = value;
            }
        }
        
        protected string? _NullableString;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string? NullableString
        {
            get
            {
                return _NullableString;
            }
            set
            {
                IsDirty = true;
                _NullableString = value;
            }
        }
        private ReadOnlyMemory<byte> _ByteReadOnlySpan;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlySpan<Byte> ByteReadOnlySpan
        {
            get
            {
                if (!_ByteReadOnlySpan_Accessed)
                {
                    LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ByteReadOnlySpan_ByteIndex, _ByteReadOnlySpan_ByteLength, null);
                    return childData.InitialReadOnlyMemory.Span;
                }
                return _ByteReadOnlySpan.Span;
            }
            set
            {
                IsDirty = true;
                _ByteReadOnlySpan = new ReadOnlyMemory<byte>((value).ToArray());
                _ByteReadOnlySpan_Accessed = true;
                
            }
        }
        protected bool _ByteReadOnlySpan_Accessed;
        
        protected Example? _ExplicitlyNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example? ExplicitlyNullable
        {
            get
            {
                if (!_ExplicitlyNullable_Accessed)
                {
                    LazinateExplicitlyNullable();
                } 
                return _ExplicitlyNullable;
            }
            set
            {
                if (_ExplicitlyNullable != null)
                {
                    _ExplicitlyNullable.LazinatorParents = _ExplicitlyNullable.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ExplicitlyNullable = value;
                _ExplicitlyNullable_Accessed = true;
            }
        }
        protected bool _ExplicitlyNullable_Accessed;
        private void LazinateExplicitlyNullable()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _ExplicitlyNullable = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ExplicitlyNullable_ByteIndex, _ExplicitlyNullable_ByteLength, null);
                _ExplicitlyNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(1012, (c, p) => new Example(c, p), childData, this); 
            }
            _ExplicitlyNullable_Accessed = true;
        }
        
        
        protected IExample? _ExplicitlyNullableInterface;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IExample? ExplicitlyNullableInterface
        {
            get
            {
                if (!_ExplicitlyNullableInterface_Accessed)
                {
                    LazinateExplicitlyNullableInterface();
                } 
                return _ExplicitlyNullableInterface;
            }
            set
            {
                if (_ExplicitlyNullableInterface != null)
                {
                    _ExplicitlyNullableInterface.LazinatorParents = _ExplicitlyNullableInterface.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ExplicitlyNullableInterface = value;
                _ExplicitlyNullableInterface_Accessed = true;
            }
        }
        protected bool _ExplicitlyNullableInterface_Accessed;
        private void LazinateExplicitlyNullableInterface()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _ExplicitlyNullableInterface = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ExplicitlyNullableInterface_ByteIndex, _ExplicitlyNullableInterface_ByteLength, null);
                _ExplicitlyNullableInterface = DeserializationFactory.Instance.CreateBasedOnType<IExample?>(childData, this); 
            }
            _ExplicitlyNullableInterface_Accessed = true;
        }
        
        
        protected Example[] _NonNullableArrayOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example[] NonNullableArrayOfNonNullables
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableArrayOfNonNullables!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableArrayOfNonNullables = value;
            }
        }
        
        
        protected Example?[] _NonNullableArrayOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example?[] NonNullableArrayOfNullables
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableArrayOfNullables!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableArrayOfNullables = value;
            }
        }
        
        
        protected Example _NonNullableClass;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example NonNullableClass
        {
            get
            {
                
                return _NonNullableClass!;
            }
            set
            {
                _ = value ?? throw new ArgumentNullException(nameof(value));
                if (_NonNullableClass != null)
                {
                    _NonNullableClass.LazinatorParents = _NonNullableClass.LazinatorParents.WithRemoved(this);
                }
                value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableClass = value;
            }
        }
        
        
        protected Dictionary<Int32, Example> _NonNullableDictionaryWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<Int32, Example> NonNullableDictionaryWithNonNullable
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableDictionaryWithNonNullable!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableDictionaryWithNonNullable = value;
            }
        }
        
        
        protected Dictionary<Int32, Example?> _NonNullableDictionaryWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<Int32, Example?> NonNullableDictionaryWithNullable
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableDictionaryWithNullable!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableDictionaryWithNullable = value;
            }
        }
        
        
        protected IExample _NonNullableInterface;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IExample NonNullableInterface
        {
            get
            {
                
                return _NonNullableInterface!;
            }
            set
            {
                _ = value ?? throw new ArgumentNullException(nameof(value));
                if (_NonNullableInterface != null)
                {
                    _NonNullableInterface.LazinatorParents = _NonNullableInterface.LazinatorParents.WithRemoved(this);
                }
                value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableInterface = value;
            }
        }
        
        
        protected LazinatorList<Example> _NonNullableLazinatorListNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorList<Example> NonNullableLazinatorListNonNullable
        {
            get
            {
                
                return _NonNullableLazinatorListNonNullable!;
            }
            set
            {
                _ = value ?? throw new ArgumentNullException(nameof(value));
                if (_NonNullableLazinatorListNonNullable != null)
                {
                    _NonNullableLazinatorListNonNullable.LazinatorParents = _NonNullableLazinatorListNonNullable.LazinatorParents.WithRemoved(this);
                }
                value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableLazinatorListNonNullable = value;
            }
        }
        
        
        protected LazinatorList<Example?> _NonNullableLazinatorListNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorList<Example?> NonNullableLazinatorListNullable
        {
            get
            {
                
                return _NonNullableLazinatorListNullable!;
            }
            set
            {
                _ = value ?? throw new ArgumentNullException(nameof(value));
                if (_NonNullableLazinatorListNullable != null)
                {
                    _NonNullableLazinatorListNullable.LazinatorParents = _NonNullableLazinatorListNullable.LazinatorParents.WithRemoved(this);
                }
                value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableLazinatorListNullable = value;
            }
        }
        
        
        protected List<Example> _NonNullableListOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Example> NonNullableListOfNonNullables
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableListOfNonNullables!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableListOfNonNullables = value;
            }
        }
        
        
        protected List<Example?> _NonNullableListOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Example?> NonNullableListOfNullables
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableListOfNullables!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableListOfNullables = value;
            }
        }
        
        
        protected Memory<Byte> _NonNullableMemoryOfBytes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Memory<Byte> NonNullableMemoryOfBytes
        {
            get
            {
                if (!_NonNullableMemoryOfBytes_Accessed)
                {
                    LazinateNonNullableMemoryOfBytes();
                }
                IsDirty = true; 
                return _NonNullableMemoryOfBytes;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableMemoryOfBytes = value;
                _NonNullableMemoryOfBytes_Accessed = true;
            }
        }
        protected bool _NonNullableMemoryOfBytes_Accessed;
        private void LazinateNonNullableMemoryOfBytes()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NonNullableMemoryOfBytes = default(Memory<Byte>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableMemoryOfBytes_ByteIndex, _NonNullableMemoryOfBytes_ByteLength, null);_NonNullableMemoryOfBytes = ConvertFromBytes_Memory_Gbyte_g(childData);
            }
            _NonNullableMemoryOfBytes_Accessed = true;
        }
        
        
        protected Queue<Example> _NonNullableQueueOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Queue<Example> NonNullableQueueOfNonNullables
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableQueueOfNonNullables!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableQueueOfNonNullables = value;
            }
        }
        
        
        protected Queue<Example?> _NonNullableQueueOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Queue<Example?> NonNullableQueueOfNullables
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableQueueOfNullables!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableQueueOfNullables = value;
            }
        }
        
        
        protected ReadOnlyMemory<Byte> _NonNullableReadOnlyMemoryOfBytes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlyMemory<Byte> NonNullableReadOnlyMemoryOfBytes
        {
            get
            {
                if (!_NonNullableReadOnlyMemoryOfBytes_Accessed)
                {
                    LazinateNonNullableReadOnlyMemoryOfBytes();
                } 
                return _NonNullableReadOnlyMemoryOfBytes;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableReadOnlyMemoryOfBytes = value;
                _NonNullableReadOnlyMemoryOfBytes_Accessed = true;
            }
        }
        protected bool _NonNullableReadOnlyMemoryOfBytes_Accessed;
        private void LazinateNonNullableReadOnlyMemoryOfBytes()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NonNullableReadOnlyMemoryOfBytes = default(ReadOnlyMemory<Byte>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableReadOnlyMemoryOfBytes_ByteIndex, _NonNullableReadOnlyMemoryOfBytes_ByteLength, null);_NonNullableReadOnlyMemoryOfBytes = ConvertFromBytes_ReadOnlyMemory_Gbyte_g(childData);
            }
            _NonNullableReadOnlyMemoryOfBytes_Accessed = true;
        }
        
        
        protected RecordLikeClass _NonNullableRecordLikeClass;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RecordLikeClass NonNullableRecordLikeClass
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableRecordLikeClass!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableRecordLikeClass = value;
            }
        }
        
        
        protected RecordLikeStruct _NonNullableRecordLikeStruct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RecordLikeStruct NonNullableRecordLikeStruct
        {
            get
            {
                
                return _NonNullableRecordLikeStruct!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableRecordLikeStruct = value;
            }
        }
        
        
        protected Tuple<Example, Int32> _NonNullableRegularTupleWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<Example, Int32> NonNullableRegularTupleWithNonNullable
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableRegularTupleWithNonNullable!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableRegularTupleWithNonNullable = value;
            }
        }
        
        
        protected Tuple<Example?, Int32> _NonNullableRegularTupleWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<Example?, Int32> NonNullableRegularTupleWithNullable
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableRegularTupleWithNullable!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableRegularTupleWithNullable = value;
            }
        }
        
        
        protected Stack<Example> _NonNullableStackOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Stack<Example> NonNullableStackOfNonNullables
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableStackOfNonNullables!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableStackOfNonNullables = value;
            }
        }
        
        
        protected Stack<Example?> _NonNullableStackOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Stack<Example?> NonNullableStackOfNullables
        {
            get
            {
                
                IsDirty = true; 
                return _NonNullableStackOfNullables!;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableStackOfNullables = value;
            }
        }
        
        
        protected ExampleStructWithoutClass _NonNullableStruct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleStructWithoutClass NonNullableStruct
        {
            get
            {
                if (!_NonNullableStruct_Accessed)
                {
                    LazinateNonNullableStruct();
                } 
                return _NonNullableStruct;
            }
            set
            {
                value.LazinatorParents = new LazinatorParentsCollection(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NonNullableStruct = value;
                _NonNullableStruct_Accessed = true;
            }
        }
        protected bool _NonNullableStruct_Accessed;
        private void LazinateNonNullableStruct()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NonNullableStruct = default(ExampleStructWithoutClass);
                _NonNullableStruct.LazinatorParents = new LazinatorParentsCollection(this, null);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableStruct_ByteIndex, _NonNullableStruct_ByteLength, null);_NonNullableStruct = new ExampleStructWithoutClass(childData)
                {
                    LazinatorParents = new LazinatorParentsCollection(this, null)
                };
                
            }
            _NonNullableStruct_Accessed = true;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleStructWithoutClass NonNullableStruct_Copy
        {
            get
            {
                if (!_NonNullableStruct_Accessed)
                {
                    if (LazinatorMemoryStorage.Length == 0)
                    {
                        return default(ExampleStructWithoutClass);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableStruct_ByteIndex, _NonNullableStruct_ByteLength, null);
                        var toReturn = new ExampleStructWithoutClass(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                var cleanCopy = _NonNullableStruct;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        protected Example[]? _NullableArrayOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example[]? NullableArrayOfNonNullables
        {
            get
            {
                if (!_NullableArrayOfNonNullables_Accessed)
                {
                    LazinateNullableArrayOfNonNullables();
                }
                IsDirty = true; 
                return _NullableArrayOfNonNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableArrayOfNonNullables = value;
                _NullableArrayOfNonNullables_Accessed = true;
            }
        }
        protected bool _NullableArrayOfNonNullables_Accessed;
        private void LazinateNullableArrayOfNonNullables()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableArrayOfNonNullables = default(Example[]?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableArrayOfNonNullables_ByteIndex, _NullableArrayOfNonNullables_ByteLength, null);_NullableArrayOfNonNullables = ConvertFromBytes_Example_B_b_n(childData);
            }
            _NullableArrayOfNonNullables_Accessed = true;
        }
        
        
        protected Example?[]? _NullableArrayOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example?[]? NullableArrayOfNullables
        {
            get
            {
                if (!_NullableArrayOfNullables_Accessed)
                {
                    LazinateNullableArrayOfNullables();
                }
                IsDirty = true; 
                return _NullableArrayOfNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableArrayOfNullables = value;
                _NullableArrayOfNullables_Accessed = true;
            }
        }
        protected bool _NullableArrayOfNullables_Accessed;
        private void LazinateNullableArrayOfNullables()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableArrayOfNullables = default(Example?[]?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableArrayOfNullables_ByteIndex, _NullableArrayOfNullables_ByteLength, null);_NullableArrayOfNullables = ConvertFromBytes_Example_n_B_b_n(childData);
            }
            _NullableArrayOfNullables_Accessed = true;
        }
        
        
        protected Dictionary<Int32, Example>? _NullableDictionaryWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<Int32, Example>? NullableDictionaryWithNonNullable
        {
            get
            {
                if (!_NullableDictionaryWithNonNullable_Accessed)
                {
                    LazinateNullableDictionaryWithNonNullable();
                }
                IsDirty = true; 
                return _NullableDictionaryWithNonNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableDictionaryWithNonNullable = value;
                _NullableDictionaryWithNonNullable_Accessed = true;
            }
        }
        protected bool _NullableDictionaryWithNonNullable_Accessed;
        private void LazinateNullableDictionaryWithNonNullable()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableDictionaryWithNonNullable = default(Dictionary<Int32, Example>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableDictionaryWithNonNullable_ByteIndex, _NullableDictionaryWithNonNullable_ByteLength, null);_NullableDictionaryWithNonNullable = ConvertFromBytes_Dictionary_Gint_c_C32Example_g_n(childData);
            }
            _NullableDictionaryWithNonNullable_Accessed = true;
        }
        
        
        protected Dictionary<Int32, Example?>? _NullableDictionaryWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<Int32, Example?>? NullableDictionaryWithNullable
        {
            get
            {
                if (!_NullableDictionaryWithNullable_Accessed)
                {
                    LazinateNullableDictionaryWithNullable();
                }
                IsDirty = true; 
                return _NullableDictionaryWithNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableDictionaryWithNullable = value;
                _NullableDictionaryWithNullable_Accessed = true;
            }
        }
        protected bool _NullableDictionaryWithNullable_Accessed;
        private void LazinateNullableDictionaryWithNullable()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableDictionaryWithNullable = default(Dictionary<Int32, Example?>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableDictionaryWithNullable_ByteIndex, _NullableDictionaryWithNullable_ByteLength, null);_NullableDictionaryWithNullable = ConvertFromBytes_Dictionary_Gint_c_C32Example_n_g_n(childData);
            }
            _NullableDictionaryWithNullable_Accessed = true;
        }
        
        
        protected LazinatorList<Example>? _NullableLazinatorListNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorList<Example>? NullableLazinatorListNonNullable
        {
            get
            {
                if (!_NullableLazinatorListNonNullable_Accessed)
                {
                    LazinateNullableLazinatorListNonNullable();
                } 
                return _NullableLazinatorListNonNullable;
            }
            set
            {
                if (_NullableLazinatorListNonNullable != null)
                {
                    _NullableLazinatorListNonNullable.LazinatorParents = _NullableLazinatorListNonNullable.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableLazinatorListNonNullable = value;
                _NullableLazinatorListNonNullable_Accessed = true;
            }
        }
        protected bool _NullableLazinatorListNonNullable_Accessed;
        private void LazinateNullableLazinatorListNonNullable()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableLazinatorListNonNullable = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableLazinatorListNonNullable_ByteIndex, _NullableLazinatorListNonNullable_ByteLength, null);
                _NullableLazinatorListNonNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(201, (c, p) => new LazinatorList<Example>(c, p), childData, this); 
            }
            _NullableLazinatorListNonNullable_Accessed = true;
        }
        
        
        protected LazinatorList<Example?>? _NullableLazinatorListNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LazinatorList<Example?>? NullableLazinatorListNullable
        {
            get
            {
                if (!_NullableLazinatorListNullable_Accessed)
                {
                    LazinateNullableLazinatorListNullable();
                } 
                return _NullableLazinatorListNullable;
            }
            set
            {
                if (_NullableLazinatorListNullable != null)
                {
                    _NullableLazinatorListNullable.LazinatorParents = _NullableLazinatorListNullable.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableLazinatorListNullable = value;
                _NullableLazinatorListNullable_Accessed = true;
            }
        }
        protected bool _NullableLazinatorListNullable_Accessed;
        private void LazinateNullableLazinatorListNullable()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableLazinatorListNullable = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableLazinatorListNullable_ByteIndex, _NullableLazinatorListNullable_ByteLength, null);
                _NullableLazinatorListNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(201, (c, p) => new LazinatorList<Example?>(c, p), childData, this); 
            }
            _NullableLazinatorListNullable_Accessed = true;
        }
        
        
        protected List<Example>? _NullableListOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Example>? NullableListOfNonNullables
        {
            get
            {
                if (!_NullableListOfNonNullables_Accessed)
                {
                    LazinateNullableListOfNonNullables();
                }
                IsDirty = true; 
                return _NullableListOfNonNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableListOfNonNullables = value;
                _NullableListOfNonNullables_Accessed = true;
            }
        }
        protected bool _NullableListOfNonNullables_Accessed;
        private void LazinateNullableListOfNonNullables()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableListOfNonNullables = default(List<Example>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableListOfNonNullables_ByteIndex, _NullableListOfNonNullables_ByteLength, null);_NullableListOfNonNullables = ConvertFromBytes_List_GExample_g_n(childData);
            }
            _NullableListOfNonNullables_Accessed = true;
        }
        
        
        protected List<Example?>? _NullableListOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Example?>? NullableListOfNullables
        {
            get
            {
                if (!_NullableListOfNullables_Accessed)
                {
                    LazinateNullableListOfNullables();
                }
                IsDirty = true; 
                return _NullableListOfNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableListOfNullables = value;
                _NullableListOfNullables_Accessed = true;
            }
        }
        protected bool _NullableListOfNullables_Accessed;
        private void LazinateNullableListOfNullables()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableListOfNullables = default(List<Example?>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableListOfNullables_ByteIndex, _NullableListOfNullables_ByteLength, null);_NullableListOfNullables = ConvertFromBytes_List_GExample_n_g_n(childData);
            }
            _NullableListOfNullables_Accessed = true;
        }
        
        
        protected Memory<Byte>? _NullableMemoryOfBytes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Memory<Byte>? NullableMemoryOfBytes
        {
            get
            {
                if (!_NullableMemoryOfBytes_Accessed)
                {
                    LazinateNullableMemoryOfBytes();
                }
                IsDirty = true; 
                return _NullableMemoryOfBytes;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableMemoryOfBytes = value;
                _NullableMemoryOfBytes_Accessed = true;
            }
        }
        protected bool _NullableMemoryOfBytes_Accessed;
        private void LazinateNullableMemoryOfBytes()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableMemoryOfBytes = default(Memory<Byte>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableMemoryOfBytes_ByteIndex, _NullableMemoryOfBytes_ByteLength, null);_NullableMemoryOfBytes = ConvertFromBytes_Memory_Gbyte_g_n(childData);
            }
            _NullableMemoryOfBytes_Accessed = true;
        }
        
        
        protected Queue<Example>? _NullableQueueOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Queue<Example>? NullableQueueOfNonNullables
        {
            get
            {
                if (!_NullableQueueOfNonNullables_Accessed)
                {
                    LazinateNullableQueueOfNonNullables();
                }
                IsDirty = true; 
                return _NullableQueueOfNonNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableQueueOfNonNullables = value;
                _NullableQueueOfNonNullables_Accessed = true;
            }
        }
        protected bool _NullableQueueOfNonNullables_Accessed;
        private void LazinateNullableQueueOfNonNullables()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableQueueOfNonNullables = default(Queue<Example>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableQueueOfNonNullables_ByteIndex, _NullableQueueOfNonNullables_ByteLength, null);_NullableQueueOfNonNullables = ConvertFromBytes_Queue_GExample_g_n(childData);
            }
            _NullableQueueOfNonNullables_Accessed = true;
        }
        
        
        protected Queue<Example?>? _NullableQueueOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Queue<Example?>? NullableQueueOfNullables
        {
            get
            {
                if (!_NullableQueueOfNullables_Accessed)
                {
                    LazinateNullableQueueOfNullables();
                }
                IsDirty = true; 
                return _NullableQueueOfNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableQueueOfNullables = value;
                _NullableQueueOfNullables_Accessed = true;
            }
        }
        protected bool _NullableQueueOfNullables_Accessed;
        private void LazinateNullableQueueOfNullables()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableQueueOfNullables = default(Queue<Example?>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableQueueOfNullables_ByteIndex, _NullableQueueOfNullables_ByteLength, null);_NullableQueueOfNullables = ConvertFromBytes_Queue_GExample_n_g_n(childData);
            }
            _NullableQueueOfNullables_Accessed = true;
        }
        
        
        protected ReadOnlyMemory<Byte>? _NullableReadOnlyMemoryOfBytes;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlyMemory<Byte>? NullableReadOnlyMemoryOfBytes
        {
            get
            {
                if (!_NullableReadOnlyMemoryOfBytes_Accessed)
                {
                    LazinateNullableReadOnlyMemoryOfBytes();
                }
                IsDirty = true; 
                return _NullableReadOnlyMemoryOfBytes;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableReadOnlyMemoryOfBytes = value;
                _NullableReadOnlyMemoryOfBytes_Accessed = true;
            }
        }
        protected bool _NullableReadOnlyMemoryOfBytes_Accessed;
        private void LazinateNullableReadOnlyMemoryOfBytes()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableReadOnlyMemoryOfBytes = default(ReadOnlyMemory<Byte>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableReadOnlyMemoryOfBytes_ByteIndex, _NullableReadOnlyMemoryOfBytes_ByteLength, null);_NullableReadOnlyMemoryOfBytes = ConvertFromBytes_ReadOnlyMemory_Gbyte_g_n(childData);
            }
            _NullableReadOnlyMemoryOfBytes_Accessed = true;
        }
        
        
        protected RecordLikeClass? _NullableRecordLikeClass;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RecordLikeClass? NullableRecordLikeClass
        {
            get
            {
                if (!_NullableRecordLikeClass_Accessed)
                {
                    LazinateNullableRecordLikeClass();
                }
                IsDirty = true; 
                return _NullableRecordLikeClass;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableRecordLikeClass = value;
                _NullableRecordLikeClass_Accessed = true;
            }
        }
        protected bool _NullableRecordLikeClass_Accessed;
        private void LazinateNullableRecordLikeClass()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableRecordLikeClass = default(RecordLikeClass?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableRecordLikeClass_ByteIndex, _NullableRecordLikeClass_ByteLength, null);_NullableRecordLikeClass = ConvertFromBytes_RecordLikeClass_n(childData);
            }
            _NullableRecordLikeClass_Accessed = true;
        }
        
        
        protected RecordLikeStruct? _NullableRecordLikeStruct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RecordLikeStruct? NullableRecordLikeStruct
        {
            get
            {
                if (!_NullableRecordLikeStruct_Accessed)
                {
                    LazinateNullableRecordLikeStruct();
                }
                IsDirty = true; 
                return _NullableRecordLikeStruct;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableRecordLikeStruct = value;
                _NullableRecordLikeStruct_Accessed = true;
            }
        }
        protected bool _NullableRecordLikeStruct_Accessed;
        private void LazinateNullableRecordLikeStruct()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableRecordLikeStruct = default(RecordLikeStruct?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableRecordLikeStruct_ByteIndex, _NullableRecordLikeStruct_ByteLength, null);_NullableRecordLikeStruct = ConvertFromBytes_RecordLikeStruct_n(childData);
            }
            _NullableRecordLikeStruct_Accessed = true;
        }
        
        
        protected Tuple<Example, Int32>? _NullableRegularTupleWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<Example, Int32>? NullableRegularTupleWithNonNullable
        {
            get
            {
                if (!_NullableRegularTupleWithNonNullable_Accessed)
                {
                    LazinateNullableRegularTupleWithNonNullable();
                }
                IsDirty = true; 
                return _NullableRegularTupleWithNonNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableRegularTupleWithNonNullable = value;
                _NullableRegularTupleWithNonNullable_Accessed = true;
            }
        }
        protected bool _NullableRegularTupleWithNonNullable_Accessed;
        private void LazinateNullableRegularTupleWithNonNullable()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableRegularTupleWithNonNullable = default(Tuple<Example, Int32>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableRegularTupleWithNonNullable_ByteIndex, _NullableRegularTupleWithNonNullable_ByteLength, null);_NullableRegularTupleWithNonNullable = ConvertFromBytes_Tuple_GExample_c_C32int_g_n(childData);
            }
            _NullableRegularTupleWithNonNullable_Accessed = true;
        }
        
        
        protected Tuple<Example?, Int32>? _NullableRegularTupleWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<Example?, Int32>? NullableRegularTupleWithNullable
        {
            get
            {
                if (!_NullableRegularTupleWithNullable_Accessed)
                {
                    LazinateNullableRegularTupleWithNullable();
                }
                IsDirty = true; 
                return _NullableRegularTupleWithNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableRegularTupleWithNullable = value;
                _NullableRegularTupleWithNullable_Accessed = true;
            }
        }
        protected bool _NullableRegularTupleWithNullable_Accessed;
        private void LazinateNullableRegularTupleWithNullable()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableRegularTupleWithNullable = default(Tuple<Example?, Int32>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableRegularTupleWithNullable_ByteIndex, _NullableRegularTupleWithNullable_ByteLength, null);_NullableRegularTupleWithNullable = ConvertFromBytes_Tuple_GExample_n_c_C32int_g_n(childData);
            }
            _NullableRegularTupleWithNullable_Accessed = true;
        }
        
        
        protected Stack<Example>? _NullableStackOfNonNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Stack<Example>? NullableStackOfNonNullables
        {
            get
            {
                if (!_NullableStackOfNonNullables_Accessed)
                {
                    LazinateNullableStackOfNonNullables();
                }
                IsDirty = true; 
                return _NullableStackOfNonNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableStackOfNonNullables = value;
                _NullableStackOfNonNullables_Accessed = true;
            }
        }
        protected bool _NullableStackOfNonNullables_Accessed;
        private void LazinateNullableStackOfNonNullables()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableStackOfNonNullables = default(Stack<Example>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableStackOfNonNullables_ByteIndex, _NullableStackOfNonNullables_ByteLength, null);_NullableStackOfNonNullables = ConvertFromBytes_Stack_GExample_g_n(childData);
            }
            _NullableStackOfNonNullables_Accessed = true;
        }
        
        
        protected Stack<Example?>? _NullableStackOfNullables;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Stack<Example?>? NullableStackOfNullables
        {
            get
            {
                if (!_NullableStackOfNullables_Accessed)
                {
                    LazinateNullableStackOfNullables();
                }
                IsDirty = true; 
                return _NullableStackOfNullables;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableStackOfNullables = value;
                _NullableStackOfNullables_Accessed = true;
            }
        }
        protected bool _NullableStackOfNullables_Accessed;
        private void LazinateNullableStackOfNullables()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableStackOfNullables = default(Stack<Example?>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableStackOfNullables_ByteIndex, _NullableStackOfNullables_ByteLength, null);_NullableStackOfNullables = ConvertFromBytes_Stack_GExample_n_g_n(childData);
            }
            _NullableStackOfNullables_Accessed = true;
        }
        
        
        protected ExampleStructWithoutClass? _NullableStruct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleStructWithoutClass? NullableStruct
        {
            get
            {
                if (!_NullableStruct_Accessed)
                {
                    LazinateNullableStruct();
                } 
                return _NullableStruct;
            }
            set
            {
                if (value.HasValue)
                {
                    var copy = value.Value;
                    copy.LazinatorParents = new LazinatorParentsCollection(this);
                    value = copy;
                }
                
                
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableStruct = value;
                _NullableStruct_Accessed = true;
            }
        }
        protected bool _NullableStruct_Accessed;
        private void LazinateNullableStruct()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableStruct = default(ExampleStructWithoutClass?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableStruct_ByteIndex, _NullableStruct_ByteLength, null);if (childData.Length == 0)
                {
                    _NullableStruct = default;
                }
                else 
                {
                    _NullableStruct = new ExampleStructWithoutClass(childData)
                    {
                        LazinatorParents = new LazinatorParentsCollection(this, null)
                    };
                    
                }
            }
            _NullableStruct_Accessed = true;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleStructWithoutClass? NullableStruct_Copy
        {
            get
            {
                if (!_NullableStruct_Accessed)
                {
                    if (LazinatorMemoryStorage.Length == 0)
                    {
                        return null;
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableStruct_ByteIndex, _NullableStruct_ByteLength, null);
                        var toReturn = new ExampleStructWithoutClass(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                if (_NullableStruct == null)
                {
                    return null;
                }
                var cleanCopy = _NullableStruct.Value;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        protected (Example, Int32)? _NullableValueTupleWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (Example, Int32)? NullableValueTupleWithNonNullable
        {
            get
            {
                if (!_NullableValueTupleWithNonNullable_Accessed)
                {
                    LazinateNullableValueTupleWithNonNullable();
                }
                IsDirty = true; 
                return _NullableValueTupleWithNonNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableValueTupleWithNonNullable = value;
                _NullableValueTupleWithNonNullable_Accessed = true;
            }
        }
        protected bool _NullableValueTupleWithNonNullable_Accessed;
        private void LazinateNullableValueTupleWithNonNullable()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableValueTupleWithNonNullable = default((Example, Int32)?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableValueTupleWithNonNullable_ByteIndex, _NullableValueTupleWithNonNullable_ByteLength, null);_NullableValueTupleWithNonNullable = ConvertFromBytes__PExample_c_C32int_p_n(childData);
            }
            _NullableValueTupleWithNonNullable_Accessed = true;
        }
        
        
        protected (Example?, Int32)? _NullableValueTupleWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (Example?, Int32)? NullableValueTupleWithNullable
        {
            get
            {
                if (!_NullableValueTupleWithNullable_Accessed)
                {
                    LazinateNullableValueTupleWithNullable();
                }
                IsDirty = true; 
                return _NullableValueTupleWithNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _NullableValueTupleWithNullable = value;
                _NullableValueTupleWithNullable_Accessed = true;
            }
        }
        protected bool _NullableValueTupleWithNullable_Accessed;
        private void LazinateNullableValueTupleWithNullable()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _NullableValueTupleWithNullable = default((Example?, Int32)?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _NullableValueTupleWithNullable_ByteIndex, _NullableValueTupleWithNullable_ByteLength, null);_NullableValueTupleWithNullable = ConvertFromBytes__PExample_n_c_C32int_p_n(childData);
            }
            _NullableValueTupleWithNullable_Accessed = true;
        }
        
        
        protected (Example, Int32) _ValueTupleWithNonNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (Example, Int32) ValueTupleWithNonNullable
        {
            get
            {
                if (!_ValueTupleWithNonNullable_Accessed)
                {
                    LazinateValueTupleWithNonNullable();
                }
                IsDirty = true; 
                return _ValueTupleWithNonNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _ValueTupleWithNonNullable = value;
                _ValueTupleWithNonNullable_Accessed = true;
            }
        }
        protected bool _ValueTupleWithNonNullable_Accessed;
        private void LazinateValueTupleWithNonNullable()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _ValueTupleWithNonNullable = default((Example, Int32));
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ValueTupleWithNonNullable_ByteIndex, _ValueTupleWithNonNullable_ByteLength, null);_ValueTupleWithNonNullable = ConvertFromBytes__PExample_c_C32int_p(childData);
            }
            _ValueTupleWithNonNullable_Accessed = true;
        }
        
        
        protected (Example?, Int32) _ValueTupleWithNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (Example?, Int32) ValueTupleWithNullable
        {
            get
            {
                if (!_ValueTupleWithNullable_Accessed)
                {
                    LazinateValueTupleWithNullable();
                }
                IsDirty = true; 
                return _ValueTupleWithNullable;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _ValueTupleWithNullable = value;
                _ValueTupleWithNullable_Accessed = true;
            }
        }
        protected bool _ValueTupleWithNullable_Accessed;
        private void LazinateValueTupleWithNullable()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _ValueTupleWithNullable = default((Example?, Int32));
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ValueTupleWithNullable_ByteIndex, _ValueTupleWithNullable_ByteLength, null);_ValueTupleWithNullable = ConvertFromBytes__PExample_n_c_C32int_p(childData);
            }
            _ValueTupleWithNullable_Accessed = true;
        }
        
        
        /* Serialization, deserialization, and object relationships */
        
        public NullableEnabledContext(Example[] nonNullableArrayOfNonNullables, Example?[] nonNullableArrayOfNullables, Example nonNullableClass, Dictionary<Int32, Example> nonNullableDictionaryWithNonNullable, Dictionary<Int32, Example?> nonNullableDictionaryWithNullable, IExample nonNullableInterface, LazinatorList<Example> nonNullableLazinatorListNonNullable, LazinatorList<Example?> nonNullableLazinatorListNullable, List<Example> nonNullableListOfNonNullables, List<Example?> nonNullableListOfNullables, Queue<Example> nonNullableQueueOfNonNullables, Queue<Example?> nonNullableQueueOfNullables, RecordLikeClass nonNullableRecordLikeClass, RecordLikeStruct nonNullableRecordLikeStruct, Tuple<Example, Int32> nonNullableRegularTupleWithNonNullable, Tuple<Example?, Int32> nonNullableRegularTupleWithNullable, Stack<Example> nonNullableStackOfNonNullables, Stack<Example?> nonNullableStackOfNullables, IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren)
        {
            _NonNullableArrayOfNonNullables = nonNullableArrayOfNonNullables;
            _NonNullableArrayOfNullables = nonNullableArrayOfNullables;
            _NonNullableClass = nonNullableClass;
            _NonNullableDictionaryWithNonNullable = nonNullableDictionaryWithNonNullable;
            _NonNullableDictionaryWithNullable = nonNullableDictionaryWithNullable;
            _NonNullableInterface = nonNullableInterface;
            _NonNullableLazinatorListNonNullable = nonNullableLazinatorListNonNullable;
            _NonNullableLazinatorListNullable = nonNullableLazinatorListNullable;
            _NonNullableListOfNonNullables = nonNullableListOfNonNullables;
            _NonNullableListOfNullables = nonNullableListOfNullables;
            _NonNullableQueueOfNonNullables = nonNullableQueueOfNonNullables;
            _NonNullableQueueOfNullables = nonNullableQueueOfNullables;
            _NonNullableRecordLikeClass = nonNullableRecordLikeClass;
            _NonNullableRecordLikeStruct = nonNullableRecordLikeStruct;
            _NonNullableRegularTupleWithNonNullable = nonNullableRegularTupleWithNonNullable;
            _NonNullableRegularTupleWithNullable = nonNullableRegularTupleWithNullable;
            _NonNullableStackOfNonNullables = nonNullableStackOfNonNullables;
            _NonNullableStackOfNullables = nonNullableStackOfNullables;
            
            if (nonNullableArrayOfNonNullables == null)
            {
                throw new ArgumentNullException("nonNullableArrayOfNonNullables");
            }
            if (nonNullableArrayOfNullables == null)
            {
                throw new ArgumentNullException("nonNullableArrayOfNullables");
            }
            if (nonNullableClass == null)
            {
                throw new ArgumentNullException("nonNullableClass");
            }
            if (nonNullableDictionaryWithNonNullable == null)
            {
                throw new ArgumentNullException("nonNullableDictionaryWithNonNullable");
            }
            if (nonNullableDictionaryWithNullable == null)
            {
                throw new ArgumentNullException("nonNullableDictionaryWithNullable");
            }
            if (nonNullableInterface == null)
            {
                throw new ArgumentNullException("nonNullableInterface");
            }
            if (nonNullableLazinatorListNonNullable == null)
            {
                throw new ArgumentNullException("nonNullableLazinatorListNonNullable");
            }
            if (nonNullableLazinatorListNullable == null)
            {
                throw new ArgumentNullException("nonNullableLazinatorListNullable");
            }
            if (nonNullableListOfNonNullables == null)
            {
                throw new ArgumentNullException("nonNullableListOfNonNullables");
            }
            if (nonNullableListOfNullables == null)
            {
                throw new ArgumentNullException("nonNullableListOfNullables");
            }
            if (nonNullableQueueOfNonNullables == null)
            {
                throw new ArgumentNullException("nonNullableQueueOfNonNullables");
            }
            if (nonNullableQueueOfNullables == null)
            {
                throw new ArgumentNullException("nonNullableQueueOfNullables");
            }
            if (nonNullableRegularTupleWithNonNullable == null)
            {
                throw new ArgumentNullException("nonNullableRegularTupleWithNonNullable");
            }
            if (nonNullableRegularTupleWithNullable == null)
            {
                throw new ArgumentNullException("nonNullableRegularTupleWithNullable");
            }
            if (nonNullableStackOfNonNullables == null)
            {
                throw new ArgumentNullException("nonNullableStackOfNonNullables");
            }
            if (nonNullableStackOfNullables == null)
            {
                throw new ArgumentNullException("nonNullableStackOfNullables");
            }
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public NullableEnabledContext(LazinatorMemory serializedBytes, ILazinator? parent = null, IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren, int? lazinatorObjectVersion = null)
        {
            if (lazinatorObjectVersion != null)
            {
                LazinatorObjectVersion = (int) lazinatorObjectVersion;
            }
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
            LazinatorParents = new LazinatorParentsCollection(parent, null);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;LazinatorMemory childData;
            
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableArrayOfNonNullables_ByteIndex, _NonNullableArrayOfNonNullables_ByteLength, null);_NonNullableArrayOfNonNullables = ConvertFromBytes_Example_B_b(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableArrayOfNullables_ByteIndex, _NonNullableArrayOfNullables_ByteLength, null);_NonNullableArrayOfNullables = ConvertFromBytes_Example_n_B_b(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableClass_ByteIndex, _NonNullableClass_ByteLength, null);
            _NonNullableClass = DeserializationFactory.Instance.CreateBaseOrDerivedType(1012, (c, p) => new Example(c, p), childData, this); 
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableDictionaryWithNonNullable_ByteIndex, _NonNullableDictionaryWithNonNullable_ByteLength, null);_NonNullableDictionaryWithNonNullable = ConvertFromBytes_Dictionary_Gint_c_C32Example_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableDictionaryWithNullable_ByteIndex, _NonNullableDictionaryWithNullable_ByteLength, null);_NonNullableDictionaryWithNullable = ConvertFromBytes_Dictionary_Gint_c_C32Example_n_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableInterface_ByteIndex, _NonNullableInterface_ByteLength, null);
            _NonNullableInterface = DeserializationFactory.Instance.CreateBasedOnType<IExample>(childData, this); 
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableLazinatorListNonNullable_ByteIndex, _NonNullableLazinatorListNonNullable_ByteLength, null);
            _NonNullableLazinatorListNonNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(201, (c, p) => new LazinatorList<Example>(c, p), childData, this); 
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableLazinatorListNullable_ByteIndex, _NonNullableLazinatorListNullable_ByteLength, null);
            _NonNullableLazinatorListNullable = DeserializationFactory.Instance.CreateBaseOrDerivedType(201, (c, p) => new LazinatorList<Example?>(c, p), childData, this); 
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableListOfNonNullables_ByteIndex, _NonNullableListOfNonNullables_ByteLength, null);_NonNullableListOfNonNullables = ConvertFromBytes_List_GExample_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableListOfNullables_ByteIndex, _NonNullableListOfNullables_ByteLength, null);_NonNullableListOfNullables = ConvertFromBytes_List_GExample_n_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableQueueOfNonNullables_ByteIndex, _NonNullableQueueOfNonNullables_ByteLength, null);_NonNullableQueueOfNonNullables = ConvertFromBytes_Queue_GExample_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableQueueOfNullables_ByteIndex, _NonNullableQueueOfNullables_ByteLength, null);_NonNullableQueueOfNullables = ConvertFromBytes_Queue_GExample_n_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableRecordLikeClass_ByteIndex, _NonNullableRecordLikeClass_ByteLength, null);_NonNullableRecordLikeClass = ConvertFromBytes_RecordLikeClass(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableRecordLikeStruct_ByteIndex, _NonNullableRecordLikeStruct_ByteLength, null);_NonNullableRecordLikeStruct = ConvertFromBytes_RecordLikeStruct(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableRegularTupleWithNonNullable_ByteIndex, _NonNullableRegularTupleWithNonNullable_ByteLength, null);_NonNullableRegularTupleWithNonNullable = ConvertFromBytes_Tuple_GExample_c_C32int_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableRegularTupleWithNullable_ByteIndex, _NonNullableRegularTupleWithNullable_ByteLength, null);_NonNullableRegularTupleWithNullable = ConvertFromBytes_Tuple_GExample_n_c_C32int_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableStackOfNonNullables_ByteIndex, _NonNullableStackOfNonNullables_ByteLength, null);_NonNullableStackOfNonNullables = ConvertFromBytes_Stack_GExample_g(childData);
            childData = GetChildSlice(LazinatorMemoryStorage, _NonNullableStackOfNullables_ByteIndex, _NonNullableStackOfNullables_ByteLength, null);_NonNullableStackOfNullables = ConvertFromBytes_Stack_GExample_n_g(childData);
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorMemoryStorage.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        protected virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        protected virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialReadOnlyMemory.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt32(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt32(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            int totalBytes = ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return _OverallEndByteIndex;
        }
        
        public virtual void SerializeLazinator()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorMemoryStorage.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
                
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(LazinatorSerializationOptions.Default);
            }
            else
            {
                BufferWriter writer = new BufferWriter(LazinatorMemoryStorage.LengthInt ?? 0);
                LazinatorMemoryStorage.WriteToBuffer(ref writer);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual LazinatorMemory SerializeLazinator(in LazinatorSerializationOptions options) 
        {
            if (LazinatorMemoryStorage.IsEmpty || options.IncludeChildrenMode != OriginalIncludeChildrenMode || (options.SerializeDiffs || options.VerifyCleanness || IsDirty || (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(options);
            }
            BufferWriter writer = new BufferWriter(LazinatorMemoryStorage.LengthInt ?? 0);
            LazinatorMemoryStorage.WriteToBuffer(ref writer);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(in LazinatorSerializationOptions options) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.LengthInt ?? ExpandableBytes.DefaultMinBufferSize;
            BufferWriter writer = new BufferWriter(bufferSize);
            SerializeToExistingBuffer(ref writer, options);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator? CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            NullableEnabledContext clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new NullableEnabledContext(NonNullableArrayOfNonNullables, NonNullableArrayOfNullables, NonNullableClass, NonNullableDictionaryWithNonNullable, NonNullableDictionaryWithNullable, NonNullableInterface, NonNullableLazinatorListNonNullable, NonNullableLazinatorListNullable, NonNullableListOfNonNullables, NonNullableListOfNullables, NonNullableQueueOfNonNullables, NonNullableQueueOfNullables, NonNullableRecordLikeClass, NonNullableRecordLikeStruct, NonNullableRegularTupleWithNonNullable, NonNullableRegularTupleWithNullable, NonNullableStackOfNonNullables, NonNullableStackOfNullables, includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (NullableEnabledContext)AssignCloneProperties(clone, includeChildrenMode)!;
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, this);
                clone = new NullableEnabledContext(bytes);
            }
            return clone;
        }
        
        protected virtual ILazinator? AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            NullableEnabledContext typedClone = (NullableEnabledContext) clone;
            typedClone.MyInt = MyInt;
            typedClone.MyNullableInt = MyNullableInt;
            typedClone.NonNullableString = NonNullableString;
            typedClone.NullableString = NullableString;
            typedClone.ByteReadOnlySpan = CloneOrChange_ReadOnlySpan_Gbyte_g(ByteReadOnlySpan, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (ExplicitlyNullable == null)
                {
                    typedClone.ExplicitlyNullable = null;
                }
                else
                {
                    typedClone.ExplicitlyNullable = (Example?) ExplicitlyNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (ExplicitlyNullableInterface == null)
                {
                    typedClone.ExplicitlyNullableInterface = null;
                }
                else
                {
                    typedClone.ExplicitlyNullableInterface = (IExample?) ExplicitlyNullableInterface.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            typedClone.NonNullableArrayOfNonNullables = CloneOrChange_Example_B_b(NonNullableArrayOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableArrayOfNullables = CloneOrChange_Example_n_B_b(NonNullableArrayOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableClass = (Example) NonNullableClass.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            typedClone.NonNullableDictionaryWithNonNullable = CloneOrChange_Dictionary_Gint_c_C32Example_g(NonNullableDictionaryWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableDictionaryWithNullable = CloneOrChange_Dictionary_Gint_c_C32Example_n_g(NonNullableDictionaryWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableInterface = (IExample) NonNullableInterface.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            typedClone.NonNullableLazinatorListNonNullable = (LazinatorList<Example>) NonNullableLazinatorListNonNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            typedClone.NonNullableLazinatorListNullable = (LazinatorList<Example?>) NonNullableLazinatorListNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            typedClone.NonNullableListOfNonNullables = CloneOrChange_List_GExample_g(NonNullableListOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableListOfNullables = CloneOrChange_List_GExample_n_g(NonNullableListOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableMemoryOfBytes = CloneOrChange_Memory_Gbyte_g(NonNullableMemoryOfBytes, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableQueueOfNonNullables = CloneOrChange_Queue_GExample_g(NonNullableQueueOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableQueueOfNullables = CloneOrChange_Queue_GExample_n_g(NonNullableQueueOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableReadOnlyMemoryOfBytes = CloneOrChange_ReadOnlyMemory_Gbyte_g(NonNullableReadOnlyMemoryOfBytes, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableRecordLikeClass = CloneOrChange_RecordLikeClass(NonNullableRecordLikeClass, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableRecordLikeStruct = CloneOrChange_RecordLikeStruct(NonNullableRecordLikeStruct, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableRegularTupleWithNonNullable = CloneOrChange_Tuple_GExample_c_C32int_g(NonNullableRegularTupleWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableRegularTupleWithNullable = CloneOrChange_Tuple_GExample_n_c_C32int_g(NonNullableRegularTupleWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableStackOfNonNullables = CloneOrChange_Stack_GExample_g(NonNullableStackOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NonNullableStackOfNullables = CloneOrChange_Stack_GExample_n_g(NonNullableStackOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.NonNullableStruct = (ExampleStructWithoutClass) NonNullableStruct.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            typedClone.NullableArrayOfNonNullables = CloneOrChange_Example_B_b_n(NullableArrayOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableArrayOfNullables = CloneOrChange_Example_n_B_b_n(NullableArrayOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableDictionaryWithNonNullable = CloneOrChange_Dictionary_Gint_c_C32Example_g_n(NullableDictionaryWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableDictionaryWithNullable = CloneOrChange_Dictionary_Gint_c_C32Example_n_g_n(NullableDictionaryWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (NullableLazinatorListNonNullable == null)
                {
                    typedClone.NullableLazinatorListNonNullable = null;
                }
                else
                {
                    typedClone.NullableLazinatorListNonNullable = (LazinatorList<Example>?) NullableLazinatorListNonNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (NullableLazinatorListNullable == null)
                {
                    typedClone.NullableLazinatorListNullable = null;
                }
                else
                {
                    typedClone.NullableLazinatorListNullable = (LazinatorList<Example?>?) NullableLazinatorListNullable.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            typedClone.NullableListOfNonNullables = CloneOrChange_List_GExample_g_n(NullableListOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableListOfNullables = CloneOrChange_List_GExample_n_g_n(NullableListOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableMemoryOfBytes = CloneOrChange_Memory_Gbyte_g_n(NullableMemoryOfBytes, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableQueueOfNonNullables = CloneOrChange_Queue_GExample_g_n(NullableQueueOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableQueueOfNullables = CloneOrChange_Queue_GExample_n_g_n(NullableQueueOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableReadOnlyMemoryOfBytes = CloneOrChange_ReadOnlyMemory_Gbyte_g_n(NullableReadOnlyMemoryOfBytes, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableRecordLikeClass = CloneOrChange_RecordLikeClass_n(NullableRecordLikeClass, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableRecordLikeStruct = CloneOrChange_RecordLikeStruct_n(NullableRecordLikeStruct, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableRegularTupleWithNonNullable = CloneOrChange_Tuple_GExample_c_C32int_g_n(NullableRegularTupleWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableRegularTupleWithNullable = CloneOrChange_Tuple_GExample_n_c_C32int_g_n(NullableRegularTupleWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableStackOfNonNullables = CloneOrChange_Stack_GExample_g_n(NullableStackOfNonNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableStackOfNullables = CloneOrChange_Stack_GExample_n_g_n(NullableStackOfNullables, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (NullableStruct == null)
                {
                    typedClone.NullableStruct = null;
                }
                else
                {
                    typedClone.NullableStruct = (ExampleStructWithoutClass?) NullableStruct.Value.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            typedClone.NullableValueTupleWithNonNullable = CloneOrChange__PExample_c_C32int_p_n(NullableValueTupleWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.NullableValueTupleWithNullable = CloneOrChange__PExample_n_c_C32int_p_n(NullableValueTupleWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.ValueTupleWithNonNullable = CloneOrChange__PExample_c_C32int_p(ValueTupleWithNonNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.ValueTupleWithNullable = CloneOrChange__PExample_n_c_C32int_p(ValueTupleWithNullable, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        
        public IEnumerable<ILazinator?> EnumerateLazinatorNodes(Func<ILazinator?, bool>? matchCriterion, bool stopExploringBelowMatch, Func<ILazinator?, bool>? exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        public virtual IEnumerable<(string propertyName, ILazinator? descendant)> EnumerateLazinatorDescendants(Func<ILazinator?, bool>? matchCriterion, bool stopExploringBelowMatch, Func<ILazinator?, bool>? exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ExplicitlyNullable_Accessed) && ExplicitlyNullable == null)
            {
                yield return ("ExplicitlyNullable", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ExplicitlyNullable != null) || (_ExplicitlyNullable_Accessed && _ExplicitlyNullable != null))
                {
                    bool isMatch_ExplicitlyNullable = matchCriterion == null || matchCriterion(ExplicitlyNullable);
                    bool shouldExplore_ExplicitlyNullable = exploreCriterion == null || exploreCriterion(ExplicitlyNullable);
                    if (isMatch_ExplicitlyNullable)
                    {
                        yield return ("ExplicitlyNullable", ExplicitlyNullable);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_ExplicitlyNullable) && shouldExplore_ExplicitlyNullable)
                    {
                        foreach (var toYield in ExplicitlyNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ExplicitlyNullable" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ExplicitlyNullableInterface_Accessed) && ExplicitlyNullableInterface == null)
            {
                yield return ("ExplicitlyNullableInterface", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ExplicitlyNullableInterface != null) || (_ExplicitlyNullableInterface_Accessed && _ExplicitlyNullableInterface != null))
                {
                    bool isMatch_ExplicitlyNullableInterface = matchCriterion == null || matchCriterion(ExplicitlyNullableInterface);
                    bool shouldExplore_ExplicitlyNullableInterface = exploreCriterion == null || exploreCriterion(ExplicitlyNullableInterface);
                    if (isMatch_ExplicitlyNullableInterface)
                    {
                        yield return ("ExplicitlyNullableInterface", ExplicitlyNullableInterface);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_ExplicitlyNullableInterface) && shouldExplore_ExplicitlyNullableInterface)
                    {
                        foreach (var toYield in ExplicitlyNullableInterface!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ExplicitlyNullableInterface" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && NonNullableClass == null)
            {
                yield return ("NonNullableClass", default);
            }
            else
            {
                bool isMatch_NonNullableClass = matchCriterion == null || matchCriterion(NonNullableClass);
                bool shouldExplore_NonNullableClass = exploreCriterion == null || exploreCriterion(NonNullableClass);
                if (isMatch_NonNullableClass)
                {
                    yield return ("NonNullableClass", NonNullableClass);
                }
                if ((!stopExploringBelowMatch || !isMatch_NonNullableClass) && shouldExplore_NonNullableClass)
                {
                    foreach (var toYield in NonNullableClass!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                    {
                        yield return ("NonNullableClass" + "." + toYield.propertyName, toYield.descendant);
                    }
                }
            }
            if (enumerateNulls && NonNullableInterface == null)
            {
                yield return ("NonNullableInterface", default);
            }
            else
            {
                bool isMatch_NonNullableInterface = matchCriterion == null || matchCriterion(NonNullableInterface);
                bool shouldExplore_NonNullableInterface = exploreCriterion == null || exploreCriterion(NonNullableInterface);
                if (isMatch_NonNullableInterface)
                {
                    yield return ("NonNullableInterface", NonNullableInterface);
                }
                if ((!stopExploringBelowMatch || !isMatch_NonNullableInterface) && shouldExplore_NonNullableInterface)
                {
                    foreach (var toYield in NonNullableInterface!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                    {
                        yield return ("NonNullableInterface" + "." + toYield.propertyName, toYield.descendant);
                    }
                }
            }
            if (enumerateNulls && NonNullableLazinatorListNonNullable == null)
            {
                yield return ("NonNullableLazinatorListNonNullable", default);
            }
            else
            {
                bool isMatch_NonNullableLazinatorListNonNullable = matchCriterion == null || matchCriterion(NonNullableLazinatorListNonNullable);
                bool shouldExplore_NonNullableLazinatorListNonNullable = exploreCriterion == null || exploreCriterion(NonNullableLazinatorListNonNullable);
                if (isMatch_NonNullableLazinatorListNonNullable)
                {
                    yield return ("NonNullableLazinatorListNonNullable", NonNullableLazinatorListNonNullable);
                }
                if ((!stopExploringBelowMatch || !isMatch_NonNullableLazinatorListNonNullable) && shouldExplore_NonNullableLazinatorListNonNullable)
                {
                    foreach (var toYield in NonNullableLazinatorListNonNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                    {
                        yield return ("NonNullableLazinatorListNonNullable" + "." + toYield.propertyName, toYield.descendant);
                    }
                }
            }
            if (enumerateNulls && NonNullableLazinatorListNullable == null)
            {
                yield return ("NonNullableLazinatorListNullable", default);
            }
            else
            {
                bool isMatch_NonNullableLazinatorListNullable = matchCriterion == null || matchCriterion(NonNullableLazinatorListNullable);
                bool shouldExplore_NonNullableLazinatorListNullable = exploreCriterion == null || exploreCriterion(NonNullableLazinatorListNullable);
                if (isMatch_NonNullableLazinatorListNullable)
                {
                    yield return ("NonNullableLazinatorListNullable", NonNullableLazinatorListNullable);
                }
                if ((!stopExploringBelowMatch || !isMatch_NonNullableLazinatorListNullable) && shouldExplore_NonNullableLazinatorListNullable)
                {
                    foreach (var toYield in NonNullableLazinatorListNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                    {
                        yield return ("NonNullableLazinatorListNullable" + "." + toYield.propertyName, toYield.descendant);
                    }
                }
            }
            bool isMatch_NonNullableStruct = matchCriterion == null || matchCriterion(NonNullableStruct);
            bool shouldExplore_NonNullableStruct = exploreCriterion == null || exploreCriterion(NonNullableStruct);
            if (isMatch_NonNullableStruct)
            {
                yield return ("NonNullableStruct", NonNullableStruct);
            }
            if ((!stopExploringBelowMatch || !isMatch_NonNullableStruct) && shouldExplore_NonNullableStruct)
            {
                foreach (var toYield in NonNullableStruct!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("NonNullableStruct" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _NullableLazinatorListNonNullable_Accessed) && NullableLazinatorListNonNullable == null)
            {
                yield return ("NullableLazinatorListNonNullable", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && NullableLazinatorListNonNullable != null) || (_NullableLazinatorListNonNullable_Accessed && _NullableLazinatorListNonNullable != null))
                {
                    bool isMatch_NullableLazinatorListNonNullable = matchCriterion == null || matchCriterion(NullableLazinatorListNonNullable);
                    bool shouldExplore_NullableLazinatorListNonNullable = exploreCriterion == null || exploreCriterion(NullableLazinatorListNonNullable);
                    if (isMatch_NullableLazinatorListNonNullable)
                    {
                        yield return ("NullableLazinatorListNonNullable", NullableLazinatorListNonNullable);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_NullableLazinatorListNonNullable) && shouldExplore_NullableLazinatorListNonNullable)
                    {
                        foreach (var toYield in NullableLazinatorListNonNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("NullableLazinatorListNonNullable" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _NullableLazinatorListNullable_Accessed) && NullableLazinatorListNullable == null)
            {
                yield return ("NullableLazinatorListNullable", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && NullableLazinatorListNullable != null) || (_NullableLazinatorListNullable_Accessed && _NullableLazinatorListNullable != null))
                {
                    bool isMatch_NullableLazinatorListNullable = matchCriterion == null || matchCriterion(NullableLazinatorListNullable);
                    bool shouldExplore_NullableLazinatorListNullable = exploreCriterion == null || exploreCriterion(NullableLazinatorListNullable);
                    if (isMatch_NullableLazinatorListNullable)
                    {
                        yield return ("NullableLazinatorListNullable", NullableLazinatorListNullable);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_NullableLazinatorListNullable) && shouldExplore_NullableLazinatorListNullable)
                    {
                        foreach (var toYield in NullableLazinatorListNullable!.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("NullableLazinatorListNullable" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _NullableStruct_Accessed) && NullableStruct == null)
            {
                yield return ("NullableStruct", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && NullableStruct != null) || (_NullableStruct_Accessed && _NullableStruct != null))
                {
                    bool isMatch_NullableStruct = matchCriterion == null || matchCriterion(NullableStruct);
                    bool shouldExplore_NullableStruct = exploreCriterion == null || exploreCriterion(NullableStruct);
                    if (isMatch_NullableStruct)
                    {
                        yield return ("NullableStruct", NullableStruct);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_NullableStruct) && shouldExplore_NullableStruct)
                    {
                        foreach (var toYield in NullableStruct!.Value.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("NullableStruct" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            yield break;
        }
        
        
        public virtual IEnumerable<(string propertyName, object? descendant)> EnumerateNonLazinatorProperties()
        {
            yield return ("MyInt", (object?)MyInt);
            yield return ("MyNullableInt", (object?)MyNullableInt);
            yield return ("NonNullableString", (object?)NonNullableString);
            yield return ("NullableString", (object?)NullableString);
            yield return ("ByteReadOnlySpan", (object?)_ByteReadOnlySpan);
            yield return ("NonNullableArrayOfNonNullables", (object?)NonNullableArrayOfNonNullables);
            yield return ("NonNullableArrayOfNullables", (object?)NonNullableArrayOfNullables);
            yield return ("NonNullableDictionaryWithNonNullable", (object?)NonNullableDictionaryWithNonNullable);
            yield return ("NonNullableDictionaryWithNullable", (object?)NonNullableDictionaryWithNullable);
            yield return ("NonNullableListOfNonNullables", (object?)NonNullableListOfNonNullables);
            yield return ("NonNullableListOfNullables", (object?)NonNullableListOfNullables);
            yield return ("NonNullableMemoryOfBytes", (object?)NonNullableMemoryOfBytes);
            yield return ("NonNullableQueueOfNonNullables", (object?)NonNullableQueueOfNonNullables);
            yield return ("NonNullableQueueOfNullables", (object?)NonNullableQueueOfNullables);
            yield return ("NonNullableReadOnlyMemoryOfBytes", (object?)NonNullableReadOnlyMemoryOfBytes);
            yield return ("NonNullableRecordLikeClass", (object?)NonNullableRecordLikeClass);
            yield return ("NonNullableRecordLikeStruct", (object?)NonNullableRecordLikeStruct);
            yield return ("NonNullableRegularTupleWithNonNullable", (object?)NonNullableRegularTupleWithNonNullable);
            yield return ("NonNullableRegularTupleWithNullable", (object?)NonNullableRegularTupleWithNullable);
            yield return ("NonNullableStackOfNonNullables", (object?)NonNullableStackOfNonNullables);
            yield return ("NonNullableStackOfNullables", (object?)NonNullableStackOfNullables);
            yield return ("NullableArrayOfNonNullables", (object?)NullableArrayOfNonNullables);
            yield return ("NullableArrayOfNullables", (object?)NullableArrayOfNullables);
            yield return ("NullableDictionaryWithNonNullable", (object?)NullableDictionaryWithNonNullable);
            yield return ("NullableDictionaryWithNullable", (object?)NullableDictionaryWithNullable);
            yield return ("NullableListOfNonNullables", (object?)NullableListOfNonNullables);
            yield return ("NullableListOfNullables", (object?)NullableListOfNullables);
            yield return ("NullableMemoryOfBytes", (object?)NullableMemoryOfBytes);
            yield return ("NullableQueueOfNonNullables", (object?)NullableQueueOfNonNullables);
            yield return ("NullableQueueOfNullables", (object?)NullableQueueOfNullables);
            yield return ("NullableReadOnlyMemoryOfBytes", (object?)NullableReadOnlyMemoryOfBytes);
            yield return ("NullableRecordLikeClass", (object?)NullableRecordLikeClass);
            yield return ("NullableRecordLikeStruct", (object?)NullableRecordLikeStruct);
            yield return ("NullableRegularTupleWithNonNullable", (object?)NullableRegularTupleWithNonNullable);
            yield return ("NullableRegularTupleWithNullable", (object?)NullableRegularTupleWithNullable);
            yield return ("NullableStackOfNonNullables", (object?)NullableStackOfNonNullables);
            yield return ("NullableStackOfNullables", (object?)NullableStackOfNullables);
            yield return ("NullableValueTupleWithNonNullable", (object?)NullableValueTupleWithNonNullable);
            yield return ("NullableValueTupleWithNullable", (object?)NullableValueTupleWithNullable);
            yield return ("ValueTupleWithNonNullable", (object?)ValueTupleWithNonNullable);
            yield return ("ValueTupleWithNullable", (object?)ValueTupleWithNullable);
            yield break;
        }
        
        public virtual ILazinator? ForEachLazinator(Func<ILazinator?, ILazinator?>? changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            if ((!exploreOnlyDeserializedChildren && ExplicitlyNullable != null) || (_ExplicitlyNullable_Accessed && _ExplicitlyNullable != null))
            {
                _ExplicitlyNullable = (Example?) _ExplicitlyNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && ExplicitlyNullableInterface != null) || (_ExplicitlyNullableInterface_Accessed && _ExplicitlyNullableInterface != null))
            {
                _ExplicitlyNullableInterface = (IExample?) _ExplicitlyNullableInterface!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            _NonNullableClass = (Example) _NonNullableClass!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            _NonNullableInterface = (IExample) _NonNullableInterface!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            _NonNullableLazinatorListNonNullable = (LazinatorList<Example>) _NonNullableLazinatorListNonNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            _NonNullableLazinatorListNullable = (LazinatorList<Example?>) _NonNullableLazinatorListNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            var deserialized_NonNullableStruct = NonNullableStruct;
            _NonNullableStruct = (ExampleStructWithoutClass) _NonNullableStruct!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            if ((!exploreOnlyDeserializedChildren && NullableLazinatorListNonNullable != null) || (_NullableLazinatorListNonNullable_Accessed && _NullableLazinatorListNonNullable != null))
            {
                _NullableLazinatorListNonNullable = (LazinatorList<Example>?) _NullableLazinatorListNonNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableLazinatorListNullable != null) || (_NullableLazinatorListNullable_Accessed && _NullableLazinatorListNullable != null))
            {
                _NullableLazinatorListNullable = (LazinatorList<Example?>?) _NullableLazinatorListNullable!.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableStruct != null) || (_NullableStruct_Accessed && _NullableStruct != null))
            {
                _NullableStruct = (ExampleStructWithoutClass?) _NullableStruct!.Value.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            _NonNullableArrayOfNonNullables = (Example[]) CloneOrChange_Example_B_b(_NonNullableArrayOfNonNullables!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            _NonNullableArrayOfNullables = (Example?[]) CloneOrChange_Example_n_B_b(_NonNullableArrayOfNullables!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            _NonNullableDictionaryWithNonNullable = (Dictionary<Int32, Example>) CloneOrChange_Dictionary_Gint_c_C32Example_g(_NonNullableDictionaryWithNonNullable!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            _NonNullableDictionaryWithNullable = (Dictionary<Int32, Example?>) CloneOrChange_Dictionary_Gint_c_C32Example_n_g(_NonNullableDictionaryWithNullable!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            _NonNullableListOfNonNullables = (List<Example>) CloneOrChange_List_GExample_g(_NonNullableListOfNonNullables!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            _NonNullableListOfNullables = (List<Example?>) CloneOrChange_List_GExample_n_g(_NonNullableListOfNullables!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            _NonNullableQueueOfNonNullables = (Queue<Example>) CloneOrChange_Queue_GExample_g(_NonNullableQueueOfNonNullables!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            _NonNullableQueueOfNullables = (Queue<Example?>) CloneOrChange_Queue_GExample_n_g(_NonNullableQueueOfNullables!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            _NonNullableRecordLikeClass = (RecordLikeClass) CloneOrChange_RecordLikeClass(_NonNullableRecordLikeClass!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            var deserialized_NonNullableRecordLikeStruct = NonNullableRecordLikeStruct;
            _NonNullableRecordLikeStruct = (RecordLikeStruct) CloneOrChange_RecordLikeStruct(_NonNullableRecordLikeStruct!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            _NonNullableRegularTupleWithNonNullable = (Tuple<Example, Int32>) CloneOrChange_Tuple_GExample_c_C32int_g(_NonNullableRegularTupleWithNonNullable!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            _NonNullableRegularTupleWithNullable = (Tuple<Example?, Int32>) CloneOrChange_Tuple_GExample_n_c_C32int_g(_NonNullableRegularTupleWithNullable!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            _NonNullableStackOfNonNullables = (Stack<Example>) CloneOrChange_Stack_GExample_g(_NonNullableStackOfNonNullables!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            _NonNullableStackOfNullables = (Stack<Example?>) CloneOrChange_Stack_GExample_n_g(_NonNullableStackOfNullables!, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            if ((!exploreOnlyDeserializedChildren && NullableArrayOfNonNullables != null) || (_NullableArrayOfNonNullables_Accessed && _NullableArrayOfNonNullables != null))
            {
                _NullableArrayOfNonNullables = (Example[]?) CloneOrChange_Example_B_b_n(_NullableArrayOfNonNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableArrayOfNullables != null) || (_NullableArrayOfNullables_Accessed && _NullableArrayOfNullables != null))
            {
                _NullableArrayOfNullables = (Example?[]?) CloneOrChange_Example_n_B_b_n(_NullableArrayOfNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableDictionaryWithNonNullable != null) || (_NullableDictionaryWithNonNullable_Accessed && _NullableDictionaryWithNonNullable != null))
            {
                _NullableDictionaryWithNonNullable = (Dictionary<Int32, Example>?) CloneOrChange_Dictionary_Gint_c_C32Example_g_n(_NullableDictionaryWithNonNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableDictionaryWithNullable != null) || (_NullableDictionaryWithNullable_Accessed && _NullableDictionaryWithNullable != null))
            {
                _NullableDictionaryWithNullable = (Dictionary<Int32, Example?>?) CloneOrChange_Dictionary_Gint_c_C32Example_n_g_n(_NullableDictionaryWithNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableListOfNonNullables != null) || (_NullableListOfNonNullables_Accessed && _NullableListOfNonNullables != null))
            {
                _NullableListOfNonNullables = (List<Example>?) CloneOrChange_List_GExample_g_n(_NullableListOfNonNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableListOfNullables != null) || (_NullableListOfNullables_Accessed && _NullableListOfNullables != null))
            {
                _NullableListOfNullables = (List<Example?>?) CloneOrChange_List_GExample_n_g_n(_NullableListOfNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableQueueOfNonNullables != null) || (_NullableQueueOfNonNullables_Accessed && _NullableQueueOfNonNullables != null))
            {
                _NullableQueueOfNonNullables = (Queue<Example>?) CloneOrChange_Queue_GExample_g_n(_NullableQueueOfNonNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableQueueOfNullables != null) || (_NullableQueueOfNullables_Accessed && _NullableQueueOfNullables != null))
            {
                _NullableQueueOfNullables = (Queue<Example?>?) CloneOrChange_Queue_GExample_n_g_n(_NullableQueueOfNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableRecordLikeClass != null) || (_NullableRecordLikeClass_Accessed && _NullableRecordLikeClass != null))
            {
                _NullableRecordLikeClass = (RecordLikeClass?) CloneOrChange_RecordLikeClass_n(_NullableRecordLikeClass, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableRecordLikeStruct != null) || (_NullableRecordLikeStruct_Accessed && _NullableRecordLikeStruct != null))
            {
                _NullableRecordLikeStruct = (RecordLikeStruct?) CloneOrChange_RecordLikeStruct_n(_NullableRecordLikeStruct, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableRegularTupleWithNonNullable != null) || (_NullableRegularTupleWithNonNullable_Accessed && _NullableRegularTupleWithNonNullable != null))
            {
                _NullableRegularTupleWithNonNullable = (Tuple<Example, Int32>?) CloneOrChange_Tuple_GExample_c_C32int_g_n(_NullableRegularTupleWithNonNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableRegularTupleWithNullable != null) || (_NullableRegularTupleWithNullable_Accessed && _NullableRegularTupleWithNullable != null))
            {
                _NullableRegularTupleWithNullable = (Tuple<Example?, Int32>?) CloneOrChange_Tuple_GExample_n_c_C32int_g_n(_NullableRegularTupleWithNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableStackOfNonNullables != null) || (_NullableStackOfNonNullables_Accessed && _NullableStackOfNonNullables != null))
            {
                _NullableStackOfNonNullables = (Stack<Example>?) CloneOrChange_Stack_GExample_g_n(_NullableStackOfNonNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableStackOfNullables != null) || (_NullableStackOfNullables_Accessed && _NullableStackOfNullables != null))
            {
                _NullableStackOfNullables = (Stack<Example?>?) CloneOrChange_Stack_GExample_n_g_n(_NullableStackOfNullables, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableValueTupleWithNonNullable != null) || (_NullableValueTupleWithNonNullable_Accessed && _NullableValueTupleWithNonNullable != null))
            {
                _NullableValueTupleWithNonNullable = ((Example, Int32)?) CloneOrChange__PExample_c_C32int_p_n(_NullableValueTupleWithNonNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            }
            if ((!exploreOnlyDeserializedChildren && NullableValueTupleWithNullable != null) || (_NullableValueTupleWithNullable_Accessed && _NullableValueTupleWithNullable != null))
            {
                _NullableValueTupleWithNullable = ((Example?, Int32)?) CloneOrChange__PExample_n_c_C32int_p_n(_NullableValueTupleWithNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            var deserialized_ValueTupleWithNonNullable = ValueTupleWithNonNullable;
            _ValueTupleWithNonNullable = ((Example, Int32)) CloneOrChange__PExample_c_C32int_p(_ValueTupleWithNonNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true)!, true);
            var deserialized_ValueTupleWithNullable = ValueTupleWithNullable;
            _ValueTupleWithNullable = ((Example?, Int32)) CloneOrChange__PExample_n_c_C32int_p(_ValueTupleWithNullable, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_ByteReadOnlySpan = ByteReadOnlySpan;
                if (!_ByteReadOnlySpan_Accessed)
                {
                    ByteReadOnlySpan = deserialized_ByteReadOnlySpan;
                }
            }if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_NonNullableMemoryOfBytes = NonNullableMemoryOfBytes;
            }if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_NonNullableReadOnlyMemoryOfBytes = NonNullableReadOnlyMemoryOfBytes;
            }if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_NullableMemoryOfBytes = NullableMemoryOfBytes;
            }if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_NullableReadOnlyMemoryOfBytes = NullableReadOnlyMemoryOfBytes;
            }if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        
        public virtual void FreeInMemoryObjects()
        {
            _ByteReadOnlySpan = default;
            _ExplicitlyNullable = default;
            _ExplicitlyNullableInterface = default;
            _NonNullableMemoryOfBytes = default;
            _NonNullableReadOnlyMemoryOfBytes = default;
            _NonNullableStruct = default;
            _NullableArrayOfNonNullables = default;
            _NullableArrayOfNullables = default;
            _NullableDictionaryWithNonNullable = default;
            _NullableDictionaryWithNullable = default;
            _NullableLazinatorListNonNullable = default;
            _NullableLazinatorListNullable = default;
            _NullableListOfNonNullables = default;
            _NullableListOfNullables = default;
            _NullableMemoryOfBytes = default;
            _NullableQueueOfNonNullables = default;
            _NullableQueueOfNullables = default;
            _NullableReadOnlyMemoryOfBytes = default;
            _NullableRecordLikeClass = default;
            _NullableRecordLikeStruct = default;
            _NullableRegularTupleWithNonNullable = default;
            _NullableRegularTupleWithNullable = default;
            _NullableStackOfNonNullables = default;
            _NullableStackOfNullables = default;
            _NullableStruct = default;
            _NullableValueTupleWithNonNullable = default;
            _NullableValueTupleWithNullable = default;
            _ValueTupleWithNonNullable = default;
            _ValueTupleWithNullable = default;
            _ByteReadOnlySpan_Accessed = _ExplicitlyNullable_Accessed = _ExplicitlyNullableInterface_Accessed = _NonNullableMemoryOfBytes_Accessed = _NonNullableReadOnlyMemoryOfBytes_Accessed = _NonNullableStruct_Accessed = _NullableArrayOfNonNullables_Accessed = _NullableArrayOfNullables_Accessed = _NullableDictionaryWithNonNullable_Accessed = _NullableDictionaryWithNullable_Accessed = _NullableLazinatorListNonNullable_Accessed = _NullableLazinatorListNullable_Accessed = _NullableListOfNonNullables_Accessed = _NullableListOfNullables_Accessed = _NullableMemoryOfBytes_Accessed = _NullableQueueOfNonNullables_Accessed = _NullableQueueOfNullables_Accessed = _NullableReadOnlyMemoryOfBytes_Accessed = _NullableRecordLikeClass_Accessed = _NullableRecordLikeStruct_Accessed = _NullableRegularTupleWithNonNullable_Accessed = _NullableRegularTupleWithNullable_Accessed = _NullableStackOfNonNullables_Accessed = _NullableStackOfNullables_Accessed = _NullableStruct_Accessed = _NullableValueTupleWithNonNullable_Accessed = _NullableValueTupleWithNullable_Accessed = _ValueTupleWithNonNullable_Accessed = _ValueTupleWithNullable_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1086;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        protected virtual int ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialReadOnlyMemory.Span;
            ConvertFromBytesForPrimitiveProperties(span, includeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            int lengthForLengths = 164;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                lengthForLengths += 24;
            }
            int totalChildrenSize = ConvertFromBytesForChildLengths(span, includeChildrenMode, serializedVersionNumber, bytesSoFar + lengthForLengths, ref bytesSoFar);;
            return bytesSoFar + totalChildrenSize;
        }
        
        protected virtual void ConvertFromBytesForPrimitiveProperties(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            _MyInt = span.ToDecompressedInt32(ref bytesSoFar);
            _MyNullableInt = span.ToDecompressedNullableInt32(ref bytesSoFar);
            _NonNullableString = span.ToString_BrotliCompressedWithLength(ref bytesSoFar);
            _NullableString = span.ToString_BrotliCompressedWithLength(ref bytesSoFar);
        }
        
        protected virtual int ConvertFromBytesForChildLengths(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, int indexOfFirstChild, ref int bytesSoFar)
        {
            int totalChildrenBytes = 0;
            _ByteReadOnlySpan_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _ExplicitlyNullable_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            _ExplicitlyNullableInterface_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            _NonNullableArrayOfNonNullables_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableArrayOfNullables_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableClass_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableDictionaryWithNonNullable_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableDictionaryWithNullable_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableInterface_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableLazinatorListNonNullable_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableLazinatorListNullable_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableListOfNonNullables_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableListOfNullables_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableMemoryOfBytes_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableQueueOfNonNullables_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableQueueOfNullables_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableReadOnlyMemoryOfBytes_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableRecordLikeClass_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableRecordLikeStruct_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableRegularTupleWithNonNullable_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableRegularTupleWithNullable_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableStackOfNonNullables_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableStackOfNullables_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NonNullableStruct_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            _NullableArrayOfNonNullables_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableArrayOfNullables_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableDictionaryWithNonNullable_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableDictionaryWithNullable_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableLazinatorListNonNullable_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            _NullableLazinatorListNullable_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            _NullableListOfNonNullables_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableListOfNullables_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableMemoryOfBytes_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableQueueOfNonNullables_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableQueueOfNullables_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableReadOnlyMemoryOfBytes_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableRecordLikeClass_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableRecordLikeStruct_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableRegularTupleWithNonNullable_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableRegularTupleWithNullable_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableStackOfNonNullables_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableStackOfNullables_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableStruct_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            _NullableValueTupleWithNonNullable_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableValueTupleWithNullable_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _ValueTupleWithNonNullable_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _ValueTupleWithNullable_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _NullableEnabledContext_EndByteIndex = indexOfFirstChild + totalChildrenBytes;
            return totalChildrenBytes;
        }
        
        public virtual void SerializeToExistingBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options)
        {
            int startPosition = writer.ActiveMemoryPosition;
            WritePropertiesIntoBuffer(ref writer, options, true);
            if (options.UpdateStoredBuffer)
            {
                UpdateStoredBuffer(ref writer, startPosition, writer.ActiveMemoryPosition - startPosition, options.IncludeChildrenMode, false);
            }
        }
        
        public virtual void UpdateStoredBuffer(ref BufferWriter writer, long startPosition, long length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
        {
            _IsDirty = false;
            if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                _DescendantIsDirty = false;
                if (updateDeserializedChildren)
                {
                    UpdateDeserializedChildren(ref writer, startPosition);
                }
                
                _NonNullableStruct_Accessed = false;
                _NullableStruct_Accessed = false;
            }
            else
            {
                ThrowHelper.ThrowCannotUpdateStoredBuffer();
            }
            
            var newBuffer = writer.Slice(startPosition, length);
            LazinatorMemoryStorage = newBuffer;
        }
        
        protected virtual void UpdateDeserializedChildren(ref BufferWriter writer, long startPosition)
        {
            if (_ExplicitlyNullable_Accessed && _ExplicitlyNullable != null)
            {
                ExplicitlyNullable!.UpdateStoredBuffer(ref writer, startPosition + _ExplicitlyNullable_ByteIndex, _ExplicitlyNullable_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (_ExplicitlyNullableInterface_Accessed && _ExplicitlyNullableInterface != null)
            {
                ExplicitlyNullableInterface!.UpdateStoredBuffer(ref writer, startPosition + _ExplicitlyNullableInterface_ByteIndex, _ExplicitlyNullableInterface_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            }
            NonNullableClass!.UpdateStoredBuffer(ref writer, startPosition + _NonNullableClass_ByteIndex, _NonNullableClass_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            NonNullableInterface!.UpdateStoredBuffer(ref writer, startPosition + _NonNullableInterface_ByteIndex, _NonNullableInterface_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            NonNullableLazinatorListNonNullable!.UpdateStoredBuffer(ref writer, startPosition + _NonNullableLazinatorListNonNullable_ByteIndex, _NonNullableLazinatorListNonNullable_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            NonNullableLazinatorListNullable!.UpdateStoredBuffer(ref writer, startPosition + _NonNullableLazinatorListNullable_ByteIndex, _NonNullableLazinatorListNullable_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            NonNullableStruct!.UpdateStoredBuffer(ref writer, startPosition + _NonNullableStruct_ByteIndex, _NonNullableStruct_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            if (_NullableLazinatorListNonNullable_Accessed && _NullableLazinatorListNonNullable != null)
            {
                NullableLazinatorListNonNullable!.UpdateStoredBuffer(ref writer, startPosition + _NullableLazinatorListNonNullable_ByteIndex, _NullableLazinatorListNonNullable_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (_NullableLazinatorListNullable_Accessed && _NullableLazinatorListNullable != null)
            {
                NullableLazinatorListNullable!.UpdateStoredBuffer(ref writer, startPosition + _NullableLazinatorListNullable_ByteIndex, _NullableLazinatorListNullable_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (_NullableStruct_Accessed && _NullableStruct != null)
            {
                NullableStruct!.Value.UpdateStoredBuffer(ref writer, startPosition + _NullableStruct_ByteIndex, _NullableStruct_ByteLength, IncludeChildrenMode.IncludeAllChildren, true);
            }
            _NonNullableArrayOfNonNullables = (Example[]) CloneOrChange_Example_B_b(_NonNullableArrayOfNonNullables!, l => l.RemoveBufferInHierarchy(), true);
            _NonNullableArrayOfNullables = (Example?[]) CloneOrChange_Example_n_B_b(_NonNullableArrayOfNullables!, l => l.RemoveBufferInHierarchy(), true);
            _NonNullableDictionaryWithNonNullable = (Dictionary<Int32, Example>) CloneOrChange_Dictionary_Gint_c_C32Example_g(_NonNullableDictionaryWithNonNullable!, l => l.RemoveBufferInHierarchy(), true);
            _NonNullableDictionaryWithNullable = (Dictionary<Int32, Example?>) CloneOrChange_Dictionary_Gint_c_C32Example_n_g(_NonNullableDictionaryWithNullable!, l => l.RemoveBufferInHierarchy(), true);
            _NonNullableListOfNonNullables = (List<Example>) CloneOrChange_List_GExample_g(_NonNullableListOfNonNullables!, l => l.RemoveBufferInHierarchy(), true);
            _NonNullableListOfNullables = (List<Example?>) CloneOrChange_List_GExample_n_g(_NonNullableListOfNullables!, l => l.RemoveBufferInHierarchy(), true);
            _NonNullableQueueOfNonNullables = (Queue<Example>) CloneOrChange_Queue_GExample_g(_NonNullableQueueOfNonNullables!, l => l.RemoveBufferInHierarchy(), true);
            _NonNullableQueueOfNullables = (Queue<Example?>) CloneOrChange_Queue_GExample_n_g(_NonNullableQueueOfNullables!, l => l.RemoveBufferInHierarchy(), true);
            _NonNullableRecordLikeClass = (RecordLikeClass) CloneOrChange_RecordLikeClass(_NonNullableRecordLikeClass!, l => l.RemoveBufferInHierarchy(), true);
            _NonNullableRecordLikeStruct = (RecordLikeStruct) CloneOrChange_RecordLikeStruct(_NonNullableRecordLikeStruct!, l => l.RemoveBufferInHierarchy(), true);
            _NonNullableRegularTupleWithNonNullable = (Tuple<Example, Int32>) CloneOrChange_Tuple_GExample_c_C32int_g(_NonNullableRegularTupleWithNonNullable!, l => l.RemoveBufferInHierarchy(), true);
            _NonNullableRegularTupleWithNullable = (Tuple<Example?, Int32>) CloneOrChange_Tuple_GExample_n_c_C32int_g(_NonNullableRegularTupleWithNullable!, l => l.RemoveBufferInHierarchy(), true);
            _NonNullableStackOfNonNullables = (Stack<Example>) CloneOrChange_Stack_GExample_g(_NonNullableStackOfNonNullables!, l => l.RemoveBufferInHierarchy(), true);
            _NonNullableStackOfNullables = (Stack<Example?>) CloneOrChange_Stack_GExample_n_g(_NonNullableStackOfNullables!, l => l.RemoveBufferInHierarchy(), true);
            if (_NullableArrayOfNonNullables_Accessed && _NullableArrayOfNonNullables != null)
            {
                _NullableArrayOfNonNullables = (Example[]?) CloneOrChange_Example_B_b_n(_NullableArrayOfNonNullables, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableArrayOfNullables_Accessed && _NullableArrayOfNullables != null)
            {
                _NullableArrayOfNullables = (Example?[]?) CloneOrChange_Example_n_B_b_n(_NullableArrayOfNullables, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableDictionaryWithNonNullable_Accessed && _NullableDictionaryWithNonNullable != null)
            {
                _NullableDictionaryWithNonNullable = (Dictionary<Int32, Example>?) CloneOrChange_Dictionary_Gint_c_C32Example_g_n(_NullableDictionaryWithNonNullable, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableDictionaryWithNullable_Accessed && _NullableDictionaryWithNullable != null)
            {
                _NullableDictionaryWithNullable = (Dictionary<Int32, Example?>?) CloneOrChange_Dictionary_Gint_c_C32Example_n_g_n(_NullableDictionaryWithNullable, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableListOfNonNullables_Accessed && _NullableListOfNonNullables != null)
            {
                _NullableListOfNonNullables = (List<Example>?) CloneOrChange_List_GExample_g_n(_NullableListOfNonNullables, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableListOfNullables_Accessed && _NullableListOfNullables != null)
            {
                _NullableListOfNullables = (List<Example?>?) CloneOrChange_List_GExample_n_g_n(_NullableListOfNullables, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableQueueOfNonNullables_Accessed && _NullableQueueOfNonNullables != null)
            {
                _NullableQueueOfNonNullables = (Queue<Example>?) CloneOrChange_Queue_GExample_g_n(_NullableQueueOfNonNullables, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableQueueOfNullables_Accessed && _NullableQueueOfNullables != null)
            {
                _NullableQueueOfNullables = (Queue<Example?>?) CloneOrChange_Queue_GExample_n_g_n(_NullableQueueOfNullables, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableRecordLikeClass_Accessed && _NullableRecordLikeClass != null)
            {
                _NullableRecordLikeClass = (RecordLikeClass?) CloneOrChange_RecordLikeClass_n(_NullableRecordLikeClass, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableRecordLikeStruct_Accessed && _NullableRecordLikeStruct != null)
            {
                _NullableRecordLikeStruct = (RecordLikeStruct?) CloneOrChange_RecordLikeStruct_n(_NullableRecordLikeStruct, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableRegularTupleWithNonNullable_Accessed && _NullableRegularTupleWithNonNullable != null)
            {
                _NullableRegularTupleWithNonNullable = (Tuple<Example, Int32>?) CloneOrChange_Tuple_GExample_c_C32int_g_n(_NullableRegularTupleWithNonNullable, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableRegularTupleWithNullable_Accessed && _NullableRegularTupleWithNullable != null)
            {
                _NullableRegularTupleWithNullable = (Tuple<Example?, Int32>?) CloneOrChange_Tuple_GExample_n_c_C32int_g_n(_NullableRegularTupleWithNullable, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableStackOfNonNullables_Accessed && _NullableStackOfNonNullables != null)
            {
                _NullableStackOfNonNullables = (Stack<Example>?) CloneOrChange_Stack_GExample_g_n(_NullableStackOfNonNullables, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableStackOfNullables_Accessed && _NullableStackOfNullables != null)
            {
                _NullableStackOfNullables = (Stack<Example?>?) CloneOrChange_Stack_GExample_n_g_n(_NullableStackOfNullables, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableValueTupleWithNonNullable_Accessed && _NullableValueTupleWithNonNullable != null)
            {
                _NullableValueTupleWithNonNullable = ((Example, Int32)?) CloneOrChange__PExample_c_C32int_p_n(_NullableValueTupleWithNonNullable, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_NullableValueTupleWithNullable_Accessed && _NullableValueTupleWithNullable != null)
            {
                _NullableValueTupleWithNullable = ((Example?, Int32)?) CloneOrChange__PExample_n_c_C32int_p_n(_NullableValueTupleWithNullable, l => l.RemoveBufferInHierarchy(), true);
            }
            _ValueTupleWithNonNullable = ((Example, Int32)) CloneOrChange__PExample_c_C32int_p(_ValueTupleWithNonNullable, l => l.RemoveBufferInHierarchy(), true);
            _ValueTupleWithNullable = ((Example?, Int32)) CloneOrChange__PExample_n_c_C32int_p(_ValueTupleWithNullable, l => l.RemoveBufferInHierarchy(), true);
            
        }
        
        
        protected virtual void WritePropertiesIntoBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options, bool includeUniqueID)
        {
            int startPosition = writer.ActiveMemoryPosition;
            if (includeUniqueID)
            {
                if (!ContainsOpenGenericParameters)
                {
                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                }
                else
                {
                    WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                }
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
            writer.Write((byte)options.IncludeChildrenMode);
            // write properties
            
            WritePrimitivePropertiesIntoBuffer(ref writer, options, includeUniqueID);
            int lengthForLengths = 164;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                lengthForLengths += 24;
            }
            
            var previousLengthsPosition = writer.SetLengthsPosition(lengthForLengths);
            WriteChildrenPropertiesIntoBuffer(ref writer, options, includeUniqueID, startPosition);
            writer.ResetLengthsPosition(previousLengthsPosition);
            
        }
        
        protected virtual void WritePrimitivePropertiesIntoBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options, bool includeUniqueID)
        {
            CompressedIntegralTypes.WriteCompressedInt(ref writer, _MyInt);
            CompressedIntegralTypes.WriteCompressedNullableInt(ref writer, _MyNullableInt);
            EncodeCharAndString.WriteBrotliCompressedWithIntPrefix(ref writer, _NonNullableString);
            EncodeCharAndString.WriteBrotliCompressedWithIntPrefix(ref writer, _NullableString);
        }
        protected virtual void WriteChildrenPropertiesIntoBuffer(ref BufferWriter writer, LazinatorSerializationOptions options, bool includeUniqueID, int startOfObjectPosition)
        {
            if (options.SplittingPossible)
            {
                options = options.WithoutSplittingPossible();
            }
            int startOfChildPosition = 0;
            int lengthValue = 0;
            startOfChildPosition = writer.ActiveMemoryPosition;
            WriteNonLazinatorObject(
            nonLazinatorObject: _ByteReadOnlySpan, isBelievedDirty: _ByteReadOnlySpan_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _ByteReadOnlySpan_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ByteReadOnlySpan_ByteIndex, _ByteReadOnlySpan_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_ReadOnlySpan_Gbyte_g(ref w, _ByteReadOnlySpan.Span,
            options));
            if (options.UpdateStoredBuffer)
            {
                _ByteReadOnlySpan_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_ExplicitlyNullable_Accessed)
                {
                    var deserialized = ExplicitlyNullable;
                }
                WriteChild(ref writer, ref _ExplicitlyNullable, options, _ExplicitlyNullable_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ExplicitlyNullable_ByteIndex, _ExplicitlyNullable_ByteLength, null), this);
                lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _ExplicitlyNullable_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_ExplicitlyNullableInterface_Accessed)
                {
                    var deserialized = ExplicitlyNullableInterface;
                }
                WriteChild(ref writer, ref _ExplicitlyNullableInterface, options, _ExplicitlyNullableInterface_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ExplicitlyNullableInterface_ByteIndex, _ExplicitlyNullableInterface_ByteLength, null), this);
                lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _ExplicitlyNullableInterface_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteNonLazinatorObject(
            nonLazinatorObject: _NonNullableArrayOfNonNullables, isBelievedDirty: true,
            isAccessed: true, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableArrayOfNonNullables_ByteIndex, _NonNullableArrayOfNonNullables_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Example_B_b(ref w, _NonNullableArrayOfNonNullables!,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NonNullableArrayOfNonNullables_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteNonLazinatorObject(
            nonLazinatorObject: _NonNullableArrayOfNullables, isBelievedDirty: true,
            isAccessed: true, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableArrayOfNullables_ByteIndex, _NonNullableArrayOfNullables_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Example_n_B_b(ref w, _NonNullableArrayOfNullables!,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NonNullableArrayOfNullables_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteChild(ref writer, ref _NonNullableClass!, options, true, () => GetChildSlice(LazinatorMemoryStorage, _NonNullableClass_ByteIndex, _NonNullableClass_ByteLength, null), this);
            lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
            if (lengthValue > int.MaxValue)
            {
                ThrowHelper.ThrowTooLargeException(int.MaxValue);
            }
            writer.RecordLength((int) lengthValue);
            if (options.UpdateStoredBuffer)
            {
                _NonNullableClass_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteNonLazinatorObject(
            nonLazinatorObject: _NonNullableDictionaryWithNonNullable, isBelievedDirty: true,
            isAccessed: true, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableDictionaryWithNonNullable_ByteIndex, _NonNullableDictionaryWithNonNullable_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Dictionary_Gint_c_C32Example_g(ref w, _NonNullableDictionaryWithNonNullable!,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NonNullableDictionaryWithNonNullable_ByteIndex = startOfChildPosition - startOfObjectPosition;
                _NonNullableDictionaryWithNonNullable = (Dictionary<Int32, Example>) CloneOrChange_Dictionary_Gint_c_C32Example_g(_NonNullableDictionaryWithNonNullable!, l => l.RemoveBufferInHierarchy(), true);
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteNonLazinatorObject(
            nonLazinatorObject: _NonNullableDictionaryWithNullable, isBelievedDirty: true,
            isAccessed: true, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableDictionaryWithNullable_ByteIndex, _NonNullableDictionaryWithNullable_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Dictionary_Gint_c_C32Example_n_g(ref w, _NonNullableDictionaryWithNullable!,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NonNullableDictionaryWithNullable_ByteIndex = startOfChildPosition - startOfObjectPosition;
                _NonNullableDictionaryWithNullable = (Dictionary<Int32, Example?>) CloneOrChange_Dictionary_Gint_c_C32Example_n_g(_NonNullableDictionaryWithNullable!, l => l.RemoveBufferInHierarchy(), true);
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteChild(ref writer, ref _NonNullableInterface!, options, true, () => GetChildSlice(LazinatorMemoryStorage, _NonNullableInterface_ByteIndex, _NonNullableInterface_ByteLength, null), this);
            lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
            if (lengthValue > int.MaxValue)
            {
                ThrowHelper.ThrowTooLargeException(int.MaxValue);
            }
            writer.RecordLength((int) lengthValue);
            if (options.UpdateStoredBuffer)
            {
                _NonNullableInterface_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteChild(ref writer, ref _NonNullableLazinatorListNonNullable!, options, true, () => GetChildSlice(LazinatorMemoryStorage, _NonNullableLazinatorListNonNullable_ByteIndex, _NonNullableLazinatorListNonNullable_ByteLength, null), this);
            lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
            if (lengthValue > int.MaxValue)
            {
                ThrowHelper.ThrowTooLargeException(int.MaxValue);
            }
            writer.RecordLength((int) lengthValue);
            if (options.UpdateStoredBuffer)
            {
                _NonNullableLazinatorListNonNullable_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteChild(ref writer, ref _NonNullableLazinatorListNullable!, options, true, () => GetChildSlice(LazinatorMemoryStorage, _NonNullableLazinatorListNullable_ByteIndex, _NonNullableLazinatorListNullable_ByteLength, null), this);
            lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
            if (lengthValue > int.MaxValue)
            {
                ThrowHelper.ThrowTooLargeException(int.MaxValue);
            }
            writer.RecordLength((int) lengthValue);
            if (options.UpdateStoredBuffer)
            {
                _NonNullableLazinatorListNullable_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteNonLazinatorObject(
            nonLazinatorObject: _NonNullableListOfNonNullables, isBelievedDirty: true,
            isAccessed: true, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableListOfNonNullables_ByteIndex, _NonNullableListOfNonNullables_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_List_GExample_g(ref w, _NonNullableListOfNonNullables!,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NonNullableListOfNonNullables_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteNonLazinatorObject(
            nonLazinatorObject: _NonNullableListOfNullables, isBelievedDirty: true,
            isAccessed: true, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableListOfNullables_ByteIndex, _NonNullableListOfNullables_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_List_GExample_n_g(ref w, _NonNullableListOfNullables!,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NonNullableListOfNullables_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableMemoryOfBytes_Accessed)
            {
                var deserialized = NonNullableMemoryOfBytes;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NonNullableMemoryOfBytes, isBelievedDirty: _NonNullableMemoryOfBytes_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NonNullableMemoryOfBytes_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableMemoryOfBytes_ByteIndex, _NonNullableMemoryOfBytes_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Memory_Gbyte_g(ref w, _NonNullableMemoryOfBytes,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NonNullableMemoryOfBytes_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteNonLazinatorObject(
            nonLazinatorObject: _NonNullableQueueOfNonNullables, isBelievedDirty: true,
            isAccessed: true, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableQueueOfNonNullables_ByteIndex, _NonNullableQueueOfNonNullables_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Queue_GExample_g(ref w, _NonNullableQueueOfNonNullables!,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NonNullableQueueOfNonNullables_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteNonLazinatorObject(
            nonLazinatorObject: _NonNullableQueueOfNullables, isBelievedDirty: true,
            isAccessed: true, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableQueueOfNullables_ByteIndex, _NonNullableQueueOfNullables_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Queue_GExample_n_g(ref w, _NonNullableQueueOfNullables!,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NonNullableQueueOfNullables_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableReadOnlyMemoryOfBytes_Accessed)
            {
                var deserialized = NonNullableReadOnlyMemoryOfBytes;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NonNullableReadOnlyMemoryOfBytes, isBelievedDirty: _NonNullableReadOnlyMemoryOfBytes_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NonNullableReadOnlyMemoryOfBytes_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableReadOnlyMemoryOfBytes_ByteIndex, _NonNullableReadOnlyMemoryOfBytes_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_ReadOnlyMemory_Gbyte_g(ref w, _NonNullableReadOnlyMemoryOfBytes,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NonNullableReadOnlyMemoryOfBytes_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteNonLazinatorObject(
            nonLazinatorObject: _NonNullableRecordLikeClass, isBelievedDirty: true,
            isAccessed: true, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableRecordLikeClass_ByteIndex, _NonNullableRecordLikeClass_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_RecordLikeClass(ref w, _NonNullableRecordLikeClass!,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NonNullableRecordLikeClass_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteNonLazinatorObject(
            nonLazinatorObject: _NonNullableRecordLikeStruct, isBelievedDirty: true,
            isAccessed: true, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableRecordLikeStruct_ByteIndex, _NonNullableRecordLikeStruct_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_RecordLikeStruct(ref w, _NonNullableRecordLikeStruct!,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NonNullableRecordLikeStruct_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteNonLazinatorObject(
            nonLazinatorObject: _NonNullableRegularTupleWithNonNullable, isBelievedDirty: true,
            isAccessed: true, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableRegularTupleWithNonNullable_ByteIndex, _NonNullableRegularTupleWithNonNullable_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Tuple_GExample_c_C32int_g(ref w, _NonNullableRegularTupleWithNonNullable!,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NonNullableRegularTupleWithNonNullable_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteNonLazinatorObject(
            nonLazinatorObject: _NonNullableRegularTupleWithNullable, isBelievedDirty: true,
            isAccessed: true, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableRegularTupleWithNullable_ByteIndex, _NonNullableRegularTupleWithNullable_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Tuple_GExample_n_c_C32int_g(ref w, _NonNullableRegularTupleWithNullable!,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NonNullableRegularTupleWithNullable_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteNonLazinatorObject(
            nonLazinatorObject: _NonNullableStackOfNonNullables, isBelievedDirty: true,
            isAccessed: true, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableStackOfNonNullables_ByteIndex, _NonNullableStackOfNonNullables_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Stack_GExample_g(ref w, _NonNullableStackOfNonNullables!,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NonNullableStackOfNonNullables_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            
            WriteNonLazinatorObject(
            nonLazinatorObject: _NonNullableStackOfNullables, isBelievedDirty: true,
            isAccessed: true, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NonNullableStackOfNullables_ByteIndex, _NonNullableStackOfNullables_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Stack_GExample_n_g(ref w, _NonNullableStackOfNullables!,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NonNullableStackOfNullables_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NonNullableStruct_Accessed)
                {
                    var deserialized = NonNullableStruct;
                }
                WriteChild(ref writer, ref _NonNullableStruct!, options, _NonNullableStruct_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NonNullableStruct_ByteIndex, _NonNullableStruct_ByteLength, null), this);
                lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _NonNullableStruct_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableArrayOfNonNullables_Accessed)
            {
                var deserialized = NullableArrayOfNonNullables;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableArrayOfNonNullables, isBelievedDirty: _NullableArrayOfNonNullables_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableArrayOfNonNullables_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableArrayOfNonNullables_ByteIndex, _NullableArrayOfNonNullables_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Example_B_b_n(ref w, _NullableArrayOfNonNullables,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableArrayOfNonNullables_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableArrayOfNullables_Accessed)
            {
                var deserialized = NullableArrayOfNullables;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableArrayOfNullables, isBelievedDirty: _NullableArrayOfNullables_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableArrayOfNullables_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableArrayOfNullables_ByteIndex, _NullableArrayOfNullables_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Example_n_B_b_n(ref w, _NullableArrayOfNullables,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableArrayOfNullables_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableDictionaryWithNonNullable_Accessed)
            {
                var deserialized = NullableDictionaryWithNonNullable;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableDictionaryWithNonNullable, isBelievedDirty: _NullableDictionaryWithNonNullable_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableDictionaryWithNonNullable_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableDictionaryWithNonNullable_ByteIndex, _NullableDictionaryWithNonNullable_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Dictionary_Gint_c_C32Example_g_n(ref w, _NullableDictionaryWithNonNullable,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableDictionaryWithNonNullable_ByteIndex = startOfChildPosition - startOfObjectPosition;
                if (_NullableDictionaryWithNonNullable_Accessed && _NullableDictionaryWithNonNullable != null)
                {
                    _NullableDictionaryWithNonNullable = (Dictionary<Int32, Example>?) CloneOrChange_Dictionary_Gint_c_C32Example_g_n(_NullableDictionaryWithNonNullable, l => l.RemoveBufferInHierarchy(), true);
                }
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableDictionaryWithNullable_Accessed)
            {
                var deserialized = NullableDictionaryWithNullable;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableDictionaryWithNullable, isBelievedDirty: _NullableDictionaryWithNullable_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableDictionaryWithNullable_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableDictionaryWithNullable_ByteIndex, _NullableDictionaryWithNullable_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Dictionary_Gint_c_C32Example_n_g_n(ref w, _NullableDictionaryWithNullable,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableDictionaryWithNullable_ByteIndex = startOfChildPosition - startOfObjectPosition;
                if (_NullableDictionaryWithNullable_Accessed && _NullableDictionaryWithNullable != null)
                {
                    _NullableDictionaryWithNullable = (Dictionary<Int32, Example?>?) CloneOrChange_Dictionary_Gint_c_C32Example_n_g_n(_NullableDictionaryWithNullable, l => l.RemoveBufferInHierarchy(), true);
                }
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableLazinatorListNonNullable_Accessed)
                {
                    var deserialized = NullableLazinatorListNonNullable;
                }
                WriteChild(ref writer, ref _NullableLazinatorListNonNullable, options, _NullableLazinatorListNonNullable_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NullableLazinatorListNonNullable_ByteIndex, _NullableLazinatorListNonNullable_ByteLength, null), this);
                lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _NullableLazinatorListNonNullable_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableLazinatorListNullable_Accessed)
                {
                    var deserialized = NullableLazinatorListNullable;
                }
                WriteChild(ref writer, ref _NullableLazinatorListNullable, options, _NullableLazinatorListNullable_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NullableLazinatorListNullable_ByteIndex, _NullableLazinatorListNullable_ByteLength, null), this);
                lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                if (lengthValue > int.MaxValue)
                {
                    ThrowHelper.ThrowTooLargeException(int.MaxValue);
                }
                writer.RecordLength((int) lengthValue);
            }
            if (options.UpdateStoredBuffer)
            {
                _NullableLazinatorListNullable_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableListOfNonNullables_Accessed)
            {
                var deserialized = NullableListOfNonNullables;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableListOfNonNullables, isBelievedDirty: _NullableListOfNonNullables_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableListOfNonNullables_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableListOfNonNullables_ByteIndex, _NullableListOfNonNullables_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_List_GExample_g_n(ref w, _NullableListOfNonNullables,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableListOfNonNullables_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableListOfNullables_Accessed)
            {
                var deserialized = NullableListOfNullables;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableListOfNullables, isBelievedDirty: _NullableListOfNullables_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableListOfNullables_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableListOfNullables_ByteIndex, _NullableListOfNullables_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_List_GExample_n_g_n(ref w, _NullableListOfNullables,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableListOfNullables_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableMemoryOfBytes_Accessed)
            {
                var deserialized = NullableMemoryOfBytes;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableMemoryOfBytes, isBelievedDirty: _NullableMemoryOfBytes_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableMemoryOfBytes_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableMemoryOfBytes_ByteIndex, _NullableMemoryOfBytes_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Memory_Gbyte_g_n(ref w, _NullableMemoryOfBytes,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableMemoryOfBytes_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableQueueOfNonNullables_Accessed)
            {
                var deserialized = NullableQueueOfNonNullables;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableQueueOfNonNullables, isBelievedDirty: _NullableQueueOfNonNullables_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableQueueOfNonNullables_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableQueueOfNonNullables_ByteIndex, _NullableQueueOfNonNullables_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Queue_GExample_g_n(ref w, _NullableQueueOfNonNullables,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableQueueOfNonNullables_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableQueueOfNullables_Accessed)
            {
                var deserialized = NullableQueueOfNullables;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableQueueOfNullables, isBelievedDirty: _NullableQueueOfNullables_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableQueueOfNullables_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableQueueOfNullables_ByteIndex, _NullableQueueOfNullables_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Queue_GExample_n_g_n(ref w, _NullableQueueOfNullables,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableQueueOfNullables_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableReadOnlyMemoryOfBytes_Accessed)
            {
                var deserialized = NullableReadOnlyMemoryOfBytes;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableReadOnlyMemoryOfBytes, isBelievedDirty: _NullableReadOnlyMemoryOfBytes_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableReadOnlyMemoryOfBytes_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableReadOnlyMemoryOfBytes_ByteIndex, _NullableReadOnlyMemoryOfBytes_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_ReadOnlyMemory_Gbyte_g_n(ref w, _NullableReadOnlyMemoryOfBytes,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableReadOnlyMemoryOfBytes_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableRecordLikeClass_Accessed)
            {
                var deserialized = NullableRecordLikeClass;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableRecordLikeClass, isBelievedDirty: _NullableRecordLikeClass_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableRecordLikeClass_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableRecordLikeClass_ByteIndex, _NullableRecordLikeClass_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_RecordLikeClass_n(ref w, _NullableRecordLikeClass,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableRecordLikeClass_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableRecordLikeStruct_Accessed)
            {
                var deserialized = NullableRecordLikeStruct;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableRecordLikeStruct, isBelievedDirty: _NullableRecordLikeStruct_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableRecordLikeStruct_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableRecordLikeStruct_ByteIndex, _NullableRecordLikeStruct_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_RecordLikeStruct_n(ref w, _NullableRecordLikeStruct,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableRecordLikeStruct_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableRegularTupleWithNonNullable_Accessed)
            {
                var deserialized = NullableRegularTupleWithNonNullable;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableRegularTupleWithNonNullable, isBelievedDirty: _NullableRegularTupleWithNonNullable_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableRegularTupleWithNonNullable_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableRegularTupleWithNonNullable_ByteIndex, _NullableRegularTupleWithNonNullable_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Tuple_GExample_c_C32int_g_n(ref w, _NullableRegularTupleWithNonNullable,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableRegularTupleWithNonNullable_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableRegularTupleWithNullable_Accessed)
            {
                var deserialized = NullableRegularTupleWithNullable;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableRegularTupleWithNullable, isBelievedDirty: _NullableRegularTupleWithNullable_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableRegularTupleWithNullable_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableRegularTupleWithNullable_ByteIndex, _NullableRegularTupleWithNullable_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Tuple_GExample_n_c_C32int_g_n(ref w, _NullableRegularTupleWithNullable,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableRegularTupleWithNullable_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableStackOfNonNullables_Accessed)
            {
                var deserialized = NullableStackOfNonNullables;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableStackOfNonNullables, isBelievedDirty: _NullableStackOfNonNullables_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableStackOfNonNullables_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableStackOfNonNullables_ByteIndex, _NullableStackOfNonNullables_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Stack_GExample_g_n(ref w, _NullableStackOfNonNullables,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableStackOfNonNullables_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableStackOfNullables_Accessed)
            {
                var deserialized = NullableStackOfNullables;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableStackOfNullables, isBelievedDirty: _NullableStackOfNullables_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableStackOfNullables_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableStackOfNullables_ByteIndex, _NullableStackOfNullables_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_Stack_GExample_n_g_n(ref w, _NullableStackOfNullables,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableStackOfNullables_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && options.IncludeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableStruct_Accessed)
                {
                    var deserialized = NullableStruct;
                }
                if (_NullableStruct == null)
                {
                    WriteNullChild_LengthsSeparate(ref writer, false);
                }
                else
                {
                    var copy = _NullableStruct.Value;
                    WriteChild(ref writer, ref copy, options, _NullableStruct_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _NullableStruct_ByteIndex, _NullableStruct_ByteLength, null), this);
                    _NullableStruct = copy;
                    lengthValue = writer.ActiveMemoryPosition - startOfChildPosition;
                    if (lengthValue > int.MaxValue)
                    {
                        ThrowHelper.ThrowTooLargeException(int.MaxValue);
                    }
                    writer.RecordLength((int) lengthValue);
                }
            }
            if (options.UpdateStoredBuffer)
            {
                _NullableStruct_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableValueTupleWithNonNullable_Accessed)
            {
                var deserialized = NullableValueTupleWithNonNullable;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableValueTupleWithNonNullable, isBelievedDirty: _NullableValueTupleWithNonNullable_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableValueTupleWithNonNullable_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableValueTupleWithNonNullable_ByteIndex, _NullableValueTupleWithNonNullable_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes__PExample_c_C32int_p_n(ref w, _NullableValueTupleWithNonNullable,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableValueTupleWithNonNullable_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_NullableValueTupleWithNullable_Accessed)
            {
                var deserialized = NullableValueTupleWithNullable;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _NullableValueTupleWithNullable, isBelievedDirty: _NullableValueTupleWithNullable_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _NullableValueTupleWithNullable_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _NullableValueTupleWithNullable_ByteIndex, _NullableValueTupleWithNullable_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes__PExample_n_c_C32int_p_n(ref w, _NullableValueTupleWithNullable,
            options));
            if (options.UpdateStoredBuffer)
            {
                _NullableValueTupleWithNullable_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_ValueTupleWithNonNullable_Accessed)
            {
                var deserialized = ValueTupleWithNonNullable;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _ValueTupleWithNonNullable, isBelievedDirty: _ValueTupleWithNonNullable_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _ValueTupleWithNonNullable_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ValueTupleWithNonNullable_ByteIndex, _ValueTupleWithNonNullable_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes__PExample_c_C32int_p(ref w, _ValueTupleWithNonNullable,
            options));
            if (options.UpdateStoredBuffer)
            {
                _ValueTupleWithNonNullable_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_ValueTupleWithNullable_Accessed)
            {
                var deserialized = ValueTupleWithNullable;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _ValueTupleWithNullable, isBelievedDirty: _ValueTupleWithNullable_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _ValueTupleWithNullable_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ValueTupleWithNullable_ByteIndex, _ValueTupleWithNullable_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes__PExample_n_c_C32int_p(ref w, _ValueTupleWithNullable,
            options));
            if (options.UpdateStoredBuffer)
            {
                _ValueTupleWithNullable_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            if (options.UpdateStoredBuffer)
            {
                _NullableEnabledContext_EndByteIndex = writer.ActiveMemoryPosition - startOfObjectPosition;
            }
            
        }
        /* Conversion of supported collections and tuples */
        
        private static void ConvertToBytes_ReadOnlySpan_Gbyte_g(ref BufferWriter writer, ReadOnlySpan<Byte> itemToConvert, LazinatorSerializationOptions options)
        {
            ReadOnlySpan<byte> toConvert = (itemToConvert);
            for (int i = 0; i < toConvert.Length; i++)
            {
                writer.Write(toConvert[i]);
            }
        }
        private static ReadOnlySpan<Byte> CloneOrChange_ReadOnlySpan_Gbyte_g(ReadOnlySpan<Byte> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            var clone = new Span<byte>(new byte[itemToClone.Length * sizeof(byte)]);
            itemToClone.CopyTo(clone);
            return clone;
        }
        
        private static Example[] ConvertFromBytes_Example_B_b(LazinatorMemory storage)
        {
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Example[] collection = new Example[collectionLength];
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                var item = new Example(childData);
                collection[itemIndex] = item;
                bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Example_B_b(ref BufferWriter writer, Example[] itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Example[]))
            {
                ThrowHelper.ThrowSerializingNullNonNullable("NonNullableArrayOfNonNullables");
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
            int itemToConvertCount = itemToConvert.Length;
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                void action(ref BufferWriter w) => itemToConvert[itemIndex]!.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, action);
            }
        }
        
        private static Example[] CloneOrChange_Example_B_b(Example[] itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            int collectionLength = itemToClone.Length;
            Example[] collection = avoidCloningIfPossible ? itemToClone : new Example[collectionLength];
            int itemToCloneCount = itemToClone.Length;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                if (avoidCloningIfPossible)
                {
                    if (itemToClone[itemIndex] != null)
                    {
                        itemToClone[itemIndex] = (Example) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                    }
                    continue;
                }
                var itemCopied = (Example) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                collection[itemIndex] = itemCopied;
            }
            return collection;
        }
        
        private static Example?[] ConvertFromBytes_Example_n_B_b(LazinatorMemory storage)
        {
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Example?[] collection = new Example?[collectionLength];
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember == 0)
                {
                    collection[itemIndex] = null;
                }
                else
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                    collection[itemIndex] = item;
                }bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Example_n_B_b(ref BufferWriter writer, Example?[] itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Example?[]))
            {
                ThrowHelper.ThrowSerializingNullNonNullable("NonNullableArrayOfNullables");
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
            int itemToConvertCount = itemToConvert.Length;
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                if (itemToConvert[itemIndex] == null)
                {
                    writer.Write((int)0);
                }
                else 
                {
                    
                    void action(ref BufferWriter w) => itemToConvert[itemIndex]!.SerializeToExistingBuffer(ref w, options);
                    WriteToBinaryWithInt32LengthPrefix(ref writer, action);
                }
                
            }
        }
        
        private static Example?[] CloneOrChange_Example_n_B_b(Example?[] itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            int collectionLength = itemToClone.Length;
            Example?[] collection = avoidCloningIfPossible ? itemToClone : new Example?[collectionLength];
            int itemToCloneCount = itemToClone.Length;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                if (avoidCloningIfPossible)
                {
                    if (itemToClone[itemIndex] != null)
                    {
                        itemToClone[itemIndex] = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                    }
                    continue;
                }
                if (itemToClone[itemIndex] == null)
                {
                    collection[itemIndex] = null;
                }
                else
                {
                    var itemCopied = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                    collection[itemIndex] = itemCopied;
                }
            }
            return collection;
        }
        
        private static Dictionary<Int32, Example> ConvertFromBytes_Dictionary_Gint_c_C32Example_g(LazinatorMemory storage)
        {
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Dictionary<Int32, Example> collection = new Dictionary<Int32, Example>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                var item = ConvertFromBytes_KeyValuePair_Gint_c_C32Example_g(childData);
                collection.Add(item.Key, item.Value);
                bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Dictionary_Gint_c_C32Example_g(ref BufferWriter writer, Dictionary<Int32, Example> itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Dictionary<Int32, Example>))
            {
                ThrowHelper.ThrowSerializingNullNonNullable("NonNullableDictionaryWithNonNullable");
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            foreach (var item in itemToConvert)
            {
                void action(ref BufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32Example_g(ref w, item, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, action);
            }
        }
        
        private static Dictionary<Int32, Example> CloneOrChange_Dictionary_Gint_c_C32Example_g(Dictionary<Int32, Example> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            int collectionLength = itemToClone.Count;
            Dictionary<Int32, Example> collection = new Dictionary<Int32, Example>(collectionLength);
            foreach (var item in itemToClone)
            {
                var itemCopied = (KeyValuePair<Int32, Example>) CloneOrChange_KeyValuePair_Gint_c_C32Example_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                collection.Add(itemCopied.Key, itemCopied.Value);
            }
            return collection;
        }
        
        private static KeyValuePair<Int32, Example> ConvertFromBytes_KeyValuePair_Gint_c_C32Example_g(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default;
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            
            int bytesSoFar = 0;
            
            int item1 = span.ToDecompressedInt32(ref bytesSoFar);
            
            int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
            Example item2 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
            bytesSoFar += lengthCollectionMember_item2;
            
            var itemToCreate = new KeyValuePair<Int32, Example>(item1, item2);
            
            return itemToCreate;
        }
        
        private static void ConvertToBytes_KeyValuePair_Gint_c_C32Example_g(ref BufferWriter writer, KeyValuePair<Int32, Example> itemToConvert, LazinatorSerializationOptions options)
        {
            
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Key);
            
            if (itemToConvert.Value == null)
            {
                writer.Write((int)0);
            }
            else
            {
                void actionValue(ref BufferWriter w) => itemToConvert.Value.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, actionValue);
            };
        }
        
        private static KeyValuePair<Int32, Example> CloneOrChange_KeyValuePair_Gint_c_C32Example_g(KeyValuePair<Int32, Example> itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            return new KeyValuePair<Int32, Example>((int) (itemToConvert.Key), (Example) (cloneOrChangeFunc((itemToConvert.Value))!));
        }
        
        private static Dictionary<Int32, Example?> ConvertFromBytes_Dictionary_Gint_c_C32Example_n_g(LazinatorMemory storage)
        {
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Dictionary<Int32, Example?> collection = new Dictionary<Int32, Example?>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                var item = ConvertFromBytes_KeyValuePair_Gint_c_C32Example_n_g(childData);
                collection.Add(item.Key, item.Value);
                bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Dictionary_Gint_c_C32Example_n_g(ref BufferWriter writer, Dictionary<Int32, Example?> itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Dictionary<Int32, Example?>))
            {
                ThrowHelper.ThrowSerializingNullNonNullable("NonNullableDictionaryWithNullable");
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            foreach (var item in itemToConvert)
            {
                void action(ref BufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32Example_n_g(ref w, item, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, action);
            }
        }
        
        private static Dictionary<Int32, Example?> CloneOrChange_Dictionary_Gint_c_C32Example_n_g(Dictionary<Int32, Example?> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            int collectionLength = itemToClone.Count;
            Dictionary<Int32, Example?> collection = new Dictionary<Int32, Example?>(collectionLength);
            foreach (var item in itemToClone)
            {
                var itemCopied = (KeyValuePair<Int32, Example?>) CloneOrChange_KeyValuePair_Gint_c_C32Example_n_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                collection.Add(itemCopied.Key, itemCopied.Value);
            }
            return collection;
        }
        
        private static KeyValuePair<Int32, Example?> ConvertFromBytes_KeyValuePair_Gint_c_C32Example_n_g(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default;
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            
            int bytesSoFar = 0;
            
            int item1 = span.ToDecompressedInt32(ref bytesSoFar);
            
            Example? item2 = default(Example?);
            int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
            if (lengthCollectionMember_item2 != 0)
            {
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                item2 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
            }
            bytesSoFar += lengthCollectionMember_item2;
            
            var itemToCreate = new KeyValuePair<Int32, Example?>(item1, item2);
            
            return itemToCreate;
        }
        
        private static void ConvertToBytes_KeyValuePair_Gint_c_C32Example_n_g(ref BufferWriter writer, KeyValuePair<Int32, Example?> itemToConvert, LazinatorSerializationOptions options)
        {
            
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Key);
            
            if (itemToConvert.Value == null)
            {
                writer.Write((int)0);
            }
            else
            {
                void actionValue(ref BufferWriter w) => itemToConvert.Value.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, actionValue);
            };
        }
        
        private static KeyValuePair<Int32, Example?> CloneOrChange_KeyValuePair_Gint_c_C32Example_n_g(KeyValuePair<Int32, Example?> itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            return new KeyValuePair<Int32, Example?>((int) (itemToConvert.Key), (Example?) (cloneOrChangeFunc((itemToConvert.Value))));
        }
        
        private static List<Example> ConvertFromBytes_List_GExample_g(LazinatorMemory storage)
        {
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            List<Example> collection = new List<Example>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                var item = new Example(childData);
                collection.Add(item);
                bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_List_GExample_g(ref BufferWriter writer, List<Example> itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(List<Example>))
            {
                ThrowHelper.ThrowSerializingNullNonNullable("NonNullableListOfNonNullables");
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            int itemToConvertCount = itemToConvert.Count;
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                void action(ref BufferWriter w) => itemToConvert[itemIndex]!.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, action);
            }
        }
        
        private static List<Example> CloneOrChange_List_GExample_g(List<Example> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            int collectionLength = itemToClone.Count;
            List<Example> collection = avoidCloningIfPossible ? itemToClone : new List<Example>(collectionLength);
            int itemToCloneCount = itemToClone.Count;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                if (avoidCloningIfPossible)
                {
                    if (itemToClone[itemIndex] != null)
                    {
                        itemToClone[itemIndex] = (Example) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                    }
                    continue;
                }
                var itemCopied = (Example) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                collection.Add(itemCopied);
            }
            return collection;
        }
        
        private static List<Example?> ConvertFromBytes_List_GExample_n_g(LazinatorMemory storage)
        {
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            List<Example?> collection = new List<Example?>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember == 0)
                {
                    collection.Add(null);
                }
                else
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                    collection.Add(item);
                }bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_List_GExample_n_g(ref BufferWriter writer, List<Example?> itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(List<Example?>))
            {
                ThrowHelper.ThrowSerializingNullNonNullable("NonNullableListOfNullables");
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            int itemToConvertCount = itemToConvert.Count;
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                if (itemToConvert[itemIndex] == null)
                {
                    writer.Write((int)0);
                }
                else 
                {
                    
                    void action(ref BufferWriter w) => itemToConvert[itemIndex]!.SerializeToExistingBuffer(ref w, options);
                    WriteToBinaryWithInt32LengthPrefix(ref writer, action);
                }
                
            }
        }
        
        private static List<Example?> CloneOrChange_List_GExample_n_g(List<Example?> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            int collectionLength = itemToClone.Count;
            List<Example?> collection = avoidCloningIfPossible ? itemToClone : new List<Example?>(collectionLength);
            int itemToCloneCount = itemToClone.Count;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                if (avoidCloningIfPossible)
                {
                    if (itemToClone[itemIndex] != null)
                    {
                        itemToClone[itemIndex] = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                    }
                    continue;
                }
                if (itemToClone[itemIndex] == null)
                {
                    collection.Add(null);
                }
                else
                {
                    var itemCopied = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                    collection.Add(itemCopied);
                }
            }
            return collection;
        }
        
        private static Memory<Byte> ConvertFromBytes_Memory_Gbyte_g(LazinatorMemory storage)
        {
            return storage.InitialReadOnlyMemory.ToArray();
        }
        
        private static void ConvertToBytes_Memory_Gbyte_g(ref BufferWriter writer, Memory<Byte> itemToConvert, LazinatorSerializationOptions options)
        {
            writer.Write(itemToConvert.Span);
        }
        
        private static Memory<Byte> CloneOrChange_Memory_Gbyte_g(Memory<Byte> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            int collectionLength = itemToClone.Length;
            Memory<Byte> collection = new Memory<Byte>(new byte[collectionLength]);
            var collectionAsSpan = collection.Span;
            var itemToCloneSpan = itemToClone.Span;
            int itemToCloneCount = itemToCloneSpan.Length;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                var itemCopied = (byte) itemToCloneSpan[itemIndex];
                collectionAsSpan[itemIndex] = itemCopied;
            }
            return collection;
        }
        
        private static Queue<Example> ConvertFromBytes_Queue_GExample_g(LazinatorMemory storage)
        {
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Queue<Example> collection = new Queue<Example>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                var item = new Example(childData);
                collection.Enqueue(item);
                bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Queue_GExample_g(ref BufferWriter writer, Queue<Example> itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Queue<Example>))
            {
                ThrowHelper.ThrowSerializingNullNonNullable("NonNullableQueueOfNonNullables");
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            int itemToConvertCount = itemToConvert.Count;
            var q = System.Linq.Enumerable.ToList(itemToConvert);
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                void action(ref BufferWriter w) => q[itemIndex]!.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, action);
            }
        }
        
        private static Queue<Example> CloneOrChange_Queue_GExample_g(Queue<Example> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            int collectionLength = itemToClone.Count;
            Queue<Example> collection = new Queue<Example>(collectionLength);
            int itemToCloneCount = itemToClone.Count;
            var q = System.Linq.Enumerable.ToList(itemToClone);
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                var itemCopied = (Example) (cloneOrChangeFunc(q[itemIndex])!);
                collection.Enqueue(itemCopied);
            }
            return collection;
        }
        
        private static Queue<Example?> ConvertFromBytes_Queue_GExample_n_g(LazinatorMemory storage)
        {
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Queue<Example?> collection = new Queue<Example?>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember == 0)
                {
                    collection.Enqueue(null);
                }
                else
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                    collection.Enqueue(item);
                }bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Queue_GExample_n_g(ref BufferWriter writer, Queue<Example?> itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Queue<Example?>))
            {
                ThrowHelper.ThrowSerializingNullNonNullable("NonNullableQueueOfNullables");
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            int itemToConvertCount = itemToConvert.Count;
            var q = System.Linq.Enumerable.ToList(itemToConvert);
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                if (q[itemIndex] == null)
                {
                    writer.Write((int)0);
                }
                else 
                {
                    
                    void action(ref BufferWriter w) => q[itemIndex]!.SerializeToExistingBuffer(ref w, options);
                    WriteToBinaryWithInt32LengthPrefix(ref writer, action);
                }
                
            }
        }
        
        private static Queue<Example?> CloneOrChange_Queue_GExample_n_g(Queue<Example?> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            int collectionLength = itemToClone.Count;
            Queue<Example?> collection = new Queue<Example?>(collectionLength);
            int itemToCloneCount = itemToClone.Count;
            var q = System.Linq.Enumerable.ToList(itemToClone);
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                if (q[itemIndex] == null)
                {
                    collection.Enqueue(null);
                }
                else
                {
                    var itemCopied = (Example?) (cloneOrChangeFunc(q[itemIndex]));
                    collection.Enqueue(itemCopied);
                }
            }
            return collection;
        }
        
        private static ReadOnlyMemory<Byte> ConvertFromBytes_ReadOnlyMemory_Gbyte_g(LazinatorMemory storage)
        {
            return storage.InitialReadOnlyMemory.ToArray();
        }
        
        private static void ConvertToBytes_ReadOnlyMemory_Gbyte_g(ref BufferWriter writer, ReadOnlyMemory<Byte> itemToConvert, LazinatorSerializationOptions options)
        {
            writer.Write(itemToConvert.Span);
        }
        
        private static ReadOnlyMemory<Byte> CloneOrChange_ReadOnlyMemory_Gbyte_g(ReadOnlyMemory<Byte> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            int collectionLength = itemToClone.Length;
            Memory<Byte> collection = new Memory<Byte>(new byte[collectionLength]);
            var collectionAsSpan = collection.Span;
            var itemToCloneSpan = itemToClone.Span;
            int itemToCloneCount = itemToCloneSpan.Length;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                var itemCopied = (byte) itemToCloneSpan[itemIndex];
                collectionAsSpan[itemIndex] = itemCopied;
            }
            return collection;
        }
        
        private static Stack<Example> ConvertFromBytes_Stack_GExample_g(LazinatorMemory storage)
        {
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Stack<Example> collection = new Stack<Example>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                var item = new Example(childData);
                collection.Push(item);
                bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Stack_GExample_g(ref BufferWriter writer, Stack<Example> itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Stack<Example>))
            {
                ThrowHelper.ThrowSerializingNullNonNullable("NonNullableStackOfNonNullables");
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            int itemToConvertCount = itemToConvert.Count;
            var stackReversed = System.Linq.Enumerable.ToList(itemToConvert);
            stackReversed.Reverse();
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                void action(ref BufferWriter w) => stackReversed[itemIndex]!.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, action);
            }
        }
        
        private static Stack<Example> CloneOrChange_Stack_GExample_g(Stack<Example> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            int collectionLength = itemToClone.Count;
            Stack<Example> collection = new Stack<Example>(collectionLength);
            int itemToCloneCount = itemToClone.Count;
            var stackReversed = System.Linq.Enumerable.ToList(itemToClone);
            stackReversed.Reverse();
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                var itemCopied = (Example) (cloneOrChangeFunc(stackReversed[itemIndex])!);
                collection.Push(itemCopied);
            }
            return collection;
        }
        
        private static Stack<Example?> ConvertFromBytes_Stack_GExample_n_g(LazinatorMemory storage)
        {
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Stack<Example?> collection = new Stack<Example?>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember == 0)
                {
                    collection.Push(null);
                }
                else
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                    collection.Push(item);
                }bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Stack_GExample_n_g(ref BufferWriter writer, Stack<Example?> itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Stack<Example?>))
            {
                ThrowHelper.ThrowSerializingNullNonNullable("NonNullableStackOfNullables");
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            int itemToConvertCount = itemToConvert.Count;
            var stackReversed = System.Linq.Enumerable.ToList(itemToConvert);
            stackReversed.Reverse();
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                if (stackReversed[itemIndex] == null)
                {
                    writer.Write((int)0);
                }
                else 
                {
                    
                    void action(ref BufferWriter w) => stackReversed[itemIndex]!.SerializeToExistingBuffer(ref w, options);
                    WriteToBinaryWithInt32LengthPrefix(ref writer, action);
                }
                
            }
        }
        
        private static Stack<Example?> CloneOrChange_Stack_GExample_n_g(Stack<Example?> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            int collectionLength = itemToClone.Count;
            Stack<Example?> collection = new Stack<Example?>(collectionLength);
            int itemToCloneCount = itemToClone.Count;
            var stackReversed = System.Linq.Enumerable.ToList(itemToClone);
            stackReversed.Reverse();
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                if (stackReversed[itemIndex] == null)
                {
                    collection.Push(null);
                }
                else
                {
                    var itemCopied = (Example?) (cloneOrChangeFunc(stackReversed[itemIndex]));
                    collection.Push(itemCopied);
                }
            }
            return collection;
        }
        
        private static Example[]? ConvertFromBytes_Example_B_b_n(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(Example[]?);
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Example[]? collection = new Example[collectionLength];
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                var item = new Example(childData);
                collection[itemIndex] = item;
                bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Example_B_b_n(ref BufferWriter writer, Example[]? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Example[]?))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
            int itemToConvertCount = itemToConvert.Length;
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                void action(ref BufferWriter w) => itemToConvert[itemIndex]!.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, action);
            }
        }
        
        private static Example[]? CloneOrChange_Example_B_b_n(Example[]? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Length;
            Example[]? collection = avoidCloningIfPossible ? itemToClone : new Example[collectionLength];
            int itemToCloneCount = itemToClone.Length;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                if (avoidCloningIfPossible)
                {
                    if (itemToClone[itemIndex] != null)
                    {
                        itemToClone[itemIndex] = (Example) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                    }
                    continue;
                }
                var itemCopied = (Example) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                collection[itemIndex] = itemCopied;
            }
            return collection;
        }
        
        private static Example?[]? ConvertFromBytes_Example_n_B_b_n(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(Example?[]?);
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Example?[]? collection = new Example?[collectionLength];
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember == 0)
                {
                    collection[itemIndex] = null;
                }
                else
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                    collection[itemIndex] = item;
                }bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Example_n_B_b_n(ref BufferWriter writer, Example?[]? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Example?[]?))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
            int itemToConvertCount = itemToConvert.Length;
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                if (itemToConvert[itemIndex] == null)
                {
                    writer.Write((int)0);
                }
                else 
                {
                    
                    void action(ref BufferWriter w) => itemToConvert[itemIndex]!.SerializeToExistingBuffer(ref w, options);
                    WriteToBinaryWithInt32LengthPrefix(ref writer, action);
                }
                
            }
        }
        
        private static Example?[]? CloneOrChange_Example_n_B_b_n(Example?[]? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Length;
            Example?[]? collection = avoidCloningIfPossible ? itemToClone : new Example?[collectionLength];
            int itemToCloneCount = itemToClone.Length;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                if (avoidCloningIfPossible)
                {
                    if (itemToClone[itemIndex] != null)
                    {
                        itemToClone[itemIndex] = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                    }
                    continue;
                }
                if (itemToClone[itemIndex] == null)
                {
                    collection[itemIndex] = null;
                }
                else
                {
                    var itemCopied = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                    collection[itemIndex] = itemCopied;
                }
            }
            return collection;
        }
        
        private static Dictionary<Int32, Example>? ConvertFromBytes_Dictionary_Gint_c_C32Example_g_n(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(Dictionary<Int32, Example>?);
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Dictionary<Int32, Example>? collection = new Dictionary<Int32, Example>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                var item = ConvertFromBytes_KeyValuePair_Gint_c_C32Example_g(childData);
                collection.Add(item.Key, item.Value);
                bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Dictionary_Gint_c_C32Example_g_n(ref BufferWriter writer, Dictionary<Int32, Example>? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Dictionary<Int32, Example>?))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            foreach (var item in itemToConvert)
            {
                void action(ref BufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32Example_g(ref w, item, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, action);
            }
        }
        
        private static Dictionary<Int32, Example>? CloneOrChange_Dictionary_Gint_c_C32Example_g_n(Dictionary<Int32, Example>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Count;
            Dictionary<Int32, Example>? collection = new Dictionary<Int32, Example>(collectionLength);
            foreach (var item in itemToClone)
            {
                var itemCopied = (KeyValuePair<Int32, Example>) CloneOrChange_KeyValuePair_Gint_c_C32Example_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                collection.Add(itemCopied.Key, itemCopied.Value);
            }
            return collection;
        }
        
        private static Dictionary<Int32, Example?>? ConvertFromBytes_Dictionary_Gint_c_C32Example_n_g_n(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(Dictionary<Int32, Example?>?);
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Dictionary<Int32, Example?>? collection = new Dictionary<Int32, Example?>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                var item = ConvertFromBytes_KeyValuePair_Gint_c_C32Example_n_g(childData);
                collection.Add(item.Key, item.Value);
                bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Dictionary_Gint_c_C32Example_n_g_n(ref BufferWriter writer, Dictionary<Int32, Example?>? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Dictionary<Int32, Example?>?))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            foreach (var item in itemToConvert)
            {
                void action(ref BufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32Example_n_g(ref w, item, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, action);
            }
        }
        
        private static Dictionary<Int32, Example?>? CloneOrChange_Dictionary_Gint_c_C32Example_n_g_n(Dictionary<Int32, Example?>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Count;
            Dictionary<Int32, Example?>? collection = new Dictionary<Int32, Example?>(collectionLength);
            foreach (var item in itemToClone)
            {
                var itemCopied = (KeyValuePair<Int32, Example?>) CloneOrChange_KeyValuePair_Gint_c_C32Example_n_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                collection.Add(itemCopied.Key, itemCopied.Value);
            }
            return collection;
        }
        
        private static List<Example>? ConvertFromBytes_List_GExample_g_n(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(List<Example>?);
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            List<Example>? collection = new List<Example>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                var item = new Example(childData);
                collection.Add(item);
                bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_List_GExample_g_n(ref BufferWriter writer, List<Example>? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(List<Example>?))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            int itemToConvertCount = itemToConvert.Count;
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                void action(ref BufferWriter w) => itemToConvert[itemIndex]!.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, action);
            }
        }
        
        private static List<Example>? CloneOrChange_List_GExample_g_n(List<Example>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Count;
            List<Example>? collection = avoidCloningIfPossible ? itemToClone : new List<Example>(collectionLength);
            int itemToCloneCount = itemToClone.Count;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                if (avoidCloningIfPossible)
                {
                    if (itemToClone[itemIndex] != null)
                    {
                        itemToClone[itemIndex] = (Example) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                    }
                    continue;
                }
                var itemCopied = (Example) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                collection.Add(itemCopied);
            }
            return collection;
        }
        
        private static List<Example?>? ConvertFromBytes_List_GExample_n_g_n(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(List<Example?>?);
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            List<Example?>? collection = new List<Example?>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember == 0)
                {
                    collection.Add(null);
                }
                else
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                    collection.Add(item);
                }bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_List_GExample_n_g_n(ref BufferWriter writer, List<Example?>? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(List<Example?>?))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            int itemToConvertCount = itemToConvert.Count;
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                if (itemToConvert[itemIndex] == null)
                {
                    writer.Write((int)0);
                }
                else 
                {
                    
                    void action(ref BufferWriter w) => itemToConvert[itemIndex]!.SerializeToExistingBuffer(ref w, options);
                    WriteToBinaryWithInt32LengthPrefix(ref writer, action);
                }
                
            }
        }
        
        private static List<Example?>? CloneOrChange_List_GExample_n_g_n(List<Example?>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Count;
            List<Example?>? collection = avoidCloningIfPossible ? itemToClone : new List<Example?>(collectionLength);
            int itemToCloneCount = itemToClone.Count;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                if (avoidCloningIfPossible)
                {
                    if (itemToClone[itemIndex] != null)
                    {
                        itemToClone[itemIndex] = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex])!);
                    }
                    continue;
                }
                if (itemToClone[itemIndex] == null)
                {
                    collection.Add(null);
                }
                else
                {
                    var itemCopied = (Example?) (cloneOrChangeFunc(itemToClone[itemIndex]));
                    collection.Add(itemCopied);
                }
            }
            return collection;
        }
        
        private static Memory<Byte>? ConvertFromBytes_Memory_Gbyte_g_n(LazinatorMemory storage)
        {
            int index = 0;
            bool isNull = storage.InitialReadOnlyMemory.Span.ToBoolean(ref index);
            if (isNull)
            {
                return null;
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span.Slice(1);
            return span.ToArray();
        }
        
        private static void ConvertToBytes_Memory_Gbyte_g_n(ref BufferWriter writer, Memory<Byte>? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == null)
            {
                writer.Write((bool)true);
                return;
            }
            writer.Write((bool)false);
            writer.Write(itemToConvert.Value.Span);
        }
        
        private static Memory<Byte>? CloneOrChange_Memory_Gbyte_g_n(Memory<Byte>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Value.Length;
            Memory<Byte> collection = new Memory<Byte>(new byte[collectionLength]);
            var collectionAsSpan = collection.Span;
            var itemToCloneSpan = itemToClone.Value.Span;
            int itemToCloneCount = itemToCloneSpan.Length;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                var itemCopied = (byte) itemToCloneSpan[itemIndex];
                collectionAsSpan[itemIndex] = itemCopied;
            }
            return collection;
        }
        
        private static Queue<Example>? ConvertFromBytes_Queue_GExample_g_n(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(Queue<Example>?);
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Queue<Example>? collection = new Queue<Example>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                var item = new Example(childData);
                collection.Enqueue(item);
                bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Queue_GExample_g_n(ref BufferWriter writer, Queue<Example>? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Queue<Example>?))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            int itemToConvertCount = itemToConvert.Count;
            var q = System.Linq.Enumerable.ToList(itemToConvert);
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                void action(ref BufferWriter w) => q[itemIndex]!.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, action);
            }
        }
        
        private static Queue<Example>? CloneOrChange_Queue_GExample_g_n(Queue<Example>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Count;
            Queue<Example>? collection = new Queue<Example>(collectionLength);
            int itemToCloneCount = itemToClone.Count;
            var q = System.Linq.Enumerable.ToList(itemToClone);
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                var itemCopied = (Example) (cloneOrChangeFunc(q[itemIndex])!);
                collection.Enqueue(itemCopied);
            }
            return collection;
        }
        
        private static Queue<Example?>? ConvertFromBytes_Queue_GExample_n_g_n(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(Queue<Example?>?);
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Queue<Example?>? collection = new Queue<Example?>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember == 0)
                {
                    collection.Enqueue(null);
                }
                else
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                    collection.Enqueue(item);
                }bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Queue_GExample_n_g_n(ref BufferWriter writer, Queue<Example?>? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Queue<Example?>?))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            int itemToConvertCount = itemToConvert.Count;
            var q = System.Linq.Enumerable.ToList(itemToConvert);
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                if (q[itemIndex] == null)
                {
                    writer.Write((int)0);
                }
                else 
                {
                    
                    void action(ref BufferWriter w) => q[itemIndex]!.SerializeToExistingBuffer(ref w, options);
                    WriteToBinaryWithInt32LengthPrefix(ref writer, action);
                }
                
            }
        }
        
        private static Queue<Example?>? CloneOrChange_Queue_GExample_n_g_n(Queue<Example?>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Count;
            Queue<Example?>? collection = new Queue<Example?>(collectionLength);
            int itemToCloneCount = itemToClone.Count;
            var q = System.Linq.Enumerable.ToList(itemToClone);
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                if (q[itemIndex] == null)
                {
                    collection.Enqueue(null);
                }
                else
                {
                    var itemCopied = (Example?) (cloneOrChangeFunc(q[itemIndex]));
                    collection.Enqueue(itemCopied);
                }
            }
            return collection;
        }
        
        private static ReadOnlyMemory<Byte>? ConvertFromBytes_ReadOnlyMemory_Gbyte_g_n(LazinatorMemory storage)
        {
            int index = 0;
            bool isNull = storage.InitialReadOnlyMemory.Span.ToBoolean(ref index);
            if (isNull)
            {
                return null;
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span.Slice(1);
            return span.ToArray();
        }
        
        private static void ConvertToBytes_ReadOnlyMemory_Gbyte_g_n(ref BufferWriter writer, ReadOnlyMemory<Byte>? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == null)
            {
                writer.Write((bool)true);
                return;
            }
            writer.Write((bool)false);
            ConvertToBytes_ReadOnlyMemory_Gbyte_g(ref writer, itemToConvert.Value, options);
        }
        
        private static ReadOnlyMemory<Byte>? CloneOrChange_ReadOnlyMemory_Gbyte_g_n(ReadOnlyMemory<Byte>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Value.Length;
            Memory<Byte> collection = new Memory<Byte>(new byte[collectionLength]);
            var collectionAsSpan = collection.Span;
            var itemToCloneSpan = itemToClone.Value.Span;
            int itemToCloneCount = itemToCloneSpan.Length;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                var itemCopied = (byte) itemToCloneSpan[itemIndex];
                collectionAsSpan[itemIndex] = itemCopied;
            }
            return collection;
        }
        
        private static Stack<Example>? ConvertFromBytes_Stack_GExample_g_n(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(Stack<Example>?);
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Stack<Example>? collection = new Stack<Example>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                var item = new Example(childData);
                collection.Push(item);
                bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Stack_GExample_g_n(ref BufferWriter writer, Stack<Example>? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Stack<Example>?))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            int itemToConvertCount = itemToConvert.Count;
            var stackReversed = System.Linq.Enumerable.ToList(itemToConvert);
            stackReversed.Reverse();
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                void action(ref BufferWriter w) => stackReversed[itemIndex]!.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, action);
            }
        }
        
        private static Stack<Example>? CloneOrChange_Stack_GExample_g_n(Stack<Example>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Count;
            Stack<Example>? collection = new Stack<Example>(collectionLength);
            int itemToCloneCount = itemToClone.Count;
            var stackReversed = System.Linq.Enumerable.ToList(itemToClone);
            stackReversed.Reverse();
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                var itemCopied = (Example) (cloneOrChangeFunc(stackReversed[itemIndex])!);
                collection.Push(itemCopied);
            }
            return collection;
        }
        
        private static Stack<Example?>? ConvertFromBytes_Stack_GExample_n_g_n(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(Stack<Example?>?);
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Stack<Example?>? collection = new Stack<Example?>(collectionLength);
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember == 0)
                {
                    collection.Push(null);
                }
                else
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
                    collection.Push(item);
                }bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Stack_GExample_n_g_n(ref BufferWriter writer, Stack<Example?>? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Stack<Example?>?))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
            int itemToConvertCount = itemToConvert.Count;
            var stackReversed = System.Linq.Enumerable.ToList(itemToConvert);
            stackReversed.Reverse();
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                if (stackReversed[itemIndex] == null)
                {
                    writer.Write((int)0);
                }
                else 
                {
                    
                    void action(ref BufferWriter w) => stackReversed[itemIndex]!.SerializeToExistingBuffer(ref w, options);
                    WriteToBinaryWithInt32LengthPrefix(ref writer, action);
                }
                
            }
        }
        
        private static Stack<Example?>? CloneOrChange_Stack_GExample_n_g_n(Stack<Example?>? itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Count;
            Stack<Example?>? collection = new Stack<Example?>(collectionLength);
            int itemToCloneCount = itemToClone.Count;
            var stackReversed = System.Linq.Enumerable.ToList(itemToClone);
            stackReversed.Reverse();
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                if (stackReversed[itemIndex] == null)
                {
                    collection.Push(null);
                }
                else
                {
                    var itemCopied = (Example?) (cloneOrChangeFunc(stackReversed[itemIndex]));
                    collection.Push(itemCopied);
                }
            }
            return collection;
        }
        
        private static RecordLikeClass ConvertFromBytes_RecordLikeClass(LazinatorMemory storage)
        {
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            
            int bytesSoFar = 0;
            
            int item1 = span.ToDecompressedInt32(ref bytesSoFar);
            
            int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
            Example item2 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
            bytesSoFar += lengthCollectionMember_item2;
            
            var itemToCreate = new RecordLikeClass(item1, item2);
            
            return itemToCreate;
        }
        
        private static void ConvertToBytes_RecordLikeClass(ref BufferWriter writer, RecordLikeClass itemToConvert, LazinatorSerializationOptions options)
        {
            
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
            
            if (itemToConvert.Example == null)
            {
                writer.Write((int)0);
            }
            else
            {
                void actionExample(ref BufferWriter w) => itemToConvert.Example.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, actionExample);
            };
        }
        
        private static RecordLikeClass CloneOrChange_RecordLikeClass(RecordLikeClass itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            return new RecordLikeClass((int) (itemToConvert.Age), (Example) (cloneOrChangeFunc((itemToConvert.Example))!));
        }
        
        private static RecordLikeStruct ConvertFromBytes_RecordLikeStruct(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default;
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            
            int bytesSoFar = 0;
            
            int item1 = span.ToDecompressedInt32(ref bytesSoFar);
            
            string item2 = span.ToString_BrotliCompressedWithLength(ref bytesSoFar);
            
            var itemToCreate = new RecordLikeStruct(item1, item2);
            
            return itemToCreate;
        }
        
        private static void ConvertToBytes_RecordLikeStruct(ref BufferWriter writer, RecordLikeStruct itemToConvert, LazinatorSerializationOptions options)
        {
            
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
            
            EncodeCharAndString.WriteBrotliCompressedWithIntPrefix(ref writer, itemToConvert.Name);
        }
        
        private static RecordLikeStruct CloneOrChange_RecordLikeStruct(RecordLikeStruct itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            return new RecordLikeStruct((int) (itemToConvert.Age), (string) (itemToConvert.Name));
        }
        
        private static Tuple<Example, Int32> ConvertFromBytes_Tuple_GExample_c_C32int_g(LazinatorMemory storage)
        {
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            
            int bytesSoFar = 0;
            
            int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
            Example item1 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
            bytesSoFar += lengthCollectionMember_item1;
            
            int item2 = span.ToDecompressedInt32(ref bytesSoFar);
            
            var itemToCreate = new Tuple<Example, Int32>(item1, item2);
            
            return itemToCreate;
        }
        
        private static void ConvertToBytes_Tuple_GExample_c_C32int_g(ref BufferWriter writer, Tuple<Example, Int32> itemToConvert, LazinatorSerializationOptions options)
        {
            
            if (itemToConvert.Item1 == null)
            {
                writer.Write((int)0);
            }
            else
            {
                void actionItem1(ref BufferWriter w) => itemToConvert.Item1.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, actionItem1);
            };
            
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
        }
        
        private static Tuple<Example, Int32> CloneOrChange_Tuple_GExample_c_C32int_g(Tuple<Example, Int32> itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            return new Tuple<Example, Int32>((Example) (cloneOrChangeFunc((itemToConvert.Item1))!), (int) (itemToConvert.Item2));
        }
        
        private static Tuple<Example?, Int32> ConvertFromBytes_Tuple_GExample_n_c_C32int_g(LazinatorMemory storage)
        {
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            
            int bytesSoFar = 0;
            
            Example? item1 = default(Example?);
            int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
            if (lengthCollectionMember_item1 != 0)
            {
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                item1 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
            }
            bytesSoFar += lengthCollectionMember_item1;
            
            int item2 = span.ToDecompressedInt32(ref bytesSoFar);
            
            var itemToCreate = new Tuple<Example?, Int32>(item1, item2);
            
            return itemToCreate;
        }
        
        private static void ConvertToBytes_Tuple_GExample_n_c_C32int_g(ref BufferWriter writer, Tuple<Example?, Int32> itemToConvert, LazinatorSerializationOptions options)
        {
            
            if (itemToConvert.Item1 == null)
            {
                writer.Write((int)0);
            }
            else
            {
                void actionItem1(ref BufferWriter w) => itemToConvert.Item1.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, actionItem1);
            };
            
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
        }
        
        private static Tuple<Example?, Int32> CloneOrChange_Tuple_GExample_n_c_C32int_g(Tuple<Example?, Int32> itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            return new Tuple<Example?, Int32>((Example?) (cloneOrChangeFunc((itemToConvert.Item1))), (int) (itemToConvert.Item2));
        }
        
        private static RecordLikeClass? ConvertFromBytes_RecordLikeClass_n(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default;
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            
            int bytesSoFar = 0;
            
            int item1 = span.ToDecompressedInt32(ref bytesSoFar);
            
            int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
            Example item2 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
            bytesSoFar += lengthCollectionMember_item2;
            
            var itemToCreate = new RecordLikeClass(item1, item2);
            
            return itemToCreate;
        }
        
        private static void ConvertToBytes_RecordLikeClass_n(ref BufferWriter writer, RecordLikeClass? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == null)
            {
                return;
            }
            
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
            
            if (itemToConvert.Example == null)
            {
                writer.Write((int)0);
            }
            else
            {
                void actionExample(ref BufferWriter w) => itemToConvert.Example.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, actionExample);
            };
        }
        
        private static RecordLikeClass? CloneOrChange_RecordLikeClass_n(RecordLikeClass? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToConvert == null)
            {
                return default(RecordLikeClass?);
            }
            return new RecordLikeClass((int) (itemToConvert?.Age ?? default), (Example) (cloneOrChangeFunc((itemToConvert?.Example ?? default))!));
        }
        
        private static RecordLikeStruct? ConvertFromBytes_RecordLikeStruct_n(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default;
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            
            int bytesSoFar = 0;
            
            int item1 = span.ToDecompressedInt32(ref bytesSoFar);
            
            string item2 = span.ToString_BrotliCompressedWithLength(ref bytesSoFar);
            
            var itemToCreate = new RecordLikeStruct(item1, item2);
            
            return itemToCreate;
        }
        
        private static void ConvertToBytes_RecordLikeStruct_n(ref BufferWriter writer, RecordLikeStruct? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == null)
            {
                return;
            }
            
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Value.Age);
            
            EncodeCharAndString.WriteBrotliCompressedWithIntPrefix(ref writer, itemToConvert.Value.Name);
        }
        
        private static RecordLikeStruct? CloneOrChange_RecordLikeStruct_n(RecordLikeStruct? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToConvert == null)
            {
                return default(RecordLikeStruct?);
            }
            return new RecordLikeStruct((int) (itemToConvert?.Age ?? default), (string) (itemToConvert?.Name ?? default));
        }
        
        private static Tuple<Example, Int32>? ConvertFromBytes_Tuple_GExample_c_C32int_g_n(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default;
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            
            int bytesSoFar = 0;
            
            int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
            Example item1 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
            bytesSoFar += lengthCollectionMember_item1;
            
            int item2 = span.ToDecompressedInt32(ref bytesSoFar);
            
            var itemToCreate = new Tuple<Example, Int32>(item1, item2);
            
            return itemToCreate;
        }
        
        private static void ConvertToBytes_Tuple_GExample_c_C32int_g_n(ref BufferWriter writer, Tuple<Example, Int32>? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == null)
            {
                return;
            }
            
            if (itemToConvert.Item1 == null)
            {
                writer.Write((int)0);
            }
            else
            {
                void actionItem1(ref BufferWriter w) => itemToConvert.Item1.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, actionItem1);
            };
            
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
        }
        
        private static Tuple<Example, Int32>? CloneOrChange_Tuple_GExample_c_C32int_g_n(Tuple<Example, Int32>? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToConvert == null)
            {
                return default(Tuple<Example, Int32>?);
            }
            return new Tuple<Example, Int32>((Example) (cloneOrChangeFunc((itemToConvert?.Item1 ?? default))!), (int) (itemToConvert?.Item2 ?? default));
        }
        
        private static Tuple<Example?, Int32>? ConvertFromBytes_Tuple_GExample_n_c_C32int_g_n(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default;
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            
            int bytesSoFar = 0;
            
            Example? item1 = default(Example?);
            int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
            if (lengthCollectionMember_item1 != 0)
            {
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                item1 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
            }
            bytesSoFar += lengthCollectionMember_item1;
            
            int item2 = span.ToDecompressedInt32(ref bytesSoFar);
            
            var itemToCreate = new Tuple<Example?, Int32>(item1, item2);
            
            return itemToCreate;
        }
        
        private static void ConvertToBytes_Tuple_GExample_n_c_C32int_g_n(ref BufferWriter writer, Tuple<Example?, Int32>? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == null)
            {
                return;
            }
            
            if (itemToConvert.Item1 == null)
            {
                writer.Write((int)0);
            }
            else
            {
                void actionItem1(ref BufferWriter w) => itemToConvert.Item1.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, actionItem1);
            };
            
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
        }
        
        private static Tuple<Example?, Int32>? CloneOrChange_Tuple_GExample_n_c_C32int_g_n(Tuple<Example?, Int32>? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToConvert == null)
            {
                return default(Tuple<Example?, Int32>?);
            }
            return new Tuple<Example?, Int32>((Example?) (cloneOrChangeFunc((itemToConvert?.Item1))), (int) (itemToConvert?.Item2 ?? default));
        }
        
        private static (Example, Int32)? ConvertFromBytes__PExample_c_C32int_p_n(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default;
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            
            int bytesSoFar = 0;
            
            int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
            Example item1 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
            bytesSoFar += lengthCollectionMember_item1;
            
            int item2 = span.ToDecompressedInt32(ref bytesSoFar);
            
            var itemToCreate = (item1, item2);
            
            return itemToCreate;
        }
        
        private static void ConvertToBytes__PExample_c_C32int_p_n(ref BufferWriter writer, (Example, Int32)? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == null)
            {
                return;
            }
            
            if (itemToConvert.Value.Item1 == null)
            {
                writer.Write((int)0);
            }
            else
            {
                void actionItem1(ref BufferWriter w) => itemToConvert.Value.Item1.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, actionItem1);
            };
            
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Value.Item2);
        }
        
        private static (Example, Int32)? CloneOrChange__PExample_c_C32int_p_n((Example, Int32)? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToConvert == null)
            {
                return default((Example, Int32)?);
            }
            return ((Example) (cloneOrChangeFunc((itemToConvert?.Item1 ?? default))!), (int) (itemToConvert?.Item2 ?? default));
        }
        
        private static (Example?, Int32)? ConvertFromBytes__PExample_n_c_C32int_p_n(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default;
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            
            int bytesSoFar = 0;
            
            Example? item1 = default(Example?);
            int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
            if (lengthCollectionMember_item1 != 0)
            {
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                item1 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
            }
            bytesSoFar += lengthCollectionMember_item1;
            
            int item2 = span.ToDecompressedInt32(ref bytesSoFar);
            
            var itemToCreate = (item1, item2);
            
            return itemToCreate;
        }
        
        private static void ConvertToBytes__PExample_n_c_C32int_p_n(ref BufferWriter writer, (Example?, Int32)? itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == null)
            {
                return;
            }
            
            if (itemToConvert.Value.Item1 == null)
            {
                writer.Write((int)0);
            }
            else
            {
                void actionItem1(ref BufferWriter w) => itemToConvert.Value.Item1.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, actionItem1);
            };
            
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Value.Item2);
        }
        
        private static (Example?, Int32)? CloneOrChange__PExample_n_c_C32int_p_n((Example?, Int32)? itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToConvert == null)
            {
                return default((Example?, Int32)?);
            }
            return ((Example?) (cloneOrChangeFunc((itemToConvert?.Item1))), (int) (itemToConvert?.Item2 ?? default));
        }
        
        private static (Example, Int32) ConvertFromBytes__PExample_c_C32int_p(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default;
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            
            int bytesSoFar = 0;
            
            int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
            Example item1 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
            bytesSoFar += lengthCollectionMember_item1;
            
            int item2 = span.ToDecompressedInt32(ref bytesSoFar);
            
            var itemToCreate = (item1, item2);
            
            return itemToCreate;
        }
        
        private static void ConvertToBytes__PExample_c_C32int_p(ref BufferWriter writer, (Example, Int32) itemToConvert, LazinatorSerializationOptions options)
        {
            
            if (itemToConvert.Item1 == null)
            {
                writer.Write((int)0);
            }
            else
            {
                void actionItem1(ref BufferWriter w) => itemToConvert.Item1.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, actionItem1);
            };
            
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
        }
        
        private static (Example, Int32) CloneOrChange__PExample_c_C32int_p((Example, Int32) itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            return ((Example) (cloneOrChangeFunc((itemToConvert.Item1))!), (int) (itemToConvert.Item2));
        }
        
        private static (Example?, Int32) ConvertFromBytes__PExample_n_c_C32int_p(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default;
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            
            int bytesSoFar = 0;
            
            Example? item1 = default(Example?);
            int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
            if (lengthCollectionMember_item1 != 0)
            {
                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                item1 = DeserializationFactory.Instance.CreateBasedOnType<Example?>(childData);
            }
            bytesSoFar += lengthCollectionMember_item1;
            
            int item2 = span.ToDecompressedInt32(ref bytesSoFar);
            
            var itemToCreate = (item1, item2);
            
            return itemToCreate;
        }
        
        private static void ConvertToBytes__PExample_n_c_C32int_p(ref BufferWriter writer, (Example?, Int32) itemToConvert, LazinatorSerializationOptions options)
        {
            
            if (itemToConvert.Item1 == null)
            {
                writer.Write((int)0);
            }
            else
            {
                void actionItem1(ref BufferWriter w) => itemToConvert.Item1.SerializeToExistingBuffer(ref w, options);
                WriteToBinaryWithInt32LengthPrefix(ref writer, actionItem1);
            };
            
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item2);
        }
        
        private static (Example?, Int32) CloneOrChange__PExample_n_c_C32int_p((Example?, Int32) itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            return ((Example?) (cloneOrChangeFunc((itemToConvert.Item1))), (int) (itemToConvert.Item2));
        }
        
    }
}
