/*Location845*//*Location830*///cbebe696-bbce-cdca-d47c-b2e2da72f308
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples
{/*Location831*/
    using Lazinator.Attributes;/*Location832*/
    using Lazinator.Buffers;/*Location833*/
    using Lazinator.Core;/*Location834*/
    using Lazinator.Exceptions;/*Location835*/
    using Lazinator.Support;/*Location836*/
    using Lazinator.Wrappers;/*Location837*/
    using System;/*Location838*/
    using System.Buffers;/*Location839*/
    using System.Collections.Generic;/*Location840*/
    using System.Diagnostics;/*Location841*/
    using System.IO;/*Location842*/
    using System.Linq;/*Location843*/
    using System.Runtime.InteropServices;/*Location844*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class Example : ILazinator
    {
        /*Location846*/
        /*Location847*//* This is code added with an InsertCode attribute. */ 
        
        /*Location848*/public bool IsStruct => false;
        
        /*Location849*//* Property definitions */
        
        /*Location850*/        protected int _IncludableChild_ByteIndex;
        /*Location851*/        protected int _MyChild1_ByteIndex;
        /*Location852*/        protected int _MyChild2_ByteIndex;
        /*Location853*/        protected int _MyChild2Previous_ByteIndex;
        /*Location854*/        protected int _MyInterfaceImplementer_ByteIndex;
        /*Location855*/        protected int _MyNonLazinatorChild_ByteIndex;
        /*Location856*/        protected int _WrappedInt_ByteIndex;
        /*Location857*/        protected int _ExcludableChild_ByteIndex;
        /*Location858*/protected virtual int _IncludableChild_ByteLength => _MyChild1_ByteIndex - _IncludableChild_ByteIndex;
        /*Location859*/protected virtual int _MyChild1_ByteLength => _MyChild2_ByteIndex - _MyChild1_ByteIndex;
        /*Location860*/protected virtual int _MyChild2_ByteLength => _MyChild2Previous_ByteIndex - _MyChild2_ByteIndex;
        /*Location861*/protected virtual int _MyChild2Previous_ByteLength => _MyInterfaceImplementer_ByteIndex - _MyChild2Previous_ByteIndex;
        /*Location862*/protected virtual int _MyInterfaceImplementer_ByteLength => _MyNonLazinatorChild_ByteIndex - _MyInterfaceImplementer_ByteIndex;
        /*Location863*/protected virtual int _MyNonLazinatorChild_ByteLength => _WrappedInt_ByteIndex - _MyNonLazinatorChild_ByteIndex;
        /*Location864*/protected virtual int _WrappedInt_ByteLength => _ExcludableChild_ByteIndex - _WrappedInt_ByteIndex;
        /*Location865*/private int _Example_EndByteIndex;
        /*Location866*/protected virtual int _ExcludableChild_ByteLength => _Example_EndByteIndex - _ExcludableChild_ByteIndex;
        
        /*Location867*/
        protected double? _MyNullableDouble;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual double? MyNullableDouble
        {
            get
            {
                return _MyNullableDouble;
            }
            set
            {
                IsDirty = true;
                _MyNullableDouble = value;
            }
        }
        /*Location868*/
        protected bool _MyBool;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool MyBool
        {
            get
            {
                return _MyBool;
            }
            set
            {
                IsDirty = true;
                _MyBool = value;
            }
        }
        /*Location869*/
        protected char _MyChar;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ref char MyChar_Ref
        {
            get
            {
                IsDirty = true;
                return ref _MyChar;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public char MyChar
        {
            get
            {
                return _MyChar;
            }
            set
            {
                IsDirty = true;
                _MyChar = value;
            }
        }
        /*Location870*/
        protected DateTime _MyDateTime;
        [Newtonsoft.Json.JsonProperty("MyDT")]
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public DateTime MyDateTime
        {
            get
            {
                return _MyDateTime;
            }
            set
            {
                IsDirty = true;
                _MyDateTime = value;
            }
        }
        /*Location871*/
        protected string _MyNewString;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string MyNewString
        {
            get
            {
                return _MyNewString;
            }
            set
            {
                IsDirty = true;
                _MyNewString = value;
            }
        }
        /*Location872*/
        protected decimal? _MyNullableDecimal;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public decimal? MyNullableDecimal
        {
            get
            {
                return _MyNullableDecimal;
            }
            internal set
            {
                IsDirty = true;
                _MyNullableDecimal = value;
            }
        }
        /*Location873*/
        protected TimeSpan? _MyNullableTimeSpan;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public TimeSpan? MyNullableTimeSpan
        {
            get
            {
                return _MyNullableTimeSpan;
            }
            set
            {
                IsDirty = true;
                _MyNullableTimeSpan = value;
            }
        }
        /*Location874*/
        protected string _MyOldString;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string MyOldString
        {
            get
            {
                return _MyOldString;
            }
            set
            {
                IsDirty = true;
                _MyOldString = value;
            }
        }
        /*Location875*/
        protected string _MyString;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ref string MyString_Ref
        {
            get
            {
                IsDirty = true;
                return ref _MyString;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string MyString
        {
            get
            {
                return _MyString;
            }
            set
            {
                IsDirty = true;
                _MyString = value;
            }
        }
        /*Location876*/
        protected string _MyStringBrotli;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string MyStringBrotli
        {
            get
            {
                return _MyStringBrotli;
            }
            set
            {
                IsDirty = true;
                _MyStringBrotli = value;
            }
        }
        /*Location877*/
        protected TestEnum _MyTestEnum;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public TestEnum MyTestEnum
        {
            get
            {
                return _MyTestEnum;
            }
            set
            {
                IsDirty = true;
                _MyTestEnum = value;
            }
        }
        /*Location878*/
        protected TestEnumByte? _MyTestEnumByteNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public TestEnumByte? MyTestEnumByteNullable
        {
            get
            {
                return _MyTestEnumByteNullable;
            }
            set
            {
                IsDirty = true;
                _MyTestEnumByteNullable = value;
            }
        }
        /*Location879*/
        protected uint _MyUint;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public uint MyUint
        {
            get
            {
                return _MyUint;
            }
            set
            {
                IsDirty = true;
                _MyUint = value;
            }
        }
        /*Location880*/
        protected ExampleChild _IncludableChild;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleChild IncludableChild
        {
            get
            {
                if (!_IncludableChild_Accessed)
                {
                    Lazinate_IncludableChild();
                } 
                return _IncludableChild;
            }
            set
            {
                if (_IncludableChild != null)
                {
                    _IncludableChild.LazinatorParents = _IncludableChild.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _IncludableChild = value;
                _IncludableChild_Accessed = true;
            }
        }
        protected bool _IncludableChild_Accessed;
        private void Lazinate_IncludableChild()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _IncludableChild = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _IncludableChild_ByteIndex, _IncludableChild_ByteLength, false, false, null);
                
                _IncludableChild = DeserializationFactory.Instance.CreateBaseOrDerivedType(1013, (c, p) => new ExampleChild(c, p), childData, this); 
            }
            
            _IncludableChild_Accessed = true;
        }
        
        /*Location881*/
        protected ExampleChild _MyChild1;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleChild MyChild1
        {
            get
            {
                if (!_MyChild1_Accessed)
                {
                    Lazinate_MyChild1();
                } 
                OnMyChild1Accessed(_MyChild1);
                return _MyChild1;
            }
            set
            {
                if (_MyChild1 != null)
                {
                    _MyChild1.LazinatorParents = _MyChild1.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _MyChild1 = value;
                _MyChild1_Accessed = true;
            }
        }
        protected bool _MyChild1_Accessed;
        private void Lazinate_MyChild1()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyChild1 = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyChild1_ByteIndex, _MyChild1_ByteLength, false, false, null);
                
                _MyChild1 = DeserializationFactory.Instance.CreateBaseOrDerivedType(1013, (c, p) => new ExampleChild(c, p), childData, this); 
                OnMyChild1Deserialized(_MyChild1);
            }
            
            _MyChild1_Accessed = true;
        }
        
        /*Location882*/
        protected ExampleChild _MyChild2;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleChild MyChild2
        {
            get
            {
                if (!_MyChild2_Accessed)
                {
                    Lazinate_MyChild2();
                } 
                return _MyChild2;
            }
            set
            {
                if (_MyChild2 != null)
                {
                    _MyChild2.LazinatorParents = _MyChild2.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _MyChild2 = value;
                _MyChild2_Accessed = true;
            }
        }
        protected bool _MyChild2_Accessed;
        private void Lazinate_MyChild2()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyChild2 = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyChild2_ByteIndex, _MyChild2_ByteLength, false, false, null);
                
                _MyChild2 = DeserializationFactory.Instance.CreateBaseOrDerivedType(1013, (c, p) => new ExampleChild(c, p), childData, this); 
            }
            
            _MyChild2_Accessed = true;
        }
        
        /*Location883*/
        protected ExampleChild _MyChild2Previous;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleChild MyChild2Previous
        {
            get
            {
                if (!_MyChild2Previous_Accessed)
                {
                    Lazinate_MyChild2Previous();
                } 
                return _MyChild2Previous;
            }
            set
            {
                if (_MyChild2Previous != null)
                {
                    _MyChild2Previous.LazinatorParents = _MyChild2Previous.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _MyChild2Previous = value;
                _MyChild2Previous_Accessed = true;
            }
        }
        protected bool _MyChild2Previous_Accessed;
        private void Lazinate_MyChild2Previous()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyChild2Previous = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyChild2Previous_ByteIndex, _MyChild2Previous_ByteLength, false, false, null);
                
                _MyChild2Previous = DeserializationFactory.Instance.CreateBaseOrDerivedType(1013, (c, p) => new ExampleChild(c, p), childData, this); 
            }
            
            _MyChild2Previous_Accessed = true;
        }
        
        /*Location884*/
        protected IExampleNonexclusiveInterface _MyInterfaceImplementer;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IExampleNonexclusiveInterface MyInterfaceImplementer
        {
            get
            {
                if (!_MyInterfaceImplementer_Accessed)
                {
                    Lazinate_MyInterfaceImplementer();
                } 
                return _MyInterfaceImplementer;
            }
            set
            {
                if (_MyInterfaceImplementer != null)
                {
                    _MyInterfaceImplementer.LazinatorParents = _MyInterfaceImplementer.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _MyInterfaceImplementer = value;
                _MyInterfaceImplementer_Accessed = true;
            }
        }
        protected bool _MyInterfaceImplementer_Accessed;
        private void Lazinate_MyInterfaceImplementer()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyInterfaceImplementer = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyInterfaceImplementer_ByteIndex, _MyInterfaceImplementer_ByteLength, false, false, null);
                
                _MyInterfaceImplementer = DeserializationFactory.Instance.CreateBasedOnType<IExampleNonexclusiveInterface>(childData, this); 
            }
            
            _MyInterfaceImplementer_Accessed = true;
        }
        
        /*Location885*/
        protected NonLazinatorClass _MyNonLazinatorChild;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public NonLazinatorClass MyNonLazinatorChild
        {
            get
            {
                if (!_MyNonLazinatorChild_Accessed)
                {
                    Lazinate_MyNonLazinatorChild();
                } 
                return _MyNonLazinatorChild;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyNonLazinatorChild = value;
                _MyNonLazinatorChild_Dirty = true;
                _MyNonLazinatorChild_Accessed = true;
            }
        }
        protected bool _MyNonLazinatorChild_Accessed;
        private void Lazinate_MyNonLazinatorChild()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyNonLazinatorChild = default(NonLazinatorClass);
                _MyNonLazinatorChild_Dirty = true; 
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyNonLazinatorChild_ByteIndex, _MyNonLazinatorChild_ByteLength, false, false, null);
                _MyNonLazinatorChild = NonLazinatorDirectConverter.ConvertFromBytes_NonLazinatorClass(childData);
            }
            
            _MyNonLazinatorChild_Accessed = true;
        }
        
        /*Location886*/
        private bool _MyNonLazinatorChild_Dirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool MyNonLazinatorChild_Dirty
        {
            get => _MyNonLazinatorChild_Dirty;
            set
            {
                if (_MyNonLazinatorChild_Dirty != value)
                {
                    _MyNonLazinatorChild_Dirty = value;
                }
                if (value && !IsDirty)
                {
                    IsDirty = true;
                }
            }
        }
        /*Location887*/
        protected WInt _WrappedInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WInt WrappedInt
        {
            get
            {
                if (!_WrappedInt_Accessed)
                {
                    Lazinate_WrappedInt();
                } 
                return _WrappedInt;
            }
            set
            {
                value.LazinatorParents = new LazinatorParentsCollection(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _WrappedInt = value;
                _WrappedInt_Accessed = true;
            }
        }
        protected bool _WrappedInt_Accessed;
        private void Lazinate_WrappedInt()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _WrappedInt = default(WInt);
                _WrappedInt.LazinatorParents = new LazinatorParentsCollection(this);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedInt_ByteIndex, _WrappedInt_ByteLength, false, true, null);
                _WrappedInt = new WInt()
                {
                    LazinatorParents = new LazinatorParentsCollection(this)
                };
                _WrappedInt.DeserializeLazinator(childData);
            }
            
            _WrappedInt_Accessed = true;
        }
        
        /*Location888*/[DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WInt WrappedInt_Copy
        {
            get
            {
                if (!_WrappedInt_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        return default(WInt);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedInt_ByteIndex, _WrappedInt_ByteLength, false, true, null);
                        var toReturn = new WInt();
                        toReturn.DeserializeLazinator(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                
                var cleanCopy = _WrappedInt;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        /*Location889*/
        protected ExampleChild _ExcludableChild;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleChild ExcludableChild
        {
            get
            {
                if (!_ExcludableChild_Accessed)
                {
                    Lazinate_ExcludableChild();
                } 
                return _ExcludableChild;
            }
            set
            {
                if (_ExcludableChild != null)
                {
                    _ExcludableChild.LazinatorParents = _ExcludableChild.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ExcludableChild = value;
                _ExcludableChild_Accessed = true;
            }
        }
        protected bool _ExcludableChild_Accessed;
        private void Lazinate_ExcludableChild()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _ExcludableChild = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ExcludableChild_ByteIndex, _ExcludableChild_ByteLength, false, false, null);
                
                _ExcludableChild = DeserializationFactory.Instance.CreateBaseOrDerivedType(1013, (c, p) => new ExampleChild(c, p), childData, this); 
            }
            
            _ExcludableChild_Accessed = true;
        }
        
        /*Location911*/
        /* Serialization, deserialization, and object relationships */
        
        public Example(IncludeChildrenMode originalIncludeChildrenMode)
        {
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public Example(LazinatorMemory serializedBytes, ILazinator parent = null)
        {
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            if (serializedVersionNumber < LazinatorObjectVersion)
            {
                LazinatorObjectVersionUpgrade(serializedVersionNumber);
            }
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            Example clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new Example(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (Example)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, false, this);
                clone = new Example(bytes);
            }
            clone.OnCompleteClone(this);
            return clone;
        }
        
        public virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            Example typedClone = (Example) clone;
            /*Location890*/typedClone.MyNullableDouble = MyNullableDouble;
            /*Location891*/typedClone.MyBool = MyBool;
            /*Location892*/typedClone.MyChar = MyChar;
            /*Location893*/typedClone.MyDateTime = MyDateTime;
            /*Location894*/if (LazinatorObjectVersion >= 3)
            {
                typedClone.MyNewString = MyNewString;
            }
            
            /*Location895*/typedClone.MyNullableDecimal = MyNullableDecimal;
            /*Location896*/typedClone.MyNullableTimeSpan = MyNullableTimeSpan;
            /*Location897*/if (LazinatorObjectVersion < 3)
            {
                typedClone.MyOldString = MyOldString;
            }
            
            /*Location898*/typedClone.MyString = MyString;
            /*Location899*/typedClone.MyStringBrotli = MyStringBrotli;
            /*Location900*/typedClone.MyTestEnum = MyTestEnum;
            /*Location901*/typedClone.MyTestEnumByteNullable = MyTestEnumByteNullable;
            /*Location902*/typedClone.MyUint = MyUint;
            /*Location903*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren)
            {
                if (IncludableChild == null)
                {
                    typedClone.IncludableChild = null;
                }
                else
                {
                    typedClone.IncludableChild = (ExampleChild) IncludableChild.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location904*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (MyChild1 == null)
                {
                    typedClone.MyChild1 = null;
                }
                else
                {
                    typedClone.MyChild1 = (ExampleChild) MyChild1.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location905*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (MyChild2 == null)
                {
                    typedClone.MyChild2 = null;
                }
                else
                {
                    typedClone.MyChild2 = (ExampleChild) MyChild2.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location906*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren && LazinatorObjectVersion < 3)
            {
                if (MyChild2Previous == null)
                {
                    typedClone.MyChild2Previous = null;
                }
                else
                {
                    typedClone.MyChild2Previous = (ExampleChild) MyChild2Previous.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location907*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (MyInterfaceImplementer == null)
                {
                    typedClone.MyInterfaceImplementer = null;
                }
                else
                {
                    typedClone.MyInterfaceImplementer = (IExampleNonexclusiveInterface) MyInterfaceImplementer.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location908*/typedClone.MyNonLazinatorChild = NonLazinatorDirectConverter.CloneOrChange_NonLazinatorClass(MyNonLazinatorChild, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location909*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                typedClone.WrappedInt = (WInt) WrappedInt.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            
            /*Location910*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren && includeChildrenMode != IncludeChildrenMode.ExcludeOnlyExcludableChildren)
            {
                if (ExcludableChild == null)
                {
                    typedClone.ExcludableChild = null;
                }
                else
                {
                    typedClone.ExcludableChild = (ExampleChild) ExcludableChild.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        OnDirty();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        OnDescendantIsDirty();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        /*Location912*/
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location913*/public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location914*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _IncludableChild_Accessed) && IncludableChild == null)
            {
                yield return ("IncludableChild", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && IncludableChild != null) || (_IncludableChild_Accessed && _IncludableChild != null))
                {
                    bool isMatch_IncludableChild = matchCriterion == null || matchCriterion(IncludableChild);
                    bool shouldExplore_IncludableChild = exploreCriterion == null || exploreCriterion(IncludableChild);
                    if (isMatch_IncludableChild)
                    {
                        yield return ("IncludableChild", IncludableChild);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_IncludableChild) && shouldExplore_IncludableChild)
                    {
                        foreach (var toYield in IncludableChild.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("IncludableChild" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location915*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _MyChild1_Accessed) && MyChild1 == null)
            {
                yield return ("MyChild1", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && MyChild1 != null) || (_MyChild1_Accessed && _MyChild1 != null))
                {
                    bool isMatch_MyChild1 = matchCriterion == null || matchCriterion(MyChild1);
                    bool shouldExplore_MyChild1 = exploreCriterion == null || exploreCriterion(MyChild1);
                    if (isMatch_MyChild1)
                    {
                        yield return ("MyChild1", MyChild1);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_MyChild1) && shouldExplore_MyChild1)
                    {
                        foreach (var toYield in MyChild1.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("MyChild1" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location916*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _MyChild2_Accessed) && MyChild2 == null)
            {
                yield return ("MyChild2", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && MyChild2 != null) || (_MyChild2_Accessed && _MyChild2 != null))
                {
                    bool isMatch_MyChild2 = matchCriterion == null || matchCriterion(MyChild2);
                    bool shouldExplore_MyChild2 = exploreCriterion == null || exploreCriterion(MyChild2);
                    if (isMatch_MyChild2)
                    {
                        yield return ("MyChild2", MyChild2);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_MyChild2) && shouldExplore_MyChild2)
                    {
                        foreach (var toYield in MyChild2.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("MyChild2" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location917*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _MyChild2Previous_Accessed) && MyChild2Previous == null)
            {
                yield return ("MyChild2Previous", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && MyChild2Previous != null) || (_MyChild2Previous_Accessed && _MyChild2Previous != null))
                {
                    bool isMatch_MyChild2Previous = matchCriterion == null || matchCriterion(MyChild2Previous);
                    bool shouldExplore_MyChild2Previous = exploreCriterion == null || exploreCriterion(MyChild2Previous);
                    if (isMatch_MyChild2Previous)
                    {
                        yield return ("MyChild2Previous", MyChild2Previous);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_MyChild2Previous) && shouldExplore_MyChild2Previous)
                    {
                        foreach (var toYield in MyChild2Previous.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("MyChild2Previous" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location918*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _MyInterfaceImplementer_Accessed) && MyInterfaceImplementer == null)
            {
                yield return ("MyInterfaceImplementer", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && MyInterfaceImplementer != null) || (_MyInterfaceImplementer_Accessed && _MyInterfaceImplementer != null))
                {
                    bool isMatch_MyInterfaceImplementer = matchCriterion == null || matchCriterion(MyInterfaceImplementer);
                    bool shouldExplore_MyInterfaceImplementer = exploreCriterion == null || exploreCriterion(MyInterfaceImplementer);
                    if (isMatch_MyInterfaceImplementer)
                    {
                        yield return ("MyInterfaceImplementer", MyInterfaceImplementer);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_MyInterfaceImplementer) && shouldExplore_MyInterfaceImplementer)
                    {
                        foreach (var toYield in MyInterfaceImplementer.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("MyInterfaceImplementer" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location919*/bool isMatch_WrappedInt = matchCriterion == null || matchCriterion(WrappedInt);
            bool shouldExplore_WrappedInt = exploreCriterion == null || exploreCriterion(WrappedInt);
            if (isMatch_WrappedInt)
            {
                yield return ("WrappedInt", WrappedInt);
            }
            if ((!stopExploringBelowMatch || !isMatch_WrappedInt) && shouldExplore_WrappedInt)
            {
                foreach (var toYield in WrappedInt.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return ("WrappedInt" + "." + toYield.propertyName, toYield.descendant);
                }
            }
            /*Location920*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ExcludableChild_Accessed) && ExcludableChild == null)
            {
                yield return ("ExcludableChild", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ExcludableChild != null) || (_ExcludableChild_Accessed && _ExcludableChild != null))
                {
                    bool isMatch_ExcludableChild = matchCriterion == null || matchCriterion(ExcludableChild);
                    bool shouldExplore_ExcludableChild = exploreCriterion == null || exploreCriterion(ExcludableChild);
                    if (isMatch_ExcludableChild)
                    {
                        yield return ("ExcludableChild", ExcludableChild);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_ExcludableChild) && shouldExplore_ExcludableChild)
                    {
                        foreach (var toYield in ExcludableChild.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ExcludableChild" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location921*/yield break;
        }
        /*Location922*/
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location923*/yield return ("MyNullableDouble", (object)MyNullableDouble);
            /*Location924*/yield return ("MyBool", (object)MyBool);
            /*Location925*/yield return ("MyChar", (object)MyChar);
            /*Location926*/yield return ("MyDateTime", (object)MyDateTime);
            /*Location927*/yield return ("MyNewString", (object)MyNewString);
            /*Location928*/yield return ("MyNullableDecimal", (object)MyNullableDecimal);
            /*Location929*/yield return ("MyNullableTimeSpan", (object)MyNullableTimeSpan);
            /*Location930*/yield return ("MyOldString", (object)MyOldString);
            /*Location931*/yield return ("MyString", (object)MyString);
            /*Location932*/yield return ("MyStringBrotli", (object)MyStringBrotli);
            /*Location933*/yield return ("MyTestEnum", (object)MyTestEnum);
            /*Location934*/yield return ("MyTestEnumByteNullable", (object)MyTestEnumByteNullable);
            /*Location935*/yield return ("MyUint", (object)MyUint);
            /*Location936*/yield return ("MyNonLazinatorChild", (object)MyNonLazinatorChild);
            /*Location937*/yield break;
        }
        /*Location938*/
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location939*/if ((!exploreOnlyDeserializedChildren && IncludableChild != null) || (_IncludableChild_Accessed && _IncludableChild != null))
            {
                _IncludableChild = (ExampleChild) _IncludableChild.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location940*/if ((!exploreOnlyDeserializedChildren && MyChild1 != null) || (_MyChild1_Accessed && _MyChild1 != null))
            {
                _MyChild1 = (ExampleChild) _MyChild1.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location941*/if ((!exploreOnlyDeserializedChildren && MyChild2 != null) || (_MyChild2_Accessed && _MyChild2 != null))
            {
                _MyChild2 = (ExampleChild) _MyChild2.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location942*/if ((!exploreOnlyDeserializedChildren && MyChild2Previous != null) || (_MyChild2Previous_Accessed && _MyChild2Previous != null))
            {
                _MyChild2Previous = (ExampleChild) _MyChild2Previous.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location943*/if ((!exploreOnlyDeserializedChildren && MyInterfaceImplementer != null) || (_MyInterfaceImplementer_Accessed && _MyInterfaceImplementer != null))
            {
                _MyInterfaceImplementer = (IExampleNonexclusiveInterface) _MyInterfaceImplementer.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location944*/var deserialized_WrappedInt = WrappedInt;
            _WrappedInt = (WInt) _WrappedInt.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);/*Location945*/if ((!exploreOnlyDeserializedChildren && ExcludableChild != null) || (_ExcludableChild_Accessed && _ExcludableChild != null))
            {
                _ExcludableChild = (ExampleChild) _ExcludableChild.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location946*/if ((!exploreOnlyDeserializedChildren && MyNonLazinatorChild != null) || (_MyNonLazinatorChild_Accessed && _MyNonLazinatorChild != null))
            {
                _MyNonLazinatorChild = NonLazinatorDirectConverter.CloneOrChange_NonLazinatorClass(_MyNonLazinatorChild, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location947*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location948*/
        public virtual void FreeInMemoryObjects()
        {
            _IncludableChild = default;
            _MyChild1 = default;
            _MyChild2 = default;
            _MyChild2Previous = default;
            _MyInterfaceImplementer = default;
            _MyNonLazinatorChild = default;
            _WrappedInt = default;
            _ExcludableChild = default;
            _IncludableChild_Accessed = _MyChild1_Accessed = _MyChild2_Accessed = _MyChild2Previous_Accessed = _MyInterfaceImplementer_Accessed = _MyNonLazinatorChild_Accessed = _WrappedInt_Accessed = _ExcludableChild_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location949*/
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1012;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 3;
        
        
        /*Location950*/public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location951*/_MyNullableDouble = span.ToNullableDouble(ref bytesSoFar);
            /*Location952*/_MyBool = span.ToBoolean(ref bytesSoFar);
            /*Location953*/_MyChar = span.ToChar(ref bytesSoFar);
            /*Location954*/_MyDateTime = span.ToDecompressedDateTime(ref bytesSoFar);
            /*Location955*/if (serializedVersionNumber >= 3)
            {
                _MyNewString = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            }
            
            /*Location956*/_MyNullableDecimal = span.ToDecompressedNullableDecimal(ref bytesSoFar);
            /*Location957*/_MyNullableTimeSpan = span.ToDecompressedNullableTimeSpan(ref bytesSoFar);
            /*Location958*/if (serializedVersionNumber < 3)
            {
                _MyOldString = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            }
            
            /*Location959*/_MyString = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            /*Location960*/_MyStringBrotli = span.ToString_BrotliCompressedWithLength(ref bytesSoFar);
            /*Location961*/_MyTestEnum = (TestEnum)span.ToDecompressedInt(ref bytesSoFar);
            /*Location962*/_MyTestEnumByteNullable = (TestEnumByte?)span.ToDecompressedNullableByte(ref bytesSoFar);
            /*Location963*/_MyUint = span.ToDecompressedUint(ref bytesSoFar);
            /*Location964*/_IncludableChild_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location965*/_MyChild1_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location966*/_MyChild2_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location967*/_MyChild2Previous_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren && serializedVersionNumber < 3)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location968*/_MyInterfaceImplementer_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location969*/_MyNonLazinatorChild_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location970*/_WrappedInt_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToByte(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location971*/_ExcludableChild_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren && includeChildrenMode != IncludeChildrenMode.ExcludeOnlyExcludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location972*/_Example_EndByteIndex = bytesSoFar;
            /*Location973*/        }
            
            /*Location974*/public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location975*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location976*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location977*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location978*/}
                    /*Location979*/}
                    /*Location980*/
                    public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location981*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location982*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location983*/}
                                /*Location984*/
                                _WrappedInt_Accessed = false;/*Location985*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location986*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location987*/}
                            /*Location988*/
                            protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                /*Location989*/if (_IncludableChild_Accessed && _IncludableChild != null)
                                {
                                    IncludableChild.UpdateStoredBuffer(ref writer, startPosition + _IncludableChild_ByteIndex + sizeof(int), _IncludableChild_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location990*/if (_MyChild1_Accessed && _MyChild1 != null)
                                {
                                    MyChild1.UpdateStoredBuffer(ref writer, startPosition + _MyChild1_ByteIndex + sizeof(int), _MyChild1_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location991*/if (_MyChild2_Accessed && _MyChild2 != null)
                                {
                                    MyChild2.UpdateStoredBuffer(ref writer, startPosition + _MyChild2_ByteIndex + sizeof(int), _MyChild2_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location992*/if (_MyChild2Previous_Accessed && _MyChild2Previous != null)
                                {
                                    MyChild2Previous.UpdateStoredBuffer(ref writer, startPosition + _MyChild2Previous_ByteIndex + sizeof(int), _MyChild2Previous_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location993*/if (_MyInterfaceImplementer_Accessed && _MyInterfaceImplementer != null)
                                {
                                    MyInterfaceImplementer.UpdateStoredBuffer(ref writer, startPosition + _MyInterfaceImplementer_ByteIndex + sizeof(int), _MyInterfaceImplementer_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location994*/WrappedInt.UpdateStoredBuffer(ref writer, startPosition + _WrappedInt_ByteIndex + sizeof(byte), _WrappedInt_ByteLength - sizeof(byte), IncludeChildrenMode.IncludeAllChildren, true);
                                /*Location995*/if (_ExcludableChild_Accessed && _ExcludableChild != null)
                                {
                                    ExcludableChild.UpdateStoredBuffer(ref writer, startPosition + _ExcludableChild_ByteIndex + sizeof(int), _ExcludableChild_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location996*/}
                                
                                /*Location997*/
                                protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    int startPosition = writer.Position;
                                    int startOfObjectPosition = 0;
                                    // header information
                                    /*Location998*/if (includeUniqueID)
                                    {
                                        if (!ContainsOpenGenericParameters)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                        }
                                        else
                                        {
                                            WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                                        }
                                    }
                                    /*Location999*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                    writer.Write((byte)includeChildrenMode);
                                    /*Location1000*/// write properties
                                    /*Location1001*/WriteUncompressedPrimitives.WriteNullableDouble(ref writer, _MyNullableDouble);
                                    /*Location1002*/WriteUncompressedPrimitives.WriteBool(ref writer, _MyBool);
                                    /*Location1003*/EncodeCharAndString.WriteCharInTwoBytes(ref writer, _MyChar);
                                    /*Location1004*/CompressedIntegralTypes.WriteCompressedDateTime(ref writer, _MyDateTime);
                                    /*Location1005*/if (LazinatorObjectVersion >= 3)
                                    {
                                        EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _MyNewString);
                                    }
                                    
                                    /*Location1006*/CompressedDecimal.WriteCompressedNullableDecimal(ref writer, _MyNullableDecimal);
                                    /*Location1007*/CompressedIntegralTypes.WriteCompressedNullableTimeSpan(ref writer, _MyNullableTimeSpan);
                                    /*Location1008*/if (LazinatorObjectVersion < 3)
                                    {
                                        EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _MyOldString);
                                    }
                                    
                                    /*Location1009*/EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _MyString);
                                    /*Location1010*/EncodeCharAndString.WriteBrotliCompressedWithIntPrefix(ref writer, _MyStringBrotli);
                                    /*Location1011*/CompressedIntegralTypes.WriteCompressedInt(ref writer, (int) _MyTestEnum);
                                    /*Location1012*/CompressedIntegralTypes.WriteCompressedNullableByte(ref writer, (byte?) _MyTestEnumByteNullable);
                                    /*Location1013*/CompressedIntegralTypes.WriteCompressedUint(ref writer, _MyUint);
                                    /*Location1014*/startOfObjectPosition = writer.Position;
                                    /*Location1015*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_IncludableChild_Accessed)
                                        {
                                            var deserialized = IncludableChild;
                                        }
                                        WriteChild(ref writer, ref _IncludableChild, includeChildrenMode, _IncludableChild_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _IncludableChild_ByteIndex, _IncludableChild_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location1016*/if (updateStoredBuffer)
                                    {
                                        _IncludableChild_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location1017*/startOfObjectPosition = writer.Position;
                                    /*Location1018*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyChild1_Accessed)
                                        {
                                            var deserialized = MyChild1;
                                        }
                                        WriteChild(ref writer, ref _MyChild1, includeChildrenMode, _MyChild1_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _MyChild1_ByteIndex, _MyChild1_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location1019*/if (updateStoredBuffer)
                                    {
                                        _MyChild1_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location1020*/startOfObjectPosition = writer.Position;
                                    /*Location1021*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyChild2_Accessed)
                                        {
                                            var deserialized = MyChild2;
                                        }
                                        WriteChild(ref writer, ref _MyChild2, includeChildrenMode, _MyChild2_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _MyChild2_ByteIndex, _MyChild2_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location1022*/if (updateStoredBuffer)
                                    {
                                        _MyChild2_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location1023*/startOfObjectPosition = writer.Position;
                                    /*Location1024*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren && LazinatorObjectVersion < 3)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyChild2Previous_Accessed)
                                        {
                                            var deserialized = MyChild2Previous;
                                        }
                                        WriteChild(ref writer, ref _MyChild2Previous, includeChildrenMode, _MyChild2Previous_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _MyChild2Previous_ByteIndex, _MyChild2Previous_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location1025*/if (updateStoredBuffer)
                                    {
                                        _MyChild2Previous_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location1026*/startOfObjectPosition = writer.Position;
                                    /*Location1027*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyInterfaceImplementer_Accessed)
                                        {
                                            var deserialized = MyInterfaceImplementer;
                                        }
                                        WriteChild(ref writer, ref _MyInterfaceImplementer, includeChildrenMode, _MyInterfaceImplementer_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _MyInterfaceImplementer_ByteIndex, _MyInterfaceImplementer_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location1028*/if (updateStoredBuffer)
                                    {
                                        _MyInterfaceImplementer_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location1029*/startOfObjectPosition = writer.Position;
                                    /*Location1030*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyNonLazinatorChild_Accessed)
                                    {
                                        var deserialized = MyNonLazinatorChild;
                                    }
                                    /*Location1031*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyNonLazinatorChild, isBelievedDirty: MyNonLazinatorChild_Dirty || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyNonLazinatorChild_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyNonLazinatorChild_ByteIndex, _MyNonLazinatorChild_ByteLength, false, false, null),
                                    verifyCleanness: verifyCleanness,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    NonLazinatorDirectConverter.ConvertToBytes_NonLazinatorClass(ref w, _MyNonLazinatorChild,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location1032*/if (updateStoredBuffer)
                                    {
                                        _MyNonLazinatorChild_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location1033*/startOfObjectPosition = writer.Position;
                                    /*Location1034*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_WrappedInt_Accessed)
                                        {
                                            var deserialized = WrappedInt;
                                        }
                                        WriteChild(ref writer, ref _WrappedInt, includeChildrenMode, _WrappedInt_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _WrappedInt_ByteIndex, _WrappedInt_ByteLength, false, true, null), verifyCleanness, updateStoredBuffer, true, false, this);
                                    }
                                    
                                    /*Location1035*/if (updateStoredBuffer)
                                    {
                                        _WrappedInt_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location1036*/startOfObjectPosition = writer.Position;
                                    /*Location1037*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren && includeChildrenMode != IncludeChildrenMode.ExcludeOnlyExcludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ExcludableChild_Accessed)
                                        {
                                            var deserialized = ExcludableChild;
                                        }
                                        WriteChild(ref writer, ref _ExcludableChild, includeChildrenMode, _ExcludableChild_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ExcludableChild_ByteIndex, _ExcludableChild_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location1038*/if (updateStoredBuffer)
                                    {
                                        _ExcludableChild_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location1039*/if (updateStoredBuffer)
                                    {
                                        /*Location1040*/_Example_EndByteIndex = writer.Position - startPosition;
                                        /*Location1041*/}
                                        /*Location1042*/}
                                        /*Location1043*/
                                    }
                                }
