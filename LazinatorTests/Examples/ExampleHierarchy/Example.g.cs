//647f795b-3b0b-8346-4213-3fa1c49d8143
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.357
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LazinatorTests.Examples
{
    using Lazinator.Attributes;
    using Lazinator.Buffers;
    using Lazinator.Core;
    using Lazinator.Exceptions;
    using Lazinator.Support;
    using Lazinator.Wrappers;
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class Example : ILazinator
    {
        
        /* This is code added with an InsertCode attribute. It is useful to define fields in structs, since otherwise there would be no defined ordering between the fields in the two different partial struct files, producing an error. */ 
        
        public bool IsStruct => false;
        
        /* Property definitions */
        
        protected int _IncludableChild_ByteIndex;
        protected int _MyChild1_ByteIndex;
        protected int _MyChild2_ByteIndex;
        protected int _MyChild2Previous_ByteIndex;
        protected int _MyInterfaceImplementer_ByteIndex;
        protected int _MyNonLazinatorChild_ByteIndex;
        protected int _WrappedInt_ByteIndex;
        protected int _ExcludableChild_ByteIndex;
        protected virtual int _IncludableChild_ByteLength => _MyChild1_ByteIndex - _IncludableChild_ByteIndex;
        protected virtual int _MyChild1_ByteLength => _MyChild2_ByteIndex - _MyChild1_ByteIndex;
        protected virtual int _MyChild2_ByteLength => _MyChild2Previous_ByteIndex - _MyChild2_ByteIndex;
        protected virtual int _MyChild2Previous_ByteLength => _MyInterfaceImplementer_ByteIndex - _MyChild2Previous_ByteIndex;
        protected virtual int _MyInterfaceImplementer_ByteLength => _MyNonLazinatorChild_ByteIndex - _MyInterfaceImplementer_ByteIndex;
        protected virtual int _MyNonLazinatorChild_ByteLength => _WrappedInt_ByteIndex - _MyNonLazinatorChild_ByteIndex;
        protected virtual int _WrappedInt_ByteLength => _ExcludableChild_ByteIndex - _WrappedInt_ByteIndex;
        private int _Example_EndByteIndex;
        protected virtual int _ExcludableChild_ByteLength => _Example_EndByteIndex - _ExcludableChild_ByteIndex;
        
        
        protected double? _MyNullableDouble;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual double? MyNullableDouble
        {
            get
            {
                return _MyNullableDouble;
            }
            set
            {
                IsDirty = true;
                _MyNullableDouble = value;
            }
        }
        
        protected bool _MyBool;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool MyBool
        {
            get
            {
                return _MyBool;
            }
            set
            {
                IsDirty = true;
                _MyBool = value;
            }
        }
        
        protected char _MyChar;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ref char MyChar_Ref
        {
            get
            {
                IsDirty = true;
                return ref _MyChar;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public char MyChar
        {
            get
            {
                return _MyChar;
            }
            set
            {
                IsDirty = true;
                _MyChar = value;
            }
        }
        
        protected DateTime _MyDateTime;
        [Newtonsoft.Json.JsonProperty("MyDT")]
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public DateTime MyDateTime
        {
            get
            {
                return _MyDateTime;
            }
            set
            {
                IsDirty = true;
                _MyDateTime = value;
            }
        }
        
        protected string _MyNewString;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string MyNewString
        {
            get
            {
                return _MyNewString;
            }
            set
            {
                IsDirty = true;
                _MyNewString = value;
            }
        }
        
        protected decimal? _MyNullableDecimal;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public decimal? MyNullableDecimal
        {
            get
            {
                return _MyNullableDecimal;
            }
            internal set
            {
                IsDirty = true;
                _MyNullableDecimal = value;
            }
        }
        
        protected TimeSpan? _MyNullableTimeSpan;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public TimeSpan? MyNullableTimeSpan
        {
            get
            {
                return _MyNullableTimeSpan;
            }
            set
            {
                IsDirty = true;
                _MyNullableTimeSpan = value;
            }
        }
        
        protected string _MyOldString;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string MyOldString
        {
            get
            {
                return _MyOldString;
            }
            set
            {
                IsDirty = true;
                _MyOldString = value;
            }
        }
        
        protected string _MyString;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ref string MyString_Ref
        {
            get
            {
                IsDirty = true;
                return ref _MyString;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string MyString
        {
            get
            {
                return _MyString;
            }
            set
            {
                IsDirty = true;
                _MyString = value;
            }
        }
        
        protected string _MyStringBrotli;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string MyStringBrotli
        {
            get
            {
                return _MyStringBrotli;
            }
            set
            {
                IsDirty = true;
                _MyStringBrotli = value;
            }
        }
        
        protected TestEnum _MyTestEnum;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public TestEnum MyTestEnum
        {
            get
            {
                return _MyTestEnum;
            }
            set
            {
                IsDirty = true;
                _MyTestEnum = value;
            }
        }
        
        protected TestEnumByte? _MyTestEnumByteNullable;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public TestEnumByte? MyTestEnumByteNullable
        {
            get
            {
                return _MyTestEnumByteNullable;
            }
            set
            {
                IsDirty = true;
                _MyTestEnumByteNullable = value;
            }
        }
        
        protected uint _MyUint;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public uint MyUint
        {
            get
            {
                return _MyUint;
            }
            set
            {
                IsDirty = true;
                _MyUint = value;
            }
        }
        
        protected ExampleChild _IncludableChild;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleChild IncludableChild
        {
            get
            {
                if (!_IncludableChild_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        _IncludableChild = default(ExampleChild);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _IncludableChild_ByteIndex, _IncludableChild_ByteLength, false, false, null);
                        
                        _IncludableChild = DeserializationFactory.Instance.CreateBaseOrDerivedType(213, () => new ExampleChild(), childData, this); 
                    }
                    _IncludableChild_Accessed = true;
                } 
                return _IncludableChild;
            }
            set
            {
                if (_IncludableChild != null)
                {
                    _IncludableChild.LazinatorParents = _IncludableChild.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _IncludableChild = value;
                _IncludableChild_Accessed = true;
            }
        }
        protected bool _IncludableChild_Accessed;
        
        protected ExampleChild _MyChild1;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleChild MyChild1
        {
            get
            {
                if (!_MyChild1_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        _MyChild1 = default(ExampleChild);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyChild1_ByteIndex, _MyChild1_ByteLength, false, false, null);
                        
                        _MyChild1 = DeserializationFactory.Instance.CreateBaseOrDerivedType(213, () => new ExampleChild(), childData, this); 
                    }
                    _MyChild1_Accessed = true;
                } 
                return _MyChild1;
            }
            set
            {
                if (_MyChild1 != null)
                {
                    _MyChild1.LazinatorParents = _MyChild1.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _MyChild1 = value;
                _MyChild1_Accessed = true;
            }
        }
        protected bool _MyChild1_Accessed;
        
        protected ExampleChild _MyChild2;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleChild MyChild2
        {
            get
            {
                if (!_MyChild2_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        _MyChild2 = default(ExampleChild);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyChild2_ByteIndex, _MyChild2_ByteLength, false, false, null);
                        
                        _MyChild2 = DeserializationFactory.Instance.CreateBaseOrDerivedType(213, () => new ExampleChild(), childData, this); 
                    }
                    _MyChild2_Accessed = true;
                } 
                return _MyChild2;
            }
            set
            {
                if (_MyChild2 != null)
                {
                    _MyChild2.LazinatorParents = _MyChild2.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _MyChild2 = value;
                _MyChild2_Accessed = true;
            }
        }
        protected bool _MyChild2_Accessed;
        
        protected ExampleChild _MyChild2Previous;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleChild MyChild2Previous
        {
            get
            {
                if (!_MyChild2Previous_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        _MyChild2Previous = default(ExampleChild);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyChild2Previous_ByteIndex, _MyChild2Previous_ByteLength, false, false, null);
                        
                        _MyChild2Previous = DeserializationFactory.Instance.CreateBaseOrDerivedType(213, () => new ExampleChild(), childData, this); 
                    }
                    _MyChild2Previous_Accessed = true;
                } 
                return _MyChild2Previous;
            }
            set
            {
                if (_MyChild2Previous != null)
                {
                    _MyChild2Previous.LazinatorParents = _MyChild2Previous.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _MyChild2Previous = value;
                _MyChild2Previous_Accessed = true;
            }
        }
        protected bool _MyChild2Previous_Accessed;
        
        protected IExampleNonexclusiveInterface _MyInterfaceImplementer;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IExampleNonexclusiveInterface MyInterfaceImplementer
        {
            get
            {
                if (!_MyInterfaceImplementer_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        _MyInterfaceImplementer = default(IExampleNonexclusiveInterface);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyInterfaceImplementer_ByteIndex, _MyInterfaceImplementer_ByteLength, false, false, null);
                        
                        _MyInterfaceImplementer = DeserializationFactory.Instance.CreateBasedOnType<IExampleNonexclusiveInterface>(childData, this); 
                    }
                    _MyInterfaceImplementer_Accessed = true;
                } 
                return _MyInterfaceImplementer;
            }
            set
            {
                if (_MyInterfaceImplementer != null)
                {
                    _MyInterfaceImplementer.LazinatorParents = _MyInterfaceImplementer.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _MyInterfaceImplementer = value;
                _MyInterfaceImplementer_Accessed = true;
            }
        }
        protected bool _MyInterfaceImplementer_Accessed;
        
        protected NonLazinatorClass _MyNonLazinatorChild;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public NonLazinatorClass MyNonLazinatorChild
        {
            get
            {
                if (!_MyNonLazinatorChild_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        _MyNonLazinatorChild = default(NonLazinatorClass);
                        _MyNonLazinatorChild_Dirty = true; 
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyNonLazinatorChild_ByteIndex, _MyNonLazinatorChild_ByteLength, false, false, null);
                        _MyNonLazinatorChild = NonLazinatorDirectConverter.ConvertFromBytes_NonLazinatorClass(childData);
                    }
                    _MyNonLazinatorChild_Accessed = true;
                } 
                return _MyNonLazinatorChild;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyNonLazinatorChild = value;
                _MyNonLazinatorChild_Dirty = true;
                _MyNonLazinatorChild_Accessed = true;
            }
        }
        protected bool _MyNonLazinatorChild_Accessed;
        
        private bool _MyNonLazinatorChild_Dirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool MyNonLazinatorChild_Dirty
        {
            get => _MyNonLazinatorChild_Dirty;
            set
            {
                if (_MyNonLazinatorChild_Dirty != value)
                {
                    _MyNonLazinatorChild_Dirty = value;
                }
                if (value && !IsDirty)
                {
                    IsDirty = true;
                }
            }
        }
        
        protected WInt _WrappedInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WInt WrappedInt
        {
            get
            {
                if (!_WrappedInt_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        _WrappedInt = default(WInt);
                        _WrappedInt.LazinatorParents = new LazinatorParentsCollection(this);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedInt_ByteIndex, _WrappedInt_ByteLength, false, true, null);
                        _WrappedInt = new WInt()
                        {
                            LazinatorParents = new LazinatorParentsCollection(this)
                        };
                        _WrappedInt.DeserializeLazinator(childData);
                    }
                    _WrappedInt_Accessed = true;
                } 
                return _WrappedInt;
            }
            set
            {
                value.LazinatorParents = new LazinatorParentsCollection(this);
                
                IsDirty = true;
                DescendantIsDirty = true;
                _WrappedInt = value;
                _WrappedInt_Accessed = true;
            }
        }
        protected bool _WrappedInt_Accessed;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public WInt WrappedInt_Copy
        {
            get
            {
                if (!_WrappedInt_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        return default(WInt);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _WrappedInt_ByteIndex, _WrappedInt_ByteLength, false, true, null);
                        var toReturn = new WInt();
                        toReturn.DeserializeLazinator(childData);
                        toReturn.IsDirty = false;
                        return toReturn;
                    }
                }
                var cleanCopy = _WrappedInt;
                cleanCopy.IsDirty = false;
                cleanCopy.DescendantIsDirty = false;
                return cleanCopy;
            }
        }
        
        protected ExampleChild _ExcludableChild;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ExampleChild ExcludableChild
        {
            get
            {
                if (!_ExcludableChild_Accessed)
                {
                    if (LazinatorObjectBytes.Length == 0)
                    {
                        _ExcludableChild = default(ExampleChild);
                    }
                    else
                    {
                        LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ExcludableChild_ByteIndex, _ExcludableChild_ByteLength, false, false, null);
                        
                        _ExcludableChild = DeserializationFactory.Instance.CreateBaseOrDerivedType(213, () => new ExampleChild(), childData, this); 
                    }
                    _ExcludableChild_Accessed = true;
                } 
                return _ExcludableChild;
            }
            set
            {
                if (_ExcludableChild != null)
                {
                    _ExcludableChild.LazinatorParents = _ExcludableChild.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ExcludableChild = value;
                _ExcludableChild_Accessed = true;
            }
        }
        protected bool _ExcludableChild_Accessed;
        
        /* Serialization, deserialization, and object relationships */
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            LazinatorGenericID = GetGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            if (serializedVersionNumber < LazinatorObjectVersion)
            {
                LazinatorObjectVersionUpgrade(serializedVersionNumber);
            }
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) => EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, verifyCleanness, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, updateStoredBuffer, this);
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            var clone = new Example()
            {
                OriginalIncludeChildrenMode = includeChildrenMode
            };
            clone = CompleteClone(this, clone, includeChildrenMode, cloneBufferOptions);
            clone.OnCompleteClone(this);
            return clone;
        }
        
        public virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            Example typedClone = (Example) clone;
            typedClone.MyNullableDouble = MyNullableDouble;
            typedClone.MyBool = MyBool;
            typedClone.MyChar = MyChar;
            typedClone.MyDateTime = MyDateTime;
            if (LazinatorObjectVersion >= 3) 
            {
                typedClone.MyNewString = MyNewString;
            }
            typedClone.MyNullableDecimal = MyNullableDecimal;
            typedClone.MyNullableTimeSpan = MyNullableTimeSpan;
            if (LazinatorObjectVersion < 3) 
            {
                typedClone.MyOldString = MyOldString;
            }
            typedClone.MyString = MyString;
            typedClone.MyStringBrotli = MyStringBrotli;
            typedClone.MyTestEnum = MyTestEnum;
            typedClone.MyTestEnumByteNullable = MyTestEnumByteNullable;
            typedClone.MyUint = MyUint;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren) 
            {
                if (IncludableChild == null)
                {
                    typedClone.IncludableChild = default(ExampleChild);
                }
                else
                {
                    typedClone.IncludableChild = (ExampleChild) IncludableChild.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                if (MyChild1 == null)
                {
                    typedClone.MyChild1 = default(ExampleChild);
                }
                else
                {
                    typedClone.MyChild1 = (ExampleChild) MyChild1.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                if (MyChild2 == null)
                {
                    typedClone.MyChild2 = default(ExampleChild);
                }
                else
                {
                    typedClone.MyChild2 = (ExampleChild) MyChild2.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren && LazinatorObjectVersion < 3) 
            {
                if (MyChild2Previous == null)
                {
                    typedClone.MyChild2Previous = default(ExampleChild);
                }
                else
                {
                    typedClone.MyChild2Previous = (ExampleChild) MyChild2Previous.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                if (MyInterfaceImplementer == null)
                {
                    typedClone.MyInterfaceImplementer = default(IExampleNonexclusiveInterface);
                }
                else
                {
                    typedClone.MyInterfaceImplementer = (IExampleNonexclusiveInterface) MyInterfaceImplementer.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            typedClone.MyNonLazinatorChild = NonLazinatorDirectConverter.CloneOrChange_NonLazinatorClass(MyNonLazinatorChild, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                typedClone.WrappedInt = (WInt) WrappedInt.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren && includeChildrenMode != IncludeChildrenMode.ExcludeOnlyExcludableChildren) 
            {
                if (ExcludableChild == null)
                {
                    typedClone.ExcludableChild = default(ExampleChild);
                }
                else
                {
                    typedClone.ExcludableChild = (ExampleChild) ExcludableChild.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        OnDirty();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        OnDescendantIsDirty();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            LazinatorMemoryStorage = EncodeOrRecycleToNewBuffer(IncludeChildrenMode.IncludeAllChildren, OriginalIncludeChildrenMode, false, IsDirty, DescendantIsDirty, false, previousBuffer, true, this);
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _IncludableChild_Accessed) && IncludableChild == null)
            {
                yield return ("IncludableChild", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && IncludableChild != null) || (_IncludableChild_Accessed && _IncludableChild != null))
                {
                    bool isMatch = matchCriterion == null || matchCriterion(IncludableChild);
                    bool shouldExplore = exploreCriterion == null || exploreCriterion(IncludableChild);
                    if (isMatch)
                    {
                        yield return ("IncludableChild", IncludableChild);
                    }
                    if ((!stopExploringBelowMatch || !isMatch) && shouldExplore)
                    {
                        foreach (var toYield in IncludableChild.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("IncludableChild" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _MyChild1_Accessed) && MyChild1 == null)
            {
                yield return ("MyChild1", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && MyChild1 != null) || (_MyChild1_Accessed && _MyChild1 != null))
                {
                    bool isMatch = matchCriterion == null || matchCriterion(MyChild1);
                    bool shouldExplore = exploreCriterion == null || exploreCriterion(MyChild1);
                    if (isMatch)
                    {
                        yield return ("MyChild1", MyChild1);
                    }
                    if ((!stopExploringBelowMatch || !isMatch) && shouldExplore)
                    {
                        foreach (var toYield in MyChild1.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("MyChild1" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _MyChild2_Accessed) && MyChild2 == null)
            {
                yield return ("MyChild2", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && MyChild2 != null) || (_MyChild2_Accessed && _MyChild2 != null))
                {
                    bool isMatch = matchCriterion == null || matchCriterion(MyChild2);
                    bool shouldExplore = exploreCriterion == null || exploreCriterion(MyChild2);
                    if (isMatch)
                    {
                        yield return ("MyChild2", MyChild2);
                    }
                    if ((!stopExploringBelowMatch || !isMatch) && shouldExplore)
                    {
                        foreach (var toYield in MyChild2.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("MyChild2" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _MyChild2Previous_Accessed) && MyChild2Previous == null)
            {
                yield return ("MyChild2Previous", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && MyChild2Previous != null) || (_MyChild2Previous_Accessed && _MyChild2Previous != null))
                {
                    bool isMatch = matchCriterion == null || matchCriterion(MyChild2Previous);
                    bool shouldExplore = exploreCriterion == null || exploreCriterion(MyChild2Previous);
                    if (isMatch)
                    {
                        yield return ("MyChild2Previous", MyChild2Previous);
                    }
                    if ((!stopExploringBelowMatch || !isMatch) && shouldExplore)
                    {
                        foreach (var toYield in MyChild2Previous.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("MyChild2Previous" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _MyInterfaceImplementer_Accessed) && MyInterfaceImplementer == null)
            {
                yield return ("MyInterfaceImplementer", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && MyInterfaceImplementer != null) || (_MyInterfaceImplementer_Accessed && _MyInterfaceImplementer != null))
                {
                    bool isMatch = matchCriterion == null || matchCriterion(MyInterfaceImplementer);
                    bool shouldExplore = exploreCriterion == null || exploreCriterion(MyInterfaceImplementer);
                    if (isMatch)
                    {
                        yield return ("MyInterfaceImplementer", MyInterfaceImplementer);
                    }
                    if ((!stopExploringBelowMatch || !isMatch) && shouldExplore)
                    {
                        foreach (var toYield in MyInterfaceImplementer.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("MyInterfaceImplementer" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if ((!exploreOnlyDeserializedChildren && true) || (true))
            {
                bool isMatch = matchCriterion == null || matchCriterion(WrappedInt);
                bool shouldExplore = exploreCriterion == null || exploreCriterion(WrappedInt);
                if (isMatch)
                {
                    yield return ("WrappedInt", WrappedInt);
                }
                if ((!stopExploringBelowMatch || !isMatch) && shouldExplore)
                {
                    foreach (var toYield in WrappedInt.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                    {
                        yield return ("WrappedInt" + "." + toYield.propertyName, toYield.descendant);
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ExcludableChild_Accessed) && ExcludableChild == null)
            {
                yield return ("ExcludableChild", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ExcludableChild != null) || (_ExcludableChild_Accessed && _ExcludableChild != null))
                {
                    bool isMatch = matchCriterion == null || matchCriterion(ExcludableChild);
                    bool shouldExplore = exploreCriterion == null || exploreCriterion(ExcludableChild);
                    if (isMatch)
                    {
                        yield return ("ExcludableChild", ExcludableChild);
                    }
                    if ((!stopExploringBelowMatch || !isMatch) && shouldExplore)
                    {
                        foreach (var toYield in ExcludableChild.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ExcludableChild" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            yield break;
        }
        
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            yield return ("MyNullableDouble", (object)MyNullableDouble);
            yield return ("MyBool", (object)MyBool);
            yield return ("MyChar", (object)MyChar);
            yield return ("MyDateTime", (object)MyDateTime);
            yield return ("MyNewString", (object)MyNewString);
            yield return ("MyNullableDecimal", (object)MyNullableDecimal);
            yield return ("MyNullableTimeSpan", (object)MyNullableTimeSpan);
            yield return ("MyOldString", (object)MyOldString);
            yield return ("MyString", (object)MyString);
            yield return ("MyStringBrotli", (object)MyStringBrotli);
            yield return ("MyTestEnum", (object)MyTestEnum);
            yield return ("MyTestEnumByteNullable", (object)MyTestEnumByteNullable);
            yield return ("MyUint", (object)MyUint);
            yield return ("MyNonLazinatorChild", (object)MyNonLazinatorChild);
            yield break;
        }
        
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            if ((!exploreOnlyDeserializedChildren && IncludableChild != null) || (_IncludableChild_Accessed && _IncludableChild != null))
            {
                _IncludableChild = (ExampleChild) _IncludableChild.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && MyChild1 != null) || (_MyChild1_Accessed && _MyChild1 != null))
            {
                _MyChild1 = (ExampleChild) _MyChild1.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && MyChild2 != null) || (_MyChild2_Accessed && _MyChild2 != null))
            {
                _MyChild2 = (ExampleChild) _MyChild2.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && MyChild2Previous != null) || (_MyChild2Previous_Accessed && _MyChild2Previous != null))
            {
                _MyChild2Previous = (ExampleChild) _MyChild2Previous.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && MyInterfaceImplementer != null) || (_MyInterfaceImplementer_Accessed && _MyInterfaceImplementer != null))
            {
                _MyInterfaceImplementer = (IExampleNonexclusiveInterface) _MyInterfaceImplementer.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && true) || (true))
            {
                var deserialized = WrappedInt;
                _WrappedInt = (WInt) _WrappedInt.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && ExcludableChild != null) || (_ExcludableChild_Accessed && _ExcludableChild != null))
            {
                _ExcludableChild = (ExampleChild) _ExcludableChild.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && MyNonLazinatorChild != null) || (_MyNonLazinatorChild_Accessed && _MyNonLazinatorChild != null))
            {
                _MyNonLazinatorChild = NonLazinatorDirectConverter.CloneOrChange_NonLazinatorClass(_MyNonLazinatorChild, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if (changeThisLevel)
            {
                return changeFunc(this);
            }
            return this;
        }
        
        public virtual void FreeInMemoryObjects()
        {
            _IncludableChild = default;
            _MyChild1 = default;
            _MyChild2 = default;
            _MyChild2Previous = default;
            _MyInterfaceImplementer = default;
            _MyNonLazinatorChild = default;
            _WrappedInt = default;
            _ExcludableChild = default;
            _IncludableChild_Accessed = _MyChild1_Accessed = _MyChild2_Accessed = _MyChild2Previous_Accessed = _MyInterfaceImplementer_Accessed = _MyNonLazinatorChild_Accessed = _WrappedInt_Accessed = _ExcludableChild_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 212;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        protected virtual LazinatorGenericIDType _LazinatorGenericID { get; set; }
        public virtual LazinatorGenericIDType LazinatorGenericID
        {
            get => default;
            set { }
        }
        
        public virtual int LazinatorObjectVersion { get; set; } = 3;
        
        
        public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            _MyNullableDouble = span.ToNullableDouble(ref bytesSoFar);
            _MyBool = span.ToBoolean(ref bytesSoFar);
            _MyChar = span.ToChar(ref bytesSoFar);
            _MyDateTime = span.ToDecompressedDateTime(ref bytesSoFar);
            if (serializedVersionNumber >= 3) 
            {
                _MyNewString = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            }
            _MyNullableDecimal = span.ToDecompressedNullableDecimal(ref bytesSoFar);
            _MyNullableTimeSpan = span.ToDecompressedNullableTimeSpan(ref bytesSoFar);
            if (serializedVersionNumber < 3) 
            {
                _MyOldString = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            }
            _MyString = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            _MyStringBrotli = span.ToString_BrotliCompressedWithLength(ref bytesSoFar);
            _MyTestEnum = (TestEnum)span.ToDecompressedInt(ref bytesSoFar);
            _MyTestEnumByteNullable = (TestEnumByte?)span.ToDecompressedNullableByte(ref bytesSoFar);
            _MyUint = span.ToDecompressedUint(ref bytesSoFar);
            _IncludableChild_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren) 
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            _MyChild1_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            _MyChild2_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            _MyChild2Previous_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren && serializedVersionNumber < 3) 
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            _MyInterfaceImplementer_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            _MyNonLazinatorChild_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _WrappedInt_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                bytesSoFar = span.ToByte(ref bytesSoFar) + bytesSoFar;
            }
            _ExcludableChild_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren && includeChildrenMode != IncludeChildrenMode.ExcludeOnlyExcludableChildren) 
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            _Example_EndByteIndex = bytesSoFar;
        }
        
        public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
            {
                updateStoredBuffer = false;
            }
            int startPosition = writer.Position;
            WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
            if (updateStoredBuffer)
            {
                UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
            }
        }
        
        public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
        {
            _IsDirty = false;
            if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                _DescendantIsDirty = false;
                if (updateDeserializedChildren)
                {
                    UpdateDeserializedChildren(ref writer, startPosition);
                }
                
                _WrappedInt_Accessed = false;
            }
            else
            {
                throw new LazinatorSerializationException("Cannot update stored buffer when serializing only some children.");
            }
            
            var newBuffer = writer.Slice(startPosition, length);
            LazinatorMemoryStorage = newBuffer;
        }
        
        protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
        {
            if (_IncludableChild_Accessed && _IncludableChild != null)
            {
                _IncludableChild.UpdateStoredBuffer(ref writer, startPosition + _IncludableChild_ByteIndex + sizeof(int), _IncludableChild_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (_MyChild1_Accessed && _MyChild1 != null)
            {
                _MyChild1.UpdateStoredBuffer(ref writer, startPosition + _MyChild1_ByteIndex + sizeof(int), _MyChild1_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (_MyChild2_Accessed && _MyChild2 != null)
            {
                _MyChild2.UpdateStoredBuffer(ref writer, startPosition + _MyChild2_ByteIndex + sizeof(int), _MyChild2_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (_MyChild2Previous_Accessed && _MyChild2Previous != null)
            {
                _MyChild2Previous.UpdateStoredBuffer(ref writer, startPosition + _MyChild2Previous_ByteIndex + sizeof(int), _MyChild2Previous_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (_MyInterfaceImplementer_Accessed && _MyInterfaceImplementer != null)
            {
                _MyInterfaceImplementer.UpdateStoredBuffer(ref writer, startPosition + _MyInterfaceImplementer_ByteIndex + sizeof(int), _MyInterfaceImplementer_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (true)
            {
                _WrappedInt.UpdateStoredBuffer(ref writer, startPosition + _WrappedInt_ByteIndex + sizeof(byte), _WrappedInt_ByteLength - sizeof(byte), IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (_ExcludableChild_Accessed && _ExcludableChild != null)
            {
                _ExcludableChild.UpdateStoredBuffer(ref writer, startPosition + _ExcludableChild_ByteIndex + sizeof(int), _ExcludableChild_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
        }
        
        
        protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
        {
            int startPosition = writer.Position;
            int startOfObjectPosition = 0;
            // header information
            if (includeUniqueID)
            {
                if (LazinatorGenericID.IsEmpty)
                {
                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                }
                else
                {
                    WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                }
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
            writer.Write((byte)includeChildrenMode);
            // write properties
            WriteUncompressedPrimitives.WriteNullableDouble(ref writer, _MyNullableDouble);
            WriteUncompressedPrimitives.WriteBool(ref writer, _MyBool);
            EncodeCharAndString.WriteCharInTwoBytes(ref writer, _MyChar);
            CompressedIntegralTypes.WriteCompressedDateTime(ref writer, _MyDateTime);
            if (LazinatorObjectVersion >= 3) 
            {
                EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _MyNewString);
            }
            CompressedDecimal.WriteCompressedNullableDecimal(ref writer, _MyNullableDecimal);
            CompressedIntegralTypes.WriteCompressedNullableTimeSpan(ref writer, _MyNullableTimeSpan);
            if (LazinatorObjectVersion < 3) 
            {
                EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _MyOldString);
            }
            EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _MyString);
            EncodeCharAndString.WriteBrotliCompressedWithIntPrefix(ref writer, _MyStringBrotli);
            CompressedIntegralTypes.WriteCompressedInt(ref writer, (int) _MyTestEnum);
            CompressedIntegralTypes.WriteCompressedNullableByte(ref writer, (byte?) _MyTestEnumByteNullable);
            CompressedIntegralTypes.WriteCompressedUint(ref writer, _MyUint);
            startOfObjectPosition = writer.Position;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren) 
            {
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_IncludableChild_Accessed)
                {
                    var deserialized = IncludableChild;
                }
                WriteChild(ref writer, ref _IncludableChild, includeChildrenMode, _IncludableChild_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _IncludableChild_ByteIndex, _IncludableChild_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
            }
            if (updateStoredBuffer)
            {
                _IncludableChild_ByteIndex = startOfObjectPosition - startPosition;
            }
            startOfObjectPosition = writer.Position;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyChild1_Accessed)
                {
                    var deserialized = MyChild1;
                }
                WriteChild(ref writer, ref _MyChild1, includeChildrenMode, _MyChild1_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _MyChild1_ByteIndex, _MyChild1_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
            }
            if (updateStoredBuffer)
            {
                _MyChild1_ByteIndex = startOfObjectPosition - startPosition;
            }
            startOfObjectPosition = writer.Position;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyChild2_Accessed)
                {
                    var deserialized = MyChild2;
                }
                WriteChild(ref writer, ref _MyChild2, includeChildrenMode, _MyChild2_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _MyChild2_ByteIndex, _MyChild2_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
            }
            if (updateStoredBuffer)
            {
                _MyChild2_ByteIndex = startOfObjectPosition - startPosition;
            }
            startOfObjectPosition = writer.Position;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren && LazinatorObjectVersion < 3) 
            {
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyChild2Previous_Accessed)
                {
                    var deserialized = MyChild2Previous;
                }
                WriteChild(ref writer, ref _MyChild2Previous, includeChildrenMode, _MyChild2Previous_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _MyChild2Previous_ByteIndex, _MyChild2Previous_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
            }
            if (updateStoredBuffer)
            {
                _MyChild2Previous_ByteIndex = startOfObjectPosition - startPosition;
            }
            startOfObjectPosition = writer.Position;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyInterfaceImplementer_Accessed)
                {
                    var deserialized = MyInterfaceImplementer;
                }
                WriteChild(ref writer, ref _MyInterfaceImplementer, includeChildrenMode, _MyInterfaceImplementer_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _MyInterfaceImplementer_ByteIndex, _MyInterfaceImplementer_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
            }
            if (updateStoredBuffer)
            {
                _MyInterfaceImplementer_ByteIndex = startOfObjectPosition - startPosition;
            }
            startOfObjectPosition = writer.Position;
            if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyNonLazinatorChild_Accessed)
            {
                var deserialized = MyNonLazinatorChild;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyNonLazinatorChild, isBelievedDirty: MyNonLazinatorChild_Dirty || (includeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyNonLazinatorChild_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyNonLazinatorChild_ByteIndex, _MyNonLazinatorChild_ByteLength, false, false, null),
            verifyCleanness: verifyCleanness,
            binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
            NonLazinatorDirectConverter.ConvertToBytes_NonLazinatorClass(ref w, _MyNonLazinatorChild,
            includeChildrenMode, v, updateStoredBuffer));
            if (updateStoredBuffer)
            {
                _MyNonLazinatorChild_ByteIndex = startOfObjectPosition - startPosition;
            }
            startOfObjectPosition = writer.Position;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren) 
            {
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_WrappedInt_Accessed)
                {
                    var deserialized = WrappedInt;
                }
                WriteChild(ref writer, ref _WrappedInt, includeChildrenMode, _WrappedInt_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _WrappedInt_ByteIndex, _WrappedInt_ByteLength, false, true, null), verifyCleanness, updateStoredBuffer, true, false, this);
            }
            if (updateStoredBuffer)
            {
                _WrappedInt_ByteIndex = startOfObjectPosition - startPosition;
            }
            startOfObjectPosition = writer.Position;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren && includeChildrenMode != IncludeChildrenMode.ExcludeOnlyExcludableChildren) 
            {
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ExcludableChild_Accessed)
                {
                    var deserialized = ExcludableChild;
                }
                WriteChild(ref writer, ref _ExcludableChild, includeChildrenMode, _ExcludableChild_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ExcludableChild_ByteIndex, _ExcludableChild_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
            }
            if (updateStoredBuffer)
            {
                _ExcludableChild_ByteIndex = startOfObjectPosition - startPosition;
            }
            if (updateStoredBuffer)
            {
                _Example_EndByteIndex = writer.Position - startPosition;
            }
        }
        
    }
}
