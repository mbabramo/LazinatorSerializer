//48b3066d-31cc-19a1-e2c5-f5ddbc52bafc
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.393
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples
{
    using Lazinator.Attributes;
    using Lazinator.Buffers;
    using Lazinator.Core;
    using Lazinator.Exceptions;
    using Lazinator.Support;
    using static Lazinator.Buffers.WriteUncompressedPrimitives;
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class Simplifiable : ILazinator
    {
        public bool IsStruct => false;
        
        /* Property definitions */
        
        protected int _ANonSkippableEarlierExample_ByteIndex;
        protected int _Example_ByteIndex;
        protected int _Example2_ByteIndex;
        protected int _Example3_ByteIndex;
        protected virtual int _ANonSkippableEarlierExample_ByteLength => _Example_ByteIndex - _ANonSkippableEarlierExample_ByteIndex;
        protected virtual int _Example_ByteLength => _Example2_ByteIndex - _Example_ByteIndex;
        protected virtual int _Example2_ByteLength => _Example3_ByteIndex - _Example2_ByteIndex;
        private int _Simplifiable_EndByteIndex;
        protected int _Example3_ByteLength => _Simplifiable_EndByteIndex - _Example3_ByteIndex;
        protected virtual int _OverallEndByteIndex => _Simplifiable_EndByteIndex;
        
        
        protected bool _MyIntsAre3;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool MyIntsAre3
        {
            get
            {
                return _MyIntsAre3;
            }
            private set
            {
                IsDirty = true;
                _MyIntsAre3 = value;
            }
        }
        
        protected char? _Example2Char;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public char? Example2Char
        {
            get
            {
                return _Example2Char;
            }
            private set
            {
                IsDirty = true;
                _Example2Char = value;
            }
        }
        
        protected bool _Example3IsNull;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool Example3IsNull
        {
            get
            {
                return _Example3IsNull;
            }
            private set
            {
                IsDirty = true;
                _Example3IsNull = value;
            }
        }
        
        protected bool _ExampleHasDefaultValue;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool ExampleHasDefaultValue
        {
            get
            {
                return _ExampleHasDefaultValue;
            }
            private set
            {
                IsDirty = true;
                _ExampleHasDefaultValue = value;
            }
        }
        
        protected int _MyInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int MyInt
        {
            get
            {
                return _MyInt;
            }
            set
            {
                IsDirty = true;
                _MyInt = value;
            }
        }
        
        protected int _MyOtherInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int MyOtherInt
        {
            get
            {
                return _MyOtherInt;
            }
            set
            {
                IsDirty = true;
                _MyOtherInt = value;
            }
        }
        
        protected Example _ANonSkippableEarlierExample;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example ANonSkippableEarlierExample
        {
            get
            {
                if (!_ANonSkippableEarlierExample_Accessed)
                {
                    LazinateANonSkippableEarlierExample();
                } 
                return _ANonSkippableEarlierExample;
            }
            set
            {
                if (_ANonSkippableEarlierExample != null)
                {
                    _ANonSkippableEarlierExample.LazinatorParents = _ANonSkippableEarlierExample.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ANonSkippableEarlierExample = value;
                _ANonSkippableEarlierExample_Accessed = true;
            }
        }
        protected bool _ANonSkippableEarlierExample_Accessed;
        private void LazinateANonSkippableEarlierExample()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _ANonSkippableEarlierExample = null;
            }else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ANonSkippableEarlierExample_ByteIndex, _ANonSkippableEarlierExample_ByteLength, true, false, null);
                
                _ANonSkippableEarlierExample = DeserializationFactory.Instance.CreateBaseOrDerivedType(1012, (c, p) => new Example(c, p), childData, this); 
            }
            _ANonSkippableEarlierExample_Accessed = true;
        }
        
        
        protected Example _Example;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example Example
        {
            get
            {
                if (!_Example_Accessed)
                {
                    LazinateExample();
                } 
                return _Example;
            }
            set
            {
                if (_Example != null)
                {
                    _Example.LazinatorParents = _Example.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _Example = value;
                _Example_Accessed = true;
            }
        }
        protected bool _Example_Accessed;
        private void LazinateExample()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _Example = null;
            }else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _Example_ByteIndex, _Example_ByteLength, true, false, null);
                
                _Example = DeserializationFactory.Instance.CreateBaseOrDerivedType(1012, (c, p) => new Example(c, p), childData, this); 
            }
            _Example_Accessed = true;
        }
        
        
        protected Example _Example2;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example Example2
        {
            get
            {
                if (!_Example2_Accessed)
                {
                    LazinateExample2();
                } 
                return _Example2;
            }
            set
            {
                if (_Example2 != null)
                {
                    _Example2.LazinatorParents = _Example2.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _Example2 = value;
                _Example2_Accessed = true;
            }
        }
        protected bool _Example2_Accessed;
        private void LazinateExample2()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _Example2 = null;
            }else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _Example2_ByteIndex, _Example2_ByteLength, true, false, null);
                
                _Example2 = DeserializationFactory.Instance.CreateBaseOrDerivedType(1012, (c, p) => new Example(c, p), childData, this); 
            }
            _Example2_Accessed = true;
        }
        
        
        protected Example _Example3;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Example Example3
        {
            get
            {
                if (!_Example3_Accessed)
                {
                    LazinateExample3();
                } 
                return _Example3;
            }
            set
            {
                if (_Example3 != null)
                {
                    _Example3.LazinatorParents = _Example3.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _Example3 = value;
                _Example3_Accessed = true;
            }
        }
        protected bool _Example3_Accessed;
        private void LazinateExample3()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _Example3 = null;
            }else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _Example3_ByteIndex, _Example3_ByteLength, true, false, null);
                
                _Example3 = DeserializationFactory.Instance.CreateBaseOrDerivedType(1012, (c, p) => new Example(c, p), childData, this); 
            }
            _Example3_Accessed = true;
        }
        
        
        /* Serialization, deserialization, and object relationships */
        
        public Simplifiable(IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren)
        {
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public Simplifiable(LazinatorMemory serializedBytes, ILazinator parent = null, IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren, int? lazinatorObjectVersion = null)
        {
            if (lazinatorObjectVersion != null)
            {
                LazinatorObjectVersion = (int) lazinatorObjectVersion;
            }
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        protected virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialMemory.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt32(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt32(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return _OverallEndByteIndex;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            LazinatorMemoryStorage.WriteToBinaryBuffer(ref writer);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeToExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            Simplifiable clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new Simplifiable(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (Simplifiable)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, false, this);
                clone = new Simplifiable(bytes);
            }
            return clone;
        }
        
        protected virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            Simplifiable typedClone = (Simplifiable) clone;
            typedClone.MyIntsAre3 = MyIntsAre3;
            typedClone.Example2Char = Example2Char;
            typedClone.Example3IsNull = Example3IsNull;
            typedClone.ExampleHasDefaultValue = ExampleHasDefaultValue;
            typedClone.MyInt = MyInt;
            typedClone.MyOtherInt = MyOtherInt;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (ANonSkippableEarlierExample == null)
                {
                    typedClone.ANonSkippableEarlierExample = null;
                }else
                {
                    typedClone.ANonSkippableEarlierExample = (Example) ANonSkippableEarlierExample.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (Example == null)
                {
                    typedClone.Example = null;
                }else
                {
                    typedClone.Example = (Example) Example.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren && LazinatorObjectVersion >= 4)
            {
                if (Example2 == null)
                {
                    typedClone.Example2 = null;
                }else
                {
                    typedClone.Example2 = (Example) Example2.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (Example3 == null)
                {
                    typedClone.Example3 = null;
                }else
                {
                    typedClone.Example3 = (Example) Example3.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
            }
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorMemoryStorage.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        protected virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorMemoryStorage.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                LazinatorMemoryStorage.WriteToBinaryBuffer(ref writer);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ANonSkippableEarlierExample_Accessed) && ANonSkippableEarlierExample == null)
            {
                yield return ("ANonSkippableEarlierExample", default);
            }else
            {
                if ((!exploreOnlyDeserializedChildren && ANonSkippableEarlierExample != null) || (_ANonSkippableEarlierExample_Accessed && _ANonSkippableEarlierExample != null))
                {
                    bool isMatch_ANonSkippableEarlierExample = matchCriterion == null || matchCriterion(ANonSkippableEarlierExample);
                    bool shouldExplore_ANonSkippableEarlierExample = exploreCriterion == null || exploreCriterion(ANonSkippableEarlierExample);
                    if (isMatch_ANonSkippableEarlierExample)
                    {
                        yield return ("ANonSkippableEarlierExample", ANonSkippableEarlierExample);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_ANonSkippableEarlierExample) && shouldExplore_ANonSkippableEarlierExample)
                    {
                        foreach (var toYield in ANonSkippableEarlierExample.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ANonSkippableEarlierExample" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _Example_Accessed) && Example == null)
            {
                yield return ("Example", default);
            }else
            {
                if ((!exploreOnlyDeserializedChildren && Example != null) || (_Example_Accessed && _Example != null))
                {
                    bool isMatch_Example = matchCriterion == null || matchCriterion(Example);
                    bool shouldExplore_Example = exploreCriterion == null || exploreCriterion(Example);
                    if (isMatch_Example)
                    {
                        yield return ("Example", Example);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_Example) && shouldExplore_Example)
                    {
                        foreach (var toYield in Example.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("Example" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _Example2_Accessed) && Example2 == null)
            {
                yield return ("Example2", default);
            }else
            {
                if ((!exploreOnlyDeserializedChildren && Example2 != null) || (_Example2_Accessed && _Example2 != null))
                {
                    bool isMatch_Example2 = matchCriterion == null || matchCriterion(Example2);
                    bool shouldExplore_Example2 = exploreCriterion == null || exploreCriterion(Example2);
                    if (isMatch_Example2)
                    {
                        yield return ("Example2", Example2);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_Example2) && shouldExplore_Example2)
                    {
                        foreach (var toYield in Example2.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("Example2" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            if (enumerateNulls && (!exploreOnlyDeserializedChildren || _Example3_Accessed) && Example3 == null)
            {
                yield return ("Example3", default);
            }else
            {
                if ((!exploreOnlyDeserializedChildren && Example3 != null) || (_Example3_Accessed && _Example3 != null))
                {
                    bool isMatch_Example3 = matchCriterion == null || matchCriterion(Example3);
                    bool shouldExplore_Example3 = exploreCriterion == null || exploreCriterion(Example3);
                    if (isMatch_Example3)
                    {
                        yield return ("Example3", Example3);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_Example3) && shouldExplore_Example3)
                    {
                        foreach (var toYield in Example3.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("Example3" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
            }
            yield break;
        }
        
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            yield return ("MyIntsAre3", (object)MyIntsAre3);
            yield return ("Example2Char", (object)Example2Char);
            yield return ("Example3IsNull", (object)Example3IsNull);
            yield return ("ExampleHasDefaultValue", (object)ExampleHasDefaultValue);
            yield return ("MyInt", (object)MyInt);
            yield return ("MyOtherInt", (object)MyOtherInt);
            yield break;
        }
        
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            if ((!exploreOnlyDeserializedChildren && ANonSkippableEarlierExample != null) || (_ANonSkippableEarlierExample_Accessed && _ANonSkippableEarlierExample != null))
            {
                _ANonSkippableEarlierExample = (Example) _ANonSkippableEarlierExample.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && Example != null) || (_Example_Accessed && _Example != null))
            {
                _Example = (Example) _Example.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && Example2 != null) || (_Example2_Accessed && _Example2 != null))
            {
                _Example2 = (Example) _Example2.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if ((!exploreOnlyDeserializedChildren && Example3 != null) || (_Example3_Accessed && _Example3 != null))
            {
                _Example3 = (Example) _Example3.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        
        public virtual void FreeInMemoryObjects()
        {
            _ANonSkippableEarlierExample = default;
            _Example = default;
            _Example2 = default;
            _Example3 = default;
            _ANonSkippableEarlierExample_Accessed = _Example_Accessed = _Example2_Accessed = _Example3_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1073;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        protected virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialMemory.Span;
            ConvertFromBytesForPrimitiveProperties(span, includeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            int lengthForLengths = 0;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                lengthForLengths += 12;
                if (serializedVersionNumber >= 4)
                {
                    lengthForLengths += 4;
                }
            }
            ConvertFromBytesForChildProperties(span, includeChildrenMode, serializedVersionNumber, bytesSoFar + lengthForLengths, ref bytesSoFar);
        }
        
        protected virtual void ConvertFromBytesForPrimitiveProperties(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            TabbedText.WriteLine($"Reading MyIntsAre3 at byte location {bytesSoFar}"); 
            _MyIntsAre3 = span.ToBoolean(ref bytesSoFar);
            TabbedText.WriteLine($"Reading Example2Char at byte location {bytesSoFar}"); 
            _Example2Char = span.ToNullableChar(ref bytesSoFar);
            TabbedText.WriteLine($"Reading Example3IsNull at byte location {bytesSoFar}"); 
            _Example3IsNull = span.ToBoolean(ref bytesSoFar);
            TabbedText.WriteLine($"Reading ExampleHasDefaultValue at byte location {bytesSoFar}"); 
            _ExampleHasDefaultValue = span.ToBoolean(ref bytesSoFar);
            
            if (MyIntsAre3)
            {
                SetMyIntsTo3();
            }
            else
            {
                TabbedText.WriteLine($"Reading MyInt at byte location {bytesSoFar}"); 
                _MyInt = span.ToDecompressedInt32(ref bytesSoFar);
            }
            
            if (MyIntsAre3)
            {
                // is set above
            }
            else
            {
                TabbedText.WriteLine($"Reading MyOtherInt at byte location {bytesSoFar}"); 
                _MyOtherInt = span.ToDecompressedInt32(ref bytesSoFar);
            }
        }
        
        protected virtual int ConvertFromBytesForChildProperties(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, int indexOfFirstChild, ref int bytesSoFar)
        {
            int totalChildrenBytes = 0;
            TabbedText.WriteLine($"Reading length of ANonSkippableEarlierExample at byte location {bytesSoFar} to determine location: {indexOfFirstChild + totalChildrenBytes}"); 
            _ANonSkippableEarlierExample_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            }
            TabbedText.WriteLine($"Reading length of Example at byte location {bytesSoFar} to determine location: {indexOfFirstChild + totalChildrenBytes}"); 
            _Example_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (ExampleHasDefaultValue)
            {
                SetExampleToDefaultValue();
            }
            else
            {
                if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                {
                    totalChildrenBytes += span.ToInt32(ref bytesSoFar);
                }
            }
            TabbedText.WriteLine($"Reading length of Example2 at byte location {bytesSoFar} to determine location: {indexOfFirstChild + totalChildrenBytes}"); 
            _Example2_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (Example2Char != null)
            {
                Example2 = new Example() { MyChar = (char)Example2Char };
            }
            else
            {
                if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren && serializedVersionNumber >= 4)
                {
                    totalChildrenBytes += span.ToInt32(ref bytesSoFar);
                }
            }
            TabbedText.WriteLine($"Reading length of Example3 at byte location {bytesSoFar} to determine location: {indexOfFirstChild + totalChildrenBytes}"); 
            _Example3_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            if (Example3IsNull)
            {
                Example3 = null;
            }
            else
            {
                if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                {
                    totalChildrenBytes += span.ToInt32(ref bytesSoFar);
                }
            }
            _Simplifiable_EndByteIndex = indexOfFirstChild + totalChildrenBytes;
            return totalChildrenBytes;
        }
        
        public virtual void SerializeToExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            TabbedText.WriteLine($"Initiating serialization of LazinatorTests.Examples.Simplifiable ");
            if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
            {
                updateStoredBuffer = false;
            }
            PreSerialization(verifyCleanness, updateStoredBuffer);
            int startPosition = writer.Position;
            WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
            if (updateStoredBuffer)
            {
                UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
            }
        }
        
        public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
        {
            _IsDirty = false;
            if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                _DescendantIsDirty = false;
                if (updateDeserializedChildren)
                {
                    UpdateDeserializedChildren(ref writer, startPosition);
                }
                
            }
            else
            {
                ThrowHelper.ThrowCannotUpdateStoredBuffer();
            }
            
            var newBuffer = writer.Slice(startPosition, length);
            LazinatorMemoryStorage = newBuffer;
        }
        
        protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
        {
            if (_ANonSkippableEarlierExample_Accessed && _ANonSkippableEarlierExample != null)
            {
                ANonSkippableEarlierExample.UpdateStoredBuffer(ref writer, startPosition + _ANonSkippableEarlierExample_ByteIndex + sizeof(int), _ANonSkippableEarlierExample_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (_Example_Accessed && _Example != null)
            {
                Example.UpdateStoredBuffer(ref writer, startPosition + _Example_ByteIndex + sizeof(int), _Example_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (_Example2_Accessed && _Example2 != null)
            {
                Example2.UpdateStoredBuffer(ref writer, startPosition + _Example2_ByteIndex + sizeof(int), _Example2_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
            if (_Example3_Accessed && _Example3 != null)
            {
                Example3.UpdateStoredBuffer(ref writer, startPosition + _Example3_ByteIndex + sizeof(int), _Example3_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
            }
        }
        
        
        protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
        {
            int startPosition = writer.Position;
            TabbedText.WriteLine($"Writing properties for LazinatorTests.Examples.Simplifiable starting at {writer.Position}.");
            TabbedText.WriteLine($"Includes? uniqueID {(LazinatorGenericID.IsEmpty ? LazinatorUniqueID.ToString() : String.Join("","",LazinatorGenericID.TypeAndInnerTypeIDs.ToArray()))} {includeUniqueID}, Lazinator version {Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion} True, Object version {LazinatorObjectVersion} True, IncludeChildrenMode {includeChildrenMode} True");
            TabbedText.WriteLine($"IsDirty {IsDirty} DescendantIsDirty {DescendantIsDirty} HasParentClass {LazinatorParents.Any()}");
            if (includeUniqueID)
            {
                if (!ContainsOpenGenericParameters)
                {
                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                }
                else
                {
                    WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                }
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
            writer.Write((byte)includeChildrenMode);
            // write properties
            
            WritePrimitivePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, includeUniqueID);
            int lengthForLengths = 0;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                lengthForLengths += 12;
                if (LazinatorObjectVersion >= 4)
                {
                    lengthForLengths += 4;
                }
            }
            Span<byte> lengthsSpan = writer.FreeSpan.Slice(0, lengthForLengths);
            writer.Skip(lengthForLengths);TabbedText.WriteLine($"Byte {writer.Position}, Leaving {lengthForLengths} bytes to store lengths of child objects");
            WriteChildrenPropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, includeUniqueID, startPosition, lengthsSpan);
            TabbedText.WriteLine($"Byte {writer.Position} (end of Simplifiable) ");
        }
        
        protected virtual void WritePrimitivePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
        {
            TabbedText.WriteLine($"Byte {writer.Position}, MyIntsAre3 value {_MyIntsAre3}");
            TabbedText.Tabs++;
            WriteUncompressedPrimitives.WriteBool(ref writer, _MyIntsAre3);
            TabbedText.Tabs--;
            TabbedText.WriteLine($"Byte {writer.Position}, Example2Char value {_Example2Char}");
            TabbedText.Tabs++;
            EncodeCharAndString.WriteNullableChar(ref writer, _Example2Char);
            TabbedText.Tabs--;
            TabbedText.WriteLine($"Byte {writer.Position}, Example3IsNull value {_Example3IsNull}");
            TabbedText.Tabs++;
            WriteUncompressedPrimitives.WriteBool(ref writer, _Example3IsNull);
            TabbedText.Tabs--;
            TabbedText.WriteLine($"Byte {writer.Position}, ExampleHasDefaultValue value {_ExampleHasDefaultValue}");
            TabbedText.Tabs++;
            WriteUncompressedPrimitives.WriteBool(ref writer, _ExampleHasDefaultValue);
            TabbedText.Tabs--;
            TabbedText.WriteLine($"Byte {writer.Position}, MyInt value {_MyInt}");
            TabbedText.Tabs++;
            if (!(MyIntsAre3))
            {
                CompressedIntegralTypes.WriteCompressedInt(ref writer, _MyInt);
            }
            TabbedText.Tabs--;
            TabbedText.WriteLine($"Byte {writer.Position}, MyOtherInt value {_MyOtherInt}");
            TabbedText.Tabs++;
            if (!(MyIntsAre3))
            {
                CompressedIntegralTypes.WriteCompressedInt(ref writer, _MyOtherInt);
            }
            TabbedText.Tabs--;
        }
        
        protected virtual void WriteChildrenPropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID, int startOfObjectPosition, Span<byte> lengthsSpan)
        {
            int startOfChildPosition = 0;
            int lengthValue = 0;
            TabbedText.WriteLine($"Byte {writer.Position}, ANonSkippableEarlierExample (accessed? {_ANonSkippableEarlierExample_Accessed}) (backing var null? {_ANonSkippableEarlierExample == null}) ");
            TabbedText.Tabs++;
            startOfChildPosition = writer.Position;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ANonSkippableEarlierExample_Accessed)
                {
                    var deserialized = ANonSkippableEarlierExample;
                }
                WriteChild(ref writer, ref _ANonSkippableEarlierExample, includeChildrenMode, _ANonSkippableEarlierExample_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ANonSkippableEarlierExample_ByteIndex, _ANonSkippableEarlierExample_ByteLength, true, false, null), verifyCleanness, updateStoredBuffer, false, true, this);
                lengthValue = writer.Position - startOfChildPosition;
                WriteInt(lengthsSpan, lengthValue);
                lengthsSpan = lengthsSpan.Slice(sizeof(int));
            }
            if (updateStoredBuffer)
            {
                _ANonSkippableEarlierExample_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            TabbedText.Tabs--;
            TabbedText.WriteLine($"Byte {writer.Position}, Example (accessed? {_Example_Accessed}) (backing var null? {_Example == null}) ");
            TabbedText.Tabs++;
            startOfChildPosition = writer.Position;
            if (!(ExampleHasDefaultValue))
            {
                if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                {
                    if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_Example_Accessed)
                    {
                        var deserialized = Example;
                    }
                    WriteChild(ref writer, ref _Example, includeChildrenMode, _Example_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _Example_ByteIndex, _Example_ByteLength, true, false, null), verifyCleanness, updateStoredBuffer, false, true, this);
                    lengthValue = writer.Position - startOfChildPosition;
                    WriteInt(lengthsSpan, lengthValue);
                    lengthsSpan = lengthsSpan.Slice(sizeof(int));
                }
            }
            if (updateStoredBuffer)
            {
                _Example_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            TabbedText.Tabs--;
            TabbedText.WriteLine($"Byte {writer.Position}, Example2 (accessed? {_Example2_Accessed}) (backing var null? {_Example2 == null}) ");
            TabbedText.Tabs++;
            startOfChildPosition = writer.Position;
            if (!(Example2Char != null))
            {
                if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren && LazinatorObjectVersion >= 4)
                {
                    if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_Example2_Accessed)
                    {
                        var deserialized = Example2;
                    }
                    WriteChild(ref writer, ref _Example2, includeChildrenMode, _Example2_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _Example2_ByteIndex, _Example2_ByteLength, true, false, null), verifyCleanness, updateStoredBuffer, false, true, this);
                    lengthValue = writer.Position - startOfChildPosition;
                    WriteInt(lengthsSpan, lengthValue);
                    lengthsSpan = lengthsSpan.Slice(sizeof(int));
                }
            }
            if (updateStoredBuffer)
            {
                _Example2_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            TabbedText.Tabs--;
            TabbedText.WriteLine($"Byte {writer.Position}, Example3 (accessed? {_Example3_Accessed}) (backing var null? {_Example3 == null}) ");
            TabbedText.Tabs++;
            startOfChildPosition = writer.Position;
            if (!(Example3IsNull))
            {
                if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                {
                    if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_Example3_Accessed)
                    {
                        var deserialized = Example3;
                    }
                    WriteChild(ref writer, ref _Example3, includeChildrenMode, _Example3_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _Example3_ByteIndex, _Example3_ByteLength, true, false, null), verifyCleanness, updateStoredBuffer, false, true, this);
                    lengthValue = writer.Position - startOfChildPosition;
                    WriteInt(lengthsSpan, lengthValue);
                    lengthsSpan = lengthsSpan.Slice(sizeof(int));
                }
            }
            if (updateStoredBuffer)
            {
                _Example3_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            TabbedText.Tabs--;
            if (updateStoredBuffer)
            {
                _Simplifiable_EndByteIndex = writer.Position - startOfObjectPosition;
            }
        }
        
    }
}
