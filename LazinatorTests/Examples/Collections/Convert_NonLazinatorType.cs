using System;
using System.IO;
using Lazinator.Support;
using Lazinator.Buffers; 
using Lazinator.Core;
using LazinatorTests.Examples;
using static Lazinator.Core.LazinatorUtilities;

namespace LazinatorTests.Examples.Collections
{
    public static class Convert_NonLazinatorType
    {
        public static NonLazinatorClass ConvertFromBytes_NonLazinatorClass(ReadOnlyMemory<byte> storage, DeserializationFactory deserializationFactory, InformParentOfDirtinessDelegate informParentOfDirtinessDelegate)
        {
            // note that any serialization/deserialization method can be used here, as it's not autogenerated, and the order just needs to be consistent.
            // so, we'll do it a bit differently from autogen to demonstrate. We'll also change how strings are encoded.

            if (storage.Length == 0)
                return null;
            ReadOnlySpan<byte> span = storage.Span;

            int bytesSoFar = 0;
            int myInt = span.ToDecompressedInt(ref bytesSoFar);

            string myString = span.ToString_VarIntLength(ref bytesSoFar);

            return new NonLazinatorClass() { MyInt = myInt, MyString = myString };
        }

        public static void ConvertToBytes_NonLazinatorClass(BinaryBufferWriter writer, NonLazinatorClass itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness)
        {
            CompressedIntegralTypes.WriteCompressedInt(writer, itemToConvert.MyInt);
            writer.WriteStringWithVarIntPrefix(itemToConvert.MyString);
        }
    }
}