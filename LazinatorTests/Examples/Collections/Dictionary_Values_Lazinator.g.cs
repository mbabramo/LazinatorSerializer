/*Location5664*//*Location5648*///6efe4c3b-e109-c51f-b4cc-38cfb9dd9ccf
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.Collections
{/*Location5649*/
    using Lazinator.Attributes;/*Location5650*/
    using Lazinator.Buffers;/*Location5651*/
    using Lazinator.Core;/*Location5652*/
    using Lazinator.Exceptions;/*Location5653*/
    using Lazinator.Support;/*Location5654*/
    using Lazinator.Wrappers;/*Location5655*/
    using LazinatorTests.Examples;/*Location5656*/
    using System;/*Location5657*/
    using System.Buffers;/*Location5658*/
    using System.Collections.Generic;/*Location5659*/
    using System.Diagnostics;/*Location5660*/
    using System.IO;/*Location5661*/
    using System.Linq;/*Location5662*/
    using System.Runtime.InteropServices;/*Location5663*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class Dictionary_Values_Lazinator : ILazinator
    {
        /*Location5665*/public bool IsStruct => false;
        
        /*Location5666*//* Property definitions */
        
        /*Location5667*/        protected int _MyDictionary_ByteIndex;
        /*Location5668*/        protected int _MyDictionaryStructs_ByteIndex;
        /*Location5669*/        protected int _MySortedDictionary_ByteIndex;
        /*Location5670*/        protected int _MySortedList_ByteIndex;
        /*Location5671*/protected virtual int _MyDictionary_ByteLength => _MyDictionaryStructs_ByteIndex - _MyDictionary_ByteIndex;
        /*Location5672*/protected virtual int _MyDictionaryStructs_ByteLength => _MySortedDictionary_ByteIndex - _MyDictionaryStructs_ByteIndex;
        /*Location5673*/protected virtual int _MySortedDictionary_ByteLength => _MySortedList_ByteIndex - _MySortedDictionary_ByteIndex;
        /*Location5674*/private int _Dictionary_Values_Lazinator_EndByteIndex;
        /*Location5675*/protected virtual int _MySortedList_ByteLength => _Dictionary_Values_Lazinator_EndByteIndex - _MySortedList_ByteIndex;
        
        /*Location5676*/
        protected Dictionary<int, ExampleChild> _MyDictionary;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<int, ExampleChild> MyDictionary
        {
            get
            {
                if (!_MyDictionary_Accessed)
                {
                    Lazinate_MyDictionary();
                }
                IsDirty = true; 
                return _MyDictionary;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyDictionary = value;
                _MyDictionary_Accessed = true;
            }
        }
        protected bool _MyDictionary_Accessed;
        private void Lazinate_MyDictionary()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyDictionary = default(Dictionary<int, ExampleChild>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyDictionary_ByteIndex, _MyDictionary_ByteLength, false, false, null);
                _MyDictionary = ConvertFromBytes_Dictionary_Gint_c_C32ExampleChild_g(childData);
            }
            
            _MyDictionary_Accessed = true;
        }
        
        /*Location5677*/
        protected Dictionary<WInt, WInt> _MyDictionaryStructs;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<WInt, WInt> MyDictionaryStructs
        {
            get
            {
                if (!_MyDictionaryStructs_Accessed)
                {
                    Lazinate_MyDictionaryStructs();
                }
                IsDirty = true; 
                return _MyDictionaryStructs;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyDictionaryStructs = value;
                _MyDictionaryStructs_Accessed = true;
            }
        }
        protected bool _MyDictionaryStructs_Accessed;
        private void Lazinate_MyDictionaryStructs()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyDictionaryStructs = default(Dictionary<WInt, WInt>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyDictionaryStructs_ByteIndex, _MyDictionaryStructs_ByteLength, false, false, null);
                _MyDictionaryStructs = ConvertFromBytes_Dictionary_GWInt_c_C32WInt_g(childData);
            }
            
            _MyDictionaryStructs_Accessed = true;
        }
        
        /*Location5678*/
        protected SortedDictionary<int, ExampleChild> _MySortedDictionary;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public SortedDictionary<int, ExampleChild> MySortedDictionary
        {
            get
            {
                if (!_MySortedDictionary_Accessed)
                {
                    Lazinate_MySortedDictionary();
                }
                IsDirty = true; 
                return _MySortedDictionary;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MySortedDictionary = value;
                _MySortedDictionary_Accessed = true;
            }
        }
        protected bool _MySortedDictionary_Accessed;
        private void Lazinate_MySortedDictionary()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MySortedDictionary = default(SortedDictionary<int, ExampleChild>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MySortedDictionary_ByteIndex, _MySortedDictionary_ByteLength, false, false, null);
                _MySortedDictionary = ConvertFromBytes_SortedDictionary_Gint_c_C32ExampleChild_g(childData);
            }
            
            _MySortedDictionary_Accessed = true;
        }
        
        /*Location5679*/
        protected SortedList<int, ExampleChild> _MySortedList;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public SortedList<int, ExampleChild> MySortedList
        {
            get
            {
                if (!_MySortedList_Accessed)
                {
                    Lazinate_MySortedList();
                }
                IsDirty = true; 
                return _MySortedList;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MySortedList = value;
                _MySortedList_Accessed = true;
            }
        }
        protected bool _MySortedList_Accessed;
        private void Lazinate_MySortedList()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MySortedList = default(SortedList<int, ExampleChild>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MySortedList_ByteIndex, _MySortedList_ByteLength, false, false, null);
                _MySortedList = ConvertFromBytes_SortedList_Gint_c_C32ExampleChild_g(childData);
            }
            
            _MySortedList_Accessed = true;
        }
        
        /*Location5684*/
        /* Serialization, deserialization, and object relationships */
        
        public Dictionary_Values_Lazinator(IncludeChildrenMode originalIncludeChildrenMode)
        {
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public Dictionary_Values_Lazinator(LazinatorMemory serializedBytes, ILazinator parent = null)
        {
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            Dictionary_Values_Lazinator clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new Dictionary_Values_Lazinator(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (Dictionary_Values_Lazinator)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, false, this);
                clone = new Dictionary_Values_Lazinator(bytes);
            }
            return clone;
        }
        
        public virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            Dictionary_Values_Lazinator typedClone = (Dictionary_Values_Lazinator) clone;
            /*Location5680*/typedClone.MyDictionary = CloneOrChange_Dictionary_Gint_c_C32ExampleChild_g(MyDictionary, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location5681*/typedClone.MyDictionaryStructs = CloneOrChange_Dictionary_GWInt_c_C32WInt_g(MyDictionaryStructs, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location5682*/typedClone.MySortedDictionary = CloneOrChange_SortedDictionary_Gint_c_C32ExampleChild_g(MySortedDictionary, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location5683*/typedClone.MySortedList = CloneOrChange_SortedList_Gint_c_C32ExampleChild_g(MySortedList, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        /*Location5685*/
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location5686*/public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location5687*/yield break;
        }
        /*Location5688*/
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location5689*/yield return ("MyDictionary", (object)MyDictionary);
            /*Location5690*/yield return ("MyDictionaryStructs", (object)MyDictionaryStructs);
            /*Location5691*/yield return ("MySortedDictionary", (object)MySortedDictionary);
            /*Location5692*/yield return ("MySortedList", (object)MySortedList);
            /*Location5693*/yield break;
        }
        /*Location5694*/
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location5695*/if ((!exploreOnlyDeserializedChildren && MyDictionary != null) || (_MyDictionary_Accessed && _MyDictionary != null))
            {
                _MyDictionary = (Dictionary<int, ExampleChild>) CloneOrChange_Dictionary_Gint_c_C32ExampleChild_g(_MyDictionary, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location5696*/if ((!exploreOnlyDeserializedChildren && MyDictionaryStructs != null) || (_MyDictionaryStructs_Accessed && _MyDictionaryStructs != null))
            {
                _MyDictionaryStructs = (Dictionary<WInt, WInt>) CloneOrChange_Dictionary_GWInt_c_C32WInt_g(_MyDictionaryStructs, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location5697*/if ((!exploreOnlyDeserializedChildren && MySortedDictionary != null) || (_MySortedDictionary_Accessed && _MySortedDictionary != null))
            {
                _MySortedDictionary = (SortedDictionary<int, ExampleChild>) CloneOrChange_SortedDictionary_Gint_c_C32ExampleChild_g(_MySortedDictionary, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location5698*/if ((!exploreOnlyDeserializedChildren && MySortedList != null) || (_MySortedList_Accessed && _MySortedList != null))
            {
                _MySortedList = (SortedList<int, ExampleChild>) CloneOrChange_SortedList_Gint_c_C32ExampleChild_g(_MySortedList, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location5699*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location5700*/
        public virtual void FreeInMemoryObjects()
        {
            _MyDictionary = default;
            _MyDictionaryStructs = default;
            _MySortedDictionary = default;
            _MySortedList = default;
            _MyDictionary_Accessed = _MyDictionaryStructs_Accessed = _MySortedDictionary_Accessed = _MySortedList_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location5701*/
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1004;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location5702*/public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location5703*/_MyDictionary_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location5704*/_MyDictionaryStructs_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location5705*/_MySortedDictionary_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location5706*/_MySortedList_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location5707*/_Dictionary_Values_Lazinator_EndByteIndex = bytesSoFar;
            /*Location5708*/        }
            
            /*Location5709*/public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location5710*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location5711*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location5712*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location5713*/}
                    /*Location5714*/}
                    /*Location5715*/
                    public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location5716*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location5717*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location5718*/}
                                /*Location5719*//*Location5720*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location5721*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location5722*/}
                            /*Location5723*/
                            protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                /*Location5724*/if (_MyDictionary_Accessed && _MyDictionary != null)
                                {
                                    _MyDictionary = (Dictionary<int, ExampleChild>) CloneOrChange_Dictionary_Gint_c_C32ExampleChild_g(_MyDictionary, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location5725*/if (_MyDictionaryStructs_Accessed && _MyDictionaryStructs != null)
                                {
                                    _MyDictionaryStructs = (Dictionary<WInt, WInt>) CloneOrChange_Dictionary_GWInt_c_C32WInt_g(_MyDictionaryStructs, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location5726*/if (_MySortedDictionary_Accessed && _MySortedDictionary != null)
                                {
                                    _MySortedDictionary = (SortedDictionary<int, ExampleChild>) CloneOrChange_SortedDictionary_Gint_c_C32ExampleChild_g(_MySortedDictionary, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location5727*/if (_MySortedList_Accessed && _MySortedList != null)
                                {
                                    _MySortedList = (SortedList<int, ExampleChild>) CloneOrChange_SortedList_Gint_c_C32ExampleChild_g(_MySortedList, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location5728*/}
                                
                                /*Location5729*/
                                protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    int startPosition = writer.Position;
                                    int startOfObjectPosition = 0;
                                    // header information
                                    /*Location5730*/if (includeUniqueID)
                                    {
                                        if (!ContainsOpenGenericParameters)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                        }
                                        else
                                        {
                                            WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                                        }
                                    }
                                    /*Location5731*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                    writer.Write((byte)includeChildrenMode);
                                    /*Location5732*/// write properties
                                    /*Location5733*/startOfObjectPosition = writer.Position;
                                    /*Location5734*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyDictionary_Accessed)
                                    {
                                        var deserialized = MyDictionary;
                                    }
                                    /*Location5735*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyDictionary, isBelievedDirty: _MyDictionary_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyDictionary_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyDictionary_ByteIndex, _MyDictionary_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Dictionary_Gint_c_C32ExampleChild_g(ref w, _MyDictionary,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location5736*/if (updateStoredBuffer)
                                    {
                                        _MyDictionary_ByteIndex = startOfObjectPosition - startPosition;if (_MyDictionary_Accessed && _MyDictionary != null)
                                        {
                                            _MyDictionary = (Dictionary<int, ExampleChild>) CloneOrChange_Dictionary_Gint_c_C32ExampleChild_g(_MyDictionary, l => l.RemoveBufferInHierarchy(), true);
                                        }
                                        
                                    }
                                    /*Location5737*/startOfObjectPosition = writer.Position;
                                    /*Location5738*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyDictionaryStructs_Accessed)
                                    {
                                        var deserialized = MyDictionaryStructs;
                                    }
                                    /*Location5739*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyDictionaryStructs, isBelievedDirty: _MyDictionaryStructs_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyDictionaryStructs_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyDictionaryStructs_ByteIndex, _MyDictionaryStructs_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Dictionary_GWInt_c_C32WInt_g(ref w, _MyDictionaryStructs,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location5740*/if (updateStoredBuffer)
                                    {
                                        _MyDictionaryStructs_ByteIndex = startOfObjectPosition - startPosition;if (_MyDictionaryStructs_Accessed && _MyDictionaryStructs != null)
                                        {
                                            _MyDictionaryStructs = (Dictionary<WInt, WInt>) CloneOrChange_Dictionary_GWInt_c_C32WInt_g(_MyDictionaryStructs, l => l.RemoveBufferInHierarchy(), true);
                                        }
                                        
                                    }
                                    /*Location5741*/startOfObjectPosition = writer.Position;
                                    /*Location5742*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MySortedDictionary_Accessed)
                                    {
                                        var deserialized = MySortedDictionary;
                                    }
                                    /*Location5743*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MySortedDictionary, isBelievedDirty: _MySortedDictionary_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MySortedDictionary_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MySortedDictionary_ByteIndex, _MySortedDictionary_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_SortedDictionary_Gint_c_C32ExampleChild_g(ref w, _MySortedDictionary,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location5744*/if (updateStoredBuffer)
                                    {
                                        _MySortedDictionary_ByteIndex = startOfObjectPosition - startPosition;if (_MySortedDictionary_Accessed && _MySortedDictionary != null)
                                        {
                                            _MySortedDictionary = (SortedDictionary<int, ExampleChild>) CloneOrChange_SortedDictionary_Gint_c_C32ExampleChild_g(_MySortedDictionary, l => l.RemoveBufferInHierarchy(), true);
                                        }
                                        
                                    }
                                    /*Location5745*/startOfObjectPosition = writer.Position;
                                    /*Location5746*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MySortedList_Accessed)
                                    {
                                        var deserialized = MySortedList;
                                    }
                                    /*Location5747*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MySortedList, isBelievedDirty: _MySortedList_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MySortedList_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MySortedList_ByteIndex, _MySortedList_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_SortedList_Gint_c_C32ExampleChild_g(ref w, _MySortedList,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location5748*/if (updateStoredBuffer)
                                    {
                                        _MySortedList_ByteIndex = startOfObjectPosition - startPosition;if (_MySortedList_Accessed && _MySortedList != null)
                                        {
                                            _MySortedList = (SortedList<int, ExampleChild>) CloneOrChange_SortedList_Gint_c_C32ExampleChild_g(_MySortedList, l => l.RemoveBufferInHierarchy(), true);
                                        }
                                        
                                    }
                                    /*Location5749*/if (updateStoredBuffer)
                                    {
                                        /*Location5750*/_Dictionary_Values_Lazinator_EndByteIndex = writer.Position - startPosition;
                                        /*Location5751*/}
                                        /*Location5752*/}
                                        /*Location5753*/
                                        /* Conversion of supported collections and tuples */
                                        /*Location5754*/
                                        private static Dictionary<int, ExampleChild> ConvertFromBytes_Dictionary_Gint_c_C32ExampleChild_g(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default(Dictionary<int, ExampleChild>);
                                            }
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            Dictionary<int, ExampleChild> collection = new Dictionary<int, ExampleChild>(collectionLength);
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                var item = ConvertFromBytes_KeyValuePair_Gint_c_C32ExampleChild_g(childData);
                                                collection.Add(item.Key, item.Value);
                                                bytesSoFar += lengthCollectionMember;
                                            }
                                            
                                            return collection;
                                        }/*Location5755*/
                                        
                                        private static void ConvertToBytes_Dictionary_Gint_c_C32ExampleChild_g(ref BinaryBufferWriter writer, Dictionary<int, ExampleChild> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(Dictionary<int, ExampleChild>))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                            foreach (var item in itemToConvert)
                                            {
                                                void action(ref BinaryBufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32ExampleChild_g(ref w, item, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                            }
                                        }
                                        /*Location5756*/
                                        private static Dictionary<int, ExampleChild> CloneOrChange_Dictionary_Gint_c_C32ExampleChild_g(Dictionary<int, ExampleChild> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            if (itemToClone == null)
                                            {
                                                return default;
                                            }
                                            
                                            int collectionLength = itemToClone.Count;
                                            Dictionary<int, ExampleChild> collection = new Dictionary<int, ExampleChild>(collectionLength);
                                            foreach (var item in itemToClone)
                                            {
                                                var itemCopied = (KeyValuePair<int, ExampleChild>) CloneOrChange_KeyValuePair_Gint_c_C32ExampleChild_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                                                collection.Add(itemCopied.Key, itemCopied.Value);
                                            }
                                            return collection;
                                        }
                                        /*Location5757*/
                                        private static KeyValuePair<int, ExampleChild> ConvertFromBytes_KeyValuePair_Gint_c_C32ExampleChild_g(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default;
                                            }
                                            ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                            
                                            int bytesSoFar = 0;
                                            /*Location5758*/
                                            int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                            /*Location5759*/
                                            ExampleChild item2 = default(ExampleChild);
                                            int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                            if (lengthCollectionMember_item2 != 0)
                                            {
                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                item2 = DeserializationFactory.Instance.CreateBasedOnType<ExampleChild>(childData);
                                            }
                                            bytesSoFar += lengthCollectionMember_item2;
                                            /*Location5760*/
                                            var tupleType = new KeyValuePair<int, ExampleChild>(item1, item2);
                                            
                                            return tupleType;
                                        }
                                        
                                        private static void ConvertToBytes_KeyValuePair_Gint_c_C32ExampleChild_g(ref BinaryBufferWriter writer, KeyValuePair<int, ExampleChild> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            /*Location5761*/
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Key);
                                            /*Location5762*/
                                            if (itemToConvert.Value == null)
                                            {
                                                writer.Write((uint)0);
                                            }
                                            else
                                            {
                                                void actionValue(ref BinaryBufferWriter w) => itemToConvert.Value.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                WriteToBinaryWithIntLengthPrefix(ref writer, actionValue);
                                            };
                                            /*Location5763*/}
                                            /*Location5764*/
                                            private static KeyValuePair<int, ExampleChild> CloneOrChange_KeyValuePair_Gint_c_C32ExampleChild_g(KeyValuePair<int, ExampleChild> itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                            {
                                                return new KeyValuePair<int, ExampleChild>((int) (itemToConvert.Key),(ExampleChild?) (cloneOrChangeFunc((itemToConvert.Value))));
                                            }
                                            /*Location5765*/
                                            private static Dictionary<WInt, WInt> ConvertFromBytes_Dictionary_GWInt_c_C32WInt_g(LazinatorMemory storage)
                                            {
                                                if (storage.Length == 0)
                                                {
                                                    return default(Dictionary<WInt, WInt>);
                                                }
                                                ReadOnlySpan<byte> span = storage.Span;
                                                int bytesSoFar = 0;
                                                int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                
                                                Dictionary<WInt, WInt> collection = new Dictionary<WInt, WInt>(collectionLength);
                                                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                {
                                                    int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                    var item = ConvertFromBytes_KeyValuePair_GWInt_c_C32WInt_g(childData);
                                                    collection.Add(item.Key, item.Value);
                                                    bytesSoFar += lengthCollectionMember;
                                                }
                                                
                                                return collection;
                                            }/*Location5766*/
                                            
                                            private static void ConvertToBytes_Dictionary_GWInt_c_C32WInt_g(ref BinaryBufferWriter writer, Dictionary<WInt, WInt> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                            {
                                                if (itemToConvert == default(Dictionary<WInt, WInt>))
                                                {
                                                    return;
                                                }
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                foreach (var item in itemToConvert)
                                                {
                                                    void action(ref BinaryBufferWriter w) => ConvertToBytes_KeyValuePair_GWInt_c_C32WInt_g(ref w, item, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                }
                                            }
                                            /*Location5767*/
                                            private static Dictionary<WInt, WInt> CloneOrChange_Dictionary_GWInt_c_C32WInt_g(Dictionary<WInt, WInt> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                            {
                                                if (itemToClone == null)
                                                {
                                                    return default;
                                                }
                                                
                                                int collectionLength = itemToClone.Count;
                                                Dictionary<WInt, WInt> collection = new Dictionary<WInt, WInt>(collectionLength);
                                                foreach (var item in itemToClone)
                                                {
                                                    var itemCopied = (KeyValuePair<WInt, WInt>) CloneOrChange_KeyValuePair_GWInt_c_C32WInt_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                                                    collection.Add(itemCopied.Key, itemCopied.Value);
                                                }
                                                return collection;
                                            }
                                            /*Location5768*/
                                            private static KeyValuePair<WInt, WInt> ConvertFromBytes_KeyValuePair_GWInt_c_C32WInt_g(LazinatorMemory storage)
                                            {
                                                if (storage.Length == 0)
                                                {
                                                    return default;
                                                }
                                                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                
                                                int bytesSoFar = 0;
                                                /*Location5769*/
                                                WInt item1 = default(WInt);
                                                int lengthCollectionMember_item1 = span.ToByte(ref bytesSoFar);
                                                if (lengthCollectionMember_item1 != 0)
                                                {
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                    item1 = new WInt();
                                                    item1.DeserializeLazinator(childData);;
                                                }
                                                bytesSoFar += lengthCollectionMember_item1;
                                                /*Location5770*/
                                                WInt item2 = default(WInt);
                                                int lengthCollectionMember_item2 = span.ToByte(ref bytesSoFar);
                                                if (lengthCollectionMember_item2 != 0)
                                                {
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                    item2 = new WInt();
                                                    item2.DeserializeLazinator(childData);;
                                                }
                                                bytesSoFar += lengthCollectionMember_item2;
                                                /*Location5771*/
                                                var tupleType = new KeyValuePair<WInt, WInt>(item1, item2);
                                                
                                                return tupleType;
                                            }
                                            
                                            private static void ConvertToBytes_KeyValuePair_GWInt_c_C32WInt_g(ref BinaryBufferWriter writer, KeyValuePair<WInt, WInt> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                            {
                                                /*Location5772*/
                                                void actionKey(ref BinaryBufferWriter w) => itemToConvert.Key.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                WriteToBinaryWithByteLengthPrefix(ref writer, actionKey);
                                                /*Location5773*/
                                                void actionValue(ref BinaryBufferWriter w) => itemToConvert.Value.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                WriteToBinaryWithByteLengthPrefix(ref writer, actionValue);
                                                /*Location5774*/}
                                                /*Location5775*/
                                                private static KeyValuePair<WInt, WInt> CloneOrChange_KeyValuePair_GWInt_c_C32WInt_g(KeyValuePair<WInt, WInt> itemToConvert, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    return new KeyValuePair<WInt, WInt>((WInt) (cloneOrChangeFunc((itemToConvert.Key))),(WInt) (cloneOrChangeFunc((itemToConvert.Value))));
                                                }
                                                /*Location5776*/
                                                private static SortedDictionary<int, ExampleChild> ConvertFromBytes_SortedDictionary_Gint_c_C32ExampleChild_g(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(SortedDictionary<int, ExampleChild>);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    SortedDictionary<int, ExampleChild> collection = new SortedDictionary<int, ExampleChild>();
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = ConvertFromBytes_KeyValuePair_Gint_c_C32ExampleChild_g(childData);
                                                        collection.Add(item.Key, item.Value);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location5777*/
                                                
                                                private static void ConvertToBytes_SortedDictionary_Gint_c_C32ExampleChild_g(ref BinaryBufferWriter writer, SortedDictionary<int, ExampleChild> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(SortedDictionary<int, ExampleChild>))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    foreach (var item in itemToConvert)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32ExampleChild_g(ref w, item, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location5778*/
                                                private static SortedDictionary<int, ExampleChild> CloneOrChange_SortedDictionary_Gint_c_C32ExampleChild_g(SortedDictionary<int, ExampleChild> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    SortedDictionary<int, ExampleChild> collection = new SortedDictionary<int, ExampleChild>();
                                                    foreach (var item in itemToClone)
                                                    {
                                                        var itemCopied = (KeyValuePair<int, ExampleChild>) CloneOrChange_KeyValuePair_Gint_c_C32ExampleChild_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                                                        collection.Add(itemCopied.Key, itemCopied.Value);
                                                    }
                                                    return collection;
                                                }
                                                /*Location5779*/
                                                private static SortedList<int, ExampleChild> ConvertFromBytes_SortedList_Gint_c_C32ExampleChild_g(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default(SortedList<int, ExampleChild>);
                                                    }
                                                    ReadOnlySpan<byte> span = storage.Span;
                                                    int bytesSoFar = 0;
                                                    int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                    
                                                    SortedList<int, ExampleChild> collection = new SortedList<int, ExampleChild>(collectionLength);
                                                    for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                    {
                                                        int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                        var item = ConvertFromBytes_KeyValuePair_Gint_c_C32ExampleChild_g(childData);
                                                        collection.Add(item.Key, item.Value);
                                                        bytesSoFar += lengthCollectionMember;
                                                    }
                                                    
                                                    return collection;
                                                }/*Location5780*/
                                                
                                                private static void ConvertToBytes_SortedList_Gint_c_C32ExampleChild_g(ref BinaryBufferWriter writer, SortedList<int, ExampleChild> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    if (itemToConvert == default(SortedList<int, ExampleChild>))
                                                    {
                                                        return;
                                                    }
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                    foreach (var item in itemToConvert)
                                                    {
                                                        void action(ref BinaryBufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32ExampleChild_g(ref w, item, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                    }
                                                }
                                                /*Location5781*/
                                                private static SortedList<int, ExampleChild> CloneOrChange_SortedList_Gint_c_C32ExampleChild_g(SortedList<int, ExampleChild> itemToClone, Func<ILazinator?, ILazinator?> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToClone == null)
                                                    {
                                                        return default;
                                                    }
                                                    
                                                    int collectionLength = itemToClone.Count;
                                                    SortedList<int, ExampleChild> collection = new SortedList<int, ExampleChild>(collectionLength);
                                                    foreach (var item in itemToClone)
                                                    {
                                                        var itemCopied = (KeyValuePair<int, ExampleChild>) CloneOrChange_KeyValuePair_Gint_c_C32ExampleChild_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                                                        collection.Add(itemCopied.Key, itemCopied.Value);
                                                    }
                                                    return collection;
                                                }
                                                /*Location5782*/
                                            }
                                        }
