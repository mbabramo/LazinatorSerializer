/*Location5489*//*Location5475*///a6d6426b-9aab-b020-0277-ee9ec6edaf87
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.Collections
{/*Location5476*/
    using Lazinator.Attributes;/*Location5477*/
    using Lazinator.Buffers;/*Location5478*/
    using Lazinator.Core;/*Location5479*/
    using Lazinator.Exceptions;/*Location5480*/
    using Lazinator.Support;/*Location5481*/
    using System;/*Location5482*/
    using System.Buffers;/*Location5483*/
    using System.Collections.Generic;/*Location5484*/
    using System.Diagnostics;/*Location5485*/
    using System.IO;/*Location5486*/
    using System.Linq;/*Location5487*/
    using System.Runtime.InteropServices;/*Location5488*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class SpanAndMemory : ILazinator
    {
        /*Location5490*/public bool IsStruct => false;
        
        /*Location5491*//* Property definitions */
        
        /*Location5492*/        protected int _MyMemoryByte_ByteIndex;
        /*Location5493*/        protected int _MyMemoryInt_ByteIndex;
        /*Location5494*/        protected int _MyNullableMemoryByte_ByteIndex;
        /*Location5495*/        protected int _MyNullableMemoryInt_ByteIndex;
        /*Location5496*/        protected int _MyNullableReadOnlyMemoryInt_ByteIndex;
        /*Location5497*/        protected int _MyReadOnlyMemoryByte_ByteIndex;
        /*Location5498*/        protected int _MyReadOnlyMemoryChar_ByteIndex;
        /*Location5499*/        protected int _MyReadOnlyMemoryInt_ByteIndex;
        /*Location5500*/        protected int _MyReadOnlySpanByte_ByteIndex;
        /*Location5501*/        protected int _MyReadOnlySpanChar_ByteIndex;
        /*Location5502*/        protected int _MyReadOnlySpanLong_ByteIndex;
        /*Location5503*/protected virtual int _MyMemoryByte_ByteLength => _MyMemoryInt_ByteIndex - _MyMemoryByte_ByteIndex;
        /*Location5504*/protected virtual int _MyMemoryInt_ByteLength => _MyNullableMemoryByte_ByteIndex - _MyMemoryInt_ByteIndex;
        /*Location5505*/protected virtual int _MyNullableMemoryByte_ByteLength => _MyNullableMemoryInt_ByteIndex - _MyNullableMemoryByte_ByteIndex;
        /*Location5506*/protected virtual int _MyNullableMemoryInt_ByteLength => _MyNullableReadOnlyMemoryInt_ByteIndex - _MyNullableMemoryInt_ByteIndex;
        /*Location5507*/protected virtual int _MyNullableReadOnlyMemoryInt_ByteLength => _MyReadOnlyMemoryByte_ByteIndex - _MyNullableReadOnlyMemoryInt_ByteIndex;
        /*Location5508*/protected virtual int _MyReadOnlyMemoryByte_ByteLength => _MyReadOnlyMemoryChar_ByteIndex - _MyReadOnlyMemoryByte_ByteIndex;
        /*Location5509*/protected virtual int _MyReadOnlyMemoryChar_ByteLength => _MyReadOnlyMemoryInt_ByteIndex - _MyReadOnlyMemoryChar_ByteIndex;
        /*Location5510*/protected virtual int _MyReadOnlyMemoryInt_ByteLength => _MyReadOnlySpanByte_ByteIndex - _MyReadOnlyMemoryInt_ByteIndex;
        /*Location5511*/protected virtual int _MyReadOnlySpanByte_ByteLength => _MyReadOnlySpanChar_ByteIndex - _MyReadOnlySpanByte_ByteIndex;
        /*Location5512*/protected virtual int _MyReadOnlySpanChar_ByteLength => _MyReadOnlySpanLong_ByteIndex - _MyReadOnlySpanChar_ByteIndex;
        /*Location5513*/private int _SpanAndMemory_EndByteIndex;
        /*Location5514*/protected virtual int _MyReadOnlySpanLong_ByteLength => _SpanAndMemory_EndByteIndex - _MyReadOnlySpanLong_ByteIndex;
        
        /*Location5515*/
        protected Memory<byte> _MyMemoryByte;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Memory<byte> MyMemoryByte
        {
            get
            {
                if (!_MyMemoryByte_Accessed)
                {
                    Lazinate_MyMemoryByte();
                }
                IsDirty = true; 
                return _MyMemoryByte;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyMemoryByte = value;
                _MyMemoryByte_Accessed = true;
            }
        }
        protected bool _MyMemoryByte_Accessed;
        private void Lazinate_MyMemoryByte()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyMemoryByte = default(Memory<byte>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyMemoryByte_ByteIndex, _MyMemoryByte_ByteLength, false, false, null);
                _MyMemoryByte = ConvertFromBytes_Memory_Gbyte_g(childData);
            }
            
            _MyMemoryByte_Accessed = true;
        }
        
        /*Location5516*/
        protected Memory<int> _MyMemoryInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Memory<int> MyMemoryInt
        {
            get
            {
                if (!_MyMemoryInt_Accessed)
                {
                    Lazinate_MyMemoryInt();
                }
                IsDirty = true; 
                return _MyMemoryInt;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyMemoryInt = value;
                _MyMemoryInt_Accessed = true;
            }
        }
        protected bool _MyMemoryInt_Accessed;
        private void Lazinate_MyMemoryInt()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyMemoryInt = default(Memory<int>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyMemoryInt_ByteIndex, _MyMemoryInt_ByteLength, false, false, null);
                _MyMemoryInt = ConvertFromBytes_Memory_Gint_g(childData);
            }
            
            _MyMemoryInt_Accessed = true;
        }
        
        /*Location5517*/
        protected Memory<byte>? _MyNullableMemoryByte;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Memory<byte>? MyNullableMemoryByte
        {
            get
            {
                if (!_MyNullableMemoryByte_Accessed)
                {
                    Lazinate_MyNullableMemoryByte();
                }
                IsDirty = true; 
                return _MyNullableMemoryByte;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyNullableMemoryByte = value;
                _MyNullableMemoryByte_Accessed = true;
            }
        }
        protected bool _MyNullableMemoryByte_Accessed;
        private void Lazinate_MyNullableMemoryByte()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyNullableMemoryByte = default(Memory<byte>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyNullableMemoryByte_ByteIndex, _MyNullableMemoryByte_ByteLength, false, false, null);
                _MyNullableMemoryByte = ConvertFromBytes_Memory_Gbyte_g_C63(childData);
            }
            
            _MyNullableMemoryByte_Accessed = true;
        }
        
        /*Location5518*/
        protected Memory<int>? _MyNullableMemoryInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Memory<int>? MyNullableMemoryInt
        {
            get
            {
                if (!_MyNullableMemoryInt_Accessed)
                {
                    Lazinate_MyNullableMemoryInt();
                }
                IsDirty = true; 
                return _MyNullableMemoryInt;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyNullableMemoryInt = value;
                _MyNullableMemoryInt_Accessed = true;
            }
        }
        protected bool _MyNullableMemoryInt_Accessed;
        private void Lazinate_MyNullableMemoryInt()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyNullableMemoryInt = default(Memory<int>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyNullableMemoryInt_ByteIndex, _MyNullableMemoryInt_ByteLength, false, false, null);
                _MyNullableMemoryInt = ConvertFromBytes_Memory_Gint_g_C63(childData);
            }
            
            _MyNullableMemoryInt_Accessed = true;
        }
        
        /*Location5519*/
        protected ReadOnlyMemory<int>? _MyNullableReadOnlyMemoryInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlyMemory<int>? MyNullableReadOnlyMemoryInt
        {
            get
            {
                if (!_MyNullableReadOnlyMemoryInt_Accessed)
                {
                    Lazinate_MyNullableReadOnlyMemoryInt();
                }
                IsDirty = true; 
                return _MyNullableReadOnlyMemoryInt;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyNullableReadOnlyMemoryInt = value;
                _MyNullableReadOnlyMemoryInt_Accessed = true;
            }
        }
        protected bool _MyNullableReadOnlyMemoryInt_Accessed;
        private void Lazinate_MyNullableReadOnlyMemoryInt()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyNullableReadOnlyMemoryInt = default(ReadOnlyMemory<int>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyNullableReadOnlyMemoryInt_ByteIndex, _MyNullableReadOnlyMemoryInt_ByteLength, false, false, null);
                _MyNullableReadOnlyMemoryInt = ConvertFromBytes_ReadOnlyMemory_Gint_g_C63(childData);
            }
            
            _MyNullableReadOnlyMemoryInt_Accessed = true;
        }
        
        /*Location5520*/
        protected ReadOnlyMemory<byte> _MyReadOnlyMemoryByte;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlyMemory<byte> MyReadOnlyMemoryByte
        {
            get
            {
                if (!_MyReadOnlyMemoryByte_Accessed)
                {
                    Lazinate_MyReadOnlyMemoryByte();
                }
                IsDirty = true; 
                return _MyReadOnlyMemoryByte;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyReadOnlyMemoryByte = value;
                _MyReadOnlyMemoryByte_Accessed = true;
            }
        }
        protected bool _MyReadOnlyMemoryByte_Accessed;
        private void Lazinate_MyReadOnlyMemoryByte()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyReadOnlyMemoryByte = default(ReadOnlyMemory<byte>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyReadOnlyMemoryByte_ByteIndex, _MyReadOnlyMemoryByte_ByteLength, false, false, null);
                _MyReadOnlyMemoryByte = ConvertFromBytes_ReadOnlyMemory_Gbyte_g(childData);
            }
            
            _MyReadOnlyMemoryByte_Accessed = true;
        }
        
        /*Location5521*/
        protected ReadOnlyMemory<char> _MyReadOnlyMemoryChar;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlyMemory<char> MyReadOnlyMemoryChar
        {
            get
            {
                if (!_MyReadOnlyMemoryChar_Accessed)
                {
                    Lazinate_MyReadOnlyMemoryChar();
                }
                IsDirty = true; 
                return _MyReadOnlyMemoryChar;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyReadOnlyMemoryChar = value;
                _MyReadOnlyMemoryChar_Accessed = true;
            }
        }
        protected bool _MyReadOnlyMemoryChar_Accessed;
        private void Lazinate_MyReadOnlyMemoryChar()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyReadOnlyMemoryChar = default(ReadOnlyMemory<char>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyReadOnlyMemoryChar_ByteIndex, _MyReadOnlyMemoryChar_ByteLength, false, false, null);
                _MyReadOnlyMemoryChar = ConvertFromBytes_ReadOnlyMemory_Gchar_g(childData);
            }
            
            _MyReadOnlyMemoryChar_Accessed = true;
        }
        
        /*Location5522*/
        protected ReadOnlyMemory<int> _MyReadOnlyMemoryInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlyMemory<int> MyReadOnlyMemoryInt
        {
            get
            {
                if (!_MyReadOnlyMemoryInt_Accessed)
                {
                    Lazinate_MyReadOnlyMemoryInt();
                }
                IsDirty = true; 
                return _MyReadOnlyMemoryInt;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyReadOnlyMemoryInt = value;
                _MyReadOnlyMemoryInt_Accessed = true;
            }
        }
        protected bool _MyReadOnlyMemoryInt_Accessed;
        private void Lazinate_MyReadOnlyMemoryInt()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyReadOnlyMemoryInt = default(ReadOnlyMemory<int>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyReadOnlyMemoryInt_ByteIndex, _MyReadOnlyMemoryInt_ByteLength, false, false, null);
                _MyReadOnlyMemoryInt = ConvertFromBytes_ReadOnlyMemory_Gint_g(childData);
            }
            
            _MyReadOnlyMemoryInt_Accessed = true;
        }
        
        /*Location5523*/private ReadOnlyMemory<byte> _MyReadOnlySpanByte;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlySpan<byte> MyReadOnlySpanByte
        {
            get
            {
                if (!_MyReadOnlySpanByte_Accessed)
                {
                    LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyReadOnlySpanByte_ByteIndex, _MyReadOnlySpanByte_ByteLength, false, false, null);
                    return childData.Span;
                }
                return _MyReadOnlySpanByte.Span;
            }
            set
            {
                IsDirty = true;
                _MyReadOnlySpanByte = new ReadOnlyMemory<byte>((value).ToArray());
                _MyReadOnlySpanByte_Accessed = true;
            }
        }
        protected bool _MyReadOnlySpanByte_Accessed;
        /*Location5524*/private ReadOnlyMemory<byte> _MyReadOnlySpanChar;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlySpan<char> MyReadOnlySpanChar
        {
            get
            {
                if (!_MyReadOnlySpanChar_Accessed)
                {
                    LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyReadOnlySpanChar_ByteIndex, _MyReadOnlySpanChar_ByteLength, false, false, null);
                    return MemoryMarshal.Cast<byte, char>(childData.Span);
                }
                return MemoryMarshal.Cast<byte, char>(_MyReadOnlySpanChar.Span);
            }
            set
            {
                IsDirty = true;
                _MyReadOnlySpanChar = new ReadOnlyMemory<byte>(MemoryMarshal.Cast<char, byte>(value).ToArray());
                _MyReadOnlySpanChar_Accessed = true;
            }
        }
        protected bool _MyReadOnlySpanChar_Accessed;
        /*Location5525*/private ReadOnlyMemory<byte> _MyReadOnlySpanLong;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlySpan<long> MyReadOnlySpanLong
        {
            get
            {
                if (!_MyReadOnlySpanLong_Accessed)
                {
                    LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyReadOnlySpanLong_ByteIndex, _MyReadOnlySpanLong_ByteLength, false, false, null);
                    return MemoryMarshal.Cast<byte, long>(childData.Span);
                }
                return MemoryMarshal.Cast<byte, long>(_MyReadOnlySpanLong.Span);
            }
            set
            {
                IsDirty = true;
                _MyReadOnlySpanLong = new ReadOnlyMemory<byte>(MemoryMarshal.Cast<long, byte>(value).ToArray());
                _MyReadOnlySpanLong_Accessed = true;
            }
        }
        protected bool _MyReadOnlySpanLong_Accessed;
        /*Location5537*/
        /* Serialization, deserialization, and object relationships */
        
        public SpanAndMemory(LazinatorConstructorEnum constructorEnum)
        {
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            var clone = new SpanAndMemory(LazinatorConstructorEnum.LazinatorConstructor)
            {
                OriginalIncludeChildrenMode = includeChildrenMode
            };
            clone = CompleteClone(this, clone, includeChildrenMode, cloneBufferOptions);
            return clone;
        }
        
        public virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            SpanAndMemory typedClone = (SpanAndMemory) clone;
            /*Location5526*/typedClone.MyMemoryByte = CloneOrChange_Memory_Gbyte_g(MyMemoryByte, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location5527*/typedClone.MyMemoryInt = CloneOrChange_Memory_Gint_g(MyMemoryInt, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location5528*/typedClone.MyNullableMemoryByte = CloneOrChange_Memory_Gbyte_g_C63(MyNullableMemoryByte, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location5529*/typedClone.MyNullableMemoryInt = CloneOrChange_Memory_Gint_g_C63(MyNullableMemoryInt, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location5530*/typedClone.MyNullableReadOnlyMemoryInt = CloneOrChange_ReadOnlyMemory_Gint_g_C63(MyNullableReadOnlyMemoryInt, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location5531*/typedClone.MyReadOnlyMemoryByte = CloneOrChange_ReadOnlyMemory_Gbyte_g(MyReadOnlyMemoryByte, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location5532*/typedClone.MyReadOnlyMemoryChar = CloneOrChange_ReadOnlyMemory_Gchar_g(MyReadOnlyMemoryChar, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location5533*/typedClone.MyReadOnlyMemoryInt = CloneOrChange_ReadOnlyMemory_Gint_g(MyReadOnlyMemoryInt, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location5534*/typedClone.MyReadOnlySpanByte = CloneOrChange_ReadOnlySpan_Gbyte_g(MyReadOnlySpanByte, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location5535*/typedClone.MyReadOnlySpanChar = CloneOrChange_ReadOnlySpan_Gchar_g(MyReadOnlySpanChar, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location5536*/typedClone.MyReadOnlySpanLong = CloneOrChange_ReadOnlySpan_Glong_g(MyReadOnlySpanLong, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        /*Location5538*/
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location5539*/public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location5540*/yield break;
        }
        /*Location5541*/
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location5542*/yield return ("MyMemoryByte", (object)MyMemoryByte);
            /*Location5543*/yield return ("MyMemoryInt", (object)MyMemoryInt);
            /*Location5544*/yield return ("MyNullableMemoryByte", (object)MyNullableMemoryByte);
            /*Location5545*/yield return ("MyNullableMemoryInt", (object)MyNullableMemoryInt);
            /*Location5546*/yield return ("MyNullableReadOnlyMemoryInt", (object)MyNullableReadOnlyMemoryInt);
            /*Location5547*/yield return ("MyReadOnlyMemoryByte", (object)MyReadOnlyMemoryByte);
            /*Location5548*/yield return ("MyReadOnlyMemoryChar", (object)MyReadOnlyMemoryChar);
            /*Location5549*/yield return ("MyReadOnlyMemoryInt", (object)MyReadOnlyMemoryInt);
            /*Location5550*/yield return ("MyReadOnlySpanByte", (object)MyReadOnlySpanByte.ToString());
            /*Location5551*/yield return ("MyReadOnlySpanChar", (object)MyReadOnlySpanChar.ToString());
            /*Location5552*/yield return ("MyReadOnlySpanLong", (object)MyReadOnlySpanLong.ToString());
            /*Location5553*/yield break;
        }
        /*Location5554*/
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location5555*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyMemoryByte = MyMemoryByte;
            }
            /*Location5556*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyMemoryInt = MyMemoryInt;
            }
            /*Location5557*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyNullableMemoryByte = MyNullableMemoryByte;
            }
            /*Location5558*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyNullableMemoryInt = MyNullableMemoryInt;
            }
            /*Location5559*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyNullableReadOnlyMemoryInt = MyNullableReadOnlyMemoryInt;
            }
            /*Location5560*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyReadOnlyMemoryByte = MyReadOnlyMemoryByte;
            }
            /*Location5561*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyReadOnlyMemoryChar = MyReadOnlyMemoryChar;
            }
            /*Location5562*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyReadOnlyMemoryInt = MyReadOnlyMemoryInt;
            }
            /*Location5563*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyReadOnlySpanByte = MyReadOnlySpanByte;
                if (!_MyReadOnlySpanByte_Accessed)
                {
                    MyReadOnlySpanByte = deserialized_MyReadOnlySpanByte;
                }
            }
            /*Location5564*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyReadOnlySpanChar = MyReadOnlySpanChar;
                if (!_MyReadOnlySpanChar_Accessed)
                {
                    MyReadOnlySpanChar = deserialized_MyReadOnlySpanChar;
                }
            }
            /*Location5565*/if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyReadOnlySpanLong = MyReadOnlySpanLong;
                if (!_MyReadOnlySpanLong_Accessed)
                {
                    MyReadOnlySpanLong = deserialized_MyReadOnlySpanLong;
                }
            }
            /*Location5566*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location5567*/
        public virtual void FreeInMemoryObjects()
        {
            _MyMemoryByte = default;
            _MyMemoryInt = default;
            _MyNullableMemoryByte = default;
            _MyNullableMemoryInt = default;
            _MyNullableReadOnlyMemoryInt = default;
            _MyReadOnlyMemoryByte = default;
            _MyReadOnlyMemoryChar = default;
            _MyReadOnlyMemoryInt = default;
            _MyReadOnlySpanByte = default;
            _MyReadOnlySpanChar = default;
            _MyReadOnlySpanLong = default;
            _MyMemoryByte_Accessed = _MyMemoryInt_Accessed = _MyNullableMemoryByte_Accessed = _MyNullableMemoryInt_Accessed = _MyNullableReadOnlyMemoryInt_Accessed = _MyReadOnlyMemoryByte_Accessed = _MyReadOnlyMemoryChar_Accessed = _MyReadOnlyMemoryInt_Accessed = _MyReadOnlySpanByte_Accessed = _MyReadOnlySpanChar_Accessed = _MyReadOnlySpanLong_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location5568*/
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1028;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location5569*/public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location5570*/_MyMemoryByte_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location5571*/_MyMemoryInt_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location5572*/_MyNullableMemoryByte_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location5573*/_MyNullableMemoryInt_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location5574*/_MyNullableReadOnlyMemoryInt_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location5575*/_MyReadOnlyMemoryByte_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location5576*/_MyReadOnlyMemoryChar_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location5577*/_MyReadOnlyMemoryInt_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location5578*/_MyReadOnlySpanByte_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location5579*/_MyReadOnlySpanChar_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location5580*/_MyReadOnlySpanLong_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location5581*/_SpanAndMemory_EndByteIndex = bytesSoFar;
            /*Location5582*/        }
            
            /*Location5583*/public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location5584*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location5585*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location5586*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location5587*/}
                    /*Location5588*/}
                    /*Location5589*/
                    public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location5590*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location5591*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location5592*/}
                                /*Location5593*//*Location5594*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location5595*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location5596*/}
                            /*Location5597*/
                            protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                /*Location5598*/}
                                
                                /*Location5599*/
                                protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    int startPosition = writer.Position;
                                    int startOfObjectPosition = 0;
                                    // header information
                                    /*Location5600*/if (includeUniqueID)
                                    {
                                        if (!ContainsOpenGenericParameters)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                        }
                                        else
                                        {
                                            WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                                        }
                                    }
                                    /*Location5601*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                    writer.Write((byte)includeChildrenMode);
                                    /*Location5602*/// write properties
                                    /*Location5603*/startOfObjectPosition = writer.Position;
                                    /*Location5604*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyMemoryByte_Accessed)
                                    {
                                        var deserialized = MyMemoryByte;
                                    }
                                    /*Location5605*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyMemoryByte, isBelievedDirty: _MyMemoryByte_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyMemoryByte_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyMemoryByte_ByteIndex, _MyMemoryByte_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Memory_Gbyte_g(ref w, _MyMemoryByte,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location5606*/if (updateStoredBuffer)
                                    {
                                        _MyMemoryByte_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location5607*/startOfObjectPosition = writer.Position;
                                    /*Location5608*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyMemoryInt_Accessed)
                                    {
                                        var deserialized = MyMemoryInt;
                                    }
                                    /*Location5609*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyMemoryInt, isBelievedDirty: _MyMemoryInt_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyMemoryInt_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyMemoryInt_ByteIndex, _MyMemoryInt_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Memory_Gint_g(ref w, _MyMemoryInt,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location5610*/if (updateStoredBuffer)
                                    {
                                        _MyMemoryInt_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location5611*/startOfObjectPosition = writer.Position;
                                    /*Location5612*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyNullableMemoryByte_Accessed)
                                    {
                                        var deserialized = MyNullableMemoryByte;
                                    }
                                    /*Location5613*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyNullableMemoryByte, isBelievedDirty: _MyNullableMemoryByte_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyNullableMemoryByte_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyNullableMemoryByte_ByteIndex, _MyNullableMemoryByte_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Memory_Gbyte_g_C63(ref w, _MyNullableMemoryByte,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location5614*/if (updateStoredBuffer)
                                    {
                                        _MyNullableMemoryByte_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location5615*/startOfObjectPosition = writer.Position;
                                    /*Location5616*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyNullableMemoryInt_Accessed)
                                    {
                                        var deserialized = MyNullableMemoryInt;
                                    }
                                    /*Location5617*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyNullableMemoryInt, isBelievedDirty: _MyNullableMemoryInt_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyNullableMemoryInt_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyNullableMemoryInt_ByteIndex, _MyNullableMemoryInt_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Memory_Gint_g_C63(ref w, _MyNullableMemoryInt,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location5618*/if (updateStoredBuffer)
                                    {
                                        _MyNullableMemoryInt_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location5619*/startOfObjectPosition = writer.Position;
                                    /*Location5620*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyNullableReadOnlyMemoryInt_Accessed)
                                    {
                                        var deserialized = MyNullableReadOnlyMemoryInt;
                                    }
                                    /*Location5621*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyNullableReadOnlyMemoryInt, isBelievedDirty: _MyNullableReadOnlyMemoryInt_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyNullableReadOnlyMemoryInt_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyNullableReadOnlyMemoryInt_ByteIndex, _MyNullableReadOnlyMemoryInt_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_ReadOnlyMemory_Gint_g_C63(ref w, _MyNullableReadOnlyMemoryInt,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location5622*/if (updateStoredBuffer)
                                    {
                                        _MyNullableReadOnlyMemoryInt_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location5623*/startOfObjectPosition = writer.Position;
                                    /*Location5624*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyReadOnlyMemoryByte_Accessed)
                                    {
                                        var deserialized = MyReadOnlyMemoryByte;
                                    }
                                    /*Location5625*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyReadOnlyMemoryByte, isBelievedDirty: _MyReadOnlyMemoryByte_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyReadOnlyMemoryByte_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyReadOnlyMemoryByte_ByteIndex, _MyReadOnlyMemoryByte_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_ReadOnlyMemory_Gbyte_g(ref w, _MyReadOnlyMemoryByte,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location5626*/if (updateStoredBuffer)
                                    {
                                        _MyReadOnlyMemoryByte_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location5627*/startOfObjectPosition = writer.Position;
                                    /*Location5628*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyReadOnlyMemoryChar_Accessed)
                                    {
                                        var deserialized = MyReadOnlyMemoryChar;
                                    }
                                    /*Location5629*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyReadOnlyMemoryChar, isBelievedDirty: _MyReadOnlyMemoryChar_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyReadOnlyMemoryChar_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyReadOnlyMemoryChar_ByteIndex, _MyReadOnlyMemoryChar_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_ReadOnlyMemory_Gchar_g(ref w, _MyReadOnlyMemoryChar,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location5630*/if (updateStoredBuffer)
                                    {
                                        _MyReadOnlyMemoryChar_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location5631*/startOfObjectPosition = writer.Position;
                                    /*Location5632*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyReadOnlyMemoryInt_Accessed)
                                    {
                                        var deserialized = MyReadOnlyMemoryInt;
                                    }
                                    /*Location5633*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyReadOnlyMemoryInt, isBelievedDirty: _MyReadOnlyMemoryInt_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyReadOnlyMemoryInt_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyReadOnlyMemoryInt_ByteIndex, _MyReadOnlyMemoryInt_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_ReadOnlyMemory_Gint_g(ref w, _MyReadOnlyMemoryInt,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location5634*/if (updateStoredBuffer)
                                    {
                                        _MyReadOnlyMemoryInt_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location5635*/startOfObjectPosition = writer.Position;
                                    /*Location5636*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyReadOnlySpanByte_Accessed)
                                    {
                                        var deserialized = MyReadOnlySpanByte;
                                    }
                                    /*Location5637*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyReadOnlySpanByte, isBelievedDirty: _MyReadOnlySpanByte_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyReadOnlySpanByte_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyReadOnlySpanByte_ByteIndex, _MyReadOnlySpanByte_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_ReadOnlySpan_Gbyte_g(ref w, _MyReadOnlySpanByte.Span,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location5638*/if (updateStoredBuffer)
                                    {
                                        _MyReadOnlySpanByte_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location5639*/startOfObjectPosition = writer.Position;
                                    /*Location5640*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyReadOnlySpanChar_Accessed)
                                    {
                                        var deserialized = MyReadOnlySpanChar;
                                    }
                                    /*Location5641*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyReadOnlySpanChar, isBelievedDirty: _MyReadOnlySpanChar_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyReadOnlySpanChar_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyReadOnlySpanChar_ByteIndex, _MyReadOnlySpanChar_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_ReadOnlySpan_Gchar_g(ref w, MemoryMarshal.Cast<byte, char>(_MyReadOnlySpanChar.Span),
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location5642*/if (updateStoredBuffer)
                                    {
                                        _MyReadOnlySpanChar_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location5643*/startOfObjectPosition = writer.Position;
                                    /*Location5644*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyReadOnlySpanLong_Accessed)
                                    {
                                        var deserialized = MyReadOnlySpanLong;
                                    }
                                    /*Location5645*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyReadOnlySpanLong, isBelievedDirty: _MyReadOnlySpanLong_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyReadOnlySpanLong_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyReadOnlySpanLong_ByteIndex, _MyReadOnlySpanLong_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_ReadOnlySpan_Glong_g(ref w, MemoryMarshal.Cast<byte, long>(_MyReadOnlySpanLong.Span),
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location5646*/if (updateStoredBuffer)
                                    {
                                        _MyReadOnlySpanLong_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location5647*/if (updateStoredBuffer)
                                    {
                                        /*Location5648*/_SpanAndMemory_EndByteIndex = writer.Position - startPosition;
                                        /*Location5649*/}
                                        /*Location5650*/}
                                        /*Location5651*/
                                        /* Conversion of supported collections and tuples */
                                        /*Location5652*/
                                        private static Memory<byte> ConvertFromBytes_Memory_Gbyte_g(LazinatorMemory storage)
                                        {
                                            /*Location5653*/return storage.Memory.ToArray();
                                        }/*Location5654*/
                                        
                                        private static void ConvertToBytes_Memory_Gbyte_g(ref BinaryBufferWriter writer, Memory<byte> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            /*Location5655*/writer.Write(itemToConvert.Span);
                                        }
                                        /*Location5656*/
                                        private static Memory<byte> CloneOrChange_Memory_Gbyte_g(Memory<byte> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            int collectionLength = itemToClone.Length;
                                            Memory<byte> collection = new Memory<byte>(new byte[collectionLength]);
                                            var collectionAsSpan = collection.Span;
                                            var itemToCloneSpan = itemToClone.Span;
                                            int itemToCloneCount = itemToCloneSpan.Length;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                var itemCopied = (byte) itemToCloneSpan[itemIndex];
                                                collectionAsSpan[itemIndex] = itemCopied;
                                            }
                                            return collection;
                                        }
                                        /*Location5657*/
                                        private static Memory<int> ConvertFromBytes_Memory_Gint_g(LazinatorMemory storage)
                                        {
                                            ReadOnlySpan<byte> span = storage.Span;
                                            
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            Memory<int> collection = new Memory<int>(new int[collectionLength]);
                                            var collectionAsSpan = collection.Span;
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int item = span.ToDecompressedInt(ref bytesSoFar);
                                                collectionAsSpan[itemIndex] = item;
                                            }
                                            
                                            return collection;
                                        }/*Location5658*/
                                        
                                        private static void ConvertToBytes_Memory_Gint_g(ref BinaryBufferWriter writer, Memory<int> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
                                            var itemToConvertSpan = itemToConvert.Span;
                                            int itemToConvertCount = itemToConvertSpan.Length;
                                            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                            {
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvertSpan[itemIndex]);
                                            }
                                        }
                                        /*Location5659*/
                                        private static Memory<int> CloneOrChange_Memory_Gint_g(Memory<int> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            int collectionLength = itemToClone.Length;
                                            Memory<int> collection = new Memory<int>(new int[collectionLength]);
                                            var collectionAsSpan = collection.Span;
                                            var itemToCloneSpan = itemToClone.Span;
                                            int itemToCloneCount = itemToCloneSpan.Length;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                var itemCopied = (int) itemToCloneSpan[itemIndex];
                                                collectionAsSpan[itemIndex] = itemCopied;
                                            }
                                            return collection;
                                        }
                                        /*Location5660*/
                                        private static Memory<byte>? ConvertFromBytes_Memory_Gbyte_g_C63(LazinatorMemory storage)
                                        {
                                            /*Location5661*/int index = 0;
                                            bool isNull = storage.ReadOnlySpan.ToBoolean(ref index);
                                            if (isNull)
                                            {
                                                return null;
                                            }
                                            return storage.Memory.Slice(1).ToArray();
                                        }/*Location5662*/
                                        
                                        private static void ConvertToBytes_Memory_Gbyte_g_C63(ref BinaryBufferWriter writer, Memory<byte>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            /*Location5663*/if (itemToConvert == null)
                                            {
                                                writer.Write((bool)true);
                                                return;
                                            }
                                            writer.Write((bool)false);
                                            writer.Write(itemToConvert.Value.Span);
                                        }
                                        /*Location5664*/
                                        private static Memory<byte>? CloneOrChange_Memory_Gbyte_g_C63(Memory<byte>? itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            if (itemToClone == null)
                                            {
                                                return default;
                                            }
                                            
                                            int collectionLength = itemToClone.Value.Length;
                                            Memory<byte> collection = new Memory<byte>(new byte[collectionLength]);
                                            var collectionAsSpan = collection.Span;
                                            var itemToCloneSpan = itemToClone.Value.Span;
                                            int itemToCloneCount = itemToCloneSpan.Length;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                var itemCopied = (byte) itemToCloneSpan[itemIndex];
                                                collectionAsSpan[itemIndex] = itemCopied;
                                            }
                                            return collection;
                                        }
                                        /*Location5665*/
                                        private static Memory<int>? ConvertFromBytes_Memory_Gint_g_C63(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default(Memory<int>?);
                                            }
                                            ReadOnlySpan<byte> span = storage.Span;
                                            
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            Memory<int> collection = new Memory<int>(new int[collectionLength]);
                                            var collectionAsSpan = collection.Span;
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int item = span.ToDecompressedInt(ref bytesSoFar);
                                                collectionAsSpan[itemIndex] = item;
                                            }
                                            
                                            return collection;
                                        }/*Location5666*/
                                        
                                        private static void ConvertToBytes_Memory_Gint_g_C63(ref BinaryBufferWriter writer, Memory<int>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == null)
                                            {
                                                return;
                                            }
                                            ConvertToBytes_Memory_Gint_g(ref writer, itemToConvert.Value, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                        }
                                        /*Location5667*/
                                        private static Memory<int>? CloneOrChange_Memory_Gint_g_C63(Memory<int>? itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            if (itemToClone == null)
                                            {
                                                return default;
                                            }
                                            
                                            int collectionLength = itemToClone.Value.Length;
                                            Memory<int> collection = new Memory<int>(new int[collectionLength]);
                                            var collectionAsSpan = collection.Span;
                                            var itemToCloneSpan = itemToClone.Value.Span;
                                            int itemToCloneCount = itemToCloneSpan.Length;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                var itemCopied = (int) itemToCloneSpan[itemIndex];
                                                collectionAsSpan[itemIndex] = itemCopied;
                                            }
                                            return collection;
                                        }
                                        /*Location5668*/
                                        private static ReadOnlyMemory<int>? ConvertFromBytes_ReadOnlyMemory_Gint_g_C63(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default(ReadOnlyMemory<int>?);
                                            }
                                            ReadOnlySpan<byte> span = storage.Span;
                                            
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            Memory<int> collection = new Memory<int>(new int[collectionLength]);
                                            var collectionAsSpan = collection.Span;
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int item = span.ToDecompressedInt(ref bytesSoFar);
                                                collectionAsSpan[itemIndex] = item;
                                            }
                                            
                                            return collection;
                                        }/*Location5669*/
                                        
                                        private static void ConvertToBytes_ReadOnlyMemory_Gint_g_C63(ref BinaryBufferWriter writer, ReadOnlyMemory<int>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == null)
                                            {
                                                return;
                                            }
                                            ConvertToBytes_ReadOnlyMemory_Gint_g(ref writer, itemToConvert.Value, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                        }
                                        /*Location5670*/
                                        private static ReadOnlyMemory<int>? CloneOrChange_ReadOnlyMemory_Gint_g_C63(ReadOnlyMemory<int>? itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            if (itemToClone == null)
                                            {
                                                return default;
                                            }
                                            
                                            int collectionLength = itemToClone.Value.Length;
                                            Memory<int> collection = new Memory<int>(new int[collectionLength]);
                                            var collectionAsSpan = collection.Span;
                                            var itemToCloneSpan = itemToClone.Value.Span;
                                            int itemToCloneCount = itemToCloneSpan.Length;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                var itemCopied = (int) itemToCloneSpan[itemIndex];
                                                collectionAsSpan[itemIndex] = itemCopied;
                                            }
                                            return collection;
                                        }
                                        /*Location5671*/
                                        private static ReadOnlyMemory<byte> ConvertFromBytes_ReadOnlyMemory_Gbyte_g(LazinatorMemory storage)
                                        {
                                            /*Location5672*/return storage.Memory.ToArray();
                                        }/*Location5673*/
                                        
                                        private static void ConvertToBytes_ReadOnlyMemory_Gbyte_g(ref BinaryBufferWriter writer, ReadOnlyMemory<byte> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            /*Location5674*/writer.Write(itemToConvert.Span);
                                        }
                                        /*Location5675*/
                                        private static ReadOnlyMemory<byte> CloneOrChange_ReadOnlyMemory_Gbyte_g(ReadOnlyMemory<byte> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            int collectionLength = itemToClone.Length;
                                            Memory<byte> collection = new Memory<byte>(new byte[collectionLength]);
                                            var collectionAsSpan = collection.Span;
                                            var itemToCloneSpan = itemToClone.Span;
                                            int itemToCloneCount = itemToCloneSpan.Length;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                var itemCopied = (byte) itemToCloneSpan[itemIndex];
                                                collectionAsSpan[itemIndex] = itemCopied;
                                            }
                                            return collection;
                                        }
                                        /*Location5676*/
                                        private static ReadOnlyMemory<char> ConvertFromBytes_ReadOnlyMemory_Gchar_g(LazinatorMemory storage)
                                        {
                                            ReadOnlySpan<byte> span = storage.Span;
                                            
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            Memory<char> collection = new Memory<char>(new char[collectionLength]);
                                            var collectionAsSpan = collection.Span;
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                char item = span.ToChar(ref bytesSoFar);
                                                collectionAsSpan[itemIndex] = item;
                                            }
                                            
                                            return collection;
                                        }/*Location5677*/
                                        
                                        private static void ConvertToBytes_ReadOnlyMemory_Gchar_g(ref BinaryBufferWriter writer, ReadOnlyMemory<char> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
                                            var itemToConvertSpan = itemToConvert.Span;
                                            int itemToConvertCount = itemToConvertSpan.Length;
                                            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                            {
                                                EncodeCharAndString.WriteCharInTwoBytes(ref writer, itemToConvertSpan[itemIndex]);
                                            }
                                        }
                                        /*Location5678*/
                                        private static ReadOnlyMemory<char> CloneOrChange_ReadOnlyMemory_Gchar_g(ReadOnlyMemory<char> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            int collectionLength = itemToClone.Length;
                                            Memory<char> collection = new Memory<char>(new char[collectionLength]);
                                            var collectionAsSpan = collection.Span;
                                            var itemToCloneSpan = itemToClone.Span;
                                            int itemToCloneCount = itemToCloneSpan.Length;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                var itemCopied = (char) itemToCloneSpan[itemIndex];
                                                collectionAsSpan[itemIndex] = itemCopied;
                                            }
                                            return collection;
                                        }
                                        /*Location5679*/
                                        private static ReadOnlyMemory<int> ConvertFromBytes_ReadOnlyMemory_Gint_g(LazinatorMemory storage)
                                        {
                                            ReadOnlySpan<byte> span = storage.Span;
                                            
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            Memory<int> collection = new Memory<int>(new int[collectionLength]);
                                            var collectionAsSpan = collection.Span;
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int item = span.ToDecompressedInt(ref bytesSoFar);
                                                collectionAsSpan[itemIndex] = item;
                                            }
                                            
                                            return collection;
                                        }/*Location5680*/
                                        
                                        private static void ConvertToBytes_ReadOnlyMemory_Gint_g(ref BinaryBufferWriter writer, ReadOnlyMemory<int> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
                                            var itemToConvertSpan = itemToConvert.Span;
                                            int itemToConvertCount = itemToConvertSpan.Length;
                                            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                            {
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvertSpan[itemIndex]);
                                            }
                                        }
                                        /*Location5681*/
                                        private static ReadOnlyMemory<int> CloneOrChange_ReadOnlyMemory_Gint_g(ReadOnlyMemory<int> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            int collectionLength = itemToClone.Length;
                                            Memory<int> collection = new Memory<int>(new int[collectionLength]);
                                            var collectionAsSpan = collection.Span;
                                            var itemToCloneSpan = itemToClone.Span;
                                            int itemToCloneCount = itemToCloneSpan.Length;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                var itemCopied = (int) itemToCloneSpan[itemIndex];
                                                collectionAsSpan[itemIndex] = itemCopied;
                                            }
                                            return collection;
                                        }
                                        /*Location5682*/
                                        private static void ConvertToBytes_ReadOnlySpan_Gbyte_g(ref BinaryBufferWriter writer, ReadOnlySpan<byte> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            ReadOnlySpan<byte> toConvert = (itemToConvert);
                                            for (int i = 0; i < toConvert.Length; i++)
                                            {
                                                writer.Write(toConvert[i]);
                                            }
                                        }
                                        /*Location5683*/private static ReadOnlySpan<byte> CloneOrChange_ReadOnlySpan_Gbyte_g(ReadOnlySpan<byte> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            var clone = new Span<byte>(new byte[itemToClone.Length * sizeof(byte)]);
                                            itemToClone.CopyTo(clone);
                                            return clone;
                                        }
                                        /*Location5684*/
                                        private static void ConvertToBytes_ReadOnlySpan_Gchar_g(ref BinaryBufferWriter writer, ReadOnlySpan<char> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            ReadOnlySpan<byte> toConvert = MemoryMarshal.Cast<char, byte>(itemToConvert);
                                            for (int i = 0; i < toConvert.Length; i++)
                                            {
                                                writer.Write(toConvert[i]);
                                            }
                                        }
                                        /*Location5685*/private static ReadOnlySpan<char> CloneOrChange_ReadOnlySpan_Gchar_g(ReadOnlySpan<char> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            var clone = new Span<byte>(new byte[itemToClone.Length * sizeof(char)]);
                                            MemoryMarshal.Cast<char, byte>(itemToClone).CopyTo(clone);
                                            return MemoryMarshal.Cast<byte, char>(clone);
                                        }
                                        /*Location5686*/
                                        private static void ConvertToBytes_ReadOnlySpan_Glong_g(ref BinaryBufferWriter writer, ReadOnlySpan<long> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            ReadOnlySpan<byte> toConvert = MemoryMarshal.Cast<long, byte>(itemToConvert);
                                            for (int i = 0; i < toConvert.Length; i++)
                                            {
                                                writer.Write(toConvert[i]);
                                            }
                                        }
                                        /*Location5687*/private static ReadOnlySpan<long> CloneOrChange_ReadOnlySpan_Glong_g(ReadOnlySpan<long> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            var clone = new Span<byte>(new byte[itemToClone.Length * sizeof(long)]);
                                            MemoryMarshal.Cast<long, byte>(itemToClone).CopyTo(clone);
                                            return MemoryMarshal.Cast<byte, long>(clone);
                                        }
                                        /*Location5688*/
                                    }
                                }
