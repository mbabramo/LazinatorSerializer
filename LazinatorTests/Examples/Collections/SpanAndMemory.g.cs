//cb881a80-803d-977e-a1cc-9e37a766c7a3
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.393
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.Collections
{
    using Lazinator.Attributes;
    using Lazinator.Buffers;
    using Lazinator.Core;
    using Lazinator.Exceptions;
    using Lazinator.Support;
    using static Lazinator.Buffers.WriteUncompressedPrimitives;
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class SpanAndMemory : ILazinator
    {
        public bool IsStruct => false;
        
        /* Property definitions */
        
        protected int _MyMemoryByte_ByteIndex;
        protected int _MyMemoryInt_ByteIndex;
        protected int _MyNullableMemoryByte_ByteIndex;
        protected int _MyNullableMemoryInt_ByteIndex;
        protected int _MyNullableReadOnlyMemoryInt_ByteIndex;
        protected int _MyReadOnlyMemoryByte_ByteIndex;
        protected int _MyReadOnlyMemoryChar_ByteIndex;
        protected int _MyReadOnlyMemoryInt_ByteIndex;
        protected int _MyReadOnlySpanByte_ByteIndex;
        protected int _MyReadOnlySpanChar_ByteIndex;
        protected int _MyReadOnlySpanLong_ByteIndex;
        protected virtual int _MyMemoryByte_ByteLength => _MyMemoryInt_ByteIndex - _MyMemoryByte_ByteIndex;
        protected virtual int _MyMemoryInt_ByteLength => _MyNullableMemoryByte_ByteIndex - _MyMemoryInt_ByteIndex;
        protected virtual int _MyNullableMemoryByte_ByteLength => _MyNullableMemoryInt_ByteIndex - _MyNullableMemoryByte_ByteIndex;
        protected virtual int _MyNullableMemoryInt_ByteLength => _MyNullableReadOnlyMemoryInt_ByteIndex - _MyNullableMemoryInt_ByteIndex;
        protected virtual int _MyNullableReadOnlyMemoryInt_ByteLength => _MyReadOnlyMemoryByte_ByteIndex - _MyNullableReadOnlyMemoryInt_ByteIndex;
        protected virtual int _MyReadOnlyMemoryByte_ByteLength => _MyReadOnlyMemoryChar_ByteIndex - _MyReadOnlyMemoryByte_ByteIndex;
        protected virtual int _MyReadOnlyMemoryChar_ByteLength => _MyReadOnlyMemoryInt_ByteIndex - _MyReadOnlyMemoryChar_ByteIndex;
        protected virtual int _MyReadOnlyMemoryInt_ByteLength => _MyReadOnlySpanByte_ByteIndex - _MyReadOnlyMemoryInt_ByteIndex;
        protected virtual int _MyReadOnlySpanByte_ByteLength => _MyReadOnlySpanChar_ByteIndex - _MyReadOnlySpanByte_ByteIndex;
        protected virtual int _MyReadOnlySpanChar_ByteLength => _MyReadOnlySpanLong_ByteIndex - _MyReadOnlySpanChar_ByteIndex;
        private int _SpanAndMemory_EndByteIndex;
        protected virtual  int _MyReadOnlySpanLong_ByteLength => _SpanAndMemory_EndByteIndex - _MyReadOnlySpanLong_ByteIndex;
        protected virtual int _OverallEndByteIndex => _SpanAndMemory_EndByteIndex;
        
        
        protected Memory<Byte> _MyMemoryByte;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Memory<Byte> MyMemoryByte
        {
            get
            {
                if (!_MyMemoryByte_Accessed)
                {
                    LazinateMyMemoryByte();
                } 
                return _MyMemoryByte;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyMemoryByte = value;
                _MyMemoryByte_Accessed = true;
            }
        }
        protected bool _MyMemoryByte_Accessed;
        private void LazinateMyMemoryByte()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyMemoryByte = default(Memory<Byte>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyMemoryByte_ByteIndex, _MyMemoryByte_ByteLength, true, false, null);
                _MyMemoryByte = ConvertFromBytes_Memory_Gbyte_g(childData);
            }
            _MyMemoryByte_Accessed = true;
        }
        
        
        protected Memory<Int32> _MyMemoryInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Memory<Int32> MyMemoryInt
        {
            get
            {
                if (!_MyMemoryInt_Accessed)
                {
                    LazinateMyMemoryInt();
                } 
                return _MyMemoryInt;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyMemoryInt = value;
                _MyMemoryInt_Accessed = true;
            }
        }
        protected bool _MyMemoryInt_Accessed;
        private void LazinateMyMemoryInt()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyMemoryInt = default(Memory<Int32>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyMemoryInt_ByteIndex, _MyMemoryInt_ByteLength, true, false, null);
                _MyMemoryInt = ConvertFromBytes_Memory_Gint_g(childData);
            }
            _MyMemoryInt_Accessed = true;
        }
        
        
        protected Memory<Byte>? _MyNullableMemoryByte;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Memory<Byte>? MyNullableMemoryByte
        {
            get
            {
                if (!_MyNullableMemoryByte_Accessed)
                {
                    LazinateMyNullableMemoryByte();
                }
                IsDirty = true; 
                return _MyNullableMemoryByte;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyNullableMemoryByte = value;
                _MyNullableMemoryByte_Accessed = true;
            }
        }
        protected bool _MyNullableMemoryByte_Accessed;
        private void LazinateMyNullableMemoryByte()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyNullableMemoryByte = default(Memory<Byte>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyNullableMemoryByte_ByteIndex, _MyNullableMemoryByte_ByteLength, true, false, null);
                _MyNullableMemoryByte = ConvertFromBytes_Memory_Gbyte_g_n(childData);
            }
            _MyNullableMemoryByte_Accessed = true;
        }
        
        
        protected Memory<Int32>? _MyNullableMemoryInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Memory<Int32>? MyNullableMemoryInt
        {
            get
            {
                if (!_MyNullableMemoryInt_Accessed)
                {
                    LazinateMyNullableMemoryInt();
                }
                IsDirty = true; 
                return _MyNullableMemoryInt;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyNullableMemoryInt = value;
                _MyNullableMemoryInt_Accessed = true;
            }
        }
        protected bool _MyNullableMemoryInt_Accessed;
        private void LazinateMyNullableMemoryInt()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyNullableMemoryInt = default(Memory<Int32>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyNullableMemoryInt_ByteIndex, _MyNullableMemoryInt_ByteLength, true, false, null);
                _MyNullableMemoryInt = ConvertFromBytes_Memory_Gint_g_n(childData);
            }
            _MyNullableMemoryInt_Accessed = true;
        }
        
        
        protected ReadOnlyMemory<Int32>? _MyNullableReadOnlyMemoryInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlyMemory<Int32>? MyNullableReadOnlyMemoryInt
        {
            get
            {
                if (!_MyNullableReadOnlyMemoryInt_Accessed)
                {
                    LazinateMyNullableReadOnlyMemoryInt();
                }
                IsDirty = true; 
                return _MyNullableReadOnlyMemoryInt;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyNullableReadOnlyMemoryInt = value;
                _MyNullableReadOnlyMemoryInt_Accessed = true;
            }
        }
        protected bool _MyNullableReadOnlyMemoryInt_Accessed;
        private void LazinateMyNullableReadOnlyMemoryInt()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyNullableReadOnlyMemoryInt = default(ReadOnlyMemory<Int32>?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyNullableReadOnlyMemoryInt_ByteIndex, _MyNullableReadOnlyMemoryInt_ByteLength, true, false, null);
                _MyNullableReadOnlyMemoryInt = ConvertFromBytes_ReadOnlyMemory_Gint_g_n(childData);
            }
            _MyNullableReadOnlyMemoryInt_Accessed = true;
        }
        
        
        protected ReadOnlyMemory<Byte> _MyReadOnlyMemoryByte;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlyMemory<Byte> MyReadOnlyMemoryByte
        {
            get
            {
                if (!_MyReadOnlyMemoryByte_Accessed)
                {
                    LazinateMyReadOnlyMemoryByte();
                } 
                return _MyReadOnlyMemoryByte;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyReadOnlyMemoryByte = value;
                _MyReadOnlyMemoryByte_Accessed = true;
            }
        }
        protected bool _MyReadOnlyMemoryByte_Accessed;
        private void LazinateMyReadOnlyMemoryByte()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyReadOnlyMemoryByte = default(ReadOnlyMemory<Byte>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyReadOnlyMemoryByte_ByteIndex, _MyReadOnlyMemoryByte_ByteLength, true, false, null);
                _MyReadOnlyMemoryByte = ConvertFromBytes_ReadOnlyMemory_Gbyte_g(childData);
            }
            _MyReadOnlyMemoryByte_Accessed = true;
        }
        
        
        protected ReadOnlyMemory<Char> _MyReadOnlyMemoryChar;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlyMemory<Char> MyReadOnlyMemoryChar
        {
            get
            {
                if (!_MyReadOnlyMemoryChar_Accessed)
                {
                    LazinateMyReadOnlyMemoryChar();
                } 
                return _MyReadOnlyMemoryChar;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyReadOnlyMemoryChar = value;
                _MyReadOnlyMemoryChar_Accessed = true;
            }
        }
        protected bool _MyReadOnlyMemoryChar_Accessed;
        private void LazinateMyReadOnlyMemoryChar()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyReadOnlyMemoryChar = default(ReadOnlyMemory<Char>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyReadOnlyMemoryChar_ByteIndex, _MyReadOnlyMemoryChar_ByteLength, true, false, null);
                _MyReadOnlyMemoryChar = ConvertFromBytes_ReadOnlyMemory_Gchar_g(childData);
            }
            _MyReadOnlyMemoryChar_Accessed = true;
        }
        
        
        protected ReadOnlyMemory<Int32> _MyReadOnlyMemoryInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlyMemory<Int32> MyReadOnlyMemoryInt
        {
            get
            {
                if (!_MyReadOnlyMemoryInt_Accessed)
                {
                    LazinateMyReadOnlyMemoryInt();
                } 
                return _MyReadOnlyMemoryInt;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyReadOnlyMemoryInt = value;
                _MyReadOnlyMemoryInt_Accessed = true;
            }
        }
        protected bool _MyReadOnlyMemoryInt_Accessed;
        private void LazinateMyReadOnlyMemoryInt()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyReadOnlyMemoryInt = default(ReadOnlyMemory<Int32>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyReadOnlyMemoryInt_ByteIndex, _MyReadOnlyMemoryInt_ByteLength, true, false, null);
                _MyReadOnlyMemoryInt = ConvertFromBytes_ReadOnlyMemory_Gint_g(childData);
            }
            _MyReadOnlyMemoryInt_Accessed = true;
        }
        
        private ReadOnlyMemory<byte> _MyReadOnlySpanByte;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlySpan<Byte> MyReadOnlySpanByte
        {
            get
            {
                if (!_MyReadOnlySpanByte_Accessed)
                {
                    LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyReadOnlySpanByte_ByteIndex, _MyReadOnlySpanByte_ByteLength, true, false, null);
                    return childData.InitialMemory.Span;
                }
                return _MyReadOnlySpanByte.Span;
            }
            set
            {
                IsDirty = true;
                _MyReadOnlySpanByte = new ReadOnlyMemory<byte>((value).ToArray());
                _MyReadOnlySpanByte_Accessed = true;
                
            }
        }
        protected bool _MyReadOnlySpanByte_Accessed;
        private ReadOnlyMemory<byte> _MyReadOnlySpanChar;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlySpan<Char> MyReadOnlySpanChar
        {
            get
            {
                if (!_MyReadOnlySpanChar_Accessed)
                {
                    LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyReadOnlySpanChar_ByteIndex, _MyReadOnlySpanChar_ByteLength, true, false, null);
                    return MemoryMarshal.Cast<byte, char>(childData.InitialMemory.Span);
                }
                return MemoryMarshal.Cast<byte, char>(_MyReadOnlySpanChar.Span);
            }
            set
            {
                IsDirty = true;
                _MyReadOnlySpanChar = new ReadOnlyMemory<byte>(MemoryMarshal.Cast<char, byte>(value).ToArray());
                _MyReadOnlySpanChar_Accessed = true;
                
            }
        }
        protected bool _MyReadOnlySpanChar_Accessed;
        private ReadOnlyMemory<byte> _MyReadOnlySpanLong;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public ReadOnlySpan<Int64> MyReadOnlySpanLong
        {
            get
            {
                if (!_MyReadOnlySpanLong_Accessed)
                {
                    LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyReadOnlySpanLong_ByteIndex, _MyReadOnlySpanLong_ByteLength, true, false, null);
                    return MemoryMarshal.Cast<byte, long>(childData.InitialMemory.Span);
                }
                return MemoryMarshal.Cast<byte, long>(_MyReadOnlySpanLong.Span);
            }
            set
            {
                IsDirty = true;
                _MyReadOnlySpanLong = new ReadOnlyMemory<byte>(MemoryMarshal.Cast<long, byte>(value).ToArray());
                _MyReadOnlySpanLong_Accessed = true;
                
            }
        }
        protected bool _MyReadOnlySpanLong_Accessed;
        
        /* Serialization, deserialization, and object relationships */
        
        public SpanAndMemory(IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren)
        {
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public SpanAndMemory(LazinatorMemory serializedBytes, ILazinator parent = null, IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren, int? lazinatorObjectVersion = null)
        {
            if (lazinatorObjectVersion != null)
            {
                LazinatorObjectVersion = (int) lazinatorObjectVersion;
            }
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorMemoryStorage.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        protected virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        protected virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialMemory.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt32(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt32(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return _OverallEndByteIndex;
        }
        
        public virtual void SerializeLazinator()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorMemoryStorage.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                LazinatorMemoryStorage.WriteToBinaryBuffer(ref writer);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            LazinatorMemoryStorage.WriteToBinaryBuffer(ref writer);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeToExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            SpanAndMemory clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new SpanAndMemory(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (SpanAndMemory)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, false, this);
                clone = new SpanAndMemory(bytes);
            }
            return clone;
        }
        
        protected virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            SpanAndMemory typedClone = (SpanAndMemory) clone;
            typedClone.MyMemoryByte = CloneOrChange_Memory_Gbyte_g(MyMemoryByte, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyMemoryInt = CloneOrChange_Memory_Gint_g(MyMemoryInt, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyNullableMemoryByte = CloneOrChange_Memory_Gbyte_g_n(MyNullableMemoryByte, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyNullableMemoryInt = CloneOrChange_Memory_Gint_g_n(MyNullableMemoryInt, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyNullableReadOnlyMemoryInt = CloneOrChange_ReadOnlyMemory_Gint_g_n(MyNullableReadOnlyMemoryInt, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyReadOnlyMemoryByte = CloneOrChange_ReadOnlyMemory_Gbyte_g(MyReadOnlyMemoryByte, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyReadOnlyMemoryChar = CloneOrChange_ReadOnlyMemory_Gchar_g(MyReadOnlyMemoryChar, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyReadOnlyMemoryInt = CloneOrChange_ReadOnlyMemory_Gint_g(MyReadOnlyMemoryInt, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyReadOnlySpanByte = CloneOrChange_ReadOnlySpan_Gbyte_g(MyReadOnlySpanByte, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyReadOnlySpanChar = CloneOrChange_ReadOnlySpan_Gchar_g(MyReadOnlySpanChar, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyReadOnlySpanLong = CloneOrChange_ReadOnlySpan_Glong_g(MyReadOnlySpanLong, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            yield break;
        }
        
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            yield return ("MyMemoryByte", (object)MyMemoryByte);
            yield return ("MyMemoryInt", (object)MyMemoryInt);
            yield return ("MyNullableMemoryByte", (object)MyNullableMemoryByte);
            yield return ("MyNullableMemoryInt", (object)MyNullableMemoryInt);
            yield return ("MyNullableReadOnlyMemoryInt", (object)MyNullableReadOnlyMemoryInt);
            yield return ("MyReadOnlyMemoryByte", (object)MyReadOnlyMemoryByte);
            yield return ("MyReadOnlyMemoryChar", (object)MyReadOnlyMemoryChar);
            yield return ("MyReadOnlyMemoryInt", (object)MyReadOnlyMemoryInt);
            yield return ("MyReadOnlySpanByte", (object)MyReadOnlySpanByte.ToString());
            yield return ("MyReadOnlySpanChar", (object)MyReadOnlySpanChar.ToString());
            yield return ("MyReadOnlySpanLong", (object)MyReadOnlySpanLong.ToString());
            yield break;
        }
        
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyMemoryByte = MyMemoryByte;
            }
            if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyMemoryInt = MyMemoryInt;
            }
            if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyNullableMemoryByte = MyNullableMemoryByte;
            }
            if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyNullableMemoryInt = MyNullableMemoryInt;
            }
            if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyNullableReadOnlyMemoryInt = MyNullableReadOnlyMemoryInt;
            }
            if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyReadOnlyMemoryByte = MyReadOnlyMemoryByte;
            }
            if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyReadOnlyMemoryChar = MyReadOnlyMemoryChar;
            }
            if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyReadOnlyMemoryInt = MyReadOnlyMemoryInt;
            }
            if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyReadOnlySpanByte = MyReadOnlySpanByte;
                if (!_MyReadOnlySpanByte_Accessed)
                {
                    MyReadOnlySpanByte = deserialized_MyReadOnlySpanByte;
                }
            }
            if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyReadOnlySpanChar = MyReadOnlySpanChar;
                if (!_MyReadOnlySpanChar_Accessed)
                {
                    MyReadOnlySpanChar = deserialized_MyReadOnlySpanChar;
                }
            }
            if (!exploreOnlyDeserializedChildren)
            {
                var deserialized_MyReadOnlySpanLong = MyReadOnlySpanLong;
                if (!_MyReadOnlySpanLong_Accessed)
                {
                    MyReadOnlySpanLong = deserialized_MyReadOnlySpanLong;
                }
            }
            if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        
        public virtual void FreeInMemoryObjects()
        {
            _MyMemoryByte = default;
            _MyMemoryInt = default;
            _MyNullableMemoryByte = default;
            _MyNullableMemoryInt = default;
            _MyNullableReadOnlyMemoryInt = default;
            _MyReadOnlyMemoryByte = default;
            _MyReadOnlyMemoryChar = default;
            _MyReadOnlyMemoryInt = default;
            _MyReadOnlySpanByte = default;
            _MyReadOnlySpanChar = default;
            _MyReadOnlySpanLong = default;
            _MyMemoryByte_Accessed = _MyMemoryInt_Accessed = _MyNullableMemoryByte_Accessed = _MyNullableMemoryInt_Accessed = _MyNullableReadOnlyMemoryInt_Accessed = _MyReadOnlyMemoryByte_Accessed = _MyReadOnlyMemoryChar_Accessed = _MyReadOnlyMemoryInt_Accessed = _MyReadOnlySpanByte_Accessed = _MyReadOnlySpanChar_Accessed = _MyReadOnlySpanLong_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1028;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        protected virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialMemory.Span;
            ConvertFromBytesForPrimitiveProperties(span, includeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            int lengthForLengths = 44;
            int totalChildrenSize = ConvertFromBytesForChildProperties(span, includeChildrenMode, serializedVersionNumber, bytesSoFar + lengthForLengths, ref bytesSoFar);
            bytesSoFar += totalChildrenSize;
        }
        
        protected virtual void ConvertFromBytesForPrimitiveProperties(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
        }
        
        protected virtual int ConvertFromBytesForChildProperties(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, int indexOfFirstChild, ref int bytesSoFar)
        {
            int totalChildrenBytes = 0;
            _MyMemoryByte_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _MyMemoryInt_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _MyNullableMemoryByte_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _MyNullableMemoryInt_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _MyNullableReadOnlyMemoryInt_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _MyReadOnlyMemoryByte_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _MyReadOnlyMemoryChar_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _MyReadOnlyMemoryInt_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _MyReadOnlySpanByte_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _MyReadOnlySpanChar_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _MyReadOnlySpanLong_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _SpanAndMemory_EndByteIndex = indexOfFirstChild + totalChildrenBytes;
            return totalChildrenBytes;
        }
        
        public virtual void SerializeToExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
            {
                updateStoredBuffer = false;
            }
            int startPosition = writer.ActiveMemoryPosition;
            WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
            if (updateStoredBuffer)
            {
                UpdateStoredBuffer(ref writer, startPosition, writer.ActiveMemoryPosition - startPosition, includeChildrenMode, false);
            }
        }
        
        public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
        {
            _IsDirty = false;
            if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                _DescendantIsDirty = false;
                if (updateDeserializedChildren)
                {
                    UpdateDeserializedChildren(ref writer, startPosition);
                }
                
            }
            else
            {
                ThrowHelper.ThrowCannotUpdateStoredBuffer();
            }
            
            var newBuffer = writer.Slice(startPosition, length);
            LazinatorMemoryStorage = newBuffer;
        }
        
        protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
        {
        }
        
        
        protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
        {
            int startPosition = writer.ActiveMemoryPosition;
            if (includeUniqueID)
            {
                if (!ContainsOpenGenericParameters)
                {
                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                }
                else
                {
                    WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                }
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
            writer.Write((byte)includeChildrenMode);
            // write properties
            
            
            int lengthForLengths = 44;
            
            int previousLengthsPosition = writer.SetLengthsPosition(lengthForLengths);
            WriteChildrenPropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, includeUniqueID, startPosition);
            writer.ResetLengthsPosition(previousLengthsPosition);
        }
        
        protected virtual void WritePrimitivePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
        {
        }
        
        protected virtual void WriteChildrenPropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID, int startOfObjectPosition)
        {
            int startOfChildPosition = 0;
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyMemoryByte_Accessed)
            {
                var deserialized = MyMemoryByte;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyMemoryByte, isBelievedDirty: _MyMemoryByte_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyMemoryByte_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyMemoryByte_ByteIndex, _MyMemoryByte_ByteLength, true, false, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
            ConvertToBytes_Memory_Gbyte_g(ref w, _MyMemoryByte,
            includeChildrenMode, v, updateStoredBuffer),
            writeLengthInByte: false);
            if (updateStoredBuffer)
            {
                _MyMemoryByte_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyMemoryInt_Accessed)
            {
                var deserialized = MyMemoryInt;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyMemoryInt, isBelievedDirty: _MyMemoryInt_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyMemoryInt_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyMemoryInt_ByteIndex, _MyMemoryInt_ByteLength, true, false, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
            ConvertToBytes_Memory_Gint_g(ref w, _MyMemoryInt,
            includeChildrenMode, v, updateStoredBuffer),
            writeLengthInByte: false);
            if (updateStoredBuffer)
            {
                _MyMemoryInt_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyNullableMemoryByte_Accessed)
            {
                var deserialized = MyNullableMemoryByte;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyNullableMemoryByte, isBelievedDirty: _MyNullableMemoryByte_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyNullableMemoryByte_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyNullableMemoryByte_ByteIndex, _MyNullableMemoryByte_ByteLength, true, false, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
            ConvertToBytes_Memory_Gbyte_g_n(ref w, _MyNullableMemoryByte,
            includeChildrenMode, v, updateStoredBuffer),
            writeLengthInByte: false);
            if (updateStoredBuffer)
            {
                _MyNullableMemoryByte_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyNullableMemoryInt_Accessed)
            {
                var deserialized = MyNullableMemoryInt;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyNullableMemoryInt, isBelievedDirty: _MyNullableMemoryInt_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyNullableMemoryInt_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyNullableMemoryInt_ByteIndex, _MyNullableMemoryInt_ByteLength, true, false, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
            ConvertToBytes_Memory_Gint_g_n(ref w, _MyNullableMemoryInt,
            includeChildrenMode, v, updateStoredBuffer),
            writeLengthInByte: false);
            if (updateStoredBuffer)
            {
                _MyNullableMemoryInt_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyNullableReadOnlyMemoryInt_Accessed)
            {
                var deserialized = MyNullableReadOnlyMemoryInt;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyNullableReadOnlyMemoryInt, isBelievedDirty: _MyNullableReadOnlyMemoryInt_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyNullableReadOnlyMemoryInt_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyNullableReadOnlyMemoryInt_ByteIndex, _MyNullableReadOnlyMemoryInt_ByteLength, true, false, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
            ConvertToBytes_ReadOnlyMemory_Gint_g_n(ref w, _MyNullableReadOnlyMemoryInt,
            includeChildrenMode, v, updateStoredBuffer),
            writeLengthInByte: false);
            if (updateStoredBuffer)
            {
                _MyNullableReadOnlyMemoryInt_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyReadOnlyMemoryByte_Accessed)
            {
                var deserialized = MyReadOnlyMemoryByte;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyReadOnlyMemoryByte, isBelievedDirty: _MyReadOnlyMemoryByte_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyReadOnlyMemoryByte_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyReadOnlyMemoryByte_ByteIndex, _MyReadOnlyMemoryByte_ByteLength, true, false, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
            ConvertToBytes_ReadOnlyMemory_Gbyte_g(ref w, _MyReadOnlyMemoryByte,
            includeChildrenMode, v, updateStoredBuffer),
            writeLengthInByte: false);
            if (updateStoredBuffer)
            {
                _MyReadOnlyMemoryByte_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyReadOnlyMemoryChar_Accessed)
            {
                var deserialized = MyReadOnlyMemoryChar;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyReadOnlyMemoryChar, isBelievedDirty: _MyReadOnlyMemoryChar_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyReadOnlyMemoryChar_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyReadOnlyMemoryChar_ByteIndex, _MyReadOnlyMemoryChar_ByteLength, true, false, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
            ConvertToBytes_ReadOnlyMemory_Gchar_g(ref w, _MyReadOnlyMemoryChar,
            includeChildrenMode, v, updateStoredBuffer),
            writeLengthInByte: false);
            if (updateStoredBuffer)
            {
                _MyReadOnlyMemoryChar_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyReadOnlyMemoryInt_Accessed)
            {
                var deserialized = MyReadOnlyMemoryInt;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyReadOnlyMemoryInt, isBelievedDirty: _MyReadOnlyMemoryInt_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyReadOnlyMemoryInt_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyReadOnlyMemoryInt_ByteIndex, _MyReadOnlyMemoryInt_ByteLength, true, false, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
            ConvertToBytes_ReadOnlyMemory_Gint_g(ref w, _MyReadOnlyMemoryInt,
            includeChildrenMode, v, updateStoredBuffer),
            writeLengthInByte: false);
            if (updateStoredBuffer)
            {
                _MyReadOnlyMemoryInt_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyReadOnlySpanByte_Accessed)
            {
                var deserialized = MyReadOnlySpanByte;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyReadOnlySpanByte, isBelievedDirty: _MyReadOnlySpanByte_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyReadOnlySpanByte_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyReadOnlySpanByte_ByteIndex, _MyReadOnlySpanByte_ByteLength, true, false, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
            ConvertToBytes_ReadOnlySpan_Gbyte_g(ref w, _MyReadOnlySpanByte.Span,
            includeChildrenMode, v, updateStoredBuffer),
            writeLengthInByte: false);
            if (updateStoredBuffer)
            {
                _MyReadOnlySpanByte_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyReadOnlySpanChar_Accessed)
            {
                var deserialized = MyReadOnlySpanChar;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyReadOnlySpanChar, isBelievedDirty: _MyReadOnlySpanChar_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyReadOnlySpanChar_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyReadOnlySpanChar_ByteIndex, _MyReadOnlySpanChar_ByteLength, true, false, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
            ConvertToBytes_ReadOnlySpan_Gchar_g(ref w, MemoryMarshal.Cast<byte, char>(_MyReadOnlySpanChar.Span),
            includeChildrenMode, v, updateStoredBuffer),
            writeLengthInByte: false);
            if (updateStoredBuffer)
            {
                _MyReadOnlySpanChar_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyReadOnlySpanLong_Accessed)
            {
                var deserialized = MyReadOnlySpanLong;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyReadOnlySpanLong, isBelievedDirty: _MyReadOnlySpanLong_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyReadOnlySpanLong_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyReadOnlySpanLong_ByteIndex, _MyReadOnlySpanLong_ByteLength, true, false, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
            ConvertToBytes_ReadOnlySpan_Glong_g(ref w, MemoryMarshal.Cast<byte, long>(_MyReadOnlySpanLong.Span),
            includeChildrenMode, v, updateStoredBuffer),
            writeLengthInByte: false);
            if (updateStoredBuffer)
            {
                _MyReadOnlySpanLong_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            if (updateStoredBuffer)
            {
                _SpanAndMemory_EndByteIndex = writer.ActiveMemoryPosition - startOfObjectPosition;
            }
        }
        
        /* Conversion of supported collections and tuples */
        
        private static Memory<Byte> ConvertFromBytes_Memory_Gbyte_g(LazinatorMemory storage)
        {
            return storage.Memory.ToArray();
        }
        
        private static void ConvertToBytes_Memory_Gbyte_g(ref BinaryBufferWriter writer, Memory<Byte> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            writer.Write(itemToConvert.Span);
        }
        
        private static Memory<Byte> CloneOrChange_Memory_Gbyte_g(Memory<Byte> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            int collectionLength = itemToClone.Length;
            Memory<Byte> collection = new Memory<Byte>(new byte[collectionLength]);
            var collectionAsSpan = collection.Span;
            var itemToCloneSpan = itemToClone.Span;
            int itemToCloneCount = itemToCloneSpan.Length;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                var itemCopied = (byte) itemToCloneSpan[itemIndex];
                collectionAsSpan[itemIndex] = itemCopied;
            }
            return collection;
        }
        
        private static Memory<Int32> ConvertFromBytes_Memory_Gint_g(LazinatorMemory storage)
        {
            ReadOnlySpan<byte> span = storage.InitialMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Memory<Int32> collection = new Memory<Int32>(new int[collectionLength]);
            var collectionAsSpan = collection.Span;
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int item = span.ToDecompressedInt32(ref bytesSoFar);
                collectionAsSpan[itemIndex] = item;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Memory_Gint_g(ref BinaryBufferWriter writer, Memory<Int32> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
            var itemToConvertSpan = itemToConvert.Span;
            int itemToConvertCount = itemToConvertSpan.Length;
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvertSpan[itemIndex]);
            }
        }
        
        private static Memory<Int32> CloneOrChange_Memory_Gint_g(Memory<Int32> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            int collectionLength = itemToClone.Length;
            Memory<Int32> collection = new Memory<Int32>(new int[collectionLength]);
            var collectionAsSpan = collection.Span;
            var itemToCloneSpan = itemToClone.Span;
            int itemToCloneCount = itemToCloneSpan.Length;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                var itemCopied = (int) itemToCloneSpan[itemIndex];
                collectionAsSpan[itemIndex] = itemCopied;
            }
            return collection;
        }
        
        private static Memory<Byte>? ConvertFromBytes_Memory_Gbyte_g_n(LazinatorMemory storage)
        {
            int index = 0;
            bool isNull = storage.InitialReadOnlyMemory.Span.ToBoolean(ref index);
            if (isNull)
            {
                return null;
            }
            ReadOnlySpan<byte> span = storage.InitialMemory.Span.Slice(1);
            return span.ToArray();
        }
        
        private static void ConvertToBytes_Memory_Gbyte_g_n(ref BinaryBufferWriter writer, Memory<Byte>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            if (itemToConvert == null)
            {
                writer.Write((bool)true);
                return;
            }
            writer.Write((bool)false);
            writer.Write(itemToConvert.Value.Span);
        }
        
        private static Memory<Byte>? CloneOrChange_Memory_Gbyte_g_n(Memory<Byte>? itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Value.Length;
            Memory<Byte> collection = new Memory<Byte>(new byte[collectionLength]);
            var collectionAsSpan = collection.Span;
            var itemToCloneSpan = itemToClone.Value.Span;
            int itemToCloneCount = itemToCloneSpan.Length;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                var itemCopied = (byte) itemToCloneSpan[itemIndex];
                collectionAsSpan[itemIndex] = itemCopied;
            }
            return collection;
        }
        
        private static Memory<Int32>? ConvertFromBytes_Memory_Gint_g_n(LazinatorMemory storage)
        {
            int index = 0;
            bool isNull = storage.InitialReadOnlyMemory.Span.ToBoolean(ref index);
            if (isNull)
            {
                return null;
            }
            ReadOnlySpan<byte> span = storage.InitialMemory.Span.Slice(1);
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Memory<Int32> collection = new Memory<Int32>(new int[collectionLength]);
            var collectionAsSpan = collection.Span;
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int item = span.ToDecompressedInt32(ref bytesSoFar);
                collectionAsSpan[itemIndex] = item;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_Memory_Gint_g_n(ref BinaryBufferWriter writer, Memory<Int32>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            if (itemToConvert == null)
            {
                writer.Write((bool)true);
                return;
            }
            writer.Write((bool)false);
            ConvertToBytes_Memory_Gint_g(ref writer, itemToConvert.Value, includeChildrenMode, verifyCleanness, updateStoredBuffer);
        }
        
        private static Memory<Int32>? CloneOrChange_Memory_Gint_g_n(Memory<Int32>? itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Value.Length;
            Memory<Int32> collection = new Memory<Int32>(new int[collectionLength]);
            var collectionAsSpan = collection.Span;
            var itemToCloneSpan = itemToClone.Value.Span;
            int itemToCloneCount = itemToCloneSpan.Length;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                var itemCopied = (int) itemToCloneSpan[itemIndex];
                collectionAsSpan[itemIndex] = itemCopied;
            }
            return collection;
        }
        
        private static ReadOnlyMemory<Int32>? ConvertFromBytes_ReadOnlyMemory_Gint_g_n(LazinatorMemory storage)
        {
            int index = 0;
            bool isNull = storage.InitialReadOnlyMemory.Span.ToBoolean(ref index);
            if (isNull)
            {
                return null;
            }
            ReadOnlySpan<byte> span = storage.InitialMemory.Span.Slice(1);
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Memory<Int32> collection = new Memory<Int32>(new int[collectionLength]);
            var collectionAsSpan = collection.Span;
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int item = span.ToDecompressedInt32(ref bytesSoFar);
                collectionAsSpan[itemIndex] = item;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_ReadOnlyMemory_Gint_g_n(ref BinaryBufferWriter writer, ReadOnlyMemory<Int32>? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            if (itemToConvert == null)
            {
                writer.Write((bool)true);
                return;
            }
            writer.Write((bool)false);
            ConvertToBytes_ReadOnlyMemory_Gint_g(ref writer, itemToConvert.Value, includeChildrenMode, verifyCleanness, updateStoredBuffer);
        }
        
        private static ReadOnlyMemory<Int32>? CloneOrChange_ReadOnlyMemory_Gint_g_n(ReadOnlyMemory<Int32>? itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Value.Length;
            Memory<Int32> collection = new Memory<Int32>(new int[collectionLength]);
            var collectionAsSpan = collection.Span;
            var itemToCloneSpan = itemToClone.Value.Span;
            int itemToCloneCount = itemToCloneSpan.Length;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                var itemCopied = (int) itemToCloneSpan[itemIndex];
                collectionAsSpan[itemIndex] = itemCopied;
            }
            return collection;
        }
        
        private static ReadOnlyMemory<Byte> ConvertFromBytes_ReadOnlyMemory_Gbyte_g(LazinatorMemory storage)
        {
            return storage.Memory.ToArray();
        }
        
        private static void ConvertToBytes_ReadOnlyMemory_Gbyte_g(ref BinaryBufferWriter writer, ReadOnlyMemory<Byte> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            writer.Write(itemToConvert.Span);
        }
        
        private static ReadOnlyMemory<Byte> CloneOrChange_ReadOnlyMemory_Gbyte_g(ReadOnlyMemory<Byte> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            int collectionLength = itemToClone.Length;
            Memory<Byte> collection = new Memory<Byte>(new byte[collectionLength]);
            var collectionAsSpan = collection.Span;
            var itemToCloneSpan = itemToClone.Span;
            int itemToCloneCount = itemToCloneSpan.Length;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                var itemCopied = (byte) itemToCloneSpan[itemIndex];
                collectionAsSpan[itemIndex] = itemCopied;
            }
            return collection;
        }
        
        private static ReadOnlyMemory<Char> ConvertFromBytes_ReadOnlyMemory_Gchar_g(LazinatorMemory storage)
        {
            ReadOnlySpan<byte> span = storage.InitialMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Memory<Char> collection = new Memory<Char>(new char[collectionLength]);
            var collectionAsSpan = collection.Span;
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                char item = span.ToChar(ref bytesSoFar);
                collectionAsSpan[itemIndex] = item;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_ReadOnlyMemory_Gchar_g(ref BinaryBufferWriter writer, ReadOnlyMemory<Char> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
            var itemToConvertSpan = itemToConvert.Span;
            int itemToConvertCount = itemToConvertSpan.Length;
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                EncodeCharAndString.WriteCharInTwoBytes(ref writer, itemToConvertSpan[itemIndex]);
            }
        }
        
        private static ReadOnlyMemory<Char> CloneOrChange_ReadOnlyMemory_Gchar_g(ReadOnlyMemory<Char> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            int collectionLength = itemToClone.Length;
            Memory<Char> collection = new Memory<Char>(new char[collectionLength]);
            var collectionAsSpan = collection.Span;
            var itemToCloneSpan = itemToClone.Span;
            int itemToCloneCount = itemToCloneSpan.Length;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                var itemCopied = (char) itemToCloneSpan[itemIndex];
                collectionAsSpan[itemIndex] = itemCopied;
            }
            return collection;
        }
        
        private static ReadOnlyMemory<Int32> ConvertFromBytes_ReadOnlyMemory_Gint_g(LazinatorMemory storage)
        {
            ReadOnlySpan<byte> span = storage.InitialMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Memory<Int32> collection = new Memory<Int32>(new int[collectionLength]);
            var collectionAsSpan = collection.Span;
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int item = span.ToDecompressedInt32(ref bytesSoFar);
                collectionAsSpan[itemIndex] = item;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_ReadOnlyMemory_Gint_g(ref BinaryBufferWriter writer, ReadOnlyMemory<Int32> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
            var itemToConvertSpan = itemToConvert.Span;
            int itemToConvertCount = itemToConvertSpan.Length;
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvertSpan[itemIndex]);
            }
        }
        
        private static ReadOnlyMemory<Int32> CloneOrChange_ReadOnlyMemory_Gint_g(ReadOnlyMemory<Int32> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            int collectionLength = itemToClone.Length;
            Memory<Int32> collection = new Memory<Int32>(new int[collectionLength]);
            var collectionAsSpan = collection.Span;
            var itemToCloneSpan = itemToClone.Span;
            int itemToCloneCount = itemToCloneSpan.Length;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                var itemCopied = (int) itemToCloneSpan[itemIndex];
                collectionAsSpan[itemIndex] = itemCopied;
            }
            return collection;
        }
        
        private static void ConvertToBytes_ReadOnlySpan_Gbyte_g(ref BinaryBufferWriter writer, ReadOnlySpan<Byte> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            ReadOnlySpan<byte> toConvert = (itemToConvert);
            for (int i = 0; i < toConvert.Length; i++)
            {
                writer.Write(toConvert[i]);
            }
        }
        private static ReadOnlySpan<Byte> CloneOrChange_ReadOnlySpan_Gbyte_g(ReadOnlySpan<Byte> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            var clone = new Span<byte>(new byte[itemToClone.Length * sizeof(byte)]);
            itemToClone.CopyTo(clone);
            return clone;
        }
        
        private static void ConvertToBytes_ReadOnlySpan_Gchar_g(ref BinaryBufferWriter writer, ReadOnlySpan<Char> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            ReadOnlySpan<byte> toConvert = MemoryMarshal.Cast<char, byte>(itemToConvert);
            for (int i = 0; i < toConvert.Length; i++)
            {
                writer.Write(toConvert[i]);
            }
        }
        private static ReadOnlySpan<Char> CloneOrChange_ReadOnlySpan_Gchar_g(ReadOnlySpan<Char> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            var clone = new Span<byte>(new byte[itemToClone.Length * sizeof(char)]);
            MemoryMarshal.Cast<char, byte>(itemToClone).CopyTo(clone);
            return MemoryMarshal.Cast<byte, char>(clone);
        }
        
        private static void ConvertToBytes_ReadOnlySpan_Glong_g(ref BinaryBufferWriter writer, ReadOnlySpan<Int64> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            ReadOnlySpan<byte> toConvert = MemoryMarshal.Cast<long, byte>(itemToConvert);
            for (int i = 0; i < toConvert.Length; i++)
            {
                writer.Write(toConvert[i]);
            }
        }
        private static ReadOnlySpan<Int64> CloneOrChange_ReadOnlySpan_Glong_g(ReadOnlySpan<Int64> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            var clone = new Span<byte>(new byte[itemToClone.Length * sizeof(long)]);
            MemoryMarshal.Cast<long, byte>(itemToClone).CopyTo(clone);
            return MemoryMarshal.Cast<byte, long>(clone);
        }
        
    }
}
