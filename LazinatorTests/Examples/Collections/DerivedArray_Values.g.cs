/*Location7033*//*Location7019*///95b6fbc8-f5dd-65d4-f3b9-dcbe7c7c1159
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.Collections
{/*Location7020*/
    using Lazinator.Attributes;/*Location7021*/
    using Lazinator.Buffers;/*Location7022*/
    using Lazinator.Core;/*Location7023*/
    using Lazinator.Exceptions;/*Location7024*/
    using Lazinator.Support;/*Location7025*/
    using System;/*Location7026*/
    using System.Buffers;/*Location7027*/
    using System.Collections.Generic;/*Location7028*/
    using System.Diagnostics;/*Location7029*/
    using System.IO;/*Location7030*/
    using System.Linq;/*Location7031*/
    using System.Runtime.InteropServices;/*Location7032*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class DerivedArray_Values : Array_Values, ILazinator
    {
        /*Location7034*//* Property definitions */
        
        /*Location7035*/        protected int _MyArrayInt_DerivedLevel_ByteIndex;
        /*Location7036*/private int _DerivedArray_Values_EndByteIndex;
        /*Location7037*/protected virtual int _MyArrayInt_DerivedLevel_ByteLength => _DerivedArray_Values_EndByteIndex - _MyArrayInt_DerivedLevel_ByteIndex;
        
        /*Location7038*/
        protected int[] _MyArrayInt_DerivedLevel;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int[] MyArrayInt_DerivedLevel
        {
            get
            {
                if (!_MyArrayInt_DerivedLevel_Accessed)
                {
                    Lazinate_MyArrayInt_DerivedLevel();
                } 
                return _MyArrayInt_DerivedLevel;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyArrayInt_DerivedLevel = value;
                _MyArrayInt_DerivedLevel_Dirty = true;
                _MyArrayInt_DerivedLevel_Accessed = true;
            }
        }
        protected bool _MyArrayInt_DerivedLevel_Accessed;
        private void Lazinate_MyArrayInt_DerivedLevel()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyArrayInt_DerivedLevel = default(int[]);
                _MyArrayInt_DerivedLevel_Dirty = true; 
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyArrayInt_DerivedLevel_ByteIndex, _MyArrayInt_DerivedLevel_ByteLength, false, false, null);
                _MyArrayInt_DerivedLevel = ConvertFromBytes_int_B_b(childData);
            }
            
            _MyArrayInt_DerivedLevel_Accessed = true;
        }
        
        /*Location7039*/
        private bool _MyArrayInt_DerivedLevel_Dirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool MyArrayInt_DerivedLevel_Dirty
        {
            get => _MyArrayInt_DerivedLevel_Dirty;
            set
            {
                if (_MyArrayInt_DerivedLevel_Dirty != value)
                {
                    _MyArrayInt_DerivedLevel_Dirty = value;
                }
                if (value && !IsDirty)
                {
                    IsDirty = true;
                }
            }
        }
        /*Location7041*/        /* Clone overrides */
        
        public DerivedArray_Values(IncludeChildrenMode originalIncludeChildrenMode) : base(originalIncludeChildrenMode)
        {
        }
        
        public DerivedArray_Values(LazinatorMemory serializedBytes, ILazinator parent = null) : base(serializedBytes, parent)
        {
        }
        
        public override ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            DerivedArray_Values clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new DerivedArray_Values(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (DerivedArray_Values)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, false, this);
                clone = new DerivedArray_Values(bytes);
            }
            return clone;
        }
        
        public override ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            base.AssignCloneProperties(clone, includeChildrenMode);
            DerivedArray_Values typedClone = (DerivedArray_Values) clone;
            /*Location7040*/typedClone.MyArrayInt_DerivedLevel = CloneOrChange_int_B_b(MyArrayInt_DerivedLevel, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        /* Properties */
        /*Location7042*/
        public override IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            foreach (var inheritedYield in base.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
            {
                yield return inheritedYield;
            }
            /*Location7043*/yield break;
        }
        /*Location7044*/
        
        public override IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            foreach (var inheritedYield in base.EnumerateNonLazinatorProperties())
            {
                yield return inheritedYield;
            }
            /*Location7045*/yield return ("MyArrayInt_DerivedLevel", (object)MyArrayInt_DerivedLevel);
            /*Location7046*/yield break;
        }
        /*Location7047*/
        public override ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            base.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, false);
            /*Location7048*/if ((!exploreOnlyDeserializedChildren && MyArrayInt_DerivedLevel != null) || (_MyArrayInt_DerivedLevel_Accessed && _MyArrayInt_DerivedLevel != null))
            {
                _MyArrayInt_DerivedLevel = (int[]) CloneOrChange_int_B_b(_MyArrayInt_DerivedLevel, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location7049*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location7050*/
        public override void FreeInMemoryObjects()
        {
            base.FreeInMemoryObjects();
            _MyArrayInt_DerivedLevel = default;
            _MyArrayInt_DerivedLevel_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location7051*/
        /* Conversion */
        
        public override int LazinatorUniqueID => 1061;
        
        protected override bool ContainsOpenGenericParameters => false;
        public override LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public override int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location7052*/public override void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            base.ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location7053*/_MyArrayInt_DerivedLevel_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location7054*/_DerivedArray_Values_EndByteIndex = bytesSoFar;
            /*Location7055*/        }
            
            /*Location7056*/public override void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location7057*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location7058*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location7059*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location7060*/}
                    /*Location7061*/}
                    /*Location7062*/
                    public override void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location7063*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location7064*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location7065*/}
                                /*Location7066*//*Location7067*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location7068*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location7069*/}
                            /*Location7070*/
                            protected override void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                base.UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location7071*/if (_MyArrayInt_DerivedLevel_Accessed && _MyArrayInt_DerivedLevel != null)
                                {
                                    _MyArrayInt_DerivedLevel = (int[]) CloneOrChange_int_B_b(_MyArrayInt_DerivedLevel, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location7072*/}
                                
                                /*Location7073*/
                                protected override void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    int startPosition = writer.Position;
                                    int startOfObjectPosition = 0;
                                    base.WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, includeUniqueID);
                                    /*Location7074*/// write properties
                                    /*Location7075*/startOfObjectPosition = writer.Position;
                                    /*Location7076*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyArrayInt_DerivedLevel_Accessed)
                                    {
                                        var deserialized = MyArrayInt_DerivedLevel;
                                    }
                                    /*Location7077*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyArrayInt_DerivedLevel, isBelievedDirty: MyArrayInt_DerivedLevel_Dirty || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyArrayInt_DerivedLevel_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyArrayInt_DerivedLevel_ByteIndex, _MyArrayInt_DerivedLevel_ByteLength, false, false, null),
                                    verifyCleanness: verifyCleanness,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_int_B_b(ref w, _MyArrayInt_DerivedLevel,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location7078*/if (updateStoredBuffer)
                                    {
                                        _MyArrayInt_DerivedLevel_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location7079*/if (updateStoredBuffer)
                                    {
                                        /*Location7080*/_DerivedArray_Values_EndByteIndex = writer.Position - startPosition;
                                        /*Location7081*/}
                                        /*Location7082*/}
                                        /*Location7083*/
                                        /* Conversion of supported collections and tuples */
                                        /*Location7084*/
                                        private static int[] ConvertFromBytes_int_B_b(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default(int[]);
                                            }
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            int[] collection = new int[collectionLength];
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int item = span.ToDecompressedInt(ref bytesSoFar);
                                                collection[itemIndex] = item;
                                            }
                                            
                                            return collection;
                                        }/*Location7085*/
                                        
                                        private static void ConvertToBytes_int_B_b(ref BinaryBufferWriter writer, int[] itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(int[]))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
                                            int itemToConvertCount = itemToConvert.Length;
                                            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                            {
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert[itemIndex]);
                                            }
                                        }
                                        /*Location7086*/
                                        private static int[] CloneOrChange_int_B_b(int[] itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            if (itemToClone == null)
                                            {
                                                return default;
                                            }
                                            
                                            int collectionLength = itemToClone.Length;
                                            int[] collection = new int[collectionLength];
                                            int itemToCloneCount = itemToClone.Length;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                var itemCopied = (int) itemToClone[itemIndex];
                                                collection[itemIndex] = itemCopied;
                                            }
                                            return collection;
                                        }
                                        /*Location7087*/
                                    }
                                }
