/*Location7102*//*Location7088*///6f60dd2b-98e4-7798-5331-e9de05e1d98f
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.Collections
{/*Location7089*/
    using Lazinator.Attributes;/*Location7090*/
    using Lazinator.Buffers;/*Location7091*/
    using Lazinator.Core;/*Location7092*/
    using Lazinator.Exceptions;/*Location7093*/
    using Lazinator.Support;/*Location7094*/
    using System;/*Location7095*/
    using System.Buffers;/*Location7096*/
    using System.Collections.Generic;/*Location7097*/
    using System.Diagnostics;/*Location7098*/
    using System.IO;/*Location7099*/
    using System.Linq;/*Location7100*/
    using System.Runtime.InteropServices;/*Location7101*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class ArrayMultidimensional : ILazinator
    {
        /*Location7103*/public bool IsStruct => false;
        
        /*Location7104*//* Property definitions */
        
        /*Location7105*/        protected int _MyArrayInt_ByteIndex;
        /*Location7106*/        protected int _MyCrazyJaggedArray_ByteIndex;
        /*Location7107*/        protected int _MyThreeDimArrayInt_ByteIndex;
        /*Location7108*/protected virtual int _MyArrayInt_ByteLength => _MyCrazyJaggedArray_ByteIndex - _MyArrayInt_ByteIndex;
        /*Location7109*/protected virtual int _MyCrazyJaggedArray_ByteLength => _MyThreeDimArrayInt_ByteIndex - _MyCrazyJaggedArray_ByteIndex;
        /*Location7110*/private int _ArrayMultidimensional_EndByteIndex;
        /*Location7111*/protected virtual int _MyThreeDimArrayInt_ByteLength => _ArrayMultidimensional_EndByteIndex - _MyThreeDimArrayInt_ByteIndex;
        
        /*Location7112*/
        protected int[,] _MyArrayInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int[,] MyArrayInt
        {
            get
            {
                if (!_MyArrayInt_Accessed)
                {
                    Lazinate_MyArrayInt();
                } 
                return _MyArrayInt;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyArrayInt = value;
                _MyArrayInt_Dirty = true;
                _MyArrayInt_Accessed = true;
            }
        }
        protected bool _MyArrayInt_Accessed;
        private void Lazinate_MyArrayInt()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyArrayInt = default(int[,]);
                _MyArrayInt_Dirty = true; 
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyArrayInt_ByteIndex, _MyArrayInt_ByteLength, false, false, null);
                _MyArrayInt = ConvertFromBytes_int_B_c_b(childData);
            }
            
            _MyArrayInt_Accessed = true;
        }
        
        /*Location7113*/
        private bool _MyArrayInt_Dirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool MyArrayInt_Dirty
        {
            get => _MyArrayInt_Dirty;
            set
            {
                if (_MyArrayInt_Dirty != value)
                {
                    _MyArrayInt_Dirty = value;
                }
                if (value && !IsDirty)
                {
                    IsDirty = true;
                }
            }
        }
        /*Location7114*/
        protected int[][,,][,,,] _MyCrazyJaggedArray;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int[][,,][,,,] MyCrazyJaggedArray
        {
            get
            {
                if (!_MyCrazyJaggedArray_Accessed)
                {
                    Lazinate_MyCrazyJaggedArray();
                }
                IsDirty = true; 
                return _MyCrazyJaggedArray;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyCrazyJaggedArray = value;
                _MyCrazyJaggedArray_Accessed = true;
            }
        }
        protected bool _MyCrazyJaggedArray_Accessed;
        private void Lazinate_MyCrazyJaggedArray()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyCrazyJaggedArray = default(int[][,,][,,,]);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyCrazyJaggedArray_ByteIndex, _MyCrazyJaggedArray_ByteLength, false, false, null);
                _MyCrazyJaggedArray = ConvertFromBytes_int_B_b_B_c_c_b_B_c_c_c_b(childData);
            }
            
            _MyCrazyJaggedArray_Accessed = true;
        }
        
        /*Location7115*/
        protected int[,,] _MyThreeDimArrayInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int[,,] MyThreeDimArrayInt
        {
            get
            {
                if (!_MyThreeDimArrayInt_Accessed)
                {
                    Lazinate_MyThreeDimArrayInt();
                }
                IsDirty = true; 
                return _MyThreeDimArrayInt;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyThreeDimArrayInt = value;
                _MyThreeDimArrayInt_Accessed = true;
            }
        }
        protected bool _MyThreeDimArrayInt_Accessed;
        private void Lazinate_MyThreeDimArrayInt()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyThreeDimArrayInt = default(int[,,]);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyThreeDimArrayInt_ByteIndex, _MyThreeDimArrayInt_ByteLength, false, false, null);
                _MyThreeDimArrayInt = ConvertFromBytes_int_B_c_c_b(childData);
            }
            
            _MyThreeDimArrayInt_Accessed = true;
        }
        
        /*Location7119*/
        /* Serialization, deserialization, and object relationships */
        
        public ArrayMultidimensional(IncludeChildrenMode originalIncludeChildrenMode)
        {
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public ArrayMultidimensional(LazinatorMemory serializedBytes, ILazinator parent = null)
        {
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            ArrayMultidimensional clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new ArrayMultidimensional(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (ArrayMultidimensional)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, false, this);
                clone = new ArrayMultidimensional(bytes);
            }
            return clone;
        }
        
        public virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            ArrayMultidimensional typedClone = (ArrayMultidimensional) clone;
            /*Location7116*/typedClone.MyArrayInt = CloneOrChange_int_B_c_b(MyArrayInt, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location7117*/typedClone.MyCrazyJaggedArray = CloneOrChange_int_B_b_B_c_c_b_B_c_c_c_b(MyCrazyJaggedArray, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location7118*/typedClone.MyThreeDimArrayInt = CloneOrChange_int_B_c_c_b(MyThreeDimArrayInt, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        /*Location7120*/
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location7121*/public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location7122*/yield break;
        }
        /*Location7123*/
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location7124*/yield return ("MyArrayInt", (object)MyArrayInt);
            /*Location7125*/yield return ("MyCrazyJaggedArray", (object)MyCrazyJaggedArray);
            /*Location7126*/yield return ("MyThreeDimArrayInt", (object)MyThreeDimArrayInt);
            /*Location7127*/yield break;
        }
        /*Location7128*/
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location7129*/if ((!exploreOnlyDeserializedChildren && MyArrayInt != null) || (_MyArrayInt_Accessed && _MyArrayInt != null))
            {
                _MyArrayInt = (int[,]) CloneOrChange_int_B_c_b(_MyArrayInt, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location7130*/if ((!exploreOnlyDeserializedChildren && MyCrazyJaggedArray != null) || (_MyCrazyJaggedArray_Accessed && _MyCrazyJaggedArray != null))
            {
                _MyCrazyJaggedArray = (int[][,,][,,,]) CloneOrChange_int_B_b_B_c_c_b_B_c_c_c_b(_MyCrazyJaggedArray, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location7131*/if ((!exploreOnlyDeserializedChildren && MyThreeDimArrayInt != null) || (_MyThreeDimArrayInt_Accessed && _MyThreeDimArrayInt != null))
            {
                _MyThreeDimArrayInt = (int[,,]) CloneOrChange_int_B_c_c_b(_MyThreeDimArrayInt, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location7132*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location7133*/
        public virtual void FreeInMemoryObjects()
        {
            _MyArrayInt = default;
            _MyCrazyJaggedArray = default;
            _MyThreeDimArrayInt = default;
            _MyArrayInt_Accessed = _MyCrazyJaggedArray_Accessed = _MyThreeDimArrayInt_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location7134*/
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1000;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location7135*/public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location7136*/_MyArrayInt_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location7137*/_MyCrazyJaggedArray_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location7138*/_MyThreeDimArrayInt_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location7139*/_ArrayMultidimensional_EndByteIndex = bytesSoFar;
            /*Location7140*/        }
            
            /*Location7141*/public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location7142*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location7143*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location7144*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location7145*/}
                    /*Location7146*/}
                    /*Location7147*/
                    public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location7148*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location7149*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location7150*/}
                                /*Location7151*//*Location7152*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location7153*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location7154*/}
                            /*Location7155*/
                            protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                /*Location7156*/if (_MyArrayInt_Accessed && _MyArrayInt != null)
                                {
                                    _MyArrayInt = (int[,]) CloneOrChange_int_B_c_b(_MyArrayInt, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location7157*/if (_MyCrazyJaggedArray_Accessed && _MyCrazyJaggedArray != null)
                                {
                                    _MyCrazyJaggedArray = (int[][,,][,,,]) CloneOrChange_int_B_b_B_c_c_b_B_c_c_c_b(_MyCrazyJaggedArray, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location7158*/if (_MyThreeDimArrayInt_Accessed && _MyThreeDimArrayInt != null)
                                {
                                    _MyThreeDimArrayInt = (int[,,]) CloneOrChange_int_B_c_c_b(_MyThreeDimArrayInt, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location7159*/}
                                
                                /*Location7160*/
                                protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    int startPosition = writer.Position;
                                    int startOfObjectPosition = 0;
                                    // header information
                                    /*Location7161*/if (includeUniqueID)
                                    {
                                        if (!ContainsOpenGenericParameters)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                        }
                                        else
                                        {
                                            WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                                        }
                                    }
                                    /*Location7162*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                    writer.Write((byte)includeChildrenMode);
                                    /*Location7163*/// write properties
                                    /*Location7164*/startOfObjectPosition = writer.Position;
                                    /*Location7165*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyArrayInt_Accessed)
                                    {
                                        var deserialized = MyArrayInt;
                                    }
                                    /*Location7166*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyArrayInt, isBelievedDirty: MyArrayInt_Dirty || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyArrayInt_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyArrayInt_ByteIndex, _MyArrayInt_ByteLength, false, false, null),
                                    verifyCleanness: verifyCleanness,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_int_B_c_b(ref w, _MyArrayInt,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location7167*/if (updateStoredBuffer)
                                    {
                                        _MyArrayInt_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location7168*/startOfObjectPosition = writer.Position;
                                    /*Location7169*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyCrazyJaggedArray_Accessed)
                                    {
                                        var deserialized = MyCrazyJaggedArray;
                                    }
                                    /*Location7170*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyCrazyJaggedArray, isBelievedDirty: _MyCrazyJaggedArray_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyCrazyJaggedArray_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyCrazyJaggedArray_ByteIndex, _MyCrazyJaggedArray_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_int_B_b_B_c_c_b_B_c_c_c_b(ref w, _MyCrazyJaggedArray,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location7171*/if (updateStoredBuffer)
                                    {
                                        _MyCrazyJaggedArray_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location7172*/startOfObjectPosition = writer.Position;
                                    /*Location7173*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyThreeDimArrayInt_Accessed)
                                    {
                                        var deserialized = MyThreeDimArrayInt;
                                    }
                                    /*Location7174*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyThreeDimArrayInt, isBelievedDirty: _MyThreeDimArrayInt_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyThreeDimArrayInt_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyThreeDimArrayInt_ByteIndex, _MyThreeDimArrayInt_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_int_B_c_c_b(ref w, _MyThreeDimArrayInt,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location7175*/if (updateStoredBuffer)
                                    {
                                        _MyThreeDimArrayInt_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location7176*/if (updateStoredBuffer)
                                    {
                                        /*Location7177*/_ArrayMultidimensional_EndByteIndex = writer.Position - startPosition;
                                        /*Location7178*/}
                                        /*Location7179*/}
                                        /*Location7180*/
                                        /* Conversion of supported collections and tuples */
                                        /*Location7181*/
                                        private static int[,] ConvertFromBytes_int_B_c_b(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default(int[,]);
                                            }
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength0 = span.ToDecompressedInt(ref bytesSoFar);
                                            int collectionLength1 = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            int[,] collection = new int[collectionLength0, collectionLength1];
                                            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
                                            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
                                            {
                                                int item = span.ToDecompressedInt(ref bytesSoFar);
                                                collection[itemIndex0, itemIndex1] = item;
                                            }
                                            
                                            return collection;
                                        }/*Location7182*/
                                        
                                        private static void ConvertToBytes_int_B_c_b(ref BinaryBufferWriter writer, int[,] itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(int[,]))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(0));
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(1));
                                            int collectionLength0 = itemToConvert.GetLength(0);
                                            int collectionLength1 = itemToConvert.GetLength(1);
                                            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
                                            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
                                            {
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert[itemIndex0, itemIndex1]);
                                            }
                                        }
                                        /*Location7183*/
                                        private static int[,] CloneOrChange_int_B_c_b(int[,] itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            if (itemToClone == null)
                                            {
                                                return default;
                                            }
                                            
                                            int collectionLength = itemToClone.Length;
                                            int collectionLength0 = itemToClone.GetLength(0);
                                            int collectionLength1 = itemToClone.GetLength(1);
                                            int[,] collection = new int[collectionLength0, collectionLength1];
                                            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
                                            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
                                            {
                                                var itemCopied = (int) itemToClone[itemIndex0, itemIndex1];
                                                collection[itemIndex0, itemIndex1] = itemCopied;
                                            }
                                            return collection;
                                        }
                                        /*Location7184*/
                                        private static int[][,,][,,,] ConvertFromBytes_int_B_b_B_c_c_b_B_c_c_c_b(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default(int[][,,][,,,]);
                                            }
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            int[][,,][,,,] collection = new int[collectionLength][,,][,,,];
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                if (lengthCollectionMember == 0)
                                                {
                                                    collection[itemIndex] = default(int[,,][,,,]);
                                                }
                                                else
                                                {
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                    var item = ConvertFromBytes_int_B_c_c_b_B_c_c_c_b(childData);
                                                    collection[itemIndex] = item;
                                                }
                                                bytesSoFar += lengthCollectionMember;
                                            }
                                            
                                            return collection;
                                        }/*Location7185*/
                                        
                                        private static void ConvertToBytes_int_B_b_B_c_c_b_B_c_c_c_b(ref BinaryBufferWriter writer, int[][,,][,,,] itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(int[][,,][,,,]))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
                                            int itemToConvertCount = itemToConvert.Length;
                                            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                            {
                                                if (itemToConvert[itemIndex] == default(int[,,][,,,]))
                                                {
                                                    writer.Write((uint)0);
                                                }
                                                else 
                                                {
                                                    
                                                    void action(ref BinaryBufferWriter w) => ConvertToBytes_int_B_c_c_b_B_c_c_c_b(ref w, itemToConvert[itemIndex], includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                }
                                                
                                            }
                                        }
                                        /*Location7186*/
                                        private static int[][,,][,,,] CloneOrChange_int_B_b_B_c_c_b_B_c_c_c_b(int[][,,][,,,] itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            if (itemToClone == null)
                                            {
                                                return default;
                                            }
                                            
                                            int collectionLength = itemToClone.Length;
                                            int[][,,][,,,] collection = new int[collectionLength][,,][,,,];
                                            int itemToCloneCount = itemToClone.Length;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                if (itemToClone[itemIndex] == null)
                                                {
                                                    collection[itemIndex] = default(int[,,][,,,]);
                                                }
                                                else
                                                {
                                                    var itemCopied = (int[,,][,,,]) CloneOrChange_int_B_c_c_b_B_c_c_c_b(itemToClone[itemIndex], cloneOrChangeFunc, avoidCloningIfPossible);
                                                    collection[itemIndex] = itemCopied;
                                                }
                                                
                                            }
                                            return collection;
                                        }
                                        /*Location7187*/
                                        private static int[,,][,,,] ConvertFromBytes_int_B_c_c_b_B_c_c_c_b(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default(int[,,][,,,]);
                                            }
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength0 = span.ToDecompressedInt(ref bytesSoFar);
                                            int collectionLength1 = span.ToDecompressedInt(ref bytesSoFar);
                                            int collectionLength2 = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            int[,,][,,,] collection = new int[collectionLength0, collectionLength1, collectionLength2][,,,];
                                            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
                                            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
                                            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
                                            {
                                                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                if (lengthCollectionMember == 0)
                                                {
                                                    collection[itemIndex0, itemIndex1, itemIndex2] = default(int[,,,]);
                                                }
                                                else
                                                {
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                    var item = ConvertFromBytes_int_B_c_c_c_b(childData);
                                                    collection[itemIndex0, itemIndex1, itemIndex2] = item;
                                                }
                                                bytesSoFar += lengthCollectionMember;
                                            }
                                            
                                            return collection;
                                        }/*Location7188*/
                                        
                                        private static void ConvertToBytes_int_B_c_c_b_B_c_c_c_b(ref BinaryBufferWriter writer, int[,,][,,,] itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(int[,,][,,,]))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(0));
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(1));
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(2));
                                            int collectionLength0 = itemToConvert.GetLength(0);
                                            int collectionLength1 = itemToConvert.GetLength(1);
                                            int collectionLength2 = itemToConvert.GetLength(2);
                                            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
                                            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
                                            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
                                            {
                                                if (itemToConvert[itemIndex0, itemIndex1, itemIndex2] == default(int[,,,]))
                                                {
                                                    writer.Write((uint)0);
                                                }
                                                else 
                                                {
                                                    
                                                    void action(ref BinaryBufferWriter w) => ConvertToBytes_int_B_c_c_c_b(ref w, itemToConvert[itemIndex0, itemIndex1, itemIndex2], includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                }
                                                
                                            }
                                        }
                                        /*Location7189*/
                                        private static int[,,][,,,] CloneOrChange_int_B_c_c_b_B_c_c_c_b(int[,,][,,,] itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            if (itemToClone == null)
                                            {
                                                return default;
                                            }
                                            
                                            int collectionLength = itemToClone.Length;
                                            int collectionLength0 = itemToClone.GetLength(0);
                                            int collectionLength1 = itemToClone.GetLength(1);
                                            int collectionLength2 = itemToClone.GetLength(2);
                                            int[,,][,,,] collection = new int[collectionLength0, collectionLength1, collectionLength2][,,,];
                                            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
                                            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
                                            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
                                            {
                                                if (itemToClone[itemIndex0, itemIndex1, itemIndex2] == null)
                                                {
                                                    collection[itemIndex0, itemIndex1, itemIndex2] = default(int[,,,]);
                                                }
                                                else
                                                {
                                                    var itemCopied = (int[,,,]) CloneOrChange_int_B_c_c_c_b(itemToClone[itemIndex0, itemIndex1, itemIndex2], cloneOrChangeFunc, avoidCloningIfPossible);
                                                    collection[itemIndex0, itemIndex1, itemIndex2] = itemCopied;
                                                }
                                                
                                            }
                                            return collection;
                                        }
                                        /*Location7190*/
                                        private static int[,,,] ConvertFromBytes_int_B_c_c_c_b(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default(int[,,,]);
                                            }
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength0 = span.ToDecompressedInt(ref bytesSoFar);
                                            int collectionLength1 = span.ToDecompressedInt(ref bytesSoFar);
                                            int collectionLength2 = span.ToDecompressedInt(ref bytesSoFar);
                                            int collectionLength3 = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            int[,,,] collection = new int[collectionLength0, collectionLength1, collectionLength2, collectionLength3];
                                            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
                                            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
                                            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
                                            for (int itemIndex3 = 0; itemIndex3 < collectionLength3; itemIndex3++)
                                            {
                                                int item = span.ToDecompressedInt(ref bytesSoFar);
                                                collection[itemIndex0, itemIndex1, itemIndex2, itemIndex3] = item;
                                            }
                                            
                                            return collection;
                                        }/*Location7191*/
                                        
                                        private static void ConvertToBytes_int_B_c_c_c_b(ref BinaryBufferWriter writer, int[,,,] itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(int[,,,]))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(0));
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(1));
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(2));
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(3));
                                            int collectionLength0 = itemToConvert.GetLength(0);
                                            int collectionLength1 = itemToConvert.GetLength(1);
                                            int collectionLength2 = itemToConvert.GetLength(2);
                                            int collectionLength3 = itemToConvert.GetLength(3);
                                            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
                                            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
                                            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
                                            for (int itemIndex3 = 0; itemIndex3 < collectionLength3; itemIndex3++)
                                            {
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert[itemIndex0, itemIndex1, itemIndex2, itemIndex3]);
                                            }
                                        }
                                        /*Location7192*/
                                        private static int[,,,] CloneOrChange_int_B_c_c_c_b(int[,,,] itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            if (itemToClone == null)
                                            {
                                                return default;
                                            }
                                            
                                            int collectionLength = itemToClone.Length;
                                            int collectionLength0 = itemToClone.GetLength(0);
                                            int collectionLength1 = itemToClone.GetLength(1);
                                            int collectionLength2 = itemToClone.GetLength(2);
                                            int collectionLength3 = itemToClone.GetLength(3);
                                            int[,,,] collection = new int[collectionLength0, collectionLength1, collectionLength2, collectionLength3];
                                            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
                                            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
                                            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
                                            for (int itemIndex3 = 0; itemIndex3 < collectionLength3; itemIndex3++)
                                            {
                                                var itemCopied = (int) itemToClone[itemIndex0, itemIndex1, itemIndex2, itemIndex3];
                                                collection[itemIndex0, itemIndex1, itemIndex2, itemIndex3] = itemCopied;
                                            }
                                            return collection;
                                        }
                                        /*Location7193*/
                                        private static int[,,] ConvertFromBytes_int_B_c_c_b(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default(int[,,]);
                                            }
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength0 = span.ToDecompressedInt(ref bytesSoFar);
                                            int collectionLength1 = span.ToDecompressedInt(ref bytesSoFar);
                                            int collectionLength2 = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            int[,,] collection = new int[collectionLength0, collectionLength1, collectionLength2];
                                            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
                                            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
                                            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
                                            {
                                                int item = span.ToDecompressedInt(ref bytesSoFar);
                                                collection[itemIndex0, itemIndex1, itemIndex2] = item;
                                            }
                                            
                                            return collection;
                                        }/*Location7194*/
                                        
                                        private static void ConvertToBytes_int_B_c_c_b(ref BinaryBufferWriter writer, int[,,] itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(int[,,]))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(0));
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(1));
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(2));
                                            int collectionLength0 = itemToConvert.GetLength(0);
                                            int collectionLength1 = itemToConvert.GetLength(1);
                                            int collectionLength2 = itemToConvert.GetLength(2);
                                            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
                                            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
                                            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
                                            {
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert[itemIndex0, itemIndex1, itemIndex2]);
                                            }
                                        }
                                        /*Location7195*/
                                        private static int[,,] CloneOrChange_int_B_c_c_b(int[,,] itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            if (itemToClone == null)
                                            {
                                                return default;
                                            }
                                            
                                            int collectionLength = itemToClone.Length;
                                            int collectionLength0 = itemToClone.GetLength(0);
                                            int collectionLength1 = itemToClone.GetLength(1);
                                            int collectionLength2 = itemToClone.GetLength(2);
                                            int[,,] collection = new int[collectionLength0, collectionLength1, collectionLength2];
                                            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
                                            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
                                            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
                                            {
                                                var itemCopied = (int) itemToClone[itemIndex0, itemIndex1, itemIndex2];
                                                collection[itemIndex0, itemIndex1, itemIndex2] = itemCopied;
                                            }
                                            return collection;
                                        }
                                        /*Location7196*/
                                    }
                                }
