/*Location6168*//*Location6153*///34298c90-16da-f44b-487e-148678e38ae1
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.Collections
{/*Location6154*/
    using Lazinator.Attributes;/*Location6155*/
    using Lazinator.Buffers;/*Location6156*/
    using Lazinator.Core;/*Location6157*/
    using Lazinator.Exceptions;/*Location6158*/
    using Lazinator.Support;/*Location6159*/
    using LazinatorTests.Examples.ExampleHierarchy;/*Location6160*/
    using System;/*Location6161*/
    using System.Buffers;/*Location6162*/
    using System.Collections.Generic;/*Location6163*/
    using System.Diagnostics;/*Location6164*/
    using System.IO;/*Location6165*/
    using System.Linq;/*Location6166*/
    using System.Runtime.InteropServices;/*Location6167*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class DotNetList_Values : ILazinator
    {
        /*Location6169*/public bool IsStruct => false;
        
        /*Location6170*//* Property definitions */
        
        /*Location6171*/        protected int _MyLinkedListInt_ByteIndex;
        /*Location6172*/        protected int _MyListInt_ByteIndex;
        /*Location6173*/        protected int _MyListInt2_ByteIndex;
        /*Location6174*/        protected int _MyListNullableEnabledContext_ByteIndex;
        /*Location6175*/        protected int _MySortedSetInt_ByteIndex;
        /*Location6176*/protected virtual int _MyLinkedListInt_ByteLength => _MyListInt_ByteIndex - _MyLinkedListInt_ByteIndex;
        /*Location6177*/protected virtual int _MyListInt_ByteLength => _MyListInt2_ByteIndex - _MyListInt_ByteIndex;
        /*Location6178*/protected virtual int _MyListInt2_ByteLength => _MyListNullableEnabledContext_ByteIndex - _MyListInt2_ByteIndex;
        /*Location6179*/protected virtual int _MyListNullableEnabledContext_ByteLength => _MySortedSetInt_ByteIndex - _MyListNullableEnabledContext_ByteIndex;
        /*Location6180*/private int _DotNetList_Values_EndByteIndex;
        /*Location6181*/protected virtual int _MySortedSetInt_ByteLength => _DotNetList_Values_EndByteIndex - _MySortedSetInt_ByteIndex;
        
        /*Location6182*/
        protected LinkedList<int> _MyLinkedListInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public LinkedList<int> MyLinkedListInt
        {
            get
            {
                if (!_MyLinkedListInt_Accessed)
                {
                    Lazinate_MyLinkedListInt();
                } 
                return _MyLinkedListInt;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyLinkedListInt = value;
                _MyLinkedListInt_Dirty = true;
                _MyLinkedListInt_Accessed = true;
            }
        }
        protected bool _MyLinkedListInt_Accessed;
        private void Lazinate_MyLinkedListInt()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyLinkedListInt = default(LinkedList<int>);
                _MyLinkedListInt_Dirty = true; 
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyLinkedListInt_ByteIndex, _MyLinkedListInt_ByteLength, false, false, null);
                _MyLinkedListInt = ConvertFromBytes_LinkedList_Gint_g(childData);
            }
            
            _MyLinkedListInt_Accessed = true;
        }
        
        /*Location6183*/
        private bool _MyLinkedListInt_Dirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool MyLinkedListInt_Dirty
        {
            get => _MyLinkedListInt_Dirty;
            set
            {
                if (_MyLinkedListInt_Dirty != value)
                {
                    _MyLinkedListInt_Dirty = value;
                }
                if (value && !IsDirty)
                {
                    IsDirty = true;
                }
            }
        }
        /*Location6184*/
        protected List<int> _MyListInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<int> MyListInt
        {
            get
            {
                if (!_MyListInt_Accessed)
                {
                    Lazinate_MyListInt();
                } 
                return _MyListInt;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyListInt = value;
                _MyListInt_Dirty = true;
                _MyListInt_Accessed = true;
            }
        }
        protected bool _MyListInt_Accessed;
        private void Lazinate_MyListInt()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyListInt = default(List<int>);
                _MyListInt_Dirty = true; 
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyListInt_ByteIndex, _MyListInt_ByteLength, false, false, null);
                _MyListInt = ConvertFromBytes_List_Gint_g(childData);
            }
            
            _MyListInt_Accessed = true;
        }
        
        /*Location6185*/
        private bool _MyListInt_Dirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool MyListInt_Dirty
        {
            get => _MyListInt_Dirty;
            set
            {
                if (_MyListInt_Dirty != value)
                {
                    _MyListInt_Dirty = value;
                }
                if (value && !IsDirty)
                {
                    IsDirty = true;
                }
            }
        }
        /*Location6186*/
        protected List<int> _MyListInt2;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<int> MyListInt2
        {
            get
            {
                if (!_MyListInt2_Accessed)
                {
                    Lazinate_MyListInt2();
                }
                IsDirty = true; 
                return _MyListInt2;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyListInt2 = value;
                _MyListInt2_Accessed = true;
            }
        }
        protected bool _MyListInt2_Accessed;
        private void Lazinate_MyListInt2()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyListInt2 = default(List<int>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyListInt2_ByteIndex, _MyListInt2_ByteLength, false, false, null);
                _MyListInt2 = ConvertFromBytes_List_Gint_g(childData);
            }
            
            _MyListInt2_Accessed = true;
        }
        
        /*Location6187*/
        protected List<NullableEnabledContext> _MyListNullableEnabledContext;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<NullableEnabledContext> MyListNullableEnabledContext
        {
            get
            {
                if (!_MyListNullableEnabledContext_Accessed)
                {
                    Lazinate_MyListNullableEnabledContext();
                }
                IsDirty = true; 
                return _MyListNullableEnabledContext;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyListNullableEnabledContext = value;
                _MyListNullableEnabledContext_Accessed = true;
            }
        }
        protected bool _MyListNullableEnabledContext_Accessed;
        private void Lazinate_MyListNullableEnabledContext()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyListNullableEnabledContext = default(List<NullableEnabledContext>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyListNullableEnabledContext_ByteIndex, _MyListNullableEnabledContext_ByteLength, false, false, null);
                _MyListNullableEnabledContext = ConvertFromBytes_List_GNullableEnabledContext_g(childData);
            }
            
            _MyListNullableEnabledContext_Accessed = true;
        }
        
        /*Location6188*/
        protected SortedSet<int> _MySortedSetInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public SortedSet<int> MySortedSetInt
        {
            get
            {
                if (!_MySortedSetInt_Accessed)
                {
                    Lazinate_MySortedSetInt();
                } 
                return _MySortedSetInt;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MySortedSetInt = value;
                _MySortedSetInt_Dirty = true;
                _MySortedSetInt_Accessed = true;
            }
        }
        protected bool _MySortedSetInt_Accessed;
        private void Lazinate_MySortedSetInt()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MySortedSetInt = default(SortedSet<int>);
                _MySortedSetInt_Dirty = true; 
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MySortedSetInt_ByteIndex, _MySortedSetInt_ByteLength, false, false, null);
                _MySortedSetInt = ConvertFromBytes_SortedSet_Gint_g(childData);
            }
            
            _MySortedSetInt_Accessed = true;
        }
        
        /*Location6189*/
        private bool _MySortedSetInt_Dirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool MySortedSetInt_Dirty
        {
            get => _MySortedSetInt_Dirty;
            set
            {
                if (_MySortedSetInt_Dirty != value)
                {
                    _MySortedSetInt_Dirty = value;
                }
                if (value && !IsDirty)
                {
                    IsDirty = true;
                }
            }
        }
        /*Location6195*/
        /* Serialization, deserialization, and object relationships */
        
        public DotNetList_Values(IncludeChildrenMode originalIncludeChildrenMode)
        {
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public DotNetList_Values(LazinatorMemory serializedBytes, ILazinator parent = null)
        {
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            DotNetList_Values clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new DotNetList_Values(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (DotNetList_Values)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, false, this);
                clone = new DotNetList_Values(bytes);
            }
            return clone;
        }
        
        public virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            DotNetList_Values typedClone = (DotNetList_Values) clone;
            /*Location6190*/typedClone.MyLinkedListInt = CloneOrChange_LinkedList_Gint_g(MyLinkedListInt, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location6191*/typedClone.MyListInt = CloneOrChange_List_Gint_g(MyListInt, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location6192*/typedClone.MyListInt2 = CloneOrChange_List_Gint_g(MyListInt2, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location6193*/typedClone.MyListNullableEnabledContext = CloneOrChange_List_GNullableEnabledContext_g(MyListNullableEnabledContext, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location6194*/typedClone.MySortedSetInt = CloneOrChange_SortedSet_Gint_g(MySortedSetInt, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        /*Location6196*/
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location6197*/public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location6198*/yield break;
        }
        /*Location6199*/
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location6200*/yield return ("MyLinkedListInt", (object)MyLinkedListInt);
            /*Location6201*/yield return ("MyListInt", (object)MyListInt);
            /*Location6202*/yield return ("MyListInt2", (object)MyListInt2);
            /*Location6203*/yield return ("MyListNullableEnabledContext", (object)MyListNullableEnabledContext);
            /*Location6204*/yield return ("MySortedSetInt", (object)MySortedSetInt);
            /*Location6205*/yield break;
        }
        /*Location6206*/
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location6207*/if ((!exploreOnlyDeserializedChildren && MyLinkedListInt != null) || (_MyLinkedListInt_Accessed && _MyLinkedListInt != null))
            {
                _MyLinkedListInt = (LinkedList<int>) CloneOrChange_LinkedList_Gint_g(_MyLinkedListInt, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location6208*/if ((!exploreOnlyDeserializedChildren && MyListInt != null) || (_MyListInt_Accessed && _MyListInt != null))
            {
                _MyListInt = (List<int>) CloneOrChange_List_Gint_g(_MyListInt, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location6209*/if ((!exploreOnlyDeserializedChildren && MyListInt2 != null) || (_MyListInt2_Accessed && _MyListInt2 != null))
            {
                _MyListInt2 = (List<int>) CloneOrChange_List_Gint_g(_MyListInt2, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location6210*/if ((!exploreOnlyDeserializedChildren && MyListNullableEnabledContext != null) || (_MyListNullableEnabledContext_Accessed && _MyListNullableEnabledContext != null))
            {
                _MyListNullableEnabledContext = (List<NullableEnabledContext>) CloneOrChange_List_GNullableEnabledContext_g(_MyListNullableEnabledContext, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location6211*/if ((!exploreOnlyDeserializedChildren && MySortedSetInt != null) || (_MySortedSetInt_Accessed && _MySortedSetInt != null))
            {
                _MySortedSetInt = (SortedSet<int>) CloneOrChange_SortedSet_Gint_g(_MySortedSetInt, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location6212*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location6213*/
        public virtual void FreeInMemoryObjects()
        {
            _MyLinkedListInt = default;
            _MyListInt = default;
            _MyListInt2 = default;
            _MyListNullableEnabledContext = default;
            _MySortedSetInt = default;
            _MyLinkedListInt_Accessed = _MyListInt_Accessed = _MyListInt2_Accessed = _MyListNullableEnabledContext_Accessed = _MySortedSetInt_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location6214*/
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1009;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location6215*/public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location6216*/_MyLinkedListInt_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location6217*/_MyListInt_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location6218*/_MyListInt2_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location6219*/_MyListNullableEnabledContext_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location6220*/_MySortedSetInt_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location6221*/_DotNetList_Values_EndByteIndex = bytesSoFar;
            /*Location6222*/        }
            
            /*Location6223*/public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location6224*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location6225*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location6226*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location6227*/}
                    /*Location6228*/}
                    /*Location6229*/
                    public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location6230*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location6231*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location6232*/}
                                /*Location6233*//*Location6234*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location6235*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location6236*/}
                            /*Location6237*/
                            protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                /*Location6238*/if (_MyLinkedListInt_Accessed && _MyLinkedListInt != null)
                                {
                                    _MyLinkedListInt = (LinkedList<int>) CloneOrChange_LinkedList_Gint_g(_MyLinkedListInt, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location6239*/if (_MyListInt_Accessed && _MyListInt != null)
                                {
                                    _MyListInt = (List<int>) CloneOrChange_List_Gint_g(_MyListInt, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location6240*/if (_MyListInt2_Accessed && _MyListInt2 != null)
                                {
                                    _MyListInt2 = (List<int>) CloneOrChange_List_Gint_g(_MyListInt2, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location6241*/if (_MyListNullableEnabledContext_Accessed && _MyListNullableEnabledContext != null)
                                {
                                    _MyListNullableEnabledContext = (List<NullableEnabledContext>) CloneOrChange_List_GNullableEnabledContext_g(_MyListNullableEnabledContext, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location6242*/if (_MySortedSetInt_Accessed && _MySortedSetInt != null)
                                {
                                    _MySortedSetInt = (SortedSet<int>) CloneOrChange_SortedSet_Gint_g(_MySortedSetInt, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location6243*/}
                                
                                /*Location6244*/
                                protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    int startPosition = writer.Position;
                                    int startOfObjectPosition = 0;
                                    // header information
                                    /*Location6245*/if (includeUniqueID)
                                    {
                                        if (!ContainsOpenGenericParameters)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                        }
                                        else
                                        {
                                            WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                                        }
                                    }
                                    /*Location6246*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                    writer.Write((byte)includeChildrenMode);
                                    /*Location6247*/// write properties
                                    /*Location6248*/startOfObjectPosition = writer.Position;
                                    /*Location6249*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyLinkedListInt_Accessed)
                                    {
                                        var deserialized = MyLinkedListInt;
                                    }
                                    /*Location6250*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyLinkedListInt, isBelievedDirty: MyLinkedListInt_Dirty || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyLinkedListInt_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyLinkedListInt_ByteIndex, _MyLinkedListInt_ByteLength, false, false, null),
                                    verifyCleanness: verifyCleanness,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_LinkedList_Gint_g(ref w, _MyLinkedListInt,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location6251*/if (updateStoredBuffer)
                                    {
                                        _MyLinkedListInt_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location6252*/startOfObjectPosition = writer.Position;
                                    /*Location6253*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyListInt_Accessed)
                                    {
                                        var deserialized = MyListInt;
                                    }
                                    /*Location6254*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyListInt, isBelievedDirty: MyListInt_Dirty || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyListInt_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyListInt_ByteIndex, _MyListInt_ByteLength, false, false, null),
                                    verifyCleanness: verifyCleanness,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_List_Gint_g(ref w, _MyListInt,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location6255*/if (updateStoredBuffer)
                                    {
                                        _MyListInt_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location6256*/startOfObjectPosition = writer.Position;
                                    /*Location6257*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyListInt2_Accessed)
                                    {
                                        var deserialized = MyListInt2;
                                    }
                                    /*Location6258*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyListInt2, isBelievedDirty: _MyListInt2_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyListInt2_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyListInt2_ByteIndex, _MyListInt2_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_List_Gint_g(ref w, _MyListInt2,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location6259*/if (updateStoredBuffer)
                                    {
                                        _MyListInt2_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location6260*/startOfObjectPosition = writer.Position;
                                    /*Location6261*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyListNullableEnabledContext_Accessed)
                                    {
                                        var deserialized = MyListNullableEnabledContext;
                                    }
                                    /*Location6262*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyListNullableEnabledContext, isBelievedDirty: _MyListNullableEnabledContext_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyListNullableEnabledContext_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyListNullableEnabledContext_ByteIndex, _MyListNullableEnabledContext_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_List_GNullableEnabledContext_g(ref w, _MyListNullableEnabledContext,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location6263*/if (updateStoredBuffer)
                                    {
                                        _MyListNullableEnabledContext_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location6264*/startOfObjectPosition = writer.Position;
                                    /*Location6265*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MySortedSetInt_Accessed)
                                    {
                                        var deserialized = MySortedSetInt;
                                    }
                                    /*Location6266*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MySortedSetInt, isBelievedDirty: MySortedSetInt_Dirty || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MySortedSetInt_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MySortedSetInt_ByteIndex, _MySortedSetInt_ByteLength, false, false, null),
                                    verifyCleanness: verifyCleanness,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_SortedSet_Gint_g(ref w, _MySortedSetInt,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location6267*/if (updateStoredBuffer)
                                    {
                                        _MySortedSetInt_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location6268*/if (updateStoredBuffer)
                                    {
                                        /*Location6269*/_DotNetList_Values_EndByteIndex = writer.Position - startPosition;
                                        /*Location6270*/}
                                        /*Location6271*/}
                                        /*Location6272*/
                                        /* Conversion of supported collections and tuples */
                                        /*Location6273*/
                                        private static LinkedList<int> ConvertFromBytes_LinkedList_Gint_g(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default(LinkedList<int>);
                                            }
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            LinkedList<int> collection = new LinkedList<int>();
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int item = span.ToDecompressedInt(ref bytesSoFar);
                                                collection.AddLast(item);
                                            }
                                            
                                            return collection;
                                        }/*Location6274*/
                                        
                                        private static void ConvertToBytes_LinkedList_Gint_g(ref BinaryBufferWriter writer, LinkedList<int> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(LinkedList<int>))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                            int itemToConvertCount = itemToConvert.Count;
                                            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                            {
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, System.Linq.Enumerable.ElementAt(itemToConvert, itemIndex));
                                            }
                                        }
                                        /*Location6275*/
                                        private static LinkedList<int> CloneOrChange_LinkedList_Gint_g(LinkedList<int> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            if (itemToClone == null)
                                            {
                                                return default;
                                            }
                                            
                                            int collectionLength = itemToClone.Count;
                                            LinkedList<int> collection = new LinkedList<int>();
                                            int itemToCloneCount = itemToClone.Count;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                var itemCopied = (int) System.Linq.Enumerable.ElementAt(itemToClone, itemIndex);
                                                collection.AddLast(itemCopied);
                                            }
                                            return collection;
                                        }
                                        /*Location6276*/
                                        private static List<int> ConvertFromBytes_List_Gint_g(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default(List<int>);
                                            }
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            List<int> collection = new List<int>(collectionLength);
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int item = span.ToDecompressedInt(ref bytesSoFar);
                                                collection.Add(item);
                                            }
                                            
                                            return collection;
                                        }/*Location6277*/
                                        
                                        private static void ConvertToBytes_List_Gint_g(ref BinaryBufferWriter writer, List<int> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(List<int>))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                            int itemToConvertCount = itemToConvert.Count;
                                            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                            {
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert[itemIndex]);
                                            }
                                        }
                                        /*Location6278*/
                                        private static List<int> CloneOrChange_List_Gint_g(List<int> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            if (itemToClone == null)
                                            {
                                                return default;
                                            }
                                            
                                            int collectionLength = itemToClone.Count;
                                            List<int> collection = new List<int>(collectionLength);
                                            int itemToCloneCount = itemToClone.Count;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                var itemCopied = (int) itemToClone[itemIndex];
                                                collection.Add(itemCopied);
                                            }
                                            return collection;
                                        }
                                        /*Location6279*/
                                        private static List<NullableEnabledContext> ConvertFromBytes_List_GNullableEnabledContext_g(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default(List<NullableEnabledContext>);
                                            }
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            List<NullableEnabledContext> collection = new List<NullableEnabledContext>(collectionLength);
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                if (lengthCollectionMember == 0)
                                                {
                                                    collection.Add(null);
                                                }
                                                else
                                                {
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                    var item = DeserializationFactory.Instance.CreateBasedOnType<NullableEnabledContext>(childData);
                                                    collection.Add(item);
                                                }
                                                bytesSoFar += lengthCollectionMember;
                                            }
                                            
                                            return collection;
                                        }/*Location6280*/
                                        
                                        private static void ConvertToBytes_List_GNullableEnabledContext_g(ref BinaryBufferWriter writer, List<NullableEnabledContext> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(List<NullableEnabledContext>))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                            int itemToConvertCount = itemToConvert.Count;
                                            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                            {
                                                if (itemToConvert[itemIndex] == null)
                                                {
                                                    writer.Write((uint)0);
                                                }
                                                else 
                                                {
                                                    
                                                    void action(ref BinaryBufferWriter w) => itemToConvert[itemIndex].SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                }
                                                
                                            }
                                        }
                                        /*Location6281*/
                                        private static List<NullableEnabledContext> CloneOrChange_List_GNullableEnabledContext_g(List<NullableEnabledContext> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            if (itemToClone == null)
                                            {
                                                return default;
                                            }
                                            
                                            int collectionLength = itemToClone.Count;
                                            List<NullableEnabledContext> collection = avoidCloningIfPossible ? itemToClone : new List<NullableEnabledContext>(collectionLength);
                                            int itemToCloneCount = itemToClone.Count;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                if (avoidCloningIfPossible)
                                                {
                                                    if (itemToClone[itemIndex] != null)
                                                    {
                                                        itemToClone[itemIndex] = (NullableEnabledContext) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                    }
                                                    continue;
                                                }
                                                if (itemToClone[itemIndex] == null)
                                                {
                                                    collection.Add(null);
                                                }
                                                else
                                                {
                                                    var itemCopied = (NullableEnabledContext) (cloneOrChangeFunc(itemToClone[itemIndex]));
                                                    collection.Add(itemCopied);
                                                }
                                                
                                            }
                                            return collection;
                                        }
                                        /*Location6282*/
                                        private static SortedSet<int> ConvertFromBytes_SortedSet_Gint_g(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default(SortedSet<int>);
                                            }
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            SortedSet<int> collection = new SortedSet<int>();
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int item = span.ToDecompressedInt(ref bytesSoFar);
                                                collection.Add(item);
                                            }
                                            
                                            return collection;
                                        }/*Location6283*/
                                        
                                        private static void ConvertToBytes_SortedSet_Gint_g(ref BinaryBufferWriter writer, SortedSet<int> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(SortedSet<int>))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                            int itemToConvertCount = itemToConvert.Count;
                                            var sortedSet = System.Linq.Enumerable.ToList(itemToConvert);
                                            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                            {
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, sortedSet[itemIndex]);
                                            }
                                        }
                                        /*Location6284*/
                                        private static SortedSet<int> CloneOrChange_SortedSet_Gint_g(SortedSet<int> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            if (itemToClone == null)
                                            {
                                                return default;
                                            }
                                            
                                            int collectionLength = itemToClone.Count;
                                            SortedSet<int> collection = new SortedSet<int>();
                                            int itemToCloneCount = itemToClone.Count;
                                            var sortedSet = System.Linq.Enumerable.ToList(itemToClone);
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                var itemCopied = (int) sortedSet[itemIndex];
                                                collection.Add(itemCopied);
                                            }
                                            return collection;
                                        }
                                        /*Location6285*/
                                    }
                                }
