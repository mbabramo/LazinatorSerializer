//c685e2fa-3273-bf8f-27ff-ad8238ec3e32
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.395
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.Collections
{
    using Lazinator.Attributes;
    using Lazinator.Buffers;
    using Lazinator.Core;
    using Lazinator.Exceptions;
    using Lazinator.Support;
    using static Lazinator.Buffers.WriteUncompressedPrimitives;
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class MultidimensionalArray : ILazinator
    {
        public bool IsStruct => false;
        
        /* Property definitions */
        
        protected int _MyArrayInt_ByteIndex;
        protected int _MyCrazyJaggedArray_ByteIndex;
        protected int _MyThreeDimArrayInt_ByteIndex;
        protected virtual int _MyArrayInt_ByteLength => _MyCrazyJaggedArray_ByteIndex - _MyArrayInt_ByteIndex;
        protected virtual int _MyCrazyJaggedArray_ByteLength => _MyThreeDimArrayInt_ByteIndex - _MyCrazyJaggedArray_ByteIndex;
        private int _MultidimensionalArray_EndByteIndex;
        protected virtual  int _MyThreeDimArrayInt_ByteLength => _MultidimensionalArray_EndByteIndex - _MyThreeDimArrayInt_ByteIndex;
        protected virtual int _OverallEndByteIndex => _MultidimensionalArray_EndByteIndex;
        
        
        protected Int32[,] _MyArrayInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32[,] MyArrayInt
        {
            get
            {
                if (!_MyArrayInt_Accessed)
                {
                    LazinateMyArrayInt();
                } 
                return _MyArrayInt;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyArrayInt = value;
                _MyArrayInt_Dirty = true;
                _MyArrayInt_Accessed = true;
            }
        }
        protected bool _MyArrayInt_Accessed;
        private void LazinateMyArrayInt()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyArrayInt = default(Int32[,]);
                _MyArrayInt_Dirty = true; 
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyArrayInt_ByteIndex, _MyArrayInt_ByteLength, null);_MyArrayInt = ConvertFromBytes_int_B_c_b(childData);
            }
            _MyArrayInt_Accessed = true;
        }
        
        
        private bool _MyArrayInt_Dirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool MyArrayInt_Dirty
        {
            get => _MyArrayInt_Dirty;
            set
            {
                if (_MyArrayInt_Dirty != value)
                {
                    _MyArrayInt_Dirty = value;
                }
                if (value && !IsDirty)
                {
                    IsDirty = true;
                }
            }
        }
        
        protected Int32[][,,][,,,] _MyCrazyJaggedArray;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32[][,,][,,,] MyCrazyJaggedArray
        {
            get
            {
                if (!_MyCrazyJaggedArray_Accessed)
                {
                    LazinateMyCrazyJaggedArray();
                }
                IsDirty = true; 
                return _MyCrazyJaggedArray;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyCrazyJaggedArray = value;
                _MyCrazyJaggedArray_Accessed = true;
            }
        }
        protected bool _MyCrazyJaggedArray_Accessed;
        private void LazinateMyCrazyJaggedArray()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyCrazyJaggedArray = default(Int32[][,,][,,,]);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyCrazyJaggedArray_ByteIndex, _MyCrazyJaggedArray_ByteLength, null);_MyCrazyJaggedArray = ConvertFromBytes_int_B_b_B_c_c_b_B_c_c_c_b(childData);
            }
            _MyCrazyJaggedArray_Accessed = true;
        }
        
        
        protected Int32[,,] _MyThreeDimArrayInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32[,,] MyThreeDimArrayInt
        {
            get
            {
                if (!_MyThreeDimArrayInt_Accessed)
                {
                    LazinateMyThreeDimArrayInt();
                }
                IsDirty = true; 
                return _MyThreeDimArrayInt;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyThreeDimArrayInt = value;
                _MyThreeDimArrayInt_Accessed = true;
            }
        }
        protected bool _MyThreeDimArrayInt_Accessed;
        private void LazinateMyThreeDimArrayInt()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyThreeDimArrayInt = default(Int32[,,]);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyThreeDimArrayInt_ByteIndex, _MyThreeDimArrayInt_ByteLength, null);_MyThreeDimArrayInt = ConvertFromBytes_int_B_c_c_b(childData);
            }
            _MyThreeDimArrayInt_Accessed = true;
        }
        
        
        /* Serialization, deserialization, and object relationships */
        
        public MultidimensionalArray(IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren)
        {
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public MultidimensionalArray(LazinatorMemory serializedBytes, ILazinator parent = null, IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren, int? lazinatorObjectVersion = null)
        {
            if (lazinatorObjectVersion != null)
            {
                LazinatorObjectVersion = (int) lazinatorObjectVersion;
            }
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorMemoryStorage.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        protected virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        protected virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialReadOnlyMemory.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt32(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt32(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            int totalBytes = ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return _OverallEndByteIndex;
        }
        
        public virtual void SerializeLazinator()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorMemoryStorage.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
                
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(LazinatorSerializationOptions.Default);
            }
            else
            {
                BufferWriter writer = new BufferWriter(LazinatorMemoryStorage.LengthInt ?? 0);
                LazinatorMemoryStorage.WriteToBuffer(ref writer);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual LazinatorMemory SerializeLazinator(in LazinatorSerializationOptions options) 
        {
            if (LazinatorMemoryStorage.IsEmpty || options.IncludeChildrenMode != OriginalIncludeChildrenMode || (options.SerializeDiffs || options.VerifyCleanness || IsDirty || (options.IncludeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(options);
            }
            BufferWriter writer = new BufferWriter(LazinatorMemoryStorage.LengthInt ?? 0);
            LazinatorMemoryStorage.WriteToBuffer(ref writer);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(in LazinatorSerializationOptions options) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.LengthInt ?? ExpandableBytes.DefaultMinBufferSize;
            BufferWriter writer = new BufferWriter(bufferSize);
            SerializeToExistingBuffer(ref writer, options);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            MultidimensionalArray clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new MultidimensionalArray(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (MultidimensionalArray)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, this);
                clone = new MultidimensionalArray(bytes);
            }
            return clone;
        }
        
        protected virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            MultidimensionalArray typedClone = (MultidimensionalArray) clone;
            typedClone.MyArrayInt = CloneOrChange_int_B_c_b(MyArrayInt, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyCrazyJaggedArray = CloneOrChange_int_B_b_B_c_c_b_B_c_c_c_b(MyCrazyJaggedArray, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyThreeDimArrayInt = CloneOrChange_int_B_c_c_b(MyThreeDimArrayInt, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            yield break;
        }
        
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            yield return ("MyArrayInt", (object)MyArrayInt);
            yield return ("MyCrazyJaggedArray", (object)MyCrazyJaggedArray);
            yield return ("MyThreeDimArrayInt", (object)MyThreeDimArrayInt);
            yield break;
        }
        
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            if ((!exploreOnlyDeserializedChildren && MyArrayInt != null) || (_MyArrayInt_Accessed && _MyArrayInt != null))
            {
                _MyArrayInt = (Int32[,]) CloneOrChange_int_B_c_b(_MyArrayInt, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && MyCrazyJaggedArray != null) || (_MyCrazyJaggedArray_Accessed && _MyCrazyJaggedArray != null))
            {
                _MyCrazyJaggedArray = (Int32[][,,][,,,]) CloneOrChange_int_B_b_B_c_c_b_B_c_c_c_b(_MyCrazyJaggedArray, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && MyThreeDimArrayInt != null) || (_MyThreeDimArrayInt_Accessed && _MyThreeDimArrayInt != null))
            {
                _MyThreeDimArrayInt = (Int32[,,]) CloneOrChange_int_B_c_c_b(_MyThreeDimArrayInt, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        
        public virtual void FreeInMemoryObjects()
        {
            _MyArrayInt = default;
            _MyCrazyJaggedArray = default;
            _MyThreeDimArrayInt = default;
            _MyArrayInt_Accessed = _MyCrazyJaggedArray_Accessed = _MyThreeDimArrayInt_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1000;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        protected virtual int ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            TabbedText.WriteLine($"");
            TabbedText.WriteLine($"Converting LazinatorTests.Examples.Collections.MultidimensionalArray from bytes at: " + LazinatorMemoryStorage.ToLocationString());
            ReadOnlySpan<byte> span = LazinatorMemoryStorage.InitialReadOnlyMemory.Span;
            ConvertFromBytesForPrimitiveProperties(span, includeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            TabbedText.Tabs++;
            int lengthForLengths = 12;
            int totalChildrenSize = ConvertFromBytesForChildProperties(span, includeChildrenMode, serializedVersionNumber, bytesSoFar + lengthForLengths, ref bytesSoFar);;
            TabbedText.Tabs--;
            return bytesSoFar + totalChildrenSize;
        }
        
        protected virtual void ConvertFromBytesForPrimitiveProperties(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
        }
        
        protected virtual int ConvertFromBytesForChildProperties(ReadOnlySpan<byte> span, IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, int indexOfFirstChild, ref int bytesSoFar)
        {
            int totalChildrenBytes = 0;
            TabbedText.WriteLine($"MyArrayInt: Length is at {bytesSoFar}; start location is {indexOfFirstChild + totalChildrenBytes}"); 
            _MyArrayInt_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            TabbedText.WriteLine($"MyCrazyJaggedArray: Length is at {bytesSoFar}; start location is {indexOfFirstChild + totalChildrenBytes}"); 
            _MyCrazyJaggedArray_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            TabbedText.WriteLine($"MyThreeDimArrayInt: Length is at {bytesSoFar}; start location is {indexOfFirstChild + totalChildrenBytes}"); 
            _MyThreeDimArrayInt_ByteIndex = indexOfFirstChild + totalChildrenBytes;
            totalChildrenBytes += span.ToInt32(ref bytesSoFar);
            _MultidimensionalArray_EndByteIndex = indexOfFirstChild + totalChildrenBytes;
            return totalChildrenBytes;
        }
        
        public virtual void SerializeToExistingBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options)
        {
            TabbedText.WriteLine("");
            TabbedText.WriteLine($"Initiating serialization of LazinatorTests.Examples.Collections.MultidimensionalArray at position {writer.ToLocationString()}");
            int startPosition = writer.ActiveMemoryPosition;
            WritePropertiesIntoBuffer(ref writer, options, true);
            if (options.UpdateStoredBuffer)
            {
                UpdateStoredBuffer(ref writer, startPosition, writer.ActiveMemoryPosition - startPosition, options.IncludeChildrenMode, false);
            }
        }
        
        public virtual void UpdateStoredBuffer(ref BufferWriter writer, long startPosition, long length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
        {
            _IsDirty = false;
            if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                _DescendantIsDirty = false;
                if (updateDeserializedChildren)
                {
                    UpdateDeserializedChildren(ref writer, startPosition);
                }
                
            }
            else
            {
                ThrowHelper.ThrowCannotUpdateStoredBuffer();
            }
            
            var newBuffer = writer.Slice(startPosition, length);
            LazinatorMemoryStorage = newBuffer;
        }
        
        protected virtual void UpdateDeserializedChildren(ref BufferWriter writer, long startPosition)
        {
            if (_MyArrayInt_Accessed && _MyArrayInt != null)
            {
                _MyArrayInt = (Int32[,]) CloneOrChange_int_B_c_b(_MyArrayInt, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_MyCrazyJaggedArray_Accessed && _MyCrazyJaggedArray != null)
            {
                _MyCrazyJaggedArray = (Int32[][,,][,,,]) CloneOrChange_int_B_b_B_c_c_b_B_c_c_c_b(_MyCrazyJaggedArray, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_MyThreeDimArrayInt_Accessed && _MyThreeDimArrayInt != null)
            {
                _MyThreeDimArrayInt = (Int32[,,]) CloneOrChange_int_B_c_c_b(_MyThreeDimArrayInt, l => l.RemoveBufferInHierarchy(), true);
            }
            
        }
        
        
        protected virtual void WritePropertiesIntoBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options, bool includeUniqueID)
        {
            int startPosition = writer.ActiveMemoryPosition;
            TabbedText.WriteLine($"Writing properties for LazinatorTests.Examples.Collections.MultidimensionalArray.");
            TabbedText.WriteLine($"Properties uniqueID {(LazinatorGenericID.IsEmpty ? LazinatorUniqueID.ToString() : String.Join("","",LazinatorGenericID.TypeAndInnerTypeIDs.ToArray()))} {(includeUniqueID ? "Included" : "Omitted")}, Lazinator version {Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion} True, Object version {LazinatorObjectVersion} True, IncludeChildrenMode {options.IncludeChildrenMode} True");
            TabbedText.WriteLine($"IsDirty {IsDirty} DescendantIsDirty {DescendantIsDirty} HasParentClass {LazinatorParents.Any()}");
            if (includeUniqueID)
            {
                if (!ContainsOpenGenericParameters)
                {
                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                }
                else
                {
                    WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                }
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
            writer.Write((byte)options.IncludeChildrenMode);
            // write properties
            
            
            int lengthForLengths = 12;
            
            var previousLengthsPosition = writer.SetLengthsPosition(lengthForLengths);
            TabbedText.WriteLine($"Byte {writer.ActiveMemoryPosition}, Leaving {lengthForLengths} bytes to store lengths of child objects");
            WriteChildrenPropertiesIntoBuffer(ref writer, options, includeUniqueID, startPosition);
            writer.ResetLengthsPosition(previousLengthsPosition);
            TabbedText.WriteLine($"Byte {writer.ActiveMemoryPosition} (end of MultidimensionalArray) ");
            
        }
        
        protected virtual void WritePrimitivePropertiesIntoBuffer(ref BufferWriter writer, in LazinatorSerializationOptions options, bool includeUniqueID)
        {
        }
        protected virtual void WriteChildrenPropertiesIntoBuffer(ref BufferWriter writer, LazinatorSerializationOptions options, bool includeUniqueID, int startOfObjectPosition)
        {
            if (options.SplittingPossible)
            {
                options = options.WithoutSplittingPossible();
            }
            int startOfChildPosition = 0;
            TabbedText.WriteLine($"Byte {writer.ActiveMemoryPosition}, MyArrayInt (accessed? {_MyArrayInt_Accessed}) (dirty? {_MyArrayInt_Dirty})");
            TabbedText.Tabs++;
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_MyArrayInt_Accessed)
            {
                var deserialized = MyArrayInt;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyArrayInt, isBelievedDirty: MyArrayInt_Dirty || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyArrayInt_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyArrayInt_ByteIndex, _MyArrayInt_ByteLength, null),
            verifyCleanness: options.VerifyCleanness,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_int_B_c_b(ref w, _MyArrayInt,
            options));
            if (options.UpdateStoredBuffer)
            {
                _MyArrayInt_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            TabbedText.Tabs--;
            TabbedText.WriteLine($"Byte {writer.ActiveMemoryPosition}, MyCrazyJaggedArray (accessed? {_MyCrazyJaggedArray_Accessed})");
            TabbedText.Tabs++;
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_MyCrazyJaggedArray_Accessed)
            {
                var deserialized = MyCrazyJaggedArray;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyCrazyJaggedArray, isBelievedDirty: _MyCrazyJaggedArray_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyCrazyJaggedArray_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyCrazyJaggedArray_ByteIndex, _MyCrazyJaggedArray_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_int_B_b_B_c_c_b_B_c_c_c_b(ref w, _MyCrazyJaggedArray,
            options));
            if (options.UpdateStoredBuffer)
            {
                _MyCrazyJaggedArray_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            TabbedText.Tabs--;
            TabbedText.WriteLine($"Byte {writer.ActiveMemoryPosition}, MyThreeDimArrayInt (accessed? {_MyThreeDimArrayInt_Accessed})");
            TabbedText.Tabs++;
            startOfChildPosition = writer.ActiveMemoryPosition;
            if ((options.IncludeChildrenMode != IncludeChildrenMode.IncludeAllChildren || options.IncludeChildrenMode != OriginalIncludeChildrenMode) && !_MyThreeDimArrayInt_Accessed)
            {
                var deserialized = MyThreeDimArrayInt;
            }
            WriteNonLazinatorObject(
            nonLazinatorObject: _MyThreeDimArrayInt, isBelievedDirty: _MyThreeDimArrayInt_Accessed || (options.IncludeChildrenMode != OriginalIncludeChildrenMode),
            isAccessed: _MyThreeDimArrayInt_Accessed, writer: ref writer,
            getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyThreeDimArrayInt_ByteIndex, _MyThreeDimArrayInt_ByteLength, null),
            verifyCleanness: false,
            binaryWriterAction: (ref BufferWriter w, bool v) =>
            ConvertToBytes_int_B_c_c_b(ref w, _MyThreeDimArrayInt,
            options));
            if (options.UpdateStoredBuffer)
            {
                _MyThreeDimArrayInt_ByteIndex = startOfChildPosition - startOfObjectPosition;
                
            }
            TabbedText.Tabs--;
            if (options.UpdateStoredBuffer)
            {
                _MultidimensionalArray_EndByteIndex = writer.ActiveMemoryPosition - startOfObjectPosition;
            }
            
        }
        /* Conversion of supported collections and tuples */
        
        private static Int32[,] ConvertFromBytes_int_B_c_b(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(Int32[,]);
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength0 = span.ToDecompressedInt32(ref bytesSoFar);
            int collectionLength1 = span.ToDecompressedInt32(ref bytesSoFar);
            
            Int32[,] collection = new int[collectionLength0, collectionLength1];
            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
            {
                int item = span.ToDecompressedInt32(ref bytesSoFar);
                collection[itemIndex0, itemIndex1] = item;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_int_B_c_b(ref BufferWriter writer, Int32[,] itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Int32[,]))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(0));
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(1));
            int collectionLength0 = itemToConvert.GetLength(0);
            int collectionLength1 = itemToConvert.GetLength(1);
            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
            {
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert[itemIndex0, itemIndex1]);
            }
        }
        
        private static Int32[,] CloneOrChange_int_B_c_b(Int32[,] itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Length;
            int collectionLength0 = itemToClone.GetLength(0);
            int collectionLength1 = itemToClone.GetLength(1);
            Int32[,] collection = new int[collectionLength0, collectionLength1];
            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
            {
                var itemCopied = (int) itemToClone[itemIndex0, itemIndex1];
                collection[itemIndex0, itemIndex1] = itemCopied;
            }
            return collection;
        }
        
        private static Int32[][,,][,,,] ConvertFromBytes_int_B_b_B_c_c_b_B_c_c_c_b(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(Int32[][,,][,,,]);
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength = span.ToDecompressedInt32(ref bytesSoFar);
            
            Int32[][,,][,,,] collection = new Int32[collectionLength][,,][,,,];
            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember == 0)
                {
                    collection[itemIndex] = default(Int32[,,][,,,]);
                }
                else
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = ConvertFromBytes_int_B_c_c_b_B_c_c_c_b(childData);
                    collection[itemIndex] = item;
                }bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_int_B_b_B_c_c_b_B_c_c_c_b(ref BufferWriter writer, Int32[][,,][,,,] itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Int32[][,,][,,,]))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Length);
            int itemToConvertCount = itemToConvert.Length;
            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
            {
                if (itemToConvert[itemIndex] == default(Int32[,,][,,,]))
                {
                    writer.Write((int)0);
                }
                else 
                {
                    
                    void action(ref BufferWriter w) => ConvertToBytes_int_B_c_c_b_B_c_c_c_b(ref w, itemToConvert[itemIndex], options);
                    WriteToBinaryWithInt32LengthPrefix(ref writer, action);
                }
                
            }
        }
        
        private static Int32[][,,][,,,] CloneOrChange_int_B_b_B_c_c_b_B_c_c_c_b(Int32[][,,][,,,] itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Length;
            Int32[][,,][,,,] collection = new Int32[collectionLength][,,][,,,];
            int itemToCloneCount = itemToClone.Length;
            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
            {
                if (itemToClone[itemIndex] == null)
                {
                    collection[itemIndex] = default(Int32[,,][,,,]);
                }
                else
                {
                    var itemCopied = (Int32[,,][,,,]) CloneOrChange_int_B_c_c_b_B_c_c_c_b(itemToClone[itemIndex], cloneOrChangeFunc, avoidCloningIfPossible);
                    collection[itemIndex] = itemCopied;
                }
            }
            return collection;
        }
        
        private static Int32[,,][,,,] ConvertFromBytes_int_B_c_c_b_B_c_c_c_b(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(Int32[,,][,,,]);
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength0 = span.ToDecompressedInt32(ref bytesSoFar);
            int collectionLength1 = span.ToDecompressedInt32(ref bytesSoFar);
            int collectionLength2 = span.ToDecompressedInt32(ref bytesSoFar);
            
            Int32[,,][,,,] collection = new Int32[collectionLength0, collectionLength1, collectionLength2][,,,];
            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
            {
                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember == 0)
                {
                    collection[itemIndex0, itemIndex1, itemIndex2] = default(Int32[,,,]);
                }
                else
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                    var item = ConvertFromBytes_int_B_c_c_c_b(childData);
                    collection[itemIndex0, itemIndex1, itemIndex2] = item;
                }bytesSoFar += lengthCollectionMember;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_int_B_c_c_b_B_c_c_c_b(ref BufferWriter writer, Int32[,,][,,,] itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Int32[,,][,,,]))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(0));
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(1));
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(2));
            int collectionLength0 = itemToConvert.GetLength(0);
            int collectionLength1 = itemToConvert.GetLength(1);
            int collectionLength2 = itemToConvert.GetLength(2);
            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
            {
                if (itemToConvert[itemIndex0, itemIndex1, itemIndex2] == default(Int32[,,,]))
                {
                    writer.Write((int)0);
                }
                else 
                {
                    
                    void action(ref BufferWriter w) => ConvertToBytes_int_B_c_c_c_b(ref w, itemToConvert[itemIndex0, itemIndex1, itemIndex2], options);
                    WriteToBinaryWithInt32LengthPrefix(ref writer, action);
                }
                
            }
        }
        
        private static Int32[,,][,,,] CloneOrChange_int_B_c_c_b_B_c_c_c_b(Int32[,,][,,,] itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Length;
            int collectionLength0 = itemToClone.GetLength(0);
            int collectionLength1 = itemToClone.GetLength(1);
            int collectionLength2 = itemToClone.GetLength(2);
            Int32[,,][,,,] collection = new Int32[collectionLength0, collectionLength1, collectionLength2][,,,];
            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
            {
                if (itemToClone[itemIndex0, itemIndex1, itemIndex2] == null)
                {
                    collection[itemIndex0, itemIndex1, itemIndex2] = default(Int32[,,,]);
                }
                else
                {
                    var itemCopied = (Int32[,,,]) CloneOrChange_int_B_c_c_c_b(itemToClone[itemIndex0, itemIndex1, itemIndex2], cloneOrChangeFunc, avoidCloningIfPossible);
                    collection[itemIndex0, itemIndex1, itemIndex2] = itemCopied;
                }
            }
            return collection;
        }
        
        private static Int32[,,,] ConvertFromBytes_int_B_c_c_c_b(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(Int32[,,,]);
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength0 = span.ToDecompressedInt32(ref bytesSoFar);
            int collectionLength1 = span.ToDecompressedInt32(ref bytesSoFar);
            int collectionLength2 = span.ToDecompressedInt32(ref bytesSoFar);
            int collectionLength3 = span.ToDecompressedInt32(ref bytesSoFar);
            
            Int32[,,,] collection = new int[collectionLength0, collectionLength1, collectionLength2, collectionLength3];
            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
            for (int itemIndex3 = 0; itemIndex3 < collectionLength3; itemIndex3++)
            {
                int item = span.ToDecompressedInt32(ref bytesSoFar);
                collection[itemIndex0, itemIndex1, itemIndex2, itemIndex3] = item;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_int_B_c_c_c_b(ref BufferWriter writer, Int32[,,,] itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Int32[,,,]))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(0));
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(1));
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(2));
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(3));
            int collectionLength0 = itemToConvert.GetLength(0);
            int collectionLength1 = itemToConvert.GetLength(1);
            int collectionLength2 = itemToConvert.GetLength(2);
            int collectionLength3 = itemToConvert.GetLength(3);
            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
            for (int itemIndex3 = 0; itemIndex3 < collectionLength3; itemIndex3++)
            {
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert[itemIndex0, itemIndex1, itemIndex2, itemIndex3]);
            }
        }
        
        private static Int32[,,,] CloneOrChange_int_B_c_c_c_b(Int32[,,,] itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Length;
            int collectionLength0 = itemToClone.GetLength(0);
            int collectionLength1 = itemToClone.GetLength(1);
            int collectionLength2 = itemToClone.GetLength(2);
            int collectionLength3 = itemToClone.GetLength(3);
            Int32[,,,] collection = new int[collectionLength0, collectionLength1, collectionLength2, collectionLength3];
            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
            for (int itemIndex3 = 0; itemIndex3 < collectionLength3; itemIndex3++)
            {
                var itemCopied = (int) itemToClone[itemIndex0, itemIndex1, itemIndex2, itemIndex3];
                collection[itemIndex0, itemIndex1, itemIndex2, itemIndex3] = itemCopied;
            }
            return collection;
        }
        
        private static Int32[,,] ConvertFromBytes_int_B_c_c_b(LazinatorMemory storage)
        {
            if (storage.Length == 0)
            {
                return default(Int32[,,]);
            }
            ReadOnlySpan<byte> span = storage.InitialReadOnlyMemory.Span;
            int bytesSoFar = 0;
            int collectionLength0 = span.ToDecompressedInt32(ref bytesSoFar);
            int collectionLength1 = span.ToDecompressedInt32(ref bytesSoFar);
            int collectionLength2 = span.ToDecompressedInt32(ref bytesSoFar);
            
            Int32[,,] collection = new int[collectionLength0, collectionLength1, collectionLength2];
            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
            {
                int item = span.ToDecompressedInt32(ref bytesSoFar);
                collection[itemIndex0, itemIndex1, itemIndex2] = item;
            }
            
            return collection;
        }
        
        private static void ConvertToBytes_int_B_c_c_b(ref BufferWriter writer, Int32[,,] itemToConvert, LazinatorSerializationOptions options)
        {
            if (itemToConvert == default(Int32[,,]))
            {
                return;
            }
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(0));
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(1));
            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.GetLength(2));
            int collectionLength0 = itemToConvert.GetLength(0);
            int collectionLength1 = itemToConvert.GetLength(1);
            int collectionLength2 = itemToConvert.GetLength(2);
            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
            {
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert[itemIndex0, itemIndex1, itemIndex2]);
            }
        }
        
        private static Int32[,,] CloneOrChange_int_B_c_c_b(Int32[,,] itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
        {
            if (itemToClone == null)
            {
                return default;
            }
            int collectionLength = itemToClone.Length;
            int collectionLength0 = itemToClone.GetLength(0);
            int collectionLength1 = itemToClone.GetLength(1);
            int collectionLength2 = itemToClone.GetLength(2);
            Int32[,,] collection = new int[collectionLength0, collectionLength1, collectionLength2];
            for (int itemIndex0 = 0; itemIndex0 < collectionLength0; itemIndex0++)
            for (int itemIndex1 = 0; itemIndex1 < collectionLength1; itemIndex1++)
            for (int itemIndex2 = 0; itemIndex2 < collectionLength2; itemIndex2++)
            {
                var itemCopied = (int) itemToClone[itemIndex0, itemIndex1, itemIndex2];
                collection[itemIndex0, itemIndex1, itemIndex2] = itemCopied;
            }
            return collection;
        }
        
    }
}
