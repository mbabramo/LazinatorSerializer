/*Location4740*//*Location4725*///af582016-ed09-753e-9ece-a3e3b3aeb692
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples
{/*Location4726*/
    using Lazinator.Attributes;/*Location4727*/
    using Lazinator.Buffers;/*Location4728*/
    using Lazinator.Core;/*Location4729*/
    using Lazinator.Exceptions;/*Location4730*/
    using Lazinator.Support;/*Location4731*/
    using LazinatorCollections;/*Location4732*/
    using System;/*Location4733*/
    using System.Buffers;/*Location4734*/
    using System.Collections.Generic;/*Location4735*/
    using System.Diagnostics;/*Location4736*/
    using System.IO;/*Location4737*/
    using System.Linq;/*Location4738*/
    using System.Runtime.InteropServices;/*Location4739*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class DerivedLazinatorList<T> : LazinatorCollections.LazinatorList<T>, ILazinator
    {
        /*Location4741*//* Property definitions */
        
        
        /*Location4742*/
        protected string _MyListName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string MyListName
        {
            get
            {
                return _MyListName;
            }
            set
            {
                IsDirty = true;
                _MyListName = value;
            }
        }
        /*Location4744*/        /* Clone overrides */
        
        public DerivedLazinatorList(IncludeChildrenMode originalIncludeChildrenMode) : base(originalIncludeChildrenMode)
        {
        }
        
        public DerivedLazinatorList(LazinatorMemory serializedBytes, ILazinator parent = null) : base(serializedBytes, parent)
        {
        }
        
        public override ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            DerivedLazinatorList<T> clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new DerivedLazinatorList<T>(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (DerivedLazinatorList<T>)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, false, this);
                clone = new DerivedLazinatorList<T>(bytes);
            }
            return clone;
        }
        
        /* Properties */
        /*Location4745*/
        
        public override IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            foreach (var inheritedYield in base.EnumerateNonLazinatorProperties())
            {
                yield return inheritedYield;
            }
            /*Location4746*/yield return ("MyListName", (object)MyListName);
            /*Location4747*/yield break;
        }
        /*Location4748*/
        public override ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            base.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, false);
            /*Location4749*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location4750*/
        public override void FreeInMemoryObjects()
        {
            base.FreeInMemoryObjects();
            
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
            OnFreeInMemoryObjects();
        }
        /*Location4751*/
        /* Conversion */
        
        public override int LazinatorUniqueID => 1003;
        
        protected override bool ContainsOpenGenericParameters => true;
        public override LazinatorGenericIDType LazinatorGenericID => LazinatorGenericIDType.GetCachedForType<DerivedLazinatorList<T>>(() => DeserializationFactory.Instance.GetUniqueIDListForGenericType(1003, new Type[] { typeof(T) }));
        
        
        public override int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location4752*/public override void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            base.ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location4753*/_MyListName = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            /*Location4754*/        }
            
            /*Location4755*/public override void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location4756*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location4757*/PreSerialization(verifyCleanness, updateStoredBuffer);
                int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location4758*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location4759*/}
                    /*Location4760*/}
                    /*Location4761*/
                    public override void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location4762*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location4763*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location4764*/OnUpdateDeserializedChildren(ref writer, startPosition);
                            }
                            /*Location4765*//*Location4766*/
                        }
                        else
                        {
                            ThrowHelper.ThrowCannotUpdateStoredBuffer();
                        }
                        /*Location4767*/
                        var newBuffer = writer.Slice(startPosition, length);
                        LazinatorMemoryStorage = newBuffer;
                        /*Location4768*/}
                        /*Location4769*/
                        protected override void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                        {
                            base.UpdateDeserializedChildren(ref writer, startPosition);
                            /*Location4770*/}
                            
                            /*Location4771*/
                            protected override void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                            {
                                base.WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, includeUniqueID);
                                /*Location4772*/// write properties
                                /*Location4773*/EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _MyListName);
                                /*Location4774*/OnPropertiesWritten(updateStoredBuffer);
                                /*Location4775*/}
                                /*Location4776*/
                            }
                        }
