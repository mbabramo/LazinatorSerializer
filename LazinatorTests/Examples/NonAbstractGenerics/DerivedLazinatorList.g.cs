/*Location3590*//*Location3575*///af582016-ed09-753e-9ece-a3e3b3aeb692
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples
{/*Location3576*/
    using Lazinator.Attributes;/*Location3577*/
    using Lazinator.Buffers;/*Location3578*/
    using Lazinator.Core;/*Location3579*/
    using Lazinator.Exceptions;/*Location3580*/
    using Lazinator.Support;/*Location3581*/
    using LazinatorCollections;/*Location3582*/
    using System;/*Location3583*/
    using System.Buffers;/*Location3584*/
    using System.Collections.Generic;/*Location3585*/
    using System.Diagnostics;/*Location3586*/
    using System.IO;/*Location3587*/
    using System.Linq;/*Location3588*/
    using System.Runtime.InteropServices;/*Location3589*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class DerivedLazinatorList<T> : LazinatorCollections.LazinatorList<T>, ILazinator
    {
        /*Location3591*//* Property definitions */
        
        
        /*Location3592*/
        protected string _MyListName;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public string MyListName
        {
            get
            {
                return _MyListName;
            }
            set
            {
                IsDirty = true;
                _MyListName = value;
            }
        }
        /*Location3594*/        /* Clone overrides */
        
        public DerivedLazinatorList(LazinatorConstructorEnum constructorEnum) : base(constructorEnum)
        {
        }
        
        public override ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            var clone = new DerivedLazinatorList<T>(LazinatorConstructorEnum.LazinatorConstructor)
            {
                OriginalIncludeChildrenMode = includeChildrenMode
            };
            clone = CompleteClone(this, clone, includeChildrenMode, cloneBufferOptions);
            return clone;
        }
        
        /* Properties */
        /*Location3595*/
        
        public override IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            foreach (var inheritedYield in base.EnumerateNonLazinatorProperties())
            {
                yield return inheritedYield;
            }
            /*Location3596*/yield return ("MyListName", (object)MyListName);
            /*Location3597*/yield break;
        }
        /*Location3598*/
        public override ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            base.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, false);
            /*Location3599*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location3600*/
        public override void FreeInMemoryObjects()
        {
            base.FreeInMemoryObjects();
            
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
            OnFreeInMemoryObjects();
        }
        /*Location3601*/
        /* Conversion */
        
        public override int LazinatorUniqueID => 1003;
        
        protected override bool ContainsOpenGenericParameters => true;
        public override LazinatorGenericIDType LazinatorGenericID => LazinatorGenericIDType.GetCachedForType<DerivedLazinatorList<T>>(() => DeserializationFactory.Instance.GetUniqueIDListForGenericType(1003, new Type[] { typeof(T) }));
        
        
        public override int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location3602*/public override void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            base.ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location3603*/_MyListName = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            /*Location3604*/        }
            
            /*Location3605*/public override void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location3606*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location3607*/PreSerialization(verifyCleanness, updateStoredBuffer);
                int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location3608*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location3609*/}
                    /*Location3610*/}
                    /*Location3611*/
                    public override void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location3612*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location3613*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location3614*/OnUpdateDeserializedChildren(ref writer, startPosition);
                            }
                            /*Location3615*//*Location3616*/
                        }
                        else
                        {
                            ThrowHelper.ThrowCannotUpdateStoredBuffer();
                        }
                        /*Location3617*/
                        var newBuffer = writer.Slice(startPosition, length);
                        LazinatorMemoryStorage = newBuffer;
                        /*Location3618*/}
                        /*Location3619*/
                        protected override void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                        {
                            base.UpdateDeserializedChildren(ref writer, startPosition);
                            /*Location3620*/}
                            
                            /*Location3621*/
                            protected override void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                            {
                                base.WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, includeUniqueID);
                                /*Location3622*/// write properties
                                /*Location3623*/EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _MyListName);
                                /*Location3624*/OnPropertiesWritten(updateStoredBuffer);
                                /*Location3625*/}
                                /*Location3626*/
                            }
                        }
