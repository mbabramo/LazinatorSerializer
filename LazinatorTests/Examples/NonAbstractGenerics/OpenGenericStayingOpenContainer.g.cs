/*Location4196*//*Location4179*///5db2a6d2-c09b-6111-632f-58a4e4acc3e8
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.NonAbstractGenerics
{/*Location4180*/
    using Lazinator.Attributes;/*Location4181*/
    using Lazinator.Buffers;/*Location4182*/
    using Lazinator.Core;/*Location4183*/
    using Lazinator.Exceptions;/*Location4184*/
    using Lazinator.Support;/*Location4185*/
    using Lazinator.Wrappers;/*Location4186*/
    using LazinatorTests.Examples;/*Location4187*/
    using LazinatorTests.Examples.Abstract;/*Location4188*/
    using System;/*Location4189*/
    using System.Buffers;/*Location4190*/
    using System.Collections.Generic;/*Location4191*/
    using System.Diagnostics;/*Location4192*/
    using System.IO;/*Location4193*/
    using System.Linq;/*Location4194*/
    using System.Runtime.InteropServices;/*Location4195*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class OpenGenericStayingOpenContainer : ILazinator
    {
        /*Location4197*/public bool IsStruct => false;
        
        /*Location4198*//* Property definitions */
        
        /*Location4199*/        protected int _ClosedGenericBase_ByteIndex;
        /*Location4200*/        protected int _ClosedGenericFloat_ByteIndex;
        /*Location4201*/        protected int _ClosedGenericFromBaseWithBase_ByteIndex;
        /*Location4202*/        protected int _ClosedGenericInterface_ByteIndex;
        /*Location4203*/        protected int _ClosedGenericNonexclusiveInterface_ByteIndex;
        /*Location4204*/protected virtual int _ClosedGenericBase_ByteLength => _ClosedGenericFloat_ByteIndex - _ClosedGenericBase_ByteIndex;
        /*Location4205*/protected virtual int _ClosedGenericFloat_ByteLength => _ClosedGenericFromBaseWithBase_ByteIndex - _ClosedGenericFloat_ByteIndex;
        /*Location4206*/protected virtual int _ClosedGenericFromBaseWithBase_ByteLength => _ClosedGenericInterface_ByteIndex - _ClosedGenericFromBaseWithBase_ByteIndex;
        /*Location4207*/protected virtual int _ClosedGenericInterface_ByteLength => _ClosedGenericNonexclusiveInterface_ByteIndex - _ClosedGenericInterface_ByteIndex;
        /*Location4208*/private int _OpenGenericStayingOpenContainer_EndByteIndex;
        /*Location4209*/protected virtual int _ClosedGenericNonexclusiveInterface_ByteLength => _OpenGenericStayingOpenContainer_EndByteIndex - _ClosedGenericNonexclusiveInterface_ByteIndex;
        
        /*Location4210*/
        protected OpenGeneric<Base> _ClosedGenericBase;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public OpenGeneric<Base> ClosedGenericBase
        {
            get
            {
                if (!_ClosedGenericBase_Accessed)
                {
                    Lazinate_ClosedGenericBase();
                } 
                return _ClosedGenericBase;
            }
            set
            {
                if (_ClosedGenericBase != null)
                {
                    _ClosedGenericBase.LazinatorParents = _ClosedGenericBase.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ClosedGenericBase = value;
                _ClosedGenericBase_Accessed = true;
            }
        }
        protected bool _ClosedGenericBase_Accessed;
        private void Lazinate_ClosedGenericBase()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _ClosedGenericBase = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ClosedGenericBase_ByteIndex, _ClosedGenericBase_ByteLength, false, false, null);
                
                _ClosedGenericBase = DeserializationFactory.Instance.CreateBaseOrDerivedType(1033, (c, p) => new OpenGeneric<Base>(c, p), childData, this); 
            }
            
            _ClosedGenericBase_Accessed = true;
        }
        
        /*Location4211*/
        protected OpenGeneric<WFloat> _ClosedGenericFloat;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public OpenGeneric<WFloat> ClosedGenericFloat
        {
            get
            {
                if (!_ClosedGenericFloat_Accessed)
                {
                    Lazinate_ClosedGenericFloat();
                } 
                return _ClosedGenericFloat;
            }
            set
            {
                if (_ClosedGenericFloat != null)
                {
                    _ClosedGenericFloat.LazinatorParents = _ClosedGenericFloat.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ClosedGenericFloat = value;
                _ClosedGenericFloat_Accessed = true;
            }
        }
        protected bool _ClosedGenericFloat_Accessed;
        private void Lazinate_ClosedGenericFloat()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _ClosedGenericFloat = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ClosedGenericFloat_ByteIndex, _ClosedGenericFloat_ByteLength, false, false, null);
                
                _ClosedGenericFloat = DeserializationFactory.Instance.CreateBaseOrDerivedType(1033, (c, p) => new OpenGeneric<WFloat>(c, p), childData, this); 
            }
            
            _ClosedGenericFloat_Accessed = true;
        }
        
        /*Location4212*/
        protected GenericFromBase<Base> _ClosedGenericFromBaseWithBase;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public GenericFromBase<Base> ClosedGenericFromBaseWithBase
        {
            get
            {
                if (!_ClosedGenericFromBaseWithBase_Accessed)
                {
                    Lazinate_ClosedGenericFromBaseWithBase();
                } 
                return _ClosedGenericFromBaseWithBase;
            }
            set
            {
                if (_ClosedGenericFromBaseWithBase != null)
                {
                    _ClosedGenericFromBaseWithBase.LazinatorParents = _ClosedGenericFromBaseWithBase.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ClosedGenericFromBaseWithBase = value;
                _ClosedGenericFromBaseWithBase_Accessed = true;
            }
        }
        protected bool _ClosedGenericFromBaseWithBase_Accessed;
        private void Lazinate_ClosedGenericFromBaseWithBase()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _ClosedGenericFromBaseWithBase = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ClosedGenericFromBaseWithBase_ByteIndex, _ClosedGenericFromBaseWithBase_ByteLength, false, false, null);
                
                _ClosedGenericFromBaseWithBase = DeserializationFactory.Instance.CreateBaseOrDerivedType(1067, (c, p) => new GenericFromBase<Base>(c, p), childData, this); 
            }
            
            _ClosedGenericFromBaseWithBase_Accessed = true;
        }
        
        /*Location4213*/
        protected OpenGeneric<IExampleChild> _ClosedGenericInterface;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public OpenGeneric<IExampleChild> ClosedGenericInterface
        {
            get
            {
                if (!_ClosedGenericInterface_Accessed)
                {
                    Lazinate_ClosedGenericInterface();
                } 
                return _ClosedGenericInterface;
            }
            set
            {
                if (_ClosedGenericInterface != null)
                {
                    _ClosedGenericInterface.LazinatorParents = _ClosedGenericInterface.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ClosedGenericInterface = value;
                _ClosedGenericInterface_Accessed = true;
            }
        }
        protected bool _ClosedGenericInterface_Accessed;
        private void Lazinate_ClosedGenericInterface()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _ClosedGenericInterface = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ClosedGenericInterface_ByteIndex, _ClosedGenericInterface_ByteLength, false, false, null);
                
                _ClosedGenericInterface = DeserializationFactory.Instance.CreateBaseOrDerivedType(1033, (c, p) => new OpenGeneric<IExampleChild>(c, p), childData, this); 
            }
            
            _ClosedGenericInterface_Accessed = true;
        }
        
        /*Location4214*/
        protected OpenGeneric<IExampleNonexclusiveInterface> _ClosedGenericNonexclusiveInterface;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public OpenGeneric<IExampleNonexclusiveInterface> ClosedGenericNonexclusiveInterface
        {
            get
            {
                if (!_ClosedGenericNonexclusiveInterface_Accessed)
                {
                    Lazinate_ClosedGenericNonexclusiveInterface();
                } 
                return _ClosedGenericNonexclusiveInterface;
            }
            set
            {
                if (_ClosedGenericNonexclusiveInterface != null)
                {
                    _ClosedGenericNonexclusiveInterface.LazinatorParents = _ClosedGenericNonexclusiveInterface.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _ClosedGenericNonexclusiveInterface = value;
                _ClosedGenericNonexclusiveInterface_Accessed = true;
            }
        }
        protected bool _ClosedGenericNonexclusiveInterface_Accessed;
        private void Lazinate_ClosedGenericNonexclusiveInterface()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _ClosedGenericNonexclusiveInterface = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ClosedGenericNonexclusiveInterface_ByteIndex, _ClosedGenericNonexclusiveInterface_ByteLength, false, false, null);
                
                _ClosedGenericNonexclusiveInterface = DeserializationFactory.Instance.CreateBaseOrDerivedType(1033, (c, p) => new OpenGeneric<IExampleNonexclusiveInterface>(c, p), childData, this); 
            }
            
            _ClosedGenericNonexclusiveInterface_Accessed = true;
        }
        
        /*Location4220*/
        /* Serialization, deserialization, and object relationships */
        
        public OpenGenericStayingOpenContainer(LazinatorConstructorEnum constructorEnum)
        {
        }
        
        public OpenGenericStayingOpenContainer(LazinatorMemory serializedBytes, ILazinator parent = null)
        {
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            var clone = new OpenGenericStayingOpenContainer(LazinatorConstructorEnum.LazinatorConstructor)
            {
                OriginalIncludeChildrenMode = includeChildrenMode
            };
            clone = CompleteClone(this, clone, includeChildrenMode, cloneBufferOptions);
            return clone;
        }
        
        public virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            OpenGenericStayingOpenContainer typedClone = (OpenGenericStayingOpenContainer) clone;
            /*Location4215*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (ClosedGenericBase == null)
                {
                    typedClone.ClosedGenericBase = null;
                }
                else
                {
                    typedClone.ClosedGenericBase = (OpenGeneric<Base>) ClosedGenericBase.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location4216*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (ClosedGenericFloat == null)
                {
                    typedClone.ClosedGenericFloat = null;
                }
                else
                {
                    typedClone.ClosedGenericFloat = (OpenGeneric<WFloat>) ClosedGenericFloat.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location4217*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (ClosedGenericFromBaseWithBase == null)
                {
                    typedClone.ClosedGenericFromBaseWithBase = null;
                }
                else
                {
                    typedClone.ClosedGenericFromBaseWithBase = (GenericFromBase<Base>) ClosedGenericFromBaseWithBase.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location4218*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (ClosedGenericInterface == null)
                {
                    typedClone.ClosedGenericInterface = null;
                }
                else
                {
                    typedClone.ClosedGenericInterface = (OpenGeneric<IExampleChild>) ClosedGenericInterface.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            /*Location4219*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                if (ClosedGenericNonexclusiveInterface == null)
                {
                    typedClone.ClosedGenericNonexclusiveInterface = null;
                }
                else
                {
                    typedClone.ClosedGenericNonexclusiveInterface = (OpenGeneric<IExampleNonexclusiveInterface>) ClosedGenericNonexclusiveInterface.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer);
                }
                
            }
            
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        /*Location4221*/
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location4222*/public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location4223*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ClosedGenericBase_Accessed) && ClosedGenericBase == null)
            {
                yield return ("ClosedGenericBase", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ClosedGenericBase != null) || (_ClosedGenericBase_Accessed && _ClosedGenericBase != null))
                {
                    bool isMatch_ClosedGenericBase = matchCriterion == null || matchCriterion(ClosedGenericBase);
                    bool shouldExplore_ClosedGenericBase = exploreCriterion == null || exploreCriterion(ClosedGenericBase);
                    if (isMatch_ClosedGenericBase)
                    {
                        yield return ("ClosedGenericBase", ClosedGenericBase);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_ClosedGenericBase) && shouldExplore_ClosedGenericBase)
                    {
                        foreach (var toYield in ClosedGenericBase.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ClosedGenericBase" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location4224*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ClosedGenericFloat_Accessed) && ClosedGenericFloat == null)
            {
                yield return ("ClosedGenericFloat", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ClosedGenericFloat != null) || (_ClosedGenericFloat_Accessed && _ClosedGenericFloat != null))
                {
                    bool isMatch_ClosedGenericFloat = matchCriterion == null || matchCriterion(ClosedGenericFloat);
                    bool shouldExplore_ClosedGenericFloat = exploreCriterion == null || exploreCriterion(ClosedGenericFloat);
                    if (isMatch_ClosedGenericFloat)
                    {
                        yield return ("ClosedGenericFloat", ClosedGenericFloat);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_ClosedGenericFloat) && shouldExplore_ClosedGenericFloat)
                    {
                        foreach (var toYield in ClosedGenericFloat.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ClosedGenericFloat" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location4225*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ClosedGenericFromBaseWithBase_Accessed) && ClosedGenericFromBaseWithBase == null)
            {
                yield return ("ClosedGenericFromBaseWithBase", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ClosedGenericFromBaseWithBase != null) || (_ClosedGenericFromBaseWithBase_Accessed && _ClosedGenericFromBaseWithBase != null))
                {
                    bool isMatch_ClosedGenericFromBaseWithBase = matchCriterion == null || matchCriterion(ClosedGenericFromBaseWithBase);
                    bool shouldExplore_ClosedGenericFromBaseWithBase = exploreCriterion == null || exploreCriterion(ClosedGenericFromBaseWithBase);
                    if (isMatch_ClosedGenericFromBaseWithBase)
                    {
                        yield return ("ClosedGenericFromBaseWithBase", ClosedGenericFromBaseWithBase);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_ClosedGenericFromBaseWithBase) && shouldExplore_ClosedGenericFromBaseWithBase)
                    {
                        foreach (var toYield in ClosedGenericFromBaseWithBase.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ClosedGenericFromBaseWithBase" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location4226*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ClosedGenericInterface_Accessed) && ClosedGenericInterface == null)
            {
                yield return ("ClosedGenericInterface", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ClosedGenericInterface != null) || (_ClosedGenericInterface_Accessed && _ClosedGenericInterface != null))
                {
                    bool isMatch_ClosedGenericInterface = matchCriterion == null || matchCriterion(ClosedGenericInterface);
                    bool shouldExplore_ClosedGenericInterface = exploreCriterion == null || exploreCriterion(ClosedGenericInterface);
                    if (isMatch_ClosedGenericInterface)
                    {
                        yield return ("ClosedGenericInterface", ClosedGenericInterface);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_ClosedGenericInterface) && shouldExplore_ClosedGenericInterface)
                    {
                        foreach (var toYield in ClosedGenericInterface.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ClosedGenericInterface" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location4227*/if (enumerateNulls && (!exploreOnlyDeserializedChildren || _ClosedGenericNonexclusiveInterface_Accessed) && ClosedGenericNonexclusiveInterface == null)
            {
                yield return ("ClosedGenericNonexclusiveInterface", default);
            }
            else
            {
                if ((!exploreOnlyDeserializedChildren && ClosedGenericNonexclusiveInterface != null) || (_ClosedGenericNonexclusiveInterface_Accessed && _ClosedGenericNonexclusiveInterface != null))
                {
                    bool isMatch_ClosedGenericNonexclusiveInterface = matchCriterion == null || matchCriterion(ClosedGenericNonexclusiveInterface);
                    bool shouldExplore_ClosedGenericNonexclusiveInterface = exploreCriterion == null || exploreCriterion(ClosedGenericNonexclusiveInterface);
                    if (isMatch_ClosedGenericNonexclusiveInterface)
                    {
                        yield return ("ClosedGenericNonexclusiveInterface", ClosedGenericNonexclusiveInterface);
                    }
                    if ((!stopExploringBelowMatch || !isMatch_ClosedGenericNonexclusiveInterface) && shouldExplore_ClosedGenericNonexclusiveInterface)
                    {
                        foreach (var toYield in ClosedGenericNonexclusiveInterface.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                        {
                            yield return ("ClosedGenericNonexclusiveInterface" + "." + toYield.propertyName, toYield.descendant);
                        }
                    }
                }
                
            }
            
            /*Location4228*/yield break;
        }
        /*Location4229*/
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location4230*/yield break;
        }
        /*Location4231*/
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location4232*/if ((!exploreOnlyDeserializedChildren && ClosedGenericBase != null) || (_ClosedGenericBase_Accessed && _ClosedGenericBase != null))
            {
                _ClosedGenericBase = (OpenGeneric<Base>) _ClosedGenericBase.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location4233*/if ((!exploreOnlyDeserializedChildren && ClosedGenericFloat != null) || (_ClosedGenericFloat_Accessed && _ClosedGenericFloat != null))
            {
                _ClosedGenericFloat = (OpenGeneric<WFloat>) _ClosedGenericFloat.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location4234*/if ((!exploreOnlyDeserializedChildren && ClosedGenericFromBaseWithBase != null) || (_ClosedGenericFromBaseWithBase_Accessed && _ClosedGenericFromBaseWithBase != null))
            {
                _ClosedGenericFromBaseWithBase = (GenericFromBase<Base>) _ClosedGenericFromBaseWithBase.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location4235*/if ((!exploreOnlyDeserializedChildren && ClosedGenericInterface != null) || (_ClosedGenericInterface_Accessed && _ClosedGenericInterface != null))
            {
                _ClosedGenericInterface = (OpenGeneric<IExampleChild>) _ClosedGenericInterface.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location4236*/if ((!exploreOnlyDeserializedChildren && ClosedGenericNonexclusiveInterface != null) || (_ClosedGenericNonexclusiveInterface_Accessed && _ClosedGenericNonexclusiveInterface != null))
            {
                _ClosedGenericNonexclusiveInterface = (OpenGeneric<IExampleNonexclusiveInterface>) _ClosedGenericNonexclusiveInterface.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location4237*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location4238*/
        public virtual void FreeInMemoryObjects()
        {
            _ClosedGenericBase = default;
            _ClosedGenericFloat = default;
            _ClosedGenericFromBaseWithBase = default;
            _ClosedGenericInterface = default;
            _ClosedGenericNonexclusiveInterface = default;
            _ClosedGenericBase_Accessed = _ClosedGenericFloat_Accessed = _ClosedGenericFromBaseWithBase_Accessed = _ClosedGenericInterface_Accessed = _ClosedGenericNonexclusiveInterface_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location4239*/
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1034;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location4240*/public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location4241*/_ClosedGenericBase_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location4242*/_ClosedGenericFloat_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location4243*/_ClosedGenericFromBaseWithBase_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location4244*/_ClosedGenericInterface_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location4245*/_ClosedGenericNonexclusiveInterface_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location4246*/_OpenGenericStayingOpenContainer_EndByteIndex = bytesSoFar;
            /*Location4247*/        }
            
            /*Location4248*/public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location4249*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location4250*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location4251*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location4252*/}
                    /*Location4253*/}
                    /*Location4254*/
                    public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location4255*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location4256*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location4257*/}
                                /*Location4258*//*Location4259*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location4260*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location4261*/}
                            /*Location4262*/
                            protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                /*Location4263*/if (_ClosedGenericBase_Accessed && _ClosedGenericBase != null)
                                {
                                    ClosedGenericBase.UpdateStoredBuffer(ref writer, startPosition + _ClosedGenericBase_ByteIndex + sizeof(int), _ClosedGenericBase_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location4264*/if (_ClosedGenericFloat_Accessed && _ClosedGenericFloat != null)
                                {
                                    ClosedGenericFloat.UpdateStoredBuffer(ref writer, startPosition + _ClosedGenericFloat_ByteIndex + sizeof(int), _ClosedGenericFloat_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location4265*/if (_ClosedGenericFromBaseWithBase_Accessed && _ClosedGenericFromBaseWithBase != null)
                                {
                                    ClosedGenericFromBaseWithBase.UpdateStoredBuffer(ref writer, startPosition + _ClosedGenericFromBaseWithBase_ByteIndex + sizeof(int), _ClosedGenericFromBaseWithBase_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location4266*/if (_ClosedGenericInterface_Accessed && _ClosedGenericInterface != null)
                                {
                                    ClosedGenericInterface.UpdateStoredBuffer(ref writer, startPosition + _ClosedGenericInterface_ByteIndex + sizeof(int), _ClosedGenericInterface_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location4267*/if (_ClosedGenericNonexclusiveInterface_Accessed && _ClosedGenericNonexclusiveInterface != null)
                                {
                                    ClosedGenericNonexclusiveInterface.UpdateStoredBuffer(ref writer, startPosition + _ClosedGenericNonexclusiveInterface_ByteIndex + sizeof(int), _ClosedGenericNonexclusiveInterface_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                                }
                                
                                /*Location4268*/}
                                
                                /*Location4269*/
                                protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    int startPosition = writer.Position;
                                    int startOfObjectPosition = 0;
                                    // header information
                                    /*Location4270*/if (includeUniqueID)
                                    {
                                        if (!ContainsOpenGenericParameters)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                        }
                                        else
                                        {
                                            WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                                        }
                                    }
                                    /*Location4271*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                    writer.Write((byte)includeChildrenMode);
                                    /*Location4272*/// write properties
                                    /*Location4273*/startOfObjectPosition = writer.Position;
                                    /*Location4274*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ClosedGenericBase_Accessed)
                                        {
                                            var deserialized = ClosedGenericBase;
                                        }
                                        WriteChild(ref writer, ref _ClosedGenericBase, includeChildrenMode, _ClosedGenericBase_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ClosedGenericBase_ByteIndex, _ClosedGenericBase_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location4275*/if (updateStoredBuffer)
                                    {
                                        _ClosedGenericBase_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location4276*/startOfObjectPosition = writer.Position;
                                    /*Location4277*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ClosedGenericFloat_Accessed)
                                        {
                                            var deserialized = ClosedGenericFloat;
                                        }
                                        WriteChild(ref writer, ref _ClosedGenericFloat, includeChildrenMode, _ClosedGenericFloat_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ClosedGenericFloat_ByteIndex, _ClosedGenericFloat_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location4278*/if (updateStoredBuffer)
                                    {
                                        _ClosedGenericFloat_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location4279*/startOfObjectPosition = writer.Position;
                                    /*Location4280*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ClosedGenericFromBaseWithBase_Accessed)
                                        {
                                            var deserialized = ClosedGenericFromBaseWithBase;
                                        }
                                        WriteChild(ref writer, ref _ClosedGenericFromBaseWithBase, includeChildrenMode, _ClosedGenericFromBaseWithBase_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ClosedGenericFromBaseWithBase_ByteIndex, _ClosedGenericFromBaseWithBase_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location4281*/if (updateStoredBuffer)
                                    {
                                        _ClosedGenericFromBaseWithBase_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location4282*/startOfObjectPosition = writer.Position;
                                    /*Location4283*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ClosedGenericInterface_Accessed)
                                        {
                                            var deserialized = ClosedGenericInterface;
                                        }
                                        WriteChild(ref writer, ref _ClosedGenericInterface, includeChildrenMode, _ClosedGenericInterface_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ClosedGenericInterface_ByteIndex, _ClosedGenericInterface_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location4284*/if (updateStoredBuffer)
                                    {
                                        _ClosedGenericInterface_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location4285*/startOfObjectPosition = writer.Position;
                                    /*Location4286*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                    {
                                        if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ClosedGenericNonexclusiveInterface_Accessed)
                                        {
                                            var deserialized = ClosedGenericNonexclusiveInterface;
                                        }
                                        WriteChild(ref writer, ref _ClosedGenericNonexclusiveInterface, includeChildrenMode, _ClosedGenericNonexclusiveInterface_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _ClosedGenericNonexclusiveInterface_ByteIndex, _ClosedGenericNonexclusiveInterface_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                    }
                                    
                                    /*Location4287*/if (updateStoredBuffer)
                                    {
                                        _ClosedGenericNonexclusiveInterface_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location4288*/if (updateStoredBuffer)
                                    {
                                        /*Location4289*/_OpenGenericStayingOpenContainer_EndByteIndex = writer.Position - startPosition;
                                        /*Location4290*/}
                                        /*Location4291*/}
                                        /*Location4292*/
                                    }
                                }
