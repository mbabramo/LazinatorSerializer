/*Location4088*//*Location4073*///328b1e29-f27d-37de-2d11-6f1c38bf40ca
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.NonAbstractGenerics
{/*Location4074*/
    using Lazinator.Attributes;/*Location4075*/
    using Lazinator.Buffers;/*Location4076*/
    using Lazinator.Core;/*Location4077*/
    using Lazinator.Exceptions;/*Location4078*/
    using Lazinator.Support;/*Location4079*/
    using LazinatorTests.Examples;/*Location4080*/
    using System;/*Location4081*/
    using System.Buffers;/*Location4082*/
    using System.Collections.Generic;/*Location4083*/
    using System.Diagnostics;/*Location4084*/
    using System.IO;/*Location4085*/
    using System.Linq;/*Location4086*/
    using System.Runtime.InteropServices;/*Location4087*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class ClosedGenericWithGeneric : OpenGeneric<OpenGeneric<ExampleChild>>, ILazinator
    {
        /*Location4089*//* Property definitions */
        
        
        /*Location4090*/
        protected int _AnotherPropertyAddedHereToo;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int AnotherPropertyAddedHereToo
        {
            get
            {
                return _AnotherPropertyAddedHereToo;
            }
            set
            {
                IsDirty = true;
                _AnotherPropertyAddedHereToo = value;
            }
        }
        /*Location4092*/        /* Clone overrides */
        
        public ClosedGenericWithGeneric(LazinatorConstructorEnum constructorEnum) : base(constructorEnum)
        {
        }
        
        public ClosedGenericWithGeneric(LazinatorMemory serializedBytes, ILazinator parent = null) : base(serializedBytes, parent)
        {
        }
        
        public override ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            var clone = new ClosedGenericWithGeneric(LazinatorConstructorEnum.LazinatorConstructor)
            {
                OriginalIncludeChildrenMode = includeChildrenMode
            };
            clone = CompleteClone(this, clone, includeChildrenMode, cloneBufferOptions);
            return clone;
        }
        
        public override ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            base.AssignCloneProperties(clone, includeChildrenMode);
            ClosedGenericWithGeneric typedClone = (ClosedGenericWithGeneric) clone;
            /*Location4091*/typedClone.AnotherPropertyAddedHereToo = AnotherPropertyAddedHereToo;
            
            return typedClone;
        }
        
        /* Properties */
        /*Location4093*/
        public override IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            foreach (var inheritedYield in base.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
            {
                yield return inheritedYield;
            }
            /*Location4094*/yield break;
        }
        /*Location4095*/
        
        public override IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            foreach (var inheritedYield in base.EnumerateNonLazinatorProperties())
            {
                yield return inheritedYield;
            }
            /*Location4096*/yield return ("AnotherPropertyAddedHereToo", (object)AnotherPropertyAddedHereToo);
            /*Location4097*/yield break;
        }
        /*Location4098*/
        public override ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            base.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, false);
            /*Location4099*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location4100*/
        public override void FreeInMemoryObjects()
        {
            base.FreeInMemoryObjects();
            
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location4101*/
        /* Conversion */
        
        public override int LazinatorUniqueID => 1077;
        
        protected override bool ContainsOpenGenericParameters => false;
        public override LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public override int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location4102*/public override void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            base.ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location4103*/_AnotherPropertyAddedHereToo = span.ToDecompressedInt(ref bytesSoFar);
            /*Location4104*/        }
            
            /*Location4105*/public override void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location4106*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location4107*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location4108*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location4109*/}
                    /*Location4110*/}
                    /*Location4111*/
                    public override void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location4112*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location4113*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location4114*/}
                                /*Location4115*//*Location4116*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location4117*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location4118*/}
                            /*Location4119*/
                            protected override void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                base.UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location4120*/}
                                
                                /*Location4121*/
                                protected override void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    base.WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, includeUniqueID);
                                    /*Location4122*/// write properties
                                    /*Location4123*/CompressedIntegralTypes.WriteCompressedInt(ref writer, _AnotherPropertyAddedHereToo);
                                    /*Location4124*/}
                                    /*Location4125*/
                                }
                            }
