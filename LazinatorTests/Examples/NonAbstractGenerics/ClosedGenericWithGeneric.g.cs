/*Location4984*//*Location4969*///328b1e29-f27d-37de-2d11-6f1c38bf40ca
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.NonAbstractGenerics
{/*Location4970*/
    using Lazinator.Attributes;/*Location4971*/
    using Lazinator.Buffers;/*Location4972*/
    using Lazinator.Core;/*Location4973*/
    using Lazinator.Exceptions;/*Location4974*/
    using Lazinator.Support;/*Location4975*/
    using LazinatorTests.Examples;/*Location4976*/
    using System;/*Location4977*/
    using System.Buffers;/*Location4978*/
    using System.Collections.Generic;/*Location4979*/
    using System.Diagnostics;/*Location4980*/
    using System.IO;/*Location4981*/
    using System.Linq;/*Location4982*/
    using System.Runtime.InteropServices;/*Location4983*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class ClosedGenericWithGeneric : OpenGeneric<OpenGeneric<ExampleChild>>, ILazinator
    {
        /*Location4985*//* Property definitions */
        
        
        /*Location4986*/
        protected int _AnotherPropertyAddedHereToo;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int AnotherPropertyAddedHereToo
        {
            get
            {
                return _AnotherPropertyAddedHereToo;
            }
            set
            {
                IsDirty = true;
                _AnotherPropertyAddedHereToo = value;
            }
        }
        /*Location4988*/        /* Clone overrides */
        
        public ClosedGenericWithGeneric(IncludeChildrenMode originalIncludeChildrenMode) : base(originalIncludeChildrenMode)
        {
        }
        
        public ClosedGenericWithGeneric(LazinatorMemory serializedBytes, ILazinator parent = null) : base(serializedBytes, parent)
        {
        }
        
        public override ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            ClosedGenericWithGeneric clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new ClosedGenericWithGeneric(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (ClosedGenericWithGeneric)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, false, this);
                clone = new ClosedGenericWithGeneric(bytes);
            }
            return clone;
        }
        
        public override ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            base.AssignCloneProperties(clone, includeChildrenMode);
            ClosedGenericWithGeneric typedClone = (ClosedGenericWithGeneric) clone;
            /*Location4987*/typedClone.AnotherPropertyAddedHereToo = AnotherPropertyAddedHereToo;
            
            return typedClone;
        }
        
        /* Properties */
        /*Location4989*/
        public override IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            foreach (var inheritedYield in base.EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
            {
                yield return inheritedYield;
            }
            /*Location4990*/yield break;
        }
        /*Location4991*/
        
        public override IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            foreach (var inheritedYield in base.EnumerateNonLazinatorProperties())
            {
                yield return inheritedYield;
            }
            /*Location4992*/yield return ("AnotherPropertyAddedHereToo", (object)AnotherPropertyAddedHereToo);
            /*Location4993*/yield break;
        }
        /*Location4994*/
        public override ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            base.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, false);
            /*Location4995*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location4996*/
        public override void FreeInMemoryObjects()
        {
            base.FreeInMemoryObjects();
            
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location4997*/
        /* Conversion */
        
        public override int LazinatorUniqueID => 1077;
        
        protected override bool ContainsOpenGenericParameters => false;
        public override LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public override int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location4998*/public override void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            base.ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location4999*/_AnotherPropertyAddedHereToo = span.ToDecompressedInt(ref bytesSoFar);
            /*Location5000*/        }
            
            /*Location5001*/public override void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location5002*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location5003*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location5004*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location5005*/}
                    /*Location5006*/}
                    /*Location5007*/
                    public override void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location5008*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location5009*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location5010*/}
                                /*Location5011*//*Location5012*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location5013*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location5014*/}
                            /*Location5015*/
                            protected override void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                base.UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location5016*/}
                                
                                /*Location5017*/
                                protected override void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    base.WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, includeUniqueID);
                                    /*Location5018*/// write properties
                                    /*Location5019*/CompressedIntegralTypes.WriteCompressedInt(ref writer, _AnotherPropertyAddedHereToo);
                                    /*Location5020*/}
                                    /*Location5021*/
                                }
                            }
