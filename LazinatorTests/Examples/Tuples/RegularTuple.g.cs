/*Location6643*//*Location6628*///636cd1dd-9b46-70e0-ffae-7ed11c92e3e6
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.Tuples
{/*Location6629*/
    using Lazinator.Attributes;/*Location6630*/
    using Lazinator.Buffers;/*Location6631*/
    using Lazinator.Core;/*Location6632*/
    using Lazinator.Exceptions;/*Location6633*/
    using Lazinator.Support;/*Location6634*/
    using LazinatorTests.Examples;/*Location6635*/
    using System;/*Location6636*/
    using System.Buffers;/*Location6637*/
    using System.Collections.Generic;/*Location6638*/
    using System.Diagnostics;/*Location6639*/
    using System.IO;/*Location6640*/
    using System.Linq;/*Location6641*/
    using System.Runtime.InteropServices;/*Location6642*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class RegularTuple : ILazinator
    {
        /*Location6644*/public bool IsStruct => false;
        
        /*Location6645*//* Property definitions */
        
        /*Location6646*/        protected int _MyListTuple_ByteIndex;
        /*Location6647*/        protected int _MyTupleSerialized_ByteIndex;
        /*Location6648*/        protected int _MyTupleSerialized2_ByteIndex;
        /*Location6649*/        protected int _MyTupleSerialized3_ByteIndex;
        /*Location6650*/        protected int _MyTupleSerialized4_ByteIndex;
        /*Location6651*/        protected int _MyTupleSerialized5_ByteIndex;
        /*Location6652*/protected virtual int _MyListTuple_ByteLength => _MyTupleSerialized_ByteIndex - _MyListTuple_ByteIndex;
        /*Location6653*/protected virtual int _MyTupleSerialized_ByteLength => _MyTupleSerialized2_ByteIndex - _MyTupleSerialized_ByteIndex;
        /*Location6654*/protected virtual int _MyTupleSerialized2_ByteLength => _MyTupleSerialized3_ByteIndex - _MyTupleSerialized2_ByteIndex;
        /*Location6655*/protected virtual int _MyTupleSerialized3_ByteLength => _MyTupleSerialized4_ByteIndex - _MyTupleSerialized3_ByteIndex;
        /*Location6656*/protected virtual int _MyTupleSerialized4_ByteLength => _MyTupleSerialized5_ByteIndex - _MyTupleSerialized4_ByteIndex;
        /*Location6657*/private int _RegularTuple_EndByteIndex;
        /*Location6658*/protected virtual int _MyTupleSerialized5_ByteLength => _RegularTuple_EndByteIndex - _MyTupleSerialized5_ByteIndex;
        
        /*Location6659*/
        protected List<Tuple<uint, ExampleChild, NonLazinatorClass>> _MyListTuple;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public List<Tuple<uint, ExampleChild, NonLazinatorClass>> MyListTuple
        {
            get
            {
                if (!_MyListTuple_Accessed)
                {
                    Lazinate_MyListTuple();
                }
                IsDirty = true; 
                return _MyListTuple;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyListTuple = value;
                _MyListTuple_Accessed = true;
            }
        }
        protected bool _MyListTuple_Accessed;
        private void Lazinate_MyListTuple()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyListTuple = default(List<Tuple<uint, ExampleChild, NonLazinatorClass>>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyListTuple_ByteIndex, _MyListTuple_ByteLength, false, false, null);
                _MyListTuple = ConvertFromBytes_List_GTuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g_g(childData);
            }
            
            _MyListTuple_Accessed = true;
        }
        
        /*Location6660*/
        protected Tuple<uint, ExampleChild, NonLazinatorClass> _MyTupleSerialized;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<uint, ExampleChild, NonLazinatorClass> MyTupleSerialized
        {
            get
            {
                if (!_MyTupleSerialized_Accessed)
                {
                    Lazinate_MyTupleSerialized();
                }
                IsDirty = true; 
                return _MyTupleSerialized;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyTupleSerialized = value;
                _MyTupleSerialized_Accessed = true;
            }
        }
        protected bool _MyTupleSerialized_Accessed;
        private void Lazinate_MyTupleSerialized()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyTupleSerialized = default(Tuple<uint, ExampleChild, NonLazinatorClass>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyTupleSerialized_ByteIndex, _MyTupleSerialized_ByteLength, false, false, null);
                _MyTupleSerialized = ConvertFromBytes_Tuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g(childData);
            }
            
            _MyTupleSerialized_Accessed = true;
        }
        
        /*Location6661*/
        protected Tuple<uint, ExampleChild, NonLazinatorClass> _MyTupleSerialized2;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<uint, ExampleChild, NonLazinatorClass> MyTupleSerialized2
        {
            get
            {
                if (!_MyTupleSerialized2_Accessed)
                {
                    Lazinate_MyTupleSerialized2();
                }
                IsDirty = true; 
                return _MyTupleSerialized2;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyTupleSerialized2 = value;
                _MyTupleSerialized2_Accessed = true;
            }
        }
        protected bool _MyTupleSerialized2_Accessed;
        private void Lazinate_MyTupleSerialized2()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyTupleSerialized2 = default(Tuple<uint, ExampleChild, NonLazinatorClass>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyTupleSerialized2_ByteIndex, _MyTupleSerialized2_ByteLength, false, false, null);
                _MyTupleSerialized2 = ConvertFromBytes_Tuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g(childData);
            }
            
            _MyTupleSerialized2_Accessed = true;
        }
        
        /*Location6662*/
        protected Tuple<uint?, ExampleChild, NonLazinatorClass> _MyTupleSerialized3;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<uint?, ExampleChild, NonLazinatorClass> MyTupleSerialized3
        {
            get
            {
                if (!_MyTupleSerialized3_Accessed)
                {
                    Lazinate_MyTupleSerialized3();
                }
                IsDirty = true; 
                return _MyTupleSerialized3;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyTupleSerialized3 = value;
                _MyTupleSerialized3_Accessed = true;
            }
        }
        protected bool _MyTupleSerialized3_Accessed;
        private void Lazinate_MyTupleSerialized3()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyTupleSerialized3 = default(Tuple<uint?, ExampleChild, NonLazinatorClass>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyTupleSerialized3_ByteIndex, _MyTupleSerialized3_ByteLength, false, false, null);
                _MyTupleSerialized3 = ConvertFromBytes_Tuple_Guint_C63_c_C32ExampleChild_c_C32NonLazinatorClass_g(childData);
            }
            
            _MyTupleSerialized3_Accessed = true;
        }
        
        /*Location6663*/
        protected Tuple<int, ExampleStructContainingClasses> _MyTupleSerialized4;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<int, ExampleStructContainingClasses> MyTupleSerialized4
        {
            get
            {
                if (!_MyTupleSerialized4_Accessed)
                {
                    Lazinate_MyTupleSerialized4();
                }
                IsDirty = true; 
                return _MyTupleSerialized4;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyTupleSerialized4 = value;
                _MyTupleSerialized4_Accessed = true;
            }
        }
        protected bool _MyTupleSerialized4_Accessed;
        private void Lazinate_MyTupleSerialized4()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyTupleSerialized4 = default(Tuple<int, ExampleStructContainingClasses>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyTupleSerialized4_ByteIndex, _MyTupleSerialized4_ByteLength, false, false, null);
                _MyTupleSerialized4 = ConvertFromBytes_Tuple_Gint_c_C32ExampleStructContainingClasses_g(childData);
            }
            
            _MyTupleSerialized4_Accessed = true;
        }
        
        /*Location6664*/
        protected Tuple<int, ExampleStructContainingClasses?> _MyTupleSerialized5;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<int, ExampleStructContainingClasses?> MyTupleSerialized5
        {
            get
            {
                if (!_MyTupleSerialized5_Accessed)
                {
                    Lazinate_MyTupleSerialized5();
                }
                IsDirty = true; 
                return _MyTupleSerialized5;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyTupleSerialized5 = value;
                _MyTupleSerialized5_Accessed = true;
            }
        }
        protected bool _MyTupleSerialized5_Accessed;
        private void Lazinate_MyTupleSerialized5()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyTupleSerialized5 = default(Tuple<int, ExampleStructContainingClasses?>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyTupleSerialized5_ByteIndex, _MyTupleSerialized5_ByteLength, false, false, null);
                _MyTupleSerialized5 = ConvertFromBytes_Tuple_Gint_c_C32ExampleStructContainingClasses_C63_g(childData);
            }
            
            _MyTupleSerialized5_Accessed = true;
        }
        
        /*Location6671*/
        /* Serialization, deserialization, and object relationships */
        
        public RegularTuple(LazinatorConstructorEnum constructorEnum)
        {
        }
        
        public RegularTuple(LazinatorMemory serializedBytes, ILazinator parent = null)
        {
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            var clone = new RegularTuple(LazinatorConstructorEnum.LazinatorConstructor)
            {
                OriginalIncludeChildrenMode = includeChildrenMode
            };
            clone = CompleteClone(this, clone, includeChildrenMode, cloneBufferOptions);
            return clone;
        }
        
        public virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            RegularTuple typedClone = (RegularTuple) clone;
            /*Location6665*/typedClone.MyListTuple = CloneOrChange_List_GTuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g_g(MyListTuple, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location6666*/typedClone.MyTupleSerialized = CloneOrChange_Tuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g(MyTupleSerialized, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location6667*/typedClone.MyTupleSerialized2 = CloneOrChange_Tuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g(MyTupleSerialized2, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location6668*/typedClone.MyTupleSerialized3 = CloneOrChange_Tuple_Guint_C63_c_C32ExampleChild_c_C32NonLazinatorClass_g(MyTupleSerialized3, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location6669*/typedClone.MyTupleSerialized4 = CloneOrChange_Tuple_Gint_c_C32ExampleStructContainingClasses_g(MyTupleSerialized4, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location6670*/typedClone.MyTupleSerialized5 = CloneOrChange_Tuple_Gint_c_C32ExampleStructContainingClasses_C63_g(MyTupleSerialized5, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        /*Location6672*/
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location6673*/public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location6674*/yield break;
        }
        /*Location6675*/
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location6676*/yield return ("MyListTuple", (object)MyListTuple);
            /*Location6677*/yield return ("MyTupleSerialized", (object)MyTupleSerialized);
            /*Location6678*/yield return ("MyTupleSerialized2", (object)MyTupleSerialized2);
            /*Location6679*/yield return ("MyTupleSerialized3", (object)MyTupleSerialized3);
            /*Location6680*/yield return ("MyTupleSerialized4", (object)MyTupleSerialized4);
            /*Location6681*/yield return ("MyTupleSerialized5", (object)MyTupleSerialized5);
            /*Location6682*/yield break;
        }
        /*Location6683*/
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location6684*/if ((!exploreOnlyDeserializedChildren && MyListTuple != null) || (_MyListTuple_Accessed && _MyListTuple != null))
            {
                _MyListTuple = (List<Tuple<uint, ExampleChild, NonLazinatorClass>>) CloneOrChange_List_GTuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g_g(_MyListTuple, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location6685*/if ((!exploreOnlyDeserializedChildren && MyTupleSerialized != null) || (_MyTupleSerialized_Accessed && _MyTupleSerialized != null))
            {
                _MyTupleSerialized = (Tuple<uint, ExampleChild, NonLazinatorClass>) CloneOrChange_Tuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g(_MyTupleSerialized, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location6686*/if ((!exploreOnlyDeserializedChildren && MyTupleSerialized2 != null) || (_MyTupleSerialized2_Accessed && _MyTupleSerialized2 != null))
            {
                _MyTupleSerialized2 = (Tuple<uint, ExampleChild, NonLazinatorClass>) CloneOrChange_Tuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g(_MyTupleSerialized2, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location6687*/if ((!exploreOnlyDeserializedChildren && MyTupleSerialized3 != null) || (_MyTupleSerialized3_Accessed && _MyTupleSerialized3 != null))
            {
                _MyTupleSerialized3 = (Tuple<uint?, ExampleChild, NonLazinatorClass>) CloneOrChange_Tuple_Guint_C63_c_C32ExampleChild_c_C32NonLazinatorClass_g(_MyTupleSerialized3, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location6688*/if ((!exploreOnlyDeserializedChildren && MyTupleSerialized4 != null) || (_MyTupleSerialized4_Accessed && _MyTupleSerialized4 != null))
            {
                _MyTupleSerialized4 = (Tuple<int, ExampleStructContainingClasses>) CloneOrChange_Tuple_Gint_c_C32ExampleStructContainingClasses_g(_MyTupleSerialized4, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location6689*/if ((!exploreOnlyDeserializedChildren && MyTupleSerialized5 != null) || (_MyTupleSerialized5_Accessed && _MyTupleSerialized5 != null))
            {
                _MyTupleSerialized5 = (Tuple<int, ExampleStructContainingClasses?>) CloneOrChange_Tuple_Gint_c_C32ExampleStructContainingClasses_C63_g(_MyTupleSerialized5, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location6690*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location6691*/
        public virtual void FreeInMemoryObjects()
        {
            _MyListTuple = default;
            _MyTupleSerialized = default;
            _MyTupleSerialized2 = default;
            _MyTupleSerialized3 = default;
            _MyTupleSerialized4 = default;
            _MyTupleSerialized5 = default;
            _MyListTuple_Accessed = _MyTupleSerialized_Accessed = _MyTupleSerialized2_Accessed = _MyTupleSerialized3_Accessed = _MyTupleSerialized4_Accessed = _MyTupleSerialized5_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location6692*/
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1027;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location6693*/public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location6694*/_MyListTuple_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location6695*/_MyTupleSerialized_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location6696*/_MyTupleSerialized2_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location6697*/_MyTupleSerialized3_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location6698*/_MyTupleSerialized4_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location6699*/_MyTupleSerialized5_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location6700*/_RegularTuple_EndByteIndex = bytesSoFar;
            /*Location6701*/        }
            
            /*Location6702*/public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location6703*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location6704*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location6705*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location6706*/}
                    /*Location6707*/}
                    /*Location6708*/
                    public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location6709*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location6710*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location6711*/}
                                /*Location6712*//*Location6713*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location6714*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location6715*/}
                            /*Location6716*/
                            protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                /*Location6717*/if (_MyListTuple_Accessed && _MyListTuple != null)
                                {
                                    _MyListTuple = (List<Tuple<uint, ExampleChild, NonLazinatorClass>>) CloneOrChange_List_GTuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g_g(_MyListTuple, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location6718*/if (_MyTupleSerialized_Accessed && _MyTupleSerialized != null)
                                {
                                    _MyTupleSerialized = (Tuple<uint, ExampleChild, NonLazinatorClass>) CloneOrChange_Tuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g(_MyTupleSerialized, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location6719*/if (_MyTupleSerialized2_Accessed && _MyTupleSerialized2 != null)
                                {
                                    _MyTupleSerialized2 = (Tuple<uint, ExampleChild, NonLazinatorClass>) CloneOrChange_Tuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g(_MyTupleSerialized2, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location6720*/if (_MyTupleSerialized3_Accessed && _MyTupleSerialized3 != null)
                                {
                                    _MyTupleSerialized3 = (Tuple<uint?, ExampleChild, NonLazinatorClass>) CloneOrChange_Tuple_Guint_C63_c_C32ExampleChild_c_C32NonLazinatorClass_g(_MyTupleSerialized3, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location6721*/if (_MyTupleSerialized4_Accessed && _MyTupleSerialized4 != null)
                                {
                                    _MyTupleSerialized4 = (Tuple<int, ExampleStructContainingClasses>) CloneOrChange_Tuple_Gint_c_C32ExampleStructContainingClasses_g(_MyTupleSerialized4, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location6722*/if (_MyTupleSerialized5_Accessed && _MyTupleSerialized5 != null)
                                {
                                    _MyTupleSerialized5 = (Tuple<int, ExampleStructContainingClasses?>) CloneOrChange_Tuple_Gint_c_C32ExampleStructContainingClasses_C63_g(_MyTupleSerialized5, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location6723*/}
                                
                                /*Location6724*/
                                protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    int startPosition = writer.Position;
                                    int startOfObjectPosition = 0;
                                    // header information
                                    /*Location6725*/if (includeUniqueID)
                                    {
                                        if (!ContainsOpenGenericParameters)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                        }
                                        else
                                        {
                                            WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                                        }
                                    }
                                    /*Location6726*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                    writer.Write((byte)includeChildrenMode);
                                    /*Location6727*/// write properties
                                    /*Location6728*/startOfObjectPosition = writer.Position;
                                    /*Location6729*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyListTuple_Accessed)
                                    {
                                        var deserialized = MyListTuple;
                                    }
                                    /*Location6730*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyListTuple, isBelievedDirty: _MyListTuple_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyListTuple_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyListTuple_ByteIndex, _MyListTuple_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_List_GTuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g_g(ref w, _MyListTuple,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location6731*/if (updateStoredBuffer)
                                    {
                                        _MyListTuple_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location6732*/startOfObjectPosition = writer.Position;
                                    /*Location6733*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyTupleSerialized_Accessed)
                                    {
                                        var deserialized = MyTupleSerialized;
                                    }
                                    /*Location6734*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyTupleSerialized, isBelievedDirty: _MyTupleSerialized_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyTupleSerialized_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyTupleSerialized_ByteIndex, _MyTupleSerialized_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Tuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g(ref w, _MyTupleSerialized,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location6735*/if (updateStoredBuffer)
                                    {
                                        _MyTupleSerialized_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location6736*/startOfObjectPosition = writer.Position;
                                    /*Location6737*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyTupleSerialized2_Accessed)
                                    {
                                        var deserialized = MyTupleSerialized2;
                                    }
                                    /*Location6738*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyTupleSerialized2, isBelievedDirty: _MyTupleSerialized2_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyTupleSerialized2_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyTupleSerialized2_ByteIndex, _MyTupleSerialized2_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Tuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g(ref w, _MyTupleSerialized2,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location6739*/if (updateStoredBuffer)
                                    {
                                        _MyTupleSerialized2_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location6740*/startOfObjectPosition = writer.Position;
                                    /*Location6741*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyTupleSerialized3_Accessed)
                                    {
                                        var deserialized = MyTupleSerialized3;
                                    }
                                    /*Location6742*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyTupleSerialized3, isBelievedDirty: _MyTupleSerialized3_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyTupleSerialized3_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyTupleSerialized3_ByteIndex, _MyTupleSerialized3_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Tuple_Guint_C63_c_C32ExampleChild_c_C32NonLazinatorClass_g(ref w, _MyTupleSerialized3,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location6743*/if (updateStoredBuffer)
                                    {
                                        _MyTupleSerialized3_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location6744*/startOfObjectPosition = writer.Position;
                                    /*Location6745*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyTupleSerialized4_Accessed)
                                    {
                                        var deserialized = MyTupleSerialized4;
                                    }
                                    /*Location6746*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyTupleSerialized4, isBelievedDirty: _MyTupleSerialized4_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyTupleSerialized4_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyTupleSerialized4_ByteIndex, _MyTupleSerialized4_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Tuple_Gint_c_C32ExampleStructContainingClasses_g(ref w, _MyTupleSerialized4,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location6747*/if (updateStoredBuffer)
                                    {
                                        _MyTupleSerialized4_ByteIndex = startOfObjectPosition - startPosition;if (_MyTupleSerialized4_Accessed && _MyTupleSerialized4 != null)
                                        {
                                            _MyTupleSerialized4 = (Tuple<int, ExampleStructContainingClasses>) CloneOrChange_Tuple_Gint_c_C32ExampleStructContainingClasses_g(_MyTupleSerialized4, l => l.RemoveBufferInHierarchy(), true);
                                        }
                                        
                                    }
                                    /*Location6748*/startOfObjectPosition = writer.Position;
                                    /*Location6749*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyTupleSerialized5_Accessed)
                                    {
                                        var deserialized = MyTupleSerialized5;
                                    }
                                    /*Location6750*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyTupleSerialized5, isBelievedDirty: _MyTupleSerialized5_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyTupleSerialized5_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyTupleSerialized5_ByteIndex, _MyTupleSerialized5_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Tuple_Gint_c_C32ExampleStructContainingClasses_C63_g(ref w, _MyTupleSerialized5,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location6751*/if (updateStoredBuffer)
                                    {
                                        _MyTupleSerialized5_ByteIndex = startOfObjectPosition - startPosition;if (_MyTupleSerialized5_Accessed && _MyTupleSerialized5 != null)
                                        {
                                            _MyTupleSerialized5 = (Tuple<int, ExampleStructContainingClasses?>) CloneOrChange_Tuple_Gint_c_C32ExampleStructContainingClasses_C63_g(_MyTupleSerialized5, l => l.RemoveBufferInHierarchy(), true);
                                        }
                                        
                                    }
                                    /*Location6752*/if (updateStoredBuffer)
                                    {
                                        /*Location6753*/_RegularTuple_EndByteIndex = writer.Position - startPosition;
                                        /*Location6754*/}
                                        /*Location6755*/}
                                        /*Location6756*/
                                        /* Conversion of supported collections and tuples */
                                        /*Location6757*/
                                        private static List<Tuple<uint, ExampleChild, NonLazinatorClass>> ConvertFromBytes_List_GTuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g_g(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default(List<Tuple<uint, ExampleChild, NonLazinatorClass>>);
                                            }
                                            ReadOnlySpan<byte> span = storage.Span;
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            List<Tuple<uint, ExampleChild, NonLazinatorClass>> collection = new List<Tuple<uint, ExampleChild, NonLazinatorClass>>(collectionLength);
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                if (lengthCollectionMember == 0)
                                                {
                                                    collection.Add(default(Tuple<uint, ExampleChild, NonLazinatorClass>));
                                                }
                                                else
                                                {
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                    var item = ConvertFromBytes_Tuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g(childData);
                                                    collection.Add(item);
                                                }
                                                bytesSoFar += lengthCollectionMember;
                                            }
                                            
                                            return collection;
                                        }/*Location6758*/
                                        
                                        private static void ConvertToBytes_List_GTuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g_g(ref BinaryBufferWriter writer, List<Tuple<uint, ExampleChild, NonLazinatorClass>> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(List<Tuple<uint, ExampleChild, NonLazinatorClass>>))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                            int itemToConvertCount = itemToConvert.Count;
                                            for (int itemIndex = 0; itemIndex < itemToConvertCount; itemIndex++)
                                            {
                                                if (itemToConvert[itemIndex] == default(Tuple<uint, ExampleChild, NonLazinatorClass>))
                                                {
                                                    writer.Write((uint)0);
                                                }
                                                else 
                                                {
                                                    
                                                    void action(ref BinaryBufferWriter w) => ConvertToBytes_Tuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g(ref w, itemToConvert[itemIndex], includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                }
                                                
                                            }
                                        }
                                        /*Location6759*/
                                        private static List<Tuple<uint, ExampleChild, NonLazinatorClass>> CloneOrChange_List_GTuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g_g(List<Tuple<uint, ExampleChild, NonLazinatorClass>> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            if (itemToClone == null)
                                            {
                                                return default;
                                            }
                                            
                                            int collectionLength = itemToClone.Count;
                                            List<Tuple<uint, ExampleChild, NonLazinatorClass>> collection = new List<Tuple<uint, ExampleChild, NonLazinatorClass>>(collectionLength);
                                            int itemToCloneCount = itemToClone.Count;
                                            for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                            {
                                                if (itemToClone[itemIndex] == null)
                                                {
                                                    collection.Add(default(Tuple<uint, ExampleChild, NonLazinatorClass>));
                                                }
                                                else
                                                {
                                                    var itemCopied = (Tuple<uint, ExampleChild, NonLazinatorClass>) CloneOrChange_Tuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g(itemToClone[itemIndex], cloneOrChangeFunc, avoidCloningIfPossible);
                                                    collection.Add(itemCopied);
                                                }
                                                
                                            }
                                            return collection;
                                        }
                                        /*Location6760*/
                                        private static Tuple<uint, ExampleChild, NonLazinatorClass> ConvertFromBytes_Tuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default;
                                            }
                                            ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                            
                                            int bytesSoFar = 0;
                                            /*Location6761*/
                                            uint item1 = span.ToDecompressedUint(ref bytesSoFar);
                                            /*Location6762*/
                                            ExampleChild item2 = default(ExampleChild);
                                            int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                            if (lengthCollectionMember_item2 != 0)
                                            {
                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                item2 = DeserializationFactory.Instance.CreateBasedOnType<ExampleChild>(childData);
                                            }
                                            bytesSoFar += lengthCollectionMember_item2;
                                            /*Location6763*/
                                            NonLazinatorClass item3 = default(NonLazinatorClass);
                                            int lengthCollectionMember_item3 = span.ToInt32(ref bytesSoFar);
                                            if (lengthCollectionMember_item3 != 0)
                                            {
                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item3);
                                                item3 = NonLazinatorDirectConverter.ConvertFromBytes_NonLazinatorClass(childData);
                                            }
                                            bytesSoFar += lengthCollectionMember_item3;
                                            /*Location6764*/
                                            var tupleType = new Tuple<uint, ExampleChild, NonLazinatorClass>(item1, item2, item3);
                                            
                                            return tupleType;
                                        }
                                        
                                        private static void ConvertToBytes_Tuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g(ref BinaryBufferWriter writer, Tuple<uint, ExampleChild, NonLazinatorClass> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            /*Location6765*/if (itemToConvert == null)
                                            {
                                                return;
                                            }
                                            /*Location6766*/
                                            CompressedIntegralTypes.WriteCompressedUint(ref writer, itemToConvert.Item1);
                                            /*Location6767*/
                                            if (itemToConvert.Item2 == null)
                                            {
                                                writer.Write((uint)0);
                                            }
                                            else
                                            {
                                                void actionItem2(ref BinaryBufferWriter w) => itemToConvert.Item2.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                WriteToBinaryWithIntLengthPrefix(ref writer, actionItem2);
                                            };
                                            /*Location6768*/
                                            if (itemToConvert.Item3 == null)
                                            {
                                                writer.Write((uint)0);
                                            }
                                            else
                                            {
                                                void actionItem3(ref BinaryBufferWriter w) => NonLazinatorDirectConverter.ConvertToBytes_NonLazinatorClass(ref w, itemToConvert.Item3, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                WriteToBinaryWithIntLengthPrefix(ref writer, actionItem3);
                                            }
                                            /*Location6769*/}
                                            /*Location6770*/
                                            private static Tuple<uint, ExampleChild, NonLazinatorClass> CloneOrChange_Tuple_Guint_c_C32ExampleChild_c_C32NonLazinatorClass_g(Tuple<uint, ExampleChild, NonLazinatorClass> itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                            {
                                                if (itemToConvert == null)
                                                {
                                                    return default(Tuple<uint, ExampleChild, NonLazinatorClass>);
                                                }
                                                
                                                return new Tuple<uint, ExampleChild, NonLazinatorClass>((uint) (itemToConvert?.Item1 ?? default),(ExampleChild) (cloneOrChangeFunc((itemToConvert?.Item2))),(NonLazinatorClass) (itemToConvert?.Item3));
                                            }
                                            /*Location6771*/
                                            private static Tuple<uint?, ExampleChild, NonLazinatorClass> ConvertFromBytes_Tuple_Guint_C63_c_C32ExampleChild_c_C32NonLazinatorClass_g(LazinatorMemory storage)
                                            {
                                                if (storage.Length == 0)
                                                {
                                                    return default;
                                                }
                                                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                
                                                int bytesSoFar = 0;
                                                /*Location6772*/
                                                uint? item1 = span.ToDecompressedNullableUint(ref bytesSoFar);
                                                /*Location6773*/
                                                ExampleChild item2 = default(ExampleChild);
                                                int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                                if (lengthCollectionMember_item2 != 0)
                                                {
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                    item2 = DeserializationFactory.Instance.CreateBasedOnType<ExampleChild>(childData);
                                                }
                                                bytesSoFar += lengthCollectionMember_item2;
                                                /*Location6774*/
                                                NonLazinatorClass item3 = default(NonLazinatorClass);
                                                int lengthCollectionMember_item3 = span.ToInt32(ref bytesSoFar);
                                                if (lengthCollectionMember_item3 != 0)
                                                {
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item3);
                                                    item3 = NonLazinatorDirectConverter.ConvertFromBytes_NonLazinatorClass(childData);
                                                }
                                                bytesSoFar += lengthCollectionMember_item3;
                                                /*Location6775*/
                                                var tupleType = new Tuple<uint?, ExampleChild, NonLazinatorClass>(item1, item2, item3);
                                                
                                                return tupleType;
                                            }
                                            
                                            private static void ConvertToBytes_Tuple_Guint_C63_c_C32ExampleChild_c_C32NonLazinatorClass_g(ref BinaryBufferWriter writer, Tuple<uint?, ExampleChild, NonLazinatorClass> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                            {
                                                /*Location6776*/if (itemToConvert == null)
                                                {
                                                    return;
                                                }
                                                /*Location6777*/
                                                CompressedIntegralTypes.WriteCompressedNullableUint(ref writer, itemToConvert.Item1);
                                                /*Location6778*/
                                                if (itemToConvert.Item2 == null)
                                                {
                                                    writer.Write((uint)0);
                                                }
                                                else
                                                {
                                                    void actionItem2(ref BinaryBufferWriter w) => itemToConvert.Item2.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, actionItem2);
                                                };
                                                /*Location6779*/
                                                if (itemToConvert.Item3 == null)
                                                {
                                                    writer.Write((uint)0);
                                                }
                                                else
                                                {
                                                    void actionItem3(ref BinaryBufferWriter w) => NonLazinatorDirectConverter.ConvertToBytes_NonLazinatorClass(ref w, itemToConvert.Item3, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, actionItem3);
                                                }
                                                /*Location6780*/}
                                                /*Location6781*/
                                                private static Tuple<uint?, ExampleChild, NonLazinatorClass> CloneOrChange_Tuple_Guint_C63_c_C32ExampleChild_c_C32NonLazinatorClass_g(Tuple<uint?, ExampleChild, NonLazinatorClass> itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToConvert == null)
                                                    {
                                                        return default(Tuple<uint?, ExampleChild, NonLazinatorClass>);
                                                    }
                                                    
                                                    return new Tuple<uint?, ExampleChild, NonLazinatorClass>((uint?) (itemToConvert?.Item1),(ExampleChild) (cloneOrChangeFunc((itemToConvert?.Item2))),(NonLazinatorClass) (itemToConvert?.Item3));
                                                }
                                                /*Location6782*/
                                                private static Tuple<int, ExampleStructContainingClasses> ConvertFromBytes_Tuple_Gint_c_C32ExampleStructContainingClasses_g(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default;
                                                    }
                                                    ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                    
                                                    int bytesSoFar = 0;
                                                    /*Location6783*/
                                                    int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                                    /*Location6784*/
                                                    ExampleStructContainingClasses item2 = default(ExampleStructContainingClasses);
                                                    int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                                    if (lengthCollectionMember_item2 != 0)
                                                    {
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                        item2 = new ExampleStructContainingClasses();
                                                        item2.DeserializeLazinator(childData);;
                                                    }
                                                    bytesSoFar += lengthCollectionMember_item2;
                                                    /*Location6785*/
                                                    var tupleType = new Tuple<int, ExampleStructContainingClasses>(item1, item2);
                                                    
                                                    return tupleType;
                                                }
                                                
                                                private static void ConvertToBytes_Tuple_Gint_c_C32ExampleStructContainingClasses_g(ref BinaryBufferWriter writer, Tuple<int, ExampleStructContainingClasses> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    /*Location6786*/if (itemToConvert == null)
                                                    {
                                                        return;
                                                    }
                                                    /*Location6787*/
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item1);
                                                    /*Location6788*/
                                                    void actionItem2(ref BinaryBufferWriter w) => itemToConvert.Item2.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, actionItem2);
                                                    /*Location6789*/}
                                                    /*Location6790*/
                                                    private static Tuple<int, ExampleStructContainingClasses> CloneOrChange_Tuple_Gint_c_C32ExampleStructContainingClasses_g(Tuple<int, ExampleStructContainingClasses> itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                    {
                                                        if (itemToConvert == null)
                                                        {
                                                            return default(Tuple<int, ExampleStructContainingClasses>);
                                                        }
                                                        
                                                        return new Tuple<int, ExampleStructContainingClasses>((int) (itemToConvert?.Item1 ?? default),(ExampleStructContainingClasses) (cloneOrChangeFunc((itemToConvert?.Item2 ?? default))));
                                                    }
                                                    /*Location6791*/
                                                    private static Tuple<int, ExampleStructContainingClasses?> ConvertFromBytes_Tuple_Gint_c_C32ExampleStructContainingClasses_C63_g(LazinatorMemory storage)
                                                    {
                                                        if (storage.Length == 0)
                                                        {
                                                            return default;
                                                        }
                                                        ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                        
                                                        int bytesSoFar = 0;
                                                        /*Location6792*/
                                                        int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                                        /*Location6793*/
                                                        ExampleStructContainingClasses? item2 = default(ExampleStructContainingClasses?);
                                                        int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember_item2 != 0)
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                            item2 = DeserializationFactory.Instance.CreateBasedOnType<ExampleStructContainingClasses?>(childData);
                                                        }
                                                        bytesSoFar += lengthCollectionMember_item2;
                                                        /*Location6794*/
                                                        var tupleType = new Tuple<int, ExampleStructContainingClasses?>(item1, item2);
                                                        
                                                        return tupleType;
                                                    }
                                                    
                                                    private static void ConvertToBytes_Tuple_Gint_c_C32ExampleStructContainingClasses_C63_g(ref BinaryBufferWriter writer, Tuple<int, ExampleStructContainingClasses?> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                    {
                                                        /*Location6795*/if (itemToConvert == null)
                                                        {
                                                            return;
                                                        }
                                                        /*Location6796*/
                                                        CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item1);
                                                        /*Location6797*/
                                                        void actionItem2(ref BinaryBufferWriter w) => itemToConvert.Item2?.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, actionItem2);
                                                        /*Location6798*/}
                                                        /*Location6799*/
                                                        private static Tuple<int, ExampleStructContainingClasses?> CloneOrChange_Tuple_Gint_c_C32ExampleStructContainingClasses_C63_g(Tuple<int, ExampleStructContainingClasses?> itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                        {
                                                            if (itemToConvert == null)
                                                            {
                                                                return default(Tuple<int, ExampleStructContainingClasses?>);
                                                            }
                                                            
                                                            return new Tuple<int, ExampleStructContainingClasses?>((int) (itemToConvert?.Item1 ?? default),(ExampleStructContainingClasses?) (cloneOrChangeFunc((itemToConvert?.Item2))));
                                                        }
                                                        /*Location6800*/
                                                    }
                                                }
