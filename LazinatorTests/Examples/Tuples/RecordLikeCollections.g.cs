/*Location6923*//*Location6907*///4e3d2b5f-e170-a419-1634-89765acdf8f2
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.Tuples
{/*Location6908*/
    using Lazinator.Attributes;/*Location6909*/
    using Lazinator.Buffers;/*Location6910*/
    using Lazinator.Core;/*Location6911*/
    using Lazinator.Exceptions;/*Location6912*/
    using Lazinator.Support;/*Location6913*/
    using LazinatorTests.Examples;/*Location6914*/
    using LazinatorTests.Examples.Structs;/*Location6915*/
    using System;/*Location6916*/
    using System.Buffers;/*Location6917*/
    using System.Collections.Generic;/*Location6918*/
    using System.Diagnostics;/*Location6919*/
    using System.IO;/*Location6920*/
    using System.Linq;/*Location6921*/
    using System.Runtime.InteropServices;/*Location6922*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class RecordLikeCollections : ILazinator
    {
        /*Location6924*/public bool IsStruct => false;
        
        /*Location6925*//* Property definitions */
        
        /*Location6926*/        protected int _MyDictionaryWithRecordLikeContainers_ByteIndex;
        /*Location6927*/        protected int _MyDictionaryWithRecordLikeTypeValues_ByteIndex;
        /*Location6928*/protected virtual int _MyDictionaryWithRecordLikeContainers_ByteLength => _MyDictionaryWithRecordLikeTypeValues_ByteIndex - _MyDictionaryWithRecordLikeContainers_ByteIndex;
        /*Location6929*/private int _RecordLikeCollections_EndByteIndex;
        /*Location6930*/protected virtual int _MyDictionaryWithRecordLikeTypeValues_ByteLength => _RecordLikeCollections_EndByteIndex - _MyDictionaryWithRecordLikeTypeValues_ByteIndex;
        
        /*Location6931*/
        protected int _MyInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int MyInt
        {
            get
            {
                return _MyInt;
            }
            set
            {
                IsDirty = true;
                _MyInt = value;
            }
        }
        /*Location6932*/
        protected Dictionary<int, RecordLikeContainer> _MyDictionaryWithRecordLikeContainers;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<int, RecordLikeContainer> MyDictionaryWithRecordLikeContainers
        {
            get
            {
                if (!_MyDictionaryWithRecordLikeContainers_Accessed)
                {
                    Lazinate_MyDictionaryWithRecordLikeContainers();
                }
                IsDirty = true; 
                return _MyDictionaryWithRecordLikeContainers;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyDictionaryWithRecordLikeContainers = value;
                _MyDictionaryWithRecordLikeContainers_Accessed = true;
            }
        }
        protected bool _MyDictionaryWithRecordLikeContainers_Accessed;
        private void Lazinate_MyDictionaryWithRecordLikeContainers()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyDictionaryWithRecordLikeContainers = default(Dictionary<int, RecordLikeContainer>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyDictionaryWithRecordLikeContainers_ByteIndex, _MyDictionaryWithRecordLikeContainers_ByteLength, false, false, null);
                _MyDictionaryWithRecordLikeContainers = ConvertFromBytes_Dictionary_Gint_c_C32RecordLikeContainer_g(childData);
            }
            
            _MyDictionaryWithRecordLikeContainers_Accessed = true;
        }
        
        /*Location6933*/
        protected Dictionary<int, RecordLikeTypeWithLazinator> _MyDictionaryWithRecordLikeTypeValues;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Dictionary<int, RecordLikeTypeWithLazinator> MyDictionaryWithRecordLikeTypeValues
        {
            get
            {
                if (!_MyDictionaryWithRecordLikeTypeValues_Accessed)
                {
                    Lazinate_MyDictionaryWithRecordLikeTypeValues();
                }
                IsDirty = true; 
                return _MyDictionaryWithRecordLikeTypeValues;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyDictionaryWithRecordLikeTypeValues = value;
                _MyDictionaryWithRecordLikeTypeValues_Accessed = true;
            }
        }
        protected bool _MyDictionaryWithRecordLikeTypeValues_Accessed;
        private void Lazinate_MyDictionaryWithRecordLikeTypeValues()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyDictionaryWithRecordLikeTypeValues = default(Dictionary<int, RecordLikeTypeWithLazinator>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyDictionaryWithRecordLikeTypeValues_ByteIndex, _MyDictionaryWithRecordLikeTypeValues_ByteLength, false, false, null);
                _MyDictionaryWithRecordLikeTypeValues = ConvertFromBytes_Dictionary_Gint_c_C32RecordLikeTypeWithLazinator_g(childData);
            }
            
            _MyDictionaryWithRecordLikeTypeValues_Accessed = true;
        }
        
        /*Location6937*/
        /* Serialization, deserialization, and object relationships */
        
        public RecordLikeCollections(LazinatorConstructorEnum constructorEnum)
        {
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            var clone = new RecordLikeCollections(LazinatorConstructorEnum.LazinatorConstructor)
            {
                OriginalIncludeChildrenMode = includeChildrenMode
            };
            clone = CompleteClone(this, clone, includeChildrenMode, cloneBufferOptions);
            return clone;
        }
        
        public virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            RecordLikeCollections typedClone = (RecordLikeCollections) clone;
            /*Location6934*/typedClone.MyInt = MyInt;
            /*Location6935*/typedClone.MyDictionaryWithRecordLikeContainers = CloneOrChange_Dictionary_Gint_c_C32RecordLikeContainer_g(MyDictionaryWithRecordLikeContainers, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location6936*/typedClone.MyDictionaryWithRecordLikeTypeValues = CloneOrChange_Dictionary_Gint_c_C32RecordLikeTypeWithLazinator_g(MyDictionaryWithRecordLikeTypeValues, l => l.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        /*Location6938*/
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location6939*/public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location6940*/yield break;
        }
        /*Location6941*/
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location6942*/yield return ("MyInt", (object)MyInt);
            /*Location6943*/yield return ("MyDictionaryWithRecordLikeContainers", (object)MyDictionaryWithRecordLikeContainers);
            /*Location6944*/yield return ("MyDictionaryWithRecordLikeTypeValues", (object)MyDictionaryWithRecordLikeTypeValues);
            /*Location6945*/yield break;
        }
        /*Location6946*/
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location6947*/if ((!exploreOnlyDeserializedChildren && MyDictionaryWithRecordLikeContainers != null) || (_MyDictionaryWithRecordLikeContainers_Accessed && _MyDictionaryWithRecordLikeContainers != null))
            {
                _MyDictionaryWithRecordLikeContainers = (Dictionary<int, RecordLikeContainer>) CloneOrChange_Dictionary_Gint_c_C32RecordLikeContainer_g(_MyDictionaryWithRecordLikeContainers, l => l.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location6948*/if ((!exploreOnlyDeserializedChildren && MyDictionaryWithRecordLikeTypeValues != null) || (_MyDictionaryWithRecordLikeTypeValues_Accessed && _MyDictionaryWithRecordLikeTypeValues != null))
            {
                _MyDictionaryWithRecordLikeTypeValues = (Dictionary<int, RecordLikeTypeWithLazinator>) CloneOrChange_Dictionary_Gint_c_C32RecordLikeTypeWithLazinator_g(_MyDictionaryWithRecordLikeTypeValues, l => l.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location6949*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location6950*/
        public virtual void FreeInMemoryObjects()
        {
            _MyDictionaryWithRecordLikeContainers = default;
            _MyDictionaryWithRecordLikeTypeValues = default;
            _MyDictionaryWithRecordLikeContainers_Accessed = _MyDictionaryWithRecordLikeTypeValues_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location6951*/
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1081;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location6952*/public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location6953*/_MyInt = span.ToDecompressedInt(ref bytesSoFar);
            /*Location6954*/_MyDictionaryWithRecordLikeContainers_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location6955*/_MyDictionaryWithRecordLikeTypeValues_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location6956*/_RecordLikeCollections_EndByteIndex = bytesSoFar;
            /*Location6957*/        }
            
            /*Location6958*/public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location6959*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location6960*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location6961*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location6962*/}
                    /*Location6963*/}
                    /*Location6964*/
                    public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location6965*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location6966*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location6967*/}
                                /*Location6968*//*Location6969*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location6970*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location6971*/}
                            /*Location6972*/
                            protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                /*Location6973*/if (_MyDictionaryWithRecordLikeContainers_Accessed && _MyDictionaryWithRecordLikeContainers != null)
                                {
                                    _MyDictionaryWithRecordLikeContainers = (Dictionary<int, RecordLikeContainer>) CloneOrChange_Dictionary_Gint_c_C32RecordLikeContainer_g(_MyDictionaryWithRecordLikeContainers, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location6974*/if (_MyDictionaryWithRecordLikeTypeValues_Accessed && _MyDictionaryWithRecordLikeTypeValues != null)
                                {
                                    _MyDictionaryWithRecordLikeTypeValues = (Dictionary<int, RecordLikeTypeWithLazinator>) CloneOrChange_Dictionary_Gint_c_C32RecordLikeTypeWithLazinator_g(_MyDictionaryWithRecordLikeTypeValues, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location6975*/}
                                
                                /*Location6976*/
                                protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    int startPosition = writer.Position;
                                    int startOfObjectPosition = 0;
                                    // header information
                                    /*Location6977*/if (includeUniqueID)
                                    {
                                        if (!ContainsOpenGenericParameters)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                        }
                                        else
                                        {
                                            WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                                        }
                                    }
                                    /*Location6978*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                    writer.Write((byte)includeChildrenMode);
                                    /*Location6979*/// write properties
                                    /*Location6980*/CompressedIntegralTypes.WriteCompressedInt(ref writer, _MyInt);
                                    /*Location6981*/startOfObjectPosition = writer.Position;
                                    /*Location6982*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyDictionaryWithRecordLikeContainers_Accessed)
                                    {
                                        var deserialized = MyDictionaryWithRecordLikeContainers;
                                    }
                                    /*Location6983*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyDictionaryWithRecordLikeContainers, isBelievedDirty: _MyDictionaryWithRecordLikeContainers_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyDictionaryWithRecordLikeContainers_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyDictionaryWithRecordLikeContainers_ByteIndex, _MyDictionaryWithRecordLikeContainers_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Dictionary_Gint_c_C32RecordLikeContainer_g(ref w, _MyDictionaryWithRecordLikeContainers,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location6984*/if (updateStoredBuffer)
                                    {
                                        _MyDictionaryWithRecordLikeContainers_ByteIndex = startOfObjectPosition - startPosition;if (_MyDictionaryWithRecordLikeContainers_Accessed && _MyDictionaryWithRecordLikeContainers != null)
                                        {
                                            _MyDictionaryWithRecordLikeContainers = (Dictionary<int, RecordLikeContainer>) CloneOrChange_Dictionary_Gint_c_C32RecordLikeContainer_g(_MyDictionaryWithRecordLikeContainers, l => l.RemoveBufferInHierarchy(), true);
                                        }
                                        
                                    }
                                    /*Location6985*/startOfObjectPosition = writer.Position;
                                    /*Location6986*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyDictionaryWithRecordLikeTypeValues_Accessed)
                                    {
                                        var deserialized = MyDictionaryWithRecordLikeTypeValues;
                                    }
                                    /*Location6987*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyDictionaryWithRecordLikeTypeValues, isBelievedDirty: _MyDictionaryWithRecordLikeTypeValues_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyDictionaryWithRecordLikeTypeValues_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyDictionaryWithRecordLikeTypeValues_ByteIndex, _MyDictionaryWithRecordLikeTypeValues_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Dictionary_Gint_c_C32RecordLikeTypeWithLazinator_g(ref w, _MyDictionaryWithRecordLikeTypeValues,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location6988*/if (updateStoredBuffer)
                                    {
                                        _MyDictionaryWithRecordLikeTypeValues_ByteIndex = startOfObjectPosition - startPosition;if (_MyDictionaryWithRecordLikeTypeValues_Accessed && _MyDictionaryWithRecordLikeTypeValues != null)
                                        {
                                            _MyDictionaryWithRecordLikeTypeValues = (Dictionary<int, RecordLikeTypeWithLazinator>) CloneOrChange_Dictionary_Gint_c_C32RecordLikeTypeWithLazinator_g(_MyDictionaryWithRecordLikeTypeValues, l => l.RemoveBufferInHierarchy(), true);
                                        }
                                        
                                    }
                                    /*Location6989*/if (updateStoredBuffer)
                                    {
                                        /*Location6990*/_RecordLikeCollections_EndByteIndex = writer.Position - startPosition;
                                        /*Location6991*/}
                                        /*Location6992*/}
                                        /*Location6993*/
                                        /* Conversion of supported collections and tuples */
                                        /*Location6994*/
                                        private static Dictionary<int, RecordLikeContainer> ConvertFromBytes_Dictionary_Gint_c_C32RecordLikeContainer_g(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default(Dictionary<int, RecordLikeContainer>);
                                            }
                                            ReadOnlySpan<byte> span = storage.Span;
                                            
                                            int bytesSoFar = 0;
                                            int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                            
                                            Dictionary<int, RecordLikeContainer> collection = new Dictionary<int, RecordLikeContainer>(collectionLength);
                                            for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                            {
                                                int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                var item = ConvertFromBytes_KeyValuePair_Gint_c_C32RecordLikeContainer_g(childData);
                                                collection.Add(item.Key, item.Value);
                                                bytesSoFar += lengthCollectionMember;
                                            }
                                            
                                            return collection;
                                        }/*Location6995*/
                                        
                                        private static void ConvertToBytes_Dictionary_Gint_c_C32RecordLikeContainer_g(ref BinaryBufferWriter writer, Dictionary<int, RecordLikeContainer> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            if (itemToConvert == default(Dictionary<int, RecordLikeContainer>))
                                            {
                                                return;
                                            }
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                            foreach (var item in itemToConvert)
                                            {
                                                void action(ref BinaryBufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32RecordLikeContainer_g(ref w, item, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                            }
                                        }
                                        /*Location6996*/
                                        private static Dictionary<int, RecordLikeContainer> CloneOrChange_Dictionary_Gint_c_C32RecordLikeContainer_g(Dictionary<int, RecordLikeContainer> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                        {
                                            if (itemToClone == null)
                                            {
                                                return default;
                                            }
                                            
                                            int collectionLength = itemToClone.Count;
                                            Dictionary<int, RecordLikeContainer> collection = new Dictionary<int, RecordLikeContainer>(collectionLength);
                                            foreach (var item in itemToClone)
                                            {
                                                var itemCopied = (KeyValuePair<int, RecordLikeContainer>) CloneOrChange_KeyValuePair_Gint_c_C32RecordLikeContainer_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                                                collection.Add(itemCopied.Key, itemCopied.Value);
                                            }
                                            return collection;
                                        }
                                        /*Location6997*/
                                        private static KeyValuePair<int, RecordLikeContainer> ConvertFromBytes_KeyValuePair_Gint_c_C32RecordLikeContainer_g(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default;
                                            }
                                            ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                            
                                            int bytesSoFar = 0;
                                            /*Location6998*/
                                            int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                            /*Location6999*/
                                            RecordLikeContainer item2 = default(RecordLikeContainer);
                                            int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                            if (lengthCollectionMember_item2 != 0)
                                            {
                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                item2 = DeserializationFactory.Instance.CreateBasedOnType<RecordLikeContainer>(childData);
                                            }
                                            bytesSoFar += lengthCollectionMember_item2;
                                            /*Location7000*/
                                            var tupleType = new KeyValuePair<int, RecordLikeContainer>(item1, item2);
                                            
                                            return tupleType;
                                        }
                                        
                                        private static void ConvertToBytes_KeyValuePair_Gint_c_C32RecordLikeContainer_g(ref BinaryBufferWriter writer, KeyValuePair<int, RecordLikeContainer> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            /*Location7001*/
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Key);
                                            /*Location7002*/
                                            if (itemToConvert.Value == null)
                                            {
                                                writer.Write((uint)0);
                                            }
                                            else
                                            {
                                                void actionValue(ref BinaryBufferWriter w) => itemToConvert.Value.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                WriteToBinaryWithIntLengthPrefix(ref writer, actionValue);
                                            };
                                            /*Location7003*/}
                                            /*Location7004*/
                                            private static KeyValuePair<int, RecordLikeContainer> CloneOrChange_KeyValuePair_Gint_c_C32RecordLikeContainer_g(KeyValuePair<int, RecordLikeContainer> itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                            {
                                                return new KeyValuePair<int, RecordLikeContainer>((int) (itemToConvert.Key),(RecordLikeContainer) (cloneOrChangeFunc((itemToConvert.Value))));
                                            }
                                            /*Location7005*/
                                            private static Dictionary<int, RecordLikeTypeWithLazinator> ConvertFromBytes_Dictionary_Gint_c_C32RecordLikeTypeWithLazinator_g(LazinatorMemory storage)
                                            {
                                                if (storage.Length == 0)
                                                {
                                                    return default(Dictionary<int, RecordLikeTypeWithLazinator>);
                                                }
                                                ReadOnlySpan<byte> span = storage.Span;
                                                
                                                int bytesSoFar = 0;
                                                int collectionLength = span.ToDecompressedInt(ref bytesSoFar);
                                                
                                                Dictionary<int, RecordLikeTypeWithLazinator> collection = new Dictionary<int, RecordLikeTypeWithLazinator>(collectionLength);
                                                for (int itemIndex = 0; itemIndex < collectionLength; itemIndex++)
                                                {
                                                    int lengthCollectionMember = span.ToInt32(ref bytesSoFar);
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember);
                                                    var item = ConvertFromBytes_KeyValuePair_Gint_c_C32RecordLikeTypeWithLazinator_g(childData);
                                                    collection.Add(item.Key, item.Value);
                                                    bytesSoFar += lengthCollectionMember;
                                                }
                                                
                                                return collection;
                                            }/*Location7006*/
                                            
                                            private static void ConvertToBytes_Dictionary_Gint_c_C32RecordLikeTypeWithLazinator_g(ref BinaryBufferWriter writer, Dictionary<int, RecordLikeTypeWithLazinator> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                            {
                                                if (itemToConvert == default(Dictionary<int, RecordLikeTypeWithLazinator>))
                                                {
                                                    return;
                                                }
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Count);
                                                foreach (var item in itemToConvert)
                                                {
                                                    void action(ref BinaryBufferWriter w) => ConvertToBytes_KeyValuePair_Gint_c_C32RecordLikeTypeWithLazinator_g(ref w, item, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, action);
                                                }
                                            }
                                            /*Location7007*/
                                            private static Dictionary<int, RecordLikeTypeWithLazinator> CloneOrChange_Dictionary_Gint_c_C32RecordLikeTypeWithLazinator_g(Dictionary<int, RecordLikeTypeWithLazinator> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                            {
                                                if (itemToClone == null)
                                                {
                                                    return default;
                                                }
                                                
                                                int collectionLength = itemToClone.Count;
                                                Dictionary<int, RecordLikeTypeWithLazinator> collection = new Dictionary<int, RecordLikeTypeWithLazinator>(collectionLength);
                                                foreach (var item in itemToClone)
                                                {
                                                    var itemCopied = (KeyValuePair<int, RecordLikeTypeWithLazinator>) CloneOrChange_KeyValuePair_Gint_c_C32RecordLikeTypeWithLazinator_g(item, cloneOrChangeFunc, avoidCloningIfPossible);
                                                    collection.Add(itemCopied.Key, itemCopied.Value);
                                                }
                                                return collection;
                                            }
                                            /*Location7008*/
                                            private static KeyValuePair<int, RecordLikeTypeWithLazinator> ConvertFromBytes_KeyValuePair_Gint_c_C32RecordLikeTypeWithLazinator_g(LazinatorMemory storage)
                                            {
                                                if (storage.Length == 0)
                                                {
                                                    return default;
                                                }
                                                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                
                                                int bytesSoFar = 0;
                                                /*Location7009*/
                                                int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                                /*Location7010*/
                                                RecordLikeTypeWithLazinator item2 = default(RecordLikeTypeWithLazinator);
                                                int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                                if (lengthCollectionMember_item2 != 0)
                                                {
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                    item2 = ConvertFromBytes_RecordLikeTypeWithLazinator(childData);
                                                }
                                                bytesSoFar += lengthCollectionMember_item2;
                                                /*Location7011*/
                                                var tupleType = new KeyValuePair<int, RecordLikeTypeWithLazinator>(item1, item2);
                                                
                                                return tupleType;
                                            }
                                            
                                            private static void ConvertToBytes_KeyValuePair_Gint_c_C32RecordLikeTypeWithLazinator_g(ref BinaryBufferWriter writer, KeyValuePair<int, RecordLikeTypeWithLazinator> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                            {
                                                /*Location7012*/
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Key);
                                                /*Location7013*/
                                                void actionValue(ref BinaryBufferWriter w) => ConvertToBytes_RecordLikeTypeWithLazinator(ref w, itemToConvert.Value, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                WriteToBinaryWithIntLengthPrefix(ref writer, actionValue);
                                                /*Location7014*/}
                                                /*Location7015*/
                                                private static KeyValuePair<int, RecordLikeTypeWithLazinator> CloneOrChange_KeyValuePair_Gint_c_C32RecordLikeTypeWithLazinator_g(KeyValuePair<int, RecordLikeTypeWithLazinator> itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    return new KeyValuePair<int, RecordLikeTypeWithLazinator>((int) (itemToConvert.Key),(RecordLikeTypeWithLazinator) CloneOrChange_RecordLikeTypeWithLazinator((itemToConvert.Value), cloneOrChangeFunc, avoidCloningIfPossible));
                                                }
                                                /*Location7016*/
                                                private static RecordLikeTypeWithLazinator ConvertFromBytes_RecordLikeTypeWithLazinator(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default;
                                                    }
                                                    ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                    
                                                    int bytesSoFar = 0;
                                                    /*Location7017*/
                                                    int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                                    /*Location7018*/
                                                    string item2 = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
                                                    /*Location7019*/
                                                    Example item3 = default(Example);
                                                    int lengthCollectionMember_item3 = span.ToInt32(ref bytesSoFar);
                                                    if (lengthCollectionMember_item3 != 0)
                                                    {
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item3);
                                                        item3 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                                                    }
                                                    bytesSoFar += lengthCollectionMember_item3;
                                                    /*Location7020*/
                                                    ExampleStructWithoutClass item4 = default(ExampleStructWithoutClass);
                                                    int lengthCollectionMember_item4 = span.ToInt32(ref bytesSoFar);
                                                    if (lengthCollectionMember_item4 != 0)
                                                    {
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item4);
                                                        item4 = new ExampleStructWithoutClass();
                                                        item4.DeserializeLazinator(childData);;
                                                    }
                                                    bytesSoFar += lengthCollectionMember_item4;
                                                    /*Location7021*/
                                                    var tupleType = new RecordLikeTypeWithLazinator(item1, item2, item3, item4);
                                                    
                                                    return tupleType;
                                                }
                                                
                                                private static void ConvertToBytes_RecordLikeTypeWithLazinator(ref BinaryBufferWriter writer, RecordLikeTypeWithLazinator itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    /*Location7022*/
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
                                                    /*Location7023*/
                                                    EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, itemToConvert.Name);
                                                    /*Location7024*/
                                                    if (itemToConvert.Example == null)
                                                    {
                                                        writer.Write((uint)0);
                                                    }
                                                    else
                                                    {
                                                        void actionExample(ref BinaryBufferWriter w) => itemToConvert.Example.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, actionExample);
                                                    };
                                                    /*Location7025*/
                                                    void actionExampleStruct(ref BinaryBufferWriter w) => itemToConvert.ExampleStruct.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, actionExampleStruct);
                                                    /*Location7026*/}
                                                    /*Location7027*/
                                                    private static RecordLikeTypeWithLazinator CloneOrChange_RecordLikeTypeWithLazinator(RecordLikeTypeWithLazinator itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                    {
                                                        return new RecordLikeTypeWithLazinator((int) (itemToConvert.Age),(string) (itemToConvert.Name),(Example) (cloneOrChangeFunc((itemToConvert.Example))),(ExampleStructWithoutClass) (cloneOrChangeFunc((itemToConvert.ExampleStruct))));
                                                    }
                                                    /*Location7028*/
                                                }
                                            }
