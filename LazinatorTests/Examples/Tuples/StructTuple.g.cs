/*Location7356*//*Location7340*///cdd13b7a-5107-c792-9fc8-43c7b5701e0f
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.Tuples
{/*Location7341*/
    using Lazinator.Attributes;/*Location7342*/
    using Lazinator.Buffers;/*Location7343*/
    using Lazinator.Core;/*Location7344*/
    using Lazinator.Exceptions;/*Location7345*/
    using Lazinator.Support;/*Location7346*/
    using Lazinator.Wrappers;/*Location7347*/
    using LazinatorTests.Examples;/*Location7348*/
    using System;/*Location7349*/
    using System.Buffers;/*Location7350*/
    using System.Collections.Generic;/*Location7351*/
    using System.Diagnostics;/*Location7352*/
    using System.IO;/*Location7353*/
    using System.Linq;/*Location7354*/
    using System.Runtime.InteropServices;/*Location7355*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class StructTuple : ILazinator
    {
        /*Location7357*/public bool IsStruct => false;
        
        /*Location7358*//* Property definitions */
        
        /*Location7359*/        protected int _EnumTuple_ByteIndex;
        /*Location7360*/        protected int _MyNamedTuple_ByteIndex;
        /*Location7361*/        protected int _MyNullableTuple_ByteIndex;
        /*Location7362*/        protected int _MyValueTupleNullableStructs_ByteIndex;
        /*Location7363*/        protected int _MyValueTupleSerialized_ByteIndex;
        /*Location7364*/        protected int _MyValueTupleStructs_ByteIndex;
        /*Location7365*/protected virtual int _EnumTuple_ByteLength => _MyNamedTuple_ByteIndex - _EnumTuple_ByteIndex;
        /*Location7366*/protected virtual int _MyNamedTuple_ByteLength => _MyNullableTuple_ByteIndex - _MyNamedTuple_ByteIndex;
        /*Location7367*/protected virtual int _MyNullableTuple_ByteLength => _MyValueTupleNullableStructs_ByteIndex - _MyNullableTuple_ByteIndex;
        /*Location7368*/protected virtual int _MyValueTupleNullableStructs_ByteLength => _MyValueTupleSerialized_ByteIndex - _MyValueTupleNullableStructs_ByteIndex;
        /*Location7369*/protected virtual int _MyValueTupleSerialized_ByteLength => _MyValueTupleStructs_ByteIndex - _MyValueTupleSerialized_ByteIndex;
        /*Location7370*/private int _StructTuple_EndByteIndex;
        /*Location7371*/protected virtual int _MyValueTupleStructs_ByteLength => _StructTuple_EndByteIndex - _MyValueTupleStructs_ByteIndex;
        
        /*Location7372*/
        protected (TestEnum firstEnum, TestEnum anotherEnum) _EnumTuple;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (TestEnum firstEnum, TestEnum anotherEnum) EnumTuple
        {
            get
            {
                if (!_EnumTuple_Accessed)
                {
                    Lazinate_EnumTuple();
                }
                IsDirty = true; 
                return _EnumTuple;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _EnumTuple = value;
                _EnumTuple_Accessed = true;
            }
        }
        protected bool _EnumTuple_Accessed;
        private void Lazinate_EnumTuple()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _EnumTuple = default((TestEnum firstEnum, TestEnum anotherEnum));
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _EnumTuple_ByteIndex, _EnumTuple_ByteLength, false, false, null);
                _EnumTuple = ConvertFromBytes__PTestEnum_C32firstEnum_c_C32TestEnum_C32anotherEnum_p(childData);
            }
            
            _EnumTuple_Accessed = true;
        }
        
        /*Location7373*/
        protected (int MyFirstItem, double MySecondItem) _MyNamedTuple;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (int MyFirstItem, double MySecondItem) MyNamedTuple
        {
            get
            {
                if (!_MyNamedTuple_Accessed)
                {
                    Lazinate_MyNamedTuple();
                }
                IsDirty = true; 
                return _MyNamedTuple;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyNamedTuple = value;
                _MyNamedTuple_Accessed = true;
            }
        }
        protected bool _MyNamedTuple_Accessed;
        private void Lazinate_MyNamedTuple()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyNamedTuple = default((int MyFirstItem, double MySecondItem));
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyNamedTuple_ByteIndex, _MyNamedTuple_ByteLength, false, false, null);
                _MyNamedTuple = ConvertFromBytes__Pint_C32MyFirstItem_c_C32double_C32MySecondItem_p(childData);
            }
            
            _MyNamedTuple_Accessed = true;
        }
        
        /*Location7374*/
        protected (int, double)? _MyNullableTuple;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (int, double)? MyNullableTuple
        {
            get
            {
                if (!_MyNullableTuple_Accessed)
                {
                    Lazinate_MyNullableTuple();
                }
                IsDirty = true; 
                return _MyNullableTuple;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyNullableTuple = value;
                _MyNullableTuple_Accessed = true;
            }
        }
        protected bool _MyNullableTuple_Accessed;
        private void Lazinate_MyNullableTuple()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyNullableTuple = default((int, double)?);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyNullableTuple_ByteIndex, _MyNullableTuple_ByteLength, false, false, null);
                _MyNullableTuple = ConvertFromBytes__Pint_c_C32double_p_C63(childData);
            }
            
            _MyNullableTuple_Accessed = true;
        }
        
        /*Location7375*/
        protected (ExampleStructContainingClasses?, ExampleStructContainingClasses?, ExampleStructContainingClasses?) _MyValueTupleNullableStructs;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (ExampleStructContainingClasses?, ExampleStructContainingClasses?, ExampleStructContainingClasses?) MyValueTupleNullableStructs
        {
            get
            {
                if (!_MyValueTupleNullableStructs_Accessed)
                {
                    Lazinate_MyValueTupleNullableStructs();
                }
                IsDirty = true; 
                return _MyValueTupleNullableStructs;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyValueTupleNullableStructs = value;
                _MyValueTupleNullableStructs_Accessed = true;
            }
        }
        protected bool _MyValueTupleNullableStructs_Accessed;
        private void Lazinate_MyValueTupleNullableStructs()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyValueTupleNullableStructs = default((ExampleStructContainingClasses?, ExampleStructContainingClasses?, ExampleStructContainingClasses?));
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyValueTupleNullableStructs_ByteIndex, _MyValueTupleNullableStructs_ByteLength, false, false, null);
                _MyValueTupleNullableStructs = ConvertFromBytes__PExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_p(childData);
            }
            
            _MyValueTupleNullableStructs_Accessed = true;
        }
        
        /*Location7376*/
        protected (uint, ExampleChild, NonLazinatorClass) _MyValueTupleSerialized;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (uint, ExampleChild, NonLazinatorClass) MyValueTupleSerialized
        {
            get
            {
                if (!_MyValueTupleSerialized_Accessed)
                {
                    Lazinate_MyValueTupleSerialized();
                }
                IsDirty = true; 
                return _MyValueTupleSerialized;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyValueTupleSerialized = value;
                _MyValueTupleSerialized_Accessed = true;
            }
        }
        protected bool _MyValueTupleSerialized_Accessed;
        private void Lazinate_MyValueTupleSerialized()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyValueTupleSerialized = default((uint, ExampleChild, NonLazinatorClass));
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyValueTupleSerialized_ByteIndex, _MyValueTupleSerialized_ByteLength, false, false, null);
                _MyValueTupleSerialized = ConvertFromBytes__Puint_c_C32ExampleChild_c_C32NonLazinatorClass_p(childData);
            }
            
            _MyValueTupleSerialized_Accessed = true;
        }
        
        /*Location7377*/
        protected (WInt, WInt) _MyValueTupleStructs;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public (WInt, WInt) MyValueTupleStructs
        {
            get
            {
                if (!_MyValueTupleStructs_Accessed)
                {
                    Lazinate_MyValueTupleStructs();
                }
                IsDirty = true; 
                return _MyValueTupleStructs;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyValueTupleStructs = value;
                _MyValueTupleStructs_Accessed = true;
            }
        }
        protected bool _MyValueTupleStructs_Accessed;
        private void Lazinate_MyValueTupleStructs()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyValueTupleStructs = default((WInt, WInt));
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyValueTupleStructs_ByteIndex, _MyValueTupleStructs_ByteLength, false, false, null);
                _MyValueTupleStructs = ConvertFromBytes__PWInt_c_C32WInt_p(childData);
            }
            
            _MyValueTupleStructs_Accessed = true;
        }
        
        /*Location7384*/
        /* Serialization, deserialization, and object relationships */
        
        public StructTuple(IncludeChildrenMode originalIncludeChildrenMode)
        {
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public StructTuple(LazinatorMemory serializedBytes, ILazinator parent = null)
        {
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            StructTuple clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new StructTuple(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (StructTuple)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, false, this);
                clone = new StructTuple(bytes);
            }
            return clone;
        }
        
        public virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            StructTuple typedClone = (StructTuple) clone;
            /*Location7378*/typedClone.EnumTuple = CloneOrChange__PTestEnum_C32firstEnum_c_C32TestEnum_C32anotherEnum_p(EnumTuple, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location7379*/typedClone.MyNamedTuple = CloneOrChange__Pint_C32MyFirstItem_c_C32double_C32MySecondItem_p(MyNamedTuple, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location7380*/typedClone.MyNullableTuple = CloneOrChange__Pint_c_C32double_p_C63(MyNullableTuple, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location7381*/typedClone.MyValueTupleNullableStructs = CloneOrChange__PExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_p(MyValueTupleNullableStructs, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location7382*/typedClone.MyValueTupleSerialized = CloneOrChange__Puint_c_C32ExampleChild_c_C32NonLazinatorClass_p(MyValueTupleSerialized, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location7383*/typedClone.MyValueTupleStructs = CloneOrChange__PWInt_c_C32WInt_p(MyValueTupleStructs, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        /*Location7385*/
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location7386*/public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location7387*/yield break;
        }
        /*Location7388*/
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location7389*/yield return ("EnumTuple", (object)EnumTuple);
            /*Location7390*/yield return ("MyNamedTuple", (object)MyNamedTuple);
            /*Location7391*/yield return ("MyNullableTuple", (object)MyNullableTuple);
            /*Location7392*/yield return ("MyValueTupleNullableStructs", (object)MyValueTupleNullableStructs);
            /*Location7393*/yield return ("MyValueTupleSerialized", (object)MyValueTupleSerialized);
            /*Location7394*/yield return ("MyValueTupleStructs", (object)MyValueTupleStructs);
            /*Location7395*/yield break;
        }
        /*Location7396*/
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location7397*/var deserialized_EnumTuple = EnumTuple;
            _EnumTuple = ((TestEnum firstEnum, TestEnum anotherEnum)) CloneOrChange__PTestEnum_C32firstEnum_c_C32TestEnum_C32anotherEnum_p(_EnumTuple, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location7398*/var deserialized_MyNamedTuple = MyNamedTuple;
            _MyNamedTuple = ((int MyFirstItem, double MySecondItem)) CloneOrChange__Pint_C32MyFirstItem_c_C32double_C32MySecondItem_p(_MyNamedTuple, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location7399*/if ((!exploreOnlyDeserializedChildren && MyNullableTuple != null) || (_MyNullableTuple_Accessed && _MyNullableTuple != null))
            {
                _MyNullableTuple = ((int, double)?) CloneOrChange__Pint_c_C32double_p_C63(_MyNullableTuple, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location7400*/var deserialized_MyValueTupleNullableStructs = MyValueTupleNullableStructs;
            _MyValueTupleNullableStructs = ((ExampleStructContainingClasses?, ExampleStructContainingClasses?, ExampleStructContainingClasses?)) CloneOrChange__PExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_p(_MyValueTupleNullableStructs, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location7401*/var deserialized_MyValueTupleSerialized = MyValueTupleSerialized;
            _MyValueTupleSerialized = ((uint, ExampleChild, NonLazinatorClass)) CloneOrChange__Puint_c_C32ExampleChild_c_C32NonLazinatorClass_p(_MyValueTupleSerialized, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location7402*/var deserialized_MyValueTupleStructs = MyValueTupleStructs;
            _MyValueTupleStructs = ((WInt, WInt)) CloneOrChange__PWInt_c_C32WInt_p(_MyValueTupleStructs, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location7403*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location7404*/
        public virtual void FreeInMemoryObjects()
        {
            _EnumTuple = default;
            _MyNamedTuple = default;
            _MyNullableTuple = default;
            _MyValueTupleNullableStructs = default;
            _MyValueTupleSerialized = default;
            _MyValueTupleStructs = default;
            _EnumTuple_Accessed = _MyNamedTuple_Accessed = _MyNullableTuple_Accessed = _MyValueTupleNullableStructs_Accessed = _MyValueTupleSerialized_Accessed = _MyValueTupleStructs_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location7405*/
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1029;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location7406*/public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location7407*/_EnumTuple_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location7408*/_MyNamedTuple_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location7409*/_MyNullableTuple_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location7410*/_MyValueTupleNullableStructs_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location7411*/_MyValueTupleSerialized_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location7412*/_MyValueTupleStructs_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location7413*/_StructTuple_EndByteIndex = bytesSoFar;
            /*Location7414*/        }
            
            /*Location7415*/public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location7416*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location7417*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location7418*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location7419*/}
                    /*Location7420*/}
                    /*Location7421*/
                    public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location7422*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location7423*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location7424*/}
                                /*Location7425*//*Location7426*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location7427*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location7428*/}
                            /*Location7429*/
                            protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                /*Location7430*/_EnumTuple = ((TestEnum firstEnum, TestEnum anotherEnum)) CloneOrChange__PTestEnum_C32firstEnum_c_C32TestEnum_C32anotherEnum_p(_EnumTuple, l => l.RemoveBufferInHierarchy(), true);/*Location7431*/_MyNamedTuple = ((int MyFirstItem, double MySecondItem)) CloneOrChange__Pint_C32MyFirstItem_c_C32double_C32MySecondItem_p(_MyNamedTuple, l => l.RemoveBufferInHierarchy(), true);/*Location7432*/if (_MyNullableTuple_Accessed && _MyNullableTuple != null)
                                {
                                    _MyNullableTuple = ((int, double)?) CloneOrChange__Pint_c_C32double_p_C63(_MyNullableTuple, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location7433*/_MyValueTupleNullableStructs = ((ExampleStructContainingClasses?, ExampleStructContainingClasses?, ExampleStructContainingClasses?)) CloneOrChange__PExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_p(_MyValueTupleNullableStructs, l => l.RemoveBufferInHierarchy(), true);/*Location7434*/_MyValueTupleSerialized = ((uint, ExampleChild, NonLazinatorClass)) CloneOrChange__Puint_c_C32ExampleChild_c_C32NonLazinatorClass_p(_MyValueTupleSerialized, l => l.RemoveBufferInHierarchy(), true);/*Location7435*/_MyValueTupleStructs = ((WInt, WInt)) CloneOrChange__PWInt_c_C32WInt_p(_MyValueTupleStructs, l => l.RemoveBufferInHierarchy(), true);/*Location7436*/}
                                
                                /*Location7437*/
                                protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    int startPosition = writer.Position;
                                    int startOfObjectPosition = 0;
                                    // header information
                                    /*Location7438*/if (includeUniqueID)
                                    {
                                        if (!ContainsOpenGenericParameters)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                        }
                                        else
                                        {
                                            WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                                        }
                                    }
                                    /*Location7439*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                    writer.Write((byte)includeChildrenMode);
                                    /*Location7440*/// write properties
                                    /*Location7441*/startOfObjectPosition = writer.Position;
                                    /*Location7442*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_EnumTuple_Accessed)
                                    {
                                        var deserialized = EnumTuple;
                                    }
                                    /*Location7443*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _EnumTuple, isBelievedDirty: _EnumTuple_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _EnumTuple_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _EnumTuple_ByteIndex, _EnumTuple_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes__PTestEnum_C32firstEnum_c_C32TestEnum_C32anotherEnum_p(ref w, _EnumTuple,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location7444*/if (updateStoredBuffer)
                                    {
                                        _EnumTuple_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location7445*/startOfObjectPosition = writer.Position;
                                    /*Location7446*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyNamedTuple_Accessed)
                                    {
                                        var deserialized = MyNamedTuple;
                                    }
                                    /*Location7447*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyNamedTuple, isBelievedDirty: _MyNamedTuple_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyNamedTuple_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyNamedTuple_ByteIndex, _MyNamedTuple_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes__Pint_C32MyFirstItem_c_C32double_C32MySecondItem_p(ref w, _MyNamedTuple,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location7448*/if (updateStoredBuffer)
                                    {
                                        _MyNamedTuple_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location7449*/startOfObjectPosition = writer.Position;
                                    /*Location7450*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyNullableTuple_Accessed)
                                    {
                                        var deserialized = MyNullableTuple;
                                    }
                                    /*Location7451*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyNullableTuple, isBelievedDirty: _MyNullableTuple_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyNullableTuple_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyNullableTuple_ByteIndex, _MyNullableTuple_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes__Pint_c_C32double_p_C63(ref w, _MyNullableTuple,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location7452*/if (updateStoredBuffer)
                                    {
                                        _MyNullableTuple_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location7453*/startOfObjectPosition = writer.Position;
                                    /*Location7454*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyValueTupleNullableStructs_Accessed)
                                    {
                                        var deserialized = MyValueTupleNullableStructs;
                                    }
                                    /*Location7455*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyValueTupleNullableStructs, isBelievedDirty: _MyValueTupleNullableStructs_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyValueTupleNullableStructs_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyValueTupleNullableStructs_ByteIndex, _MyValueTupleNullableStructs_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes__PExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_p(ref w, _MyValueTupleNullableStructs,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location7456*/if (updateStoredBuffer)
                                    {
                                        _MyValueTupleNullableStructs_ByteIndex = startOfObjectPosition - startPosition; _MyValueTupleNullableStructs = ((ExampleStructContainingClasses?, ExampleStructContainingClasses?, ExampleStructContainingClasses?)) CloneOrChange__PExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_p(_MyValueTupleNullableStructs, l => l.RemoveBufferInHierarchy(), true);
                                    }
                                    /*Location7457*/startOfObjectPosition = writer.Position;
                                    /*Location7458*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyValueTupleSerialized_Accessed)
                                    {
                                        var deserialized = MyValueTupleSerialized;
                                    }
                                    /*Location7459*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyValueTupleSerialized, isBelievedDirty: _MyValueTupleSerialized_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyValueTupleSerialized_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyValueTupleSerialized_ByteIndex, _MyValueTupleSerialized_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes__Puint_c_C32ExampleChild_c_C32NonLazinatorClass_p(ref w, _MyValueTupleSerialized,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location7460*/if (updateStoredBuffer)
                                    {
                                        _MyValueTupleSerialized_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location7461*/startOfObjectPosition = writer.Position;
                                    /*Location7462*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyValueTupleStructs_Accessed)
                                    {
                                        var deserialized = MyValueTupleStructs;
                                    }
                                    /*Location7463*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyValueTupleStructs, isBelievedDirty: _MyValueTupleStructs_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyValueTupleStructs_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyValueTupleStructs_ByteIndex, _MyValueTupleStructs_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes__PWInt_c_C32WInt_p(ref w, _MyValueTupleStructs,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location7464*/if (updateStoredBuffer)
                                    {
                                        _MyValueTupleStructs_ByteIndex = startOfObjectPosition - startPosition; _MyValueTupleStructs = ((WInt, WInt)) CloneOrChange__PWInt_c_C32WInt_p(_MyValueTupleStructs, l => l.RemoveBufferInHierarchy(), true);
                                    }
                                    /*Location7465*/if (updateStoredBuffer)
                                    {
                                        /*Location7466*/_StructTuple_EndByteIndex = writer.Position - startPosition;
                                        /*Location7467*/}
                                        /*Location7468*/}
                                        /*Location7469*/
                                        /* Conversion of supported collections and tuples */
                                        /*Location7470*/
                                        private static (TestEnum firstEnum, TestEnum anotherEnum) ConvertFromBytes__PTestEnum_C32firstEnum_c_C32TestEnum_C32anotherEnum_p(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default;
                                            }
                                            ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                            
                                            int bytesSoFar = 0;
                                            /*Location7471*/
                                            TestEnum item1 = (TestEnum)span.ToDecompressedInt(ref bytesSoFar);
                                            /*Location7472*/
                                            TestEnum item2 = (TestEnum)span.ToDecompressedInt(ref bytesSoFar);
                                            /*Location7473*/
                                            var tupleType = (item1, item2);
                                            
                                            return tupleType;
                                        }
                                        
                                        private static void ConvertToBytes__PTestEnum_C32firstEnum_c_C32TestEnum_C32anotherEnum_p(ref BinaryBufferWriter writer, (TestEnum firstEnum, TestEnum anotherEnum) itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            /*Location7474*/
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, (int) itemToConvert.Item1);
                                            /*Location7475*/
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, (int) itemToConvert.Item2);
                                            /*Location7476*/}
                                            /*Location7477*/
                                            private static (TestEnum firstEnum, TestEnum anotherEnum) CloneOrChange__PTestEnum_C32firstEnum_c_C32TestEnum_C32anotherEnum_p((TestEnum firstEnum, TestEnum anotherEnum) itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                            {
                                                return ((TestEnum) (itemToConvert.Item1),(TestEnum) (itemToConvert.Item2));
                                            }
                                            /*Location7478*/
                                            private static (int MyFirstItem, double MySecondItem) ConvertFromBytes__Pint_C32MyFirstItem_c_C32double_C32MySecondItem_p(LazinatorMemory storage)
                                            {
                                                if (storage.Length == 0)
                                                {
                                                    return default;
                                                }
                                                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                
                                                int bytesSoFar = 0;
                                                /*Location7479*/
                                                int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                                /*Location7480*/
                                                double item2 = span.ToDouble(ref bytesSoFar);
                                                /*Location7481*/
                                                var tupleType = (item1, item2);
                                                
                                                return tupleType;
                                            }
                                            
                                            private static void ConvertToBytes__Pint_C32MyFirstItem_c_C32double_C32MySecondItem_p(ref BinaryBufferWriter writer, (int MyFirstItem, double MySecondItem) itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                            {
                                                /*Location7482*/
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Item1);
                                                /*Location7483*/
                                                WriteUncompressedPrimitives.WriteDouble(ref writer, itemToConvert.Item2);
                                                /*Location7484*/}
                                                /*Location7485*/
                                                private static (int MyFirstItem, double MySecondItem) CloneOrChange__Pint_C32MyFirstItem_c_C32double_C32MySecondItem_p((int MyFirstItem, double MySecondItem) itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    return ((int) (itemToConvert.Item1),(double) (itemToConvert.Item2));
                                                }
                                                /*Location7486*/
                                                private static (int, double)? ConvertFromBytes__Pint_c_C32double_p_C63(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default;
                                                    }
                                                    ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                    
                                                    int bytesSoFar = 0;
                                                    /*Location7487*/
                                                    int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                                    /*Location7488*/
                                                    double item2 = span.ToDouble(ref bytesSoFar);
                                                    /*Location7489*/
                                                    var tupleType = (item1, item2);
                                                    
                                                    return tupleType;
                                                }
                                                
                                                private static void ConvertToBytes__Pint_c_C32double_p_C63(ref BinaryBufferWriter writer, (int, double)? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    /*Location7490*/if (itemToConvert == null)
                                                    {
                                                        return;
                                                    }
                                                    /*Location7491*/
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Value.Item1);
                                                    /*Location7492*/
                                                    WriteUncompressedPrimitives.WriteDouble(ref writer, itemToConvert.Value.Item2);
                                                    /*Location7493*/}
                                                    /*Location7494*/
                                                    private static (int, double)? CloneOrChange__Pint_c_C32double_p_C63((int, double)? itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                    {
                                                        if (itemToConvert == null)
                                                        {
                                                            return default((int, double)?);
                                                        }
                                                        
                                                        return ((int) (itemToConvert?.Item1 ?? default),(double) (itemToConvert?.Item2 ?? default));
                                                    }
                                                    /*Location7495*/
                                                    private static (ExampleStructContainingClasses?, ExampleStructContainingClasses?, ExampleStructContainingClasses?) ConvertFromBytes__PExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_p(LazinatorMemory storage)
                                                    {
                                                        if (storage.Length == 0)
                                                        {
                                                            return default;
                                                        }
                                                        ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                        
                                                        int bytesSoFar = 0;
                                                        /*Location7496*/
                                                        ExampleStructContainingClasses? item1 = default(ExampleStructContainingClasses?);
                                                        int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember_item1 != 0)
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                            item1 = DeserializationFactory.Instance.CreateBasedOnType<ExampleStructContainingClasses?>(childData);
                                                        }
                                                        bytesSoFar += lengthCollectionMember_item1;
                                                        /*Location7497*/
                                                        ExampleStructContainingClasses? item2 = default(ExampleStructContainingClasses?);
                                                        int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember_item2 != 0)
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                            item2 = DeserializationFactory.Instance.CreateBasedOnType<ExampleStructContainingClasses?>(childData);
                                                        }
                                                        bytesSoFar += lengthCollectionMember_item2;
                                                        /*Location7498*/
                                                        ExampleStructContainingClasses? item3 = default(ExampleStructContainingClasses?);
                                                        int lengthCollectionMember_item3 = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember_item3 != 0)
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item3);
                                                            item3 = DeserializationFactory.Instance.CreateBasedOnType<ExampleStructContainingClasses?>(childData);
                                                        }
                                                        bytesSoFar += lengthCollectionMember_item3;
                                                        /*Location7499*/
                                                        var tupleType = (item1, item2, item3);
                                                        
                                                        return tupleType;
                                                    }
                                                    
                                                    private static void ConvertToBytes__PExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_p(ref BinaryBufferWriter writer, (ExampleStructContainingClasses?, ExampleStructContainingClasses?, ExampleStructContainingClasses?) itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                    {
                                                        /*Location7500*/
                                                        void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1?.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                        /*Location7501*/
                                                        void actionItem2(ref BinaryBufferWriter w) => itemToConvert.Item2?.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, actionItem2);
                                                        /*Location7502*/
                                                        void actionItem3(ref BinaryBufferWriter w) => itemToConvert.Item3?.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, actionItem3);
                                                        /*Location7503*/}
                                                        /*Location7504*/
                                                        private static (ExampleStructContainingClasses?, ExampleStructContainingClasses?, ExampleStructContainingClasses?) CloneOrChange__PExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_c_C32ExampleStructContainingClasses_C63_p((ExampleStructContainingClasses?, ExampleStructContainingClasses?, ExampleStructContainingClasses?) itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                        {
                                                            return ((ExampleStructContainingClasses?) (cloneOrChangeFunc((itemToConvert.Item1))),(ExampleStructContainingClasses?) (cloneOrChangeFunc((itemToConvert.Item2))),(ExampleStructContainingClasses?) (cloneOrChangeFunc((itemToConvert.Item3))));
                                                        }
                                                        /*Location7505*/
                                                        private static (uint, ExampleChild, NonLazinatorClass) ConvertFromBytes__Puint_c_C32ExampleChild_c_C32NonLazinatorClass_p(LazinatorMemory storage)
                                                        {
                                                            if (storage.Length == 0)
                                                            {
                                                                return default;
                                                            }
                                                            ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                            
                                                            int bytesSoFar = 0;
                                                            /*Location7506*/
                                                            uint item1 = span.ToDecompressedUint(ref bytesSoFar);
                                                            /*Location7507*/
                                                            ExampleChild item2 = default(ExampleChild);
                                                            int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                                            if (lengthCollectionMember_item2 != 0)
                                                            {
                                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                                item2 = DeserializationFactory.Instance.CreateBasedOnType<ExampleChild>(childData);
                                                            }
                                                            bytesSoFar += lengthCollectionMember_item2;
                                                            /*Location7508*/
                                                            NonLazinatorClass item3 = default(NonLazinatorClass);
                                                            int lengthCollectionMember_item3 = span.ToInt32(ref bytesSoFar);
                                                            if (lengthCollectionMember_item3 != 0)
                                                            {
                                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item3);
                                                                item3 = NonLazinatorDirectConverter.ConvertFromBytes_NonLazinatorClass(childData);
                                                            }
                                                            bytesSoFar += lengthCollectionMember_item3;
                                                            /*Location7509*/
                                                            var tupleType = (item1, item2, item3);
                                                            
                                                            return tupleType;
                                                        }
                                                        
                                                        private static void ConvertToBytes__Puint_c_C32ExampleChild_c_C32NonLazinatorClass_p(ref BinaryBufferWriter writer, (uint, ExampleChild, NonLazinatorClass) itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                        {
                                                            /*Location7510*/
                                                            CompressedIntegralTypes.WriteCompressedUint(ref writer, itemToConvert.Item1);
                                                            /*Location7511*/
                                                            if (itemToConvert.Item2 == null)
                                                            {
                                                                writer.Write((uint)0);
                                                            }
                                                            else
                                                            {
                                                                void actionItem2(ref BinaryBufferWriter w) => itemToConvert.Item2.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                WriteToBinaryWithIntLengthPrefix(ref writer, actionItem2);
                                                            };
                                                            /*Location7512*/
                                                            if (itemToConvert.Item3 == null)
                                                            {
                                                                writer.Write((uint)0);
                                                            }
                                                            else
                                                            {
                                                                void actionItem3(ref BinaryBufferWriter w) => NonLazinatorDirectConverter.ConvertToBytes_NonLazinatorClass(ref w, itemToConvert.Item3, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                WriteToBinaryWithIntLengthPrefix(ref writer, actionItem3);
                                                            }
                                                            /*Location7513*/}
                                                            /*Location7514*/
                                                            private static (uint, ExampleChild, NonLazinatorClass) CloneOrChange__Puint_c_C32ExampleChild_c_C32NonLazinatorClass_p((uint, ExampleChild, NonLazinatorClass) itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                            {
                                                                return ((uint) (itemToConvert.Item1),(ExampleChild) (cloneOrChangeFunc((itemToConvert.Item2))),(NonLazinatorClass) (itemToConvert.Item3));
                                                            }
                                                            /*Location7515*/
                                                            private static (WInt, WInt) ConvertFromBytes__PWInt_c_C32WInt_p(LazinatorMemory storage)
                                                            {
                                                                if (storage.Length == 0)
                                                                {
                                                                    return default;
                                                                }
                                                                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                                
                                                                int bytesSoFar = 0;
                                                                /*Location7516*/
                                                                WInt item1 = default(WInt);
                                                                int lengthCollectionMember_item1 = span.ToByte(ref bytesSoFar);
                                                                if (lengthCollectionMember_item1 != 0)
                                                                {
                                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                                    item1 = new WInt();
                                                                    item1.DeserializeLazinator(childData);;
                                                                }
                                                                bytesSoFar += lengthCollectionMember_item1;
                                                                /*Location7517*/
                                                                WInt item2 = default(WInt);
                                                                int lengthCollectionMember_item2 = span.ToByte(ref bytesSoFar);
                                                                if (lengthCollectionMember_item2 != 0)
                                                                {
                                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                                    item2 = new WInt();
                                                                    item2.DeserializeLazinator(childData);;
                                                                }
                                                                bytesSoFar += lengthCollectionMember_item2;
                                                                /*Location7518*/
                                                                var tupleType = (item1, item2);
                                                                
                                                                return tupleType;
                                                            }
                                                            
                                                            private static void ConvertToBytes__PWInt_c_C32WInt_p(ref BinaryBufferWriter writer, (WInt, WInt) itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                            {
                                                                /*Location7519*/
                                                                void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                WriteToBinaryWithByteLengthPrefix(ref writer, actionItem1);
                                                                /*Location7520*/
                                                                void actionItem2(ref BinaryBufferWriter w) => itemToConvert.Item2.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                                WriteToBinaryWithByteLengthPrefix(ref writer, actionItem2);
                                                                /*Location7521*/}
                                                                /*Location7522*/
                                                                private static (WInt, WInt) CloneOrChange__PWInt_c_C32WInt_p((WInt, WInt) itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                                {
                                                                    return ((WInt) (cloneOrChangeFunc((itemToConvert.Item1))),(WInt) (cloneOrChangeFunc((itemToConvert.Item2))));
                                                                }
                                                                /*Location7523*/
                                                            }
                                                        }
