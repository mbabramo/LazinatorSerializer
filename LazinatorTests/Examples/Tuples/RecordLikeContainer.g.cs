//18daaab0-1331-2bbb-631e-486609df5735
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.393
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.Tuples
{
    using Lazinator.Attributes;
    using Lazinator.Buffers;
    using Lazinator.Core;
    using Lazinator.Exceptions;
    using Lazinator.Support;
    using LazinatorTests.Examples;
    using LazinatorTests.Examples.Structs;
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Drawing;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class RecordLikeContainer : ILazinator
    {
        public bool IsStruct => false;
        
        /* Property definitions */
        
        protected int _ExternalRecordLikeStruct_ByteIndex;
        protected int _MyMismatchedRecordLikeType_ByteIndex;
        protected int _MyNonLazinatorRecordWithConstructor_ByteIndex;
        protected int _MyNonLazinatorRecordWithoutConstructor_ByteIndex;
        protected int _MyNonLazinatorSubrecordWithConstructor_ByteIndex;
        protected int _MyNonLazinatorSubrecordWithoutConstructor_ByteIndex;
        protected int _MyRecordLikeClass_ByteIndex;
        protected int _MyRecordLikeStruct_ByteIndex;
        protected int _MyRecordLikeTypeWithLazinator_ByteIndex;
        protected virtual int _ExternalRecordLikeStruct_ByteLength => _MyMismatchedRecordLikeType_ByteIndex - _ExternalRecordLikeStruct_ByteIndex;
        protected virtual int _MyMismatchedRecordLikeType_ByteLength => _MyNonLazinatorRecordWithConstructor_ByteIndex - _MyMismatchedRecordLikeType_ByteIndex;
        protected virtual int _MyNonLazinatorRecordWithConstructor_ByteLength => _MyNonLazinatorRecordWithoutConstructor_ByteIndex - _MyNonLazinatorRecordWithConstructor_ByteIndex;
        protected virtual int _MyNonLazinatorRecordWithoutConstructor_ByteLength => _MyNonLazinatorSubrecordWithConstructor_ByteIndex - _MyNonLazinatorRecordWithoutConstructor_ByteIndex;
        protected virtual int _MyNonLazinatorSubrecordWithConstructor_ByteLength => _MyNonLazinatorSubrecordWithoutConstructor_ByteIndex - _MyNonLazinatorSubrecordWithConstructor_ByteIndex;
        protected virtual int _MyNonLazinatorSubrecordWithoutConstructor_ByteLength => _MyRecordLikeClass_ByteIndex - _MyNonLazinatorSubrecordWithoutConstructor_ByteIndex;
        protected virtual int _MyRecordLikeClass_ByteLength => _MyRecordLikeStruct_ByteIndex - _MyRecordLikeClass_ByteIndex;
        protected virtual int _MyRecordLikeStruct_ByteLength => _MyRecordLikeTypeWithLazinator_ByteIndex - _MyRecordLikeStruct_ByteIndex;
        private int _RecordLikeContainer_EndByteIndex;
        protected virtual int _MyRecordLikeTypeWithLazinator_ByteLength => _RecordLikeContainer_EndByteIndex - _MyRecordLikeTypeWithLazinator_ByteIndex;
        
        
        protected int _MyInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int MyInt
        {
            get
            {
                return _MyInt;
            }
            set
            {
                IsDirty = true;
                _MyInt = value;
            }
        }
        
        protected Point _ExternalRecordLikeStruct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Point ExternalRecordLikeStruct
        {
            get
            {
                if (!_ExternalRecordLikeStruct_Accessed)
                {
                    Lazinate_ExternalRecordLikeStruct();
                }
                IsDirty = true; 
                return _ExternalRecordLikeStruct;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _ExternalRecordLikeStruct = value;
                _ExternalRecordLikeStruct_Accessed = true;
            }
        }
        protected bool _ExternalRecordLikeStruct_Accessed;
        private void Lazinate_ExternalRecordLikeStruct()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _ExternalRecordLikeStruct = default(Point);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _ExternalRecordLikeStruct_ByteIndex, _ExternalRecordLikeStruct_ByteLength, false, false, null);
                _ExternalRecordLikeStruct = ConvertFromBytes_Point(childData);
            }
            
            _ExternalRecordLikeStruct_Accessed = true;
        }
        
        
        protected MismatchedRecordLikeType _MyMismatchedRecordLikeType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MismatchedRecordLikeType MyMismatchedRecordLikeType
        {
            get
            {
                if (!_MyMismatchedRecordLikeType_Accessed)
                {
                    Lazinate_MyMismatchedRecordLikeType();
                } 
                return _MyMismatchedRecordLikeType;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyMismatchedRecordLikeType = value;
                _MyMismatchedRecordLikeType_Accessed = true;
            }
        }
        protected bool _MyMismatchedRecordLikeType_Accessed;
        private void Lazinate_MyMismatchedRecordLikeType()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyMismatchedRecordLikeType = default(MismatchedRecordLikeType);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyMismatchedRecordLikeType_ByteIndex, _MyMismatchedRecordLikeType_ByteLength, false, false, null);
                _MyMismatchedRecordLikeType = ConvertFromBytes_MismatchedRecordLikeType(childData);
            }
            
            _MyMismatchedRecordLikeType_Accessed = true;
        }
        
        
        protected NonLazinatorRecordWithConstructor _MyNonLazinatorRecordWithConstructor;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public NonLazinatorRecordWithConstructor MyNonLazinatorRecordWithConstructor
        {
            get
            {
                if (!_MyNonLazinatorRecordWithConstructor_Accessed)
                {
                    Lazinate_MyNonLazinatorRecordWithConstructor();
                }
                IsDirty = true; 
                return _MyNonLazinatorRecordWithConstructor;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyNonLazinatorRecordWithConstructor = value;
                _MyNonLazinatorRecordWithConstructor_Accessed = true;
            }
        }
        protected bool _MyNonLazinatorRecordWithConstructor_Accessed;
        private void Lazinate_MyNonLazinatorRecordWithConstructor()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyNonLazinatorRecordWithConstructor = default(NonLazinatorRecordWithConstructor);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyNonLazinatorRecordWithConstructor_ByteIndex, _MyNonLazinatorRecordWithConstructor_ByteLength, false, false, null);
                _MyNonLazinatorRecordWithConstructor = ConvertFromBytes_NonLazinatorRecordWithConstructor(childData);
            }
            
            _MyNonLazinatorRecordWithConstructor_Accessed = true;
        }
        
        
        protected NonLazinatorRecordWithoutConstructor _MyNonLazinatorRecordWithoutConstructor;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public NonLazinatorRecordWithoutConstructor MyNonLazinatorRecordWithoutConstructor
        {
            get
            {
                if (!_MyNonLazinatorRecordWithoutConstructor_Accessed)
                {
                    Lazinate_MyNonLazinatorRecordWithoutConstructor();
                }
                IsDirty = true; 
                return _MyNonLazinatorRecordWithoutConstructor;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyNonLazinatorRecordWithoutConstructor = value;
                _MyNonLazinatorRecordWithoutConstructor_Accessed = true;
            }
        }
        protected bool _MyNonLazinatorRecordWithoutConstructor_Accessed;
        private void Lazinate_MyNonLazinatorRecordWithoutConstructor()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyNonLazinatorRecordWithoutConstructor = default(NonLazinatorRecordWithoutConstructor);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyNonLazinatorRecordWithoutConstructor_ByteIndex, _MyNonLazinatorRecordWithoutConstructor_ByteLength, false, false, null);
                _MyNonLazinatorRecordWithoutConstructor = ConvertFromBytes_NonLazinatorRecordWithoutConstructor(childData);
            }
            
            _MyNonLazinatorRecordWithoutConstructor_Accessed = true;
        }
        
        
        protected NonLazinatorSubrecordWithConstructor _MyNonLazinatorSubrecordWithConstructor;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public NonLazinatorSubrecordWithConstructor MyNonLazinatorSubrecordWithConstructor
        {
            get
            {
                if (!_MyNonLazinatorSubrecordWithConstructor_Accessed)
                {
                    Lazinate_MyNonLazinatorSubrecordWithConstructor();
                }
                IsDirty = true; 
                return _MyNonLazinatorSubrecordWithConstructor;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyNonLazinatorSubrecordWithConstructor = value;
                _MyNonLazinatorSubrecordWithConstructor_Accessed = true;
            }
        }
        protected bool _MyNonLazinatorSubrecordWithConstructor_Accessed;
        private void Lazinate_MyNonLazinatorSubrecordWithConstructor()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyNonLazinatorSubrecordWithConstructor = default(NonLazinatorSubrecordWithConstructor);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyNonLazinatorSubrecordWithConstructor_ByteIndex, _MyNonLazinatorSubrecordWithConstructor_ByteLength, false, false, null);
                _MyNonLazinatorSubrecordWithConstructor = ConvertFromBytes_NonLazinatorSubrecordWithConstructor(childData);
            }
            
            _MyNonLazinatorSubrecordWithConstructor_Accessed = true;
        }
        
        
        protected NonLazinatorSubrecordWithoutConstructor _MyNonLazinatorSubrecordWithoutConstructor;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public NonLazinatorSubrecordWithoutConstructor MyNonLazinatorSubrecordWithoutConstructor
        {
            get
            {
                if (!_MyNonLazinatorSubrecordWithoutConstructor_Accessed)
                {
                    Lazinate_MyNonLazinatorSubrecordWithoutConstructor();
                }
                IsDirty = true; 
                return _MyNonLazinatorSubrecordWithoutConstructor;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyNonLazinatorSubrecordWithoutConstructor = value;
                _MyNonLazinatorSubrecordWithoutConstructor_Accessed = true;
            }
        }
        protected bool _MyNonLazinatorSubrecordWithoutConstructor_Accessed;
        private void Lazinate_MyNonLazinatorSubrecordWithoutConstructor()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyNonLazinatorSubrecordWithoutConstructor = default(NonLazinatorSubrecordWithoutConstructor);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyNonLazinatorSubrecordWithoutConstructor_ByteIndex, _MyNonLazinatorSubrecordWithoutConstructor_ByteLength, false, false, null);
                _MyNonLazinatorSubrecordWithoutConstructor = ConvertFromBytes_NonLazinatorSubrecordWithoutConstructor(childData);
            }
            
            _MyNonLazinatorSubrecordWithoutConstructor_Accessed = true;
        }
        
        
        protected RecordLikeClass _MyRecordLikeClass;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RecordLikeClass MyRecordLikeClass
        {
            get
            {
                if (!_MyRecordLikeClass_Accessed)
                {
                    Lazinate_MyRecordLikeClass();
                }
                IsDirty = true; 
                return _MyRecordLikeClass;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyRecordLikeClass = value;
                _MyRecordLikeClass_Accessed = true;
            }
        }
        protected bool _MyRecordLikeClass_Accessed;
        private void Lazinate_MyRecordLikeClass()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyRecordLikeClass = default(RecordLikeClass);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyRecordLikeClass_ByteIndex, _MyRecordLikeClass_ByteLength, false, false, null);
                _MyRecordLikeClass = ConvertFromBytes_RecordLikeClass(childData);
            }
            
            _MyRecordLikeClass_Accessed = true;
        }
        
        
        protected RecordLikeStruct _MyRecordLikeStruct;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RecordLikeStruct MyRecordLikeStruct
        {
            get
            {
                if (!_MyRecordLikeStruct_Accessed)
                {
                    Lazinate_MyRecordLikeStruct();
                } 
                return _MyRecordLikeStruct;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyRecordLikeStruct = value;
                _MyRecordLikeStruct_Accessed = true;
            }
        }
        protected bool _MyRecordLikeStruct_Accessed;
        private void Lazinate_MyRecordLikeStruct()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyRecordLikeStruct = default(RecordLikeStruct);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyRecordLikeStruct_ByteIndex, _MyRecordLikeStruct_ByteLength, false, false, null);
                _MyRecordLikeStruct = ConvertFromBytes_RecordLikeStruct(childData);
            }
            
            _MyRecordLikeStruct_Accessed = true;
        }
        
        
        protected RecordLikeTypeWithLazinator _MyRecordLikeTypeWithLazinator;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RecordLikeTypeWithLazinator MyRecordLikeTypeWithLazinator
        {
            get
            {
                if (!_MyRecordLikeTypeWithLazinator_Accessed)
                {
                    Lazinate_MyRecordLikeTypeWithLazinator();
                }
                IsDirty = true; 
                return _MyRecordLikeTypeWithLazinator;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyRecordLikeTypeWithLazinator = value;
                _MyRecordLikeTypeWithLazinator_Accessed = true;
            }
        }
        protected bool _MyRecordLikeTypeWithLazinator_Accessed;
        private void Lazinate_MyRecordLikeTypeWithLazinator()
        {
            if (LazinatorMemoryStorage.Length == 0)
            {
                _MyRecordLikeTypeWithLazinator = default(RecordLikeTypeWithLazinator);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyRecordLikeTypeWithLazinator_ByteIndex, _MyRecordLikeTypeWithLazinator_ByteLength, false, false, null);
                _MyRecordLikeTypeWithLazinator = ConvertFromBytes_RecordLikeTypeWithLazinator(childData);
            }
            
            _MyRecordLikeTypeWithLazinator_Accessed = true;
        }
        
        
        /* Serialization, deserialization, and object relationships */
        
        public RecordLikeContainer(IncludeChildrenMode originalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren)
        {
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public RecordLikeContainer(LazinatorMemory serializedBytes, ILazinator parent = null)
        {
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            LazinatorMemoryStorage.WriteToBinaryBuffer(ref writer);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            RecordLikeContainer clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new RecordLikeContainer(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (RecordLikeContainer)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, false, this);
                clone = new RecordLikeContainer(bytes);
            }
            return clone;
        }
        
        public virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            RecordLikeContainer typedClone = (RecordLikeContainer) clone;
            typedClone.MyInt = MyInt;
            typedClone.ExternalRecordLikeStruct = CloneOrChange_Point(ExternalRecordLikeStruct, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyMismatchedRecordLikeType = CloneOrChange_MismatchedRecordLikeType(MyMismatchedRecordLikeType, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyNonLazinatorRecordWithConstructor = CloneOrChange_NonLazinatorRecordWithConstructor(MyNonLazinatorRecordWithConstructor, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyNonLazinatorRecordWithoutConstructor = CloneOrChange_NonLazinatorRecordWithoutConstructor(MyNonLazinatorRecordWithoutConstructor, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyNonLazinatorSubrecordWithConstructor = CloneOrChange_NonLazinatorSubrecordWithConstructor(MyNonLazinatorSubrecordWithConstructor, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyNonLazinatorSubrecordWithoutConstructor = CloneOrChange_NonLazinatorSubrecordWithoutConstructor(MyNonLazinatorSubrecordWithoutConstructor, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyRecordLikeClass = CloneOrChange_RecordLikeClass(MyRecordLikeClass, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyRecordLikeStruct = CloneOrChange_RecordLikeStruct(MyRecordLikeStruct, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            typedClone.MyRecordLikeTypeWithLazinator = CloneOrChange_RecordLikeTypeWithLazinator(MyRecordLikeTypeWithLazinator, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorMemoryStorage.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.InitialMemory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorMemoryStorage.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                LazinatorMemoryStorage.WriteToBinaryBuffer(ref writer);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorMemoryStorage.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            yield break;
        }
        
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            yield return ("MyInt", (object)MyInt);
            yield return ("ExternalRecordLikeStruct", (object)ExternalRecordLikeStruct);
            yield return ("MyMismatchedRecordLikeType", (object)MyMismatchedRecordLikeType);
            yield return ("MyNonLazinatorRecordWithConstructor", (object)MyNonLazinatorRecordWithConstructor);
            yield return ("MyNonLazinatorRecordWithoutConstructor", (object)MyNonLazinatorRecordWithoutConstructor);
            yield return ("MyNonLazinatorSubrecordWithConstructor", (object)MyNonLazinatorSubrecordWithConstructor);
            yield return ("MyNonLazinatorSubrecordWithoutConstructor", (object)MyNonLazinatorSubrecordWithoutConstructor);
            yield return ("MyRecordLikeClass", (object)MyRecordLikeClass);
            yield return ("MyRecordLikeStruct", (object)MyRecordLikeStruct);
            yield return ("MyRecordLikeTypeWithLazinator", (object)MyRecordLikeTypeWithLazinator);
            yield break;
        }
        
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            var deserialized_ExternalRecordLikeStruct = ExternalRecordLikeStruct;
            _ExternalRecordLikeStruct = (Point) CloneOrChange_Point(_ExternalRecordLikeStruct, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);var deserialized_MyMismatchedRecordLikeType = MyMismatchedRecordLikeType;
            _MyMismatchedRecordLikeType = (MismatchedRecordLikeType) CloneOrChange_MismatchedRecordLikeType(_MyMismatchedRecordLikeType, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);if ((!exploreOnlyDeserializedChildren && MyNonLazinatorRecordWithConstructor != null) || (_MyNonLazinatorRecordWithConstructor_Accessed && _MyNonLazinatorRecordWithConstructor != null))
            {
                _MyNonLazinatorRecordWithConstructor = (NonLazinatorRecordWithConstructor) CloneOrChange_NonLazinatorRecordWithConstructor(_MyNonLazinatorRecordWithConstructor, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && MyNonLazinatorRecordWithoutConstructor != null) || (_MyNonLazinatorRecordWithoutConstructor_Accessed && _MyNonLazinatorRecordWithoutConstructor != null))
            {
                _MyNonLazinatorRecordWithoutConstructor = (NonLazinatorRecordWithoutConstructor) CloneOrChange_NonLazinatorRecordWithoutConstructor(_MyNonLazinatorRecordWithoutConstructor, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && MyNonLazinatorSubrecordWithConstructor != null) || (_MyNonLazinatorSubrecordWithConstructor_Accessed && _MyNonLazinatorSubrecordWithConstructor != null))
            {
                _MyNonLazinatorSubrecordWithConstructor = (NonLazinatorSubrecordWithConstructor) CloneOrChange_NonLazinatorSubrecordWithConstructor(_MyNonLazinatorSubrecordWithConstructor, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && MyNonLazinatorSubrecordWithoutConstructor != null) || (_MyNonLazinatorSubrecordWithoutConstructor_Accessed && _MyNonLazinatorSubrecordWithoutConstructor != null))
            {
                _MyNonLazinatorSubrecordWithoutConstructor = (NonLazinatorSubrecordWithoutConstructor) CloneOrChange_NonLazinatorSubrecordWithoutConstructor(_MyNonLazinatorSubrecordWithoutConstructor, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            if ((!exploreOnlyDeserializedChildren && MyRecordLikeClass != null) || (_MyRecordLikeClass_Accessed && _MyRecordLikeClass != null))
            {
                _MyRecordLikeClass = (RecordLikeClass) CloneOrChange_RecordLikeClass(_MyRecordLikeClass, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            var deserialized_MyRecordLikeStruct = MyRecordLikeStruct;
            _MyRecordLikeStruct = (RecordLikeStruct) CloneOrChange_RecordLikeStruct(_MyRecordLikeStruct, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);var deserialized_MyRecordLikeTypeWithLazinator = MyRecordLikeTypeWithLazinator;
            _MyRecordLikeTypeWithLazinator = (RecordLikeTypeWithLazinator) CloneOrChange_RecordLikeTypeWithLazinator(_MyRecordLikeTypeWithLazinator, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        
        public virtual void FreeInMemoryObjects()
        {
            _ExternalRecordLikeStruct = default;
            _MyMismatchedRecordLikeType = default;
            _MyNonLazinatorRecordWithConstructor = default;
            _MyNonLazinatorRecordWithoutConstructor = default;
            _MyNonLazinatorSubrecordWithConstructor = default;
            _MyNonLazinatorSubrecordWithoutConstructor = default;
            _MyRecordLikeClass = default;
            _MyRecordLikeStruct = default;
            _MyRecordLikeTypeWithLazinator = default;
            _ExternalRecordLikeStruct_Accessed = _MyMismatchedRecordLikeType_Accessed = _MyNonLazinatorRecordWithConstructor_Accessed = _MyNonLazinatorRecordWithoutConstructor_Accessed = _MyNonLazinatorSubrecordWithConstructor_Accessed = _MyNonLazinatorSubrecordWithoutConstructor_Accessed = _MyRecordLikeClass_Accessed = _MyRecordLikeStruct_Accessed = _MyRecordLikeTypeWithLazinator_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1026;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            _MyInt = span.ToDecompressedInt(ref bytesSoFar);
            _ExternalRecordLikeStruct_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _MyMismatchedRecordLikeType_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _MyNonLazinatorRecordWithConstructor_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _MyNonLazinatorRecordWithoutConstructor_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _MyNonLazinatorSubrecordWithConstructor_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _MyNonLazinatorSubrecordWithoutConstructor_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _MyRecordLikeClass_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _MyRecordLikeStruct_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _MyRecordLikeTypeWithLazinator_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            _RecordLikeContainer_EndByteIndex = bytesSoFar;
        }
        
        public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
        {
            if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
            {
                updateStoredBuffer = false;
            }
            int startPosition = writer.Position;
            WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
            if (updateStoredBuffer)
            {
                UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
            }
        }
        
        public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
        {
            _IsDirty = false;
            if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                _DescendantIsDirty = false;
                if (updateDeserializedChildren)
                {
                    UpdateDeserializedChildren(ref writer, startPosition);
                }
                
            }
            else
            {
                ThrowHelper.ThrowCannotUpdateStoredBuffer();
            }
            
            var newBuffer = writer.Slice(startPosition, length);
            LazinatorMemoryStorage = newBuffer;
        }
        
        protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
        {
            _ExternalRecordLikeStruct = (Point) CloneOrChange_Point(_ExternalRecordLikeStruct, l => l.RemoveBufferInHierarchy(), true);_MyMismatchedRecordLikeType = (MismatchedRecordLikeType) CloneOrChange_MismatchedRecordLikeType(_MyMismatchedRecordLikeType, l => l.RemoveBufferInHierarchy(), true);if (_MyNonLazinatorRecordWithConstructor_Accessed && _MyNonLazinatorRecordWithConstructor != null)
            {
                _MyNonLazinatorRecordWithConstructor = (NonLazinatorRecordWithConstructor) CloneOrChange_NonLazinatorRecordWithConstructor(_MyNonLazinatorRecordWithConstructor, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_MyNonLazinatorRecordWithoutConstructor_Accessed && _MyNonLazinatorRecordWithoutConstructor != null)
            {
                _MyNonLazinatorRecordWithoutConstructor = (NonLazinatorRecordWithoutConstructor) CloneOrChange_NonLazinatorRecordWithoutConstructor(_MyNonLazinatorRecordWithoutConstructor, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_MyNonLazinatorSubrecordWithConstructor_Accessed && _MyNonLazinatorSubrecordWithConstructor != null)
            {
                _MyNonLazinatorSubrecordWithConstructor = (NonLazinatorSubrecordWithConstructor) CloneOrChange_NonLazinatorSubrecordWithConstructor(_MyNonLazinatorSubrecordWithConstructor, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_MyNonLazinatorSubrecordWithoutConstructor_Accessed && _MyNonLazinatorSubrecordWithoutConstructor != null)
            {
                _MyNonLazinatorSubrecordWithoutConstructor = (NonLazinatorSubrecordWithoutConstructor) CloneOrChange_NonLazinatorSubrecordWithoutConstructor(_MyNonLazinatorSubrecordWithoutConstructor, l => l.RemoveBufferInHierarchy(), true);
            }
            if (_MyRecordLikeClass_Accessed && _MyRecordLikeClass != null)
            {
                _MyRecordLikeClass = (RecordLikeClass) CloneOrChange_RecordLikeClass(_MyRecordLikeClass, l => l.RemoveBufferInHierarchy(), true);
            }
            _MyRecordLikeStruct = (RecordLikeStruct) CloneOrChange_RecordLikeStruct(_MyRecordLikeStruct, l => l.RemoveBufferInHierarchy(), true);_MyRecordLikeTypeWithLazinator = (RecordLikeTypeWithLazinator) CloneOrChange_RecordLikeTypeWithLazinator(_MyRecordLikeTypeWithLazinator, l => l.RemoveBufferInHierarchy(), true);}
            
            
            protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
            {
                int startPosition = writer.Position;
                int startOfObjectPosition = 0;
                // header information
                if (includeUniqueID)
                {
                    if (!ContainsOpenGenericParameters)
                    {
                        CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                    }
                    else
                    {
                        WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                    }
                }
                CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                writer.Write((byte)includeChildrenMode);
                // write properties
                CompressedIntegralTypes.WriteCompressedInt(ref writer, _MyInt);
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_ExternalRecordLikeStruct_Accessed)
                {
                    var deserialized = ExternalRecordLikeStruct;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _ExternalRecordLikeStruct, isBelievedDirty: _ExternalRecordLikeStruct_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _ExternalRecordLikeStruct_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _ExternalRecordLikeStruct_ByteIndex, _ExternalRecordLikeStruct_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_Point(ref w, _ExternalRecordLikeStruct,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _ExternalRecordLikeStruct_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyMismatchedRecordLikeType_Accessed)
                {
                    var deserialized = MyMismatchedRecordLikeType;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _MyMismatchedRecordLikeType, isBelievedDirty: _MyMismatchedRecordLikeType_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _MyMismatchedRecordLikeType_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyMismatchedRecordLikeType_ByteIndex, _MyMismatchedRecordLikeType_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_MismatchedRecordLikeType(ref w, _MyMismatchedRecordLikeType,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _MyMismatchedRecordLikeType_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyNonLazinatorRecordWithConstructor_Accessed)
                {
                    var deserialized = MyNonLazinatorRecordWithConstructor;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _MyNonLazinatorRecordWithConstructor, isBelievedDirty: _MyNonLazinatorRecordWithConstructor_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _MyNonLazinatorRecordWithConstructor_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyNonLazinatorRecordWithConstructor_ByteIndex, _MyNonLazinatorRecordWithConstructor_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_NonLazinatorRecordWithConstructor(ref w, _MyNonLazinatorRecordWithConstructor,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _MyNonLazinatorRecordWithConstructor_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyNonLazinatorRecordWithoutConstructor_Accessed)
                {
                    var deserialized = MyNonLazinatorRecordWithoutConstructor;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _MyNonLazinatorRecordWithoutConstructor, isBelievedDirty: _MyNonLazinatorRecordWithoutConstructor_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _MyNonLazinatorRecordWithoutConstructor_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyNonLazinatorRecordWithoutConstructor_ByteIndex, _MyNonLazinatorRecordWithoutConstructor_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_NonLazinatorRecordWithoutConstructor(ref w, _MyNonLazinatorRecordWithoutConstructor,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _MyNonLazinatorRecordWithoutConstructor_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyNonLazinatorSubrecordWithConstructor_Accessed)
                {
                    var deserialized = MyNonLazinatorSubrecordWithConstructor;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _MyNonLazinatorSubrecordWithConstructor, isBelievedDirty: _MyNonLazinatorSubrecordWithConstructor_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _MyNonLazinatorSubrecordWithConstructor_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyNonLazinatorSubrecordWithConstructor_ByteIndex, _MyNonLazinatorSubrecordWithConstructor_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_NonLazinatorSubrecordWithConstructor(ref w, _MyNonLazinatorSubrecordWithConstructor,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _MyNonLazinatorSubrecordWithConstructor_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyNonLazinatorSubrecordWithoutConstructor_Accessed)
                {
                    var deserialized = MyNonLazinatorSubrecordWithoutConstructor;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _MyNonLazinatorSubrecordWithoutConstructor, isBelievedDirty: _MyNonLazinatorSubrecordWithoutConstructor_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _MyNonLazinatorSubrecordWithoutConstructor_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyNonLazinatorSubrecordWithoutConstructor_ByteIndex, _MyNonLazinatorSubrecordWithoutConstructor_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_NonLazinatorSubrecordWithoutConstructor(ref w, _MyNonLazinatorSubrecordWithoutConstructor,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _MyNonLazinatorSubrecordWithoutConstructor_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyRecordLikeClass_Accessed)
                {
                    var deserialized = MyRecordLikeClass;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _MyRecordLikeClass, isBelievedDirty: _MyRecordLikeClass_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _MyRecordLikeClass_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyRecordLikeClass_ByteIndex, _MyRecordLikeClass_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_RecordLikeClass(ref w, _MyRecordLikeClass,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _MyRecordLikeClass_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyRecordLikeStruct_Accessed)
                {
                    var deserialized = MyRecordLikeStruct;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _MyRecordLikeStruct, isBelievedDirty: _MyRecordLikeStruct_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _MyRecordLikeStruct_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyRecordLikeStruct_ByteIndex, _MyRecordLikeStruct_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_RecordLikeStruct(ref w, _MyRecordLikeStruct,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _MyRecordLikeStruct_ByteIndex = startOfObjectPosition - startPosition;
                }
                startOfObjectPosition = writer.Position;
                if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyRecordLikeTypeWithLazinator_Accessed)
                {
                    var deserialized = MyRecordLikeTypeWithLazinator;
                }
                WriteNonLazinatorObject(
                nonLazinatorObject: _MyRecordLikeTypeWithLazinator, isBelievedDirty: _MyRecordLikeTypeWithLazinator_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                isAccessed: _MyRecordLikeTypeWithLazinator_Accessed, writer: ref writer,
                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyRecordLikeTypeWithLazinator_ByteIndex, _MyRecordLikeTypeWithLazinator_ByteLength, false, false, null),
                verifyCleanness: false,
                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                ConvertToBytes_RecordLikeTypeWithLazinator(ref w, _MyRecordLikeTypeWithLazinator,
                includeChildrenMode, v, updateStoredBuffer));
                if (updateStoredBuffer)
                {
                    _MyRecordLikeTypeWithLazinator_ByteIndex = startOfObjectPosition - startPosition; _MyRecordLikeTypeWithLazinator = (RecordLikeTypeWithLazinator) CloneOrChange_RecordLikeTypeWithLazinator(_MyRecordLikeTypeWithLazinator, l => l.RemoveBufferInHierarchy(), true);
                }
                if (updateStoredBuffer)
                {
                    _RecordLikeContainer_EndByteIndex = writer.Position - startPosition;
                }
            }
            
            /* Conversion of supported collections and tuples */
            
            private static Point ConvertFromBytes_Point(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default;
                }
                ReadOnlySpan<byte> span = storage.InitialReadOnlySpan;
                
                int bytesSoFar = 0;
                
                int item1 = span.ToDecompressedInt(ref bytesSoFar);
                
                int item2 = span.ToDecompressedInt(ref bytesSoFar);
                
                var itemToCreate = new Point(item1, item2);
                
                return itemToCreate;
            }
            
            private static void ConvertToBytes_Point(ref BinaryBufferWriter writer, Point itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.X);
                
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Y);
            }
            
            private static Point CloneOrChange_Point(Point itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                return new Point((int) (itemToConvert.X), (int) (itemToConvert.Y));
            }
            
            private static MismatchedRecordLikeType ConvertFromBytes_MismatchedRecordLikeType(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default;
                }
                ReadOnlySpan<byte> span = storage.InitialReadOnlySpan;
                
                int bytesSoFar = 0;
                
                int item1 = span.ToDecompressedInt(ref bytesSoFar);
                
                string item2 = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
                
                var itemToCreate = new MismatchedRecordLikeType(item1, item2);
                
                return itemToCreate;
            }
            
            private static void ConvertToBytes_MismatchedRecordLikeType(ref BinaryBufferWriter writer, MismatchedRecordLikeType itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
                
                EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, itemToConvert.Name);
            }
            
            private static MismatchedRecordLikeType CloneOrChange_MismatchedRecordLikeType(MismatchedRecordLikeType itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                return new MismatchedRecordLikeType((int) (itemToConvert.Age), (string) (itemToConvert.Name));
            }
            
            private static NonLazinatorRecordWithConstructor ConvertFromBytes_NonLazinatorRecordWithConstructor(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default;
                }
                ReadOnlySpan<byte> span = storage.InitialReadOnlySpan;
                
                int bytesSoFar = 0;
                
                int item1 = span.ToDecompressedInt(ref bytesSoFar);
                
                Example item2 = default(Example);
                int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember_item2 != 0)
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                    item2 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                }
                bytesSoFar += lengthCollectionMember_item2;
                
                double item3 = span.ToDouble(ref bytesSoFar);
                
                int? item4 = span.ToDecompressedNullableInt(ref bytesSoFar);
                
                var itemToCreate = new NonLazinatorRecordWithConstructor(item1, item2, item3, item4);
                
                return itemToCreate;
            }
            
            private static void ConvertToBytes_NonLazinatorRecordWithConstructor(ref BinaryBufferWriter writer, NonLazinatorRecordWithConstructor itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == null)
                {
                    return;
                }
                
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
                
                if (itemToConvert.Example == null)
                {
                    writer.Write((uint)0);
                }
                else
                {
                    void actionExample(ref BinaryBufferWriter w) => itemToConvert.Example.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, actionExample);
                };
                
                WriteUncompressedPrimitives.WriteDouble(ref writer, itemToConvert.DoubleValue);
                
                CompressedIntegralTypes.WriteCompressedNullableInt(ref writer, itemToConvert.NullableInt);
            }
            
            private static NonLazinatorRecordWithConstructor CloneOrChange_NonLazinatorRecordWithConstructor(NonLazinatorRecordWithConstructor itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                if (itemToConvert == null)
                {
                    return default(NonLazinatorRecordWithConstructor);
                }
                
                return new NonLazinatorRecordWithConstructor((int) (itemToConvert?.Age ?? default), (Example) (cloneOrChangeFunc((itemToConvert?.Example))), (double) (itemToConvert?.DoubleValue ?? default), (int?) (itemToConvert?.NullableInt));
            }
            
            private static NonLazinatorRecordWithoutConstructor ConvertFromBytes_NonLazinatorRecordWithoutConstructor(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default;
                }
                ReadOnlySpan<byte> span = storage.InitialReadOnlySpan;
                
                int bytesSoFar = 0;
                
                int item1 = span.ToDecompressedInt(ref bytesSoFar);
                
                double item2 = span.ToDouble(ref bytesSoFar);
                
                Example item3 = default(Example);
                int lengthCollectionMember_item3 = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember_item3 != 0)
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item3);
                    item3 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                }
                bytesSoFar += lengthCollectionMember_item3;
                
                int? item4 = span.ToDecompressedNullableInt(ref bytesSoFar);
                
                var itemToCreate = new NonLazinatorRecordWithoutConstructor()
                {
                    Age = item1,
                    DoubleValue = item2,
                    Example = item3,
                    NullableInt = item4
                };
                
                return itemToCreate;
            }
            
            private static void ConvertToBytes_NonLazinatorRecordWithoutConstructor(ref BinaryBufferWriter writer, NonLazinatorRecordWithoutConstructor itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == null)
                {
                    return;
                }
                
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
                
                WriteUncompressedPrimitives.WriteDouble(ref writer, itemToConvert.DoubleValue);
                
                if (itemToConvert.Example == null)
                {
                    writer.Write((uint)0);
                }
                else
                {
                    void actionExample(ref BinaryBufferWriter w) => itemToConvert.Example.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, actionExample);
                };
                
                CompressedIntegralTypes.WriteCompressedNullableInt(ref writer, itemToConvert.NullableInt);
            }
            
            private static NonLazinatorRecordWithoutConstructor CloneOrChange_NonLazinatorRecordWithoutConstructor(NonLazinatorRecordWithoutConstructor itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                if (itemToConvert == null)
                {
                    return default(NonLazinatorRecordWithoutConstructor);
                }
                
                return new NonLazinatorRecordWithoutConstructor()
                {
                    Age = (int) (itemToConvert?.Age ?? default),
                    DoubleValue = (double) (itemToConvert?.DoubleValue ?? default),
                    Example = (Example) (cloneOrChangeFunc((itemToConvert?.Example))),
                    NullableInt = (int?) (itemToConvert?.NullableInt)
                };
            }
            
            private static NonLazinatorSubrecordWithConstructor ConvertFromBytes_NonLazinatorSubrecordWithConstructor(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default;
                }
                ReadOnlySpan<byte> span = storage.InitialReadOnlySpan;
                
                int bytesSoFar = 0;
                
                int item1 = span.ToDecompressedInt(ref bytesSoFar);
                
                Example item2 = default(Example);
                int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember_item2 != 0)
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                    item2 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                }
                bytesSoFar += lengthCollectionMember_item2;
                
                double item3 = span.ToDouble(ref bytesSoFar);
                
                int? item4 = span.ToDecompressedNullableInt(ref bytesSoFar);
                
                string item5 = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
                
                var itemToCreate = new NonLazinatorSubrecordWithConstructor(item1, item2, item3, item4, item5);
                
                return itemToCreate;
            }
            
            private static void ConvertToBytes_NonLazinatorSubrecordWithConstructor(ref BinaryBufferWriter writer, NonLazinatorSubrecordWithConstructor itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == null)
                {
                    return;
                }
                
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
                
                if (itemToConvert.Example == null)
                {
                    writer.Write((uint)0);
                }
                else
                {
                    void actionExample(ref BinaryBufferWriter w) => itemToConvert.Example.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, actionExample);
                };
                
                WriteUncompressedPrimitives.WriteDouble(ref writer, itemToConvert.DoubleValue);
                
                CompressedIntegralTypes.WriteCompressedNullableInt(ref writer, itemToConvert.NullableInt);
                
                EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, itemToConvert.MyString);
            }
            
            private static NonLazinatorSubrecordWithConstructor CloneOrChange_NonLazinatorSubrecordWithConstructor(NonLazinatorSubrecordWithConstructor itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                if (itemToConvert == null)
                {
                    return default(NonLazinatorSubrecordWithConstructor);
                }
                
                return new NonLazinatorSubrecordWithConstructor((int) (itemToConvert?.Age ?? default), (Example) (cloneOrChangeFunc((itemToConvert?.Example))), (double) (itemToConvert?.DoubleValue ?? default), (int?) (itemToConvert?.NullableInt), (string) (itemToConvert?.MyString));
            }
            
            private static NonLazinatorSubrecordWithoutConstructor ConvertFromBytes_NonLazinatorSubrecordWithoutConstructor(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default;
                }
                ReadOnlySpan<byte> span = storage.InitialReadOnlySpan;
                
                int bytesSoFar = 0;
                
                string item1 = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
                
                int item2 = span.ToDecompressedInt(ref bytesSoFar);
                
                double item3 = span.ToDouble(ref bytesSoFar);
                
                Example item4 = default(Example);
                int lengthCollectionMember_item4 = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember_item4 != 0)
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item4);
                    item4 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                }
                bytesSoFar += lengthCollectionMember_item4;
                
                int? item5 = span.ToDecompressedNullableInt(ref bytesSoFar);
                
                var itemToCreate = new NonLazinatorSubrecordWithoutConstructor()
                {
                    MyString = item1,
                    Age = item2,
                    DoubleValue = item3,
                    Example = item4,
                    NullableInt = item5
                };
                
                return itemToCreate;
            }
            
            private static void ConvertToBytes_NonLazinatorSubrecordWithoutConstructor(ref BinaryBufferWriter writer, NonLazinatorSubrecordWithoutConstructor itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == null)
                {
                    return;
                }
                
                EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, itemToConvert.MyString);
                
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
                
                WriteUncompressedPrimitives.WriteDouble(ref writer, itemToConvert.DoubleValue);
                
                if (itemToConvert.Example == null)
                {
                    writer.Write((uint)0);
                }
                else
                {
                    void actionExample(ref BinaryBufferWriter w) => itemToConvert.Example.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, actionExample);
                };
                
                CompressedIntegralTypes.WriteCompressedNullableInt(ref writer, itemToConvert.NullableInt);
            }
            
            private static NonLazinatorSubrecordWithoutConstructor CloneOrChange_NonLazinatorSubrecordWithoutConstructor(NonLazinatorSubrecordWithoutConstructor itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                if (itemToConvert == null)
                {
                    return default(NonLazinatorSubrecordWithoutConstructor);
                }
                
                return new NonLazinatorSubrecordWithoutConstructor()
                {
                    MyString = (string) (itemToConvert?.MyString),
                    Age = (int) (itemToConvert?.Age ?? default),
                    DoubleValue = (double) (itemToConvert?.DoubleValue ?? default),
                    Example = (Example) (cloneOrChangeFunc((itemToConvert?.Example))),
                    NullableInt = (int?) (itemToConvert?.NullableInt)
                };
            }
            
            private static RecordLikeClass ConvertFromBytes_RecordLikeClass(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default;
                }
                ReadOnlySpan<byte> span = storage.InitialReadOnlySpan;
                
                int bytesSoFar = 0;
                
                int item1 = span.ToDecompressedInt(ref bytesSoFar);
                
                Example item2 = default(Example);
                int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember_item2 != 0)
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                    item2 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                }
                bytesSoFar += lengthCollectionMember_item2;
                
                var itemToCreate = new RecordLikeClass(item1, item2);
                
                return itemToCreate;
            }
            
            private static void ConvertToBytes_RecordLikeClass(ref BinaryBufferWriter writer, RecordLikeClass itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (itemToConvert == null)
                {
                    return;
                }
                
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
                
                if (itemToConvert.Example == null)
                {
                    writer.Write((uint)0);
                }
                else
                {
                    void actionExample(ref BinaryBufferWriter w) => itemToConvert.Example.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, actionExample);
                };
            }
            
            private static RecordLikeClass CloneOrChange_RecordLikeClass(RecordLikeClass itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                if (itemToConvert == null)
                {
                    return default(RecordLikeClass);
                }
                
                return new RecordLikeClass((int) (itemToConvert?.Age ?? default), (Example) (cloneOrChangeFunc((itemToConvert?.Example))));
            }
            
            private static RecordLikeStruct ConvertFromBytes_RecordLikeStruct(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default;
                }
                ReadOnlySpan<byte> span = storage.InitialReadOnlySpan;
                
                int bytesSoFar = 0;
                
                int item1 = span.ToDecompressedInt(ref bytesSoFar);
                
                string item2 = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
                
                var itemToCreate = new RecordLikeStruct(item1, item2);
                
                return itemToCreate;
            }
            
            private static void ConvertToBytes_RecordLikeStruct(ref BinaryBufferWriter writer, RecordLikeStruct itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
                
                EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, itemToConvert.Name);
            }
            
            private static RecordLikeStruct CloneOrChange_RecordLikeStruct(RecordLikeStruct itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                return new RecordLikeStruct((int) (itemToConvert.Age), (string) (itemToConvert.Name));
            }
            
            private static RecordLikeTypeWithLazinator ConvertFromBytes_RecordLikeTypeWithLazinator(LazinatorMemory storage)
            {
                if (storage.Length == 0)
                {
                    return default;
                }
                ReadOnlySpan<byte> span = storage.InitialReadOnlySpan;
                
                int bytesSoFar = 0;
                
                int item1 = span.ToDecompressedInt(ref bytesSoFar);
                
                string item2 = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
                
                Example item3 = default(Example);
                int lengthCollectionMember_item3 = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember_item3 != 0)
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item3);
                    item3 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                }
                bytesSoFar += lengthCollectionMember_item3;
                
                ExampleStructWithoutClass item4 = default(ExampleStructWithoutClass);
                int lengthCollectionMember_item4 = span.ToInt32(ref bytesSoFar);
                if (lengthCollectionMember_item4 != 0)
                {
                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item4);
                    item4 = new ExampleStructWithoutClass();
                    item4.DeserializeLazinator(childData);;
                }
                bytesSoFar += lengthCollectionMember_item4;
                
                var itemToCreate = new RecordLikeTypeWithLazinator(item1, item2, item3, item4);
                
                return itemToCreate;
            }
            
            private static void ConvertToBytes_RecordLikeTypeWithLazinator(ref BinaryBufferWriter writer, RecordLikeTypeWithLazinator itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                
                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
                
                EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, itemToConvert.Name);
                
                if (itemToConvert.Example == null)
                {
                    writer.Write((uint)0);
                }
                else
                {
                    void actionExample(ref BinaryBufferWriter w) => itemToConvert.Example.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                    WriteToBinaryWithIntLengthPrefix(ref writer, actionExample);
                };
                
                void actionExampleStruct(ref BinaryBufferWriter w) => itemToConvert.ExampleStruct.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                WriteToBinaryWithIntLengthPrefix(ref writer, actionExampleStruct);
            }
            
            private static RecordLikeTypeWithLazinator CloneOrChange_RecordLikeTypeWithLazinator(RecordLikeTypeWithLazinator itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
            {
                return new RecordLikeTypeWithLazinator((int) (itemToConvert.Age), (string) (itemToConvert.Name), (Example) (cloneOrChangeFunc((itemToConvert.Example))), (ExampleStructWithoutClass) (cloneOrChangeFunc((itemToConvert.ExampleStruct))));
            }
            
        }
    }
