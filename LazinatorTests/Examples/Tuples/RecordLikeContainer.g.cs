/*Location7012*//*Location6996*///4112d9a9-b920-4b02-0892-c8d51784860a
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.Tuples
{/*Location6997*/
    using Lazinator.Attributes;/*Location6998*/
    using Lazinator.Buffers;/*Location6999*/
    using Lazinator.Core;/*Location7000*/
    using Lazinator.Exceptions;/*Location7001*/
    using Lazinator.Support;/*Location7002*/
    using LazinatorTests.Examples;/*Location7003*/
    using LazinatorTests.Examples.Structs;/*Location7004*/
    using System;/*Location7005*/
    using System.Buffers;/*Location7006*/
    using System.Collections.Generic;/*Location7007*/
    using System.Diagnostics;/*Location7008*/
    using System.IO;/*Location7009*/
    using System.Linq;/*Location7010*/
    using System.Runtime.InteropServices;/*Location7011*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class RecordLikeContainer : ILazinator
    {
        /*Location7013*/public bool IsStruct => false;
        
        /*Location7014*//* Property definitions */
        
        /*Location7015*/        protected int _MyMismatchedRecordLikeType_ByteIndex;
        /*Location7016*/        protected int _MyRecordLikeClass_ByteIndex;
        /*Location7017*/        protected int _MyRecordLikeType_ByteIndex;
        /*Location7018*/        protected int _MyRecordLikeTypeWithLazinator_ByteIndex;
        /*Location7019*/protected virtual int _MyMismatchedRecordLikeType_ByteLength => _MyRecordLikeClass_ByteIndex - _MyMismatchedRecordLikeType_ByteIndex;
        /*Location7020*/protected virtual int _MyRecordLikeClass_ByteLength => _MyRecordLikeType_ByteIndex - _MyRecordLikeClass_ByteIndex;
        /*Location7021*/protected virtual int _MyRecordLikeType_ByteLength => _MyRecordLikeTypeWithLazinator_ByteIndex - _MyRecordLikeType_ByteIndex;
        /*Location7022*/private int _RecordLikeContainer_EndByteIndex;
        /*Location7023*/protected virtual int _MyRecordLikeTypeWithLazinator_ByteLength => _RecordLikeContainer_EndByteIndex - _MyRecordLikeTypeWithLazinator_ByteIndex;
        
        /*Location7024*/
        protected int _MyInt;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public int MyInt
        {
            get
            {
                return _MyInt;
            }
            set
            {
                IsDirty = true;
                _MyInt = value;
            }
        }
        /*Location7025*/
        protected MismatchedRecordLikeType _MyMismatchedRecordLikeType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public MismatchedRecordLikeType MyMismatchedRecordLikeType
        {
            get
            {
                if (!_MyMismatchedRecordLikeType_Accessed)
                {
                    Lazinate_MyMismatchedRecordLikeType();
                } 
                return _MyMismatchedRecordLikeType;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyMismatchedRecordLikeType = value;
                _MyMismatchedRecordLikeType_Accessed = true;
            }
        }
        protected bool _MyMismatchedRecordLikeType_Accessed;
        private void Lazinate_MyMismatchedRecordLikeType()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyMismatchedRecordLikeType_ByteIndex, _MyMismatchedRecordLikeType_ByteLength, false, false, null);
            _MyMismatchedRecordLikeType = ConvertFromBytes_MismatchedRecordLikeType(childData);
            _MyMismatchedRecordLikeType_Accessed = true;
        }
        
        /*Location7026*/
        protected RecordLikeClass _MyRecordLikeClass;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RecordLikeClass MyRecordLikeClass
        {
            get
            {
                if (!_MyRecordLikeClass_Accessed)
                {
                    Lazinate_MyRecordLikeClass();
                }
                IsDirty = true; 
                return _MyRecordLikeClass;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyRecordLikeClass = value;
                _MyRecordLikeClass_Accessed = true;
            }
        }
        protected bool _MyRecordLikeClass_Accessed;
        private void Lazinate_MyRecordLikeClass()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyRecordLikeClass = default(RecordLikeClass);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyRecordLikeClass_ByteIndex, _MyRecordLikeClass_ByteLength, false, false, null);
                _MyRecordLikeClass = ConvertFromBytes_RecordLikeClass(childData);
            }
            
            _MyRecordLikeClass_Accessed = true;
        }
        
        /*Location7027*/
        protected RecordLikeType _MyRecordLikeType;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RecordLikeType MyRecordLikeType
        {
            get
            {
                if (!_MyRecordLikeType_Accessed)
                {
                    Lazinate_MyRecordLikeType();
                } 
                return _MyRecordLikeType;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyRecordLikeType = value;
                _MyRecordLikeType_Accessed = true;
            }
        }
        protected bool _MyRecordLikeType_Accessed;
        private void Lazinate_MyRecordLikeType()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyRecordLikeType_ByteIndex, _MyRecordLikeType_ByteLength, false, false, null);
            _MyRecordLikeType = ConvertFromBytes_RecordLikeType(childData);
            _MyRecordLikeType_Accessed = true;
        }
        
        /*Location7028*/
        protected RecordLikeTypeWithLazinator _MyRecordLikeTypeWithLazinator;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RecordLikeTypeWithLazinator MyRecordLikeTypeWithLazinator
        {
            get
            {
                if (!_MyRecordLikeTypeWithLazinator_Accessed)
                {
                    Lazinate_MyRecordLikeTypeWithLazinator();
                }
                IsDirty = true; 
                return _MyRecordLikeTypeWithLazinator;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyRecordLikeTypeWithLazinator = value;
                _MyRecordLikeTypeWithLazinator_Accessed = true;
            }
        }
        protected bool _MyRecordLikeTypeWithLazinator_Accessed;
        private void Lazinate_MyRecordLikeTypeWithLazinator()
        {
            LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyRecordLikeTypeWithLazinator_ByteIndex, _MyRecordLikeTypeWithLazinator_ByteLength, false, false, null);
            _MyRecordLikeTypeWithLazinator = ConvertFromBytes_RecordLikeTypeWithLazinator(childData);
            _MyRecordLikeTypeWithLazinator_Accessed = true;
        }
        
        /*Location7034*/
        /* Serialization, deserialization, and object relationships */
        
        public RecordLikeContainer(LazinatorConstructorEnum constructorEnum)
        {
        }
        
        public RecordLikeContainer(LazinatorMemory serializedBytes, ILazinator parent = null)
        {
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            var clone = new RecordLikeContainer(LazinatorConstructorEnum.LazinatorConstructor)
            {
                OriginalIncludeChildrenMode = includeChildrenMode
            };
            clone = CompleteClone(this, clone, includeChildrenMode, cloneBufferOptions);
            return clone;
        }
        
        public virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            RecordLikeContainer typedClone = (RecordLikeContainer) clone;
            /*Location7029*/typedClone.MyInt = MyInt;
            /*Location7030*/typedClone.MyMismatchedRecordLikeType = CloneOrChange_MismatchedRecordLikeType(MyMismatchedRecordLikeType, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location7031*/typedClone.MyRecordLikeClass = CloneOrChange_RecordLikeClass(MyRecordLikeClass, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location7032*/typedClone.MyRecordLikeType = CloneOrChange_RecordLikeType(MyRecordLikeType, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            /*Location7033*/typedClone.MyRecordLikeTypeWithLazinator = CloneOrChange_RecordLikeTypeWithLazinator(MyRecordLikeTypeWithLazinator, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        /*Location7035*/
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location7036*/public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location7037*/yield break;
        }
        /*Location7038*/
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location7039*/yield return ("MyInt", (object)MyInt);
            /*Location7040*/yield return ("MyMismatchedRecordLikeType", (object)MyMismatchedRecordLikeType);
            /*Location7041*/yield return ("MyRecordLikeClass", (object)MyRecordLikeClass);
            /*Location7042*/yield return ("MyRecordLikeType", (object)MyRecordLikeType);
            /*Location7043*/yield return ("MyRecordLikeTypeWithLazinator", (object)MyRecordLikeTypeWithLazinator);
            /*Location7044*/yield break;
        }
        /*Location7045*/
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location7046*/var deserialized_MyMismatchedRecordLikeType = MyMismatchedRecordLikeType;
            _MyMismatchedRecordLikeType = (MismatchedRecordLikeType) CloneOrChange_MismatchedRecordLikeType(_MyMismatchedRecordLikeType, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location7047*/if ((!exploreOnlyDeserializedChildren && MyRecordLikeClass != null) || (_MyRecordLikeClass_Accessed && _MyRecordLikeClass != null))
            {
                _MyRecordLikeClass = (RecordLikeClass) CloneOrChange_RecordLikeClass(_MyRecordLikeClass, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location7048*/var deserialized_MyRecordLikeType = MyRecordLikeType;
            _MyRecordLikeType = (RecordLikeType) CloneOrChange_RecordLikeType(_MyRecordLikeType, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location7049*/var deserialized_MyRecordLikeTypeWithLazinator = MyRecordLikeTypeWithLazinator;
            _MyRecordLikeTypeWithLazinator = (RecordLikeTypeWithLazinator) CloneOrChange_RecordLikeTypeWithLazinator(_MyRecordLikeTypeWithLazinator, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);/*Location7050*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location7051*/
        public virtual void FreeInMemoryObjects()
        {
            _MyRecordLikeClass = default;
            _MyMismatchedRecordLikeType_Accessed = _MyRecordLikeClass_Accessed = _MyRecordLikeType_Accessed = _MyRecordLikeTypeWithLazinator_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location7052*/
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1026;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location7053*/public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location7054*/_MyInt = span.ToDecompressedInt(ref bytesSoFar);
            /*Location7055*/_MyMismatchedRecordLikeType_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location7056*/_MyRecordLikeClass_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location7057*/_MyRecordLikeType_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location7058*/_MyRecordLikeTypeWithLazinator_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location7059*/_RecordLikeContainer_EndByteIndex = bytesSoFar;
            /*Location7060*/        }
            
            /*Location7061*/public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location7062*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location7063*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location7064*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location7065*/}
                    /*Location7066*/}
                    /*Location7067*/
                    public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location7068*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location7069*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location7070*/}
                                /*Location7071*//*Location7072*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location7073*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location7074*/}
                            /*Location7075*/
                            protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                /*Location7076*/_MyMismatchedRecordLikeType = (MismatchedRecordLikeType) CloneOrChange_MismatchedRecordLikeType(_MyMismatchedRecordLikeType, l => l.RemoveBufferInHierarchy(), true);/*Location7077*/if (_MyRecordLikeClass_Accessed && _MyRecordLikeClass != null)
                                {
                                    _MyRecordLikeClass = (RecordLikeClass) CloneOrChange_RecordLikeClass(_MyRecordLikeClass, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location7078*/_MyRecordLikeType = (RecordLikeType) CloneOrChange_RecordLikeType(_MyRecordLikeType, l => l.RemoveBufferInHierarchy(), true);/*Location7079*/_MyRecordLikeTypeWithLazinator = (RecordLikeTypeWithLazinator) CloneOrChange_RecordLikeTypeWithLazinator(_MyRecordLikeTypeWithLazinator, l => l.RemoveBufferInHierarchy(), true);/*Location7080*/}
                                
                                /*Location7081*/
                                protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    int startPosition = writer.Position;
                                    int startOfObjectPosition = 0;
                                    // header information
                                    /*Location7082*/if (includeUniqueID)
                                    {
                                        if (!ContainsOpenGenericParameters)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                        }
                                        else
                                        {
                                            WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                                        }
                                    }
                                    /*Location7083*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                    writer.Write((byte)includeChildrenMode);
                                    /*Location7084*/// write properties
                                    /*Location7085*/CompressedIntegralTypes.WriteCompressedInt(ref writer, _MyInt);
                                    /*Location7086*/startOfObjectPosition = writer.Position;
                                    /*Location7087*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyMismatchedRecordLikeType_Accessed)
                                    {
                                        var deserialized = MyMismatchedRecordLikeType;
                                    }
                                    /*Location7088*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyMismatchedRecordLikeType, isBelievedDirty: _MyMismatchedRecordLikeType_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyMismatchedRecordLikeType_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyMismatchedRecordLikeType_ByteIndex, _MyMismatchedRecordLikeType_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_MismatchedRecordLikeType(ref w, _MyMismatchedRecordLikeType,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location7089*/if (updateStoredBuffer)
                                    {
                                        _MyMismatchedRecordLikeType_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location7090*/startOfObjectPosition = writer.Position;
                                    /*Location7091*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyRecordLikeClass_Accessed)
                                    {
                                        var deserialized = MyRecordLikeClass;
                                    }
                                    /*Location7092*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyRecordLikeClass, isBelievedDirty: _MyRecordLikeClass_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyRecordLikeClass_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyRecordLikeClass_ByteIndex, _MyRecordLikeClass_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_RecordLikeClass(ref w, _MyRecordLikeClass,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location7093*/if (updateStoredBuffer)
                                    {
                                        _MyRecordLikeClass_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location7094*/startOfObjectPosition = writer.Position;
                                    /*Location7095*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyRecordLikeType_Accessed)
                                    {
                                        var deserialized = MyRecordLikeType;
                                    }
                                    /*Location7096*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyRecordLikeType, isBelievedDirty: _MyRecordLikeType_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyRecordLikeType_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyRecordLikeType_ByteIndex, _MyRecordLikeType_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_RecordLikeType(ref w, _MyRecordLikeType,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location7097*/if (updateStoredBuffer)
                                    {
                                        _MyRecordLikeType_ByteIndex = startOfObjectPosition - startPosition;
                                    }
                                    /*Location7098*/startOfObjectPosition = writer.Position;
                                    /*Location7099*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyRecordLikeTypeWithLazinator_Accessed)
                                    {
                                        var deserialized = MyRecordLikeTypeWithLazinator;
                                    }
                                    /*Location7100*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyRecordLikeTypeWithLazinator, isBelievedDirty: _MyRecordLikeTypeWithLazinator_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyRecordLikeTypeWithLazinator_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyRecordLikeTypeWithLazinator_ByteIndex, _MyRecordLikeTypeWithLazinator_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_RecordLikeTypeWithLazinator(ref w, _MyRecordLikeTypeWithLazinator,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location7101*/if (updateStoredBuffer)
                                    {
                                        _MyRecordLikeTypeWithLazinator_ByteIndex = startOfObjectPosition - startPosition; _MyRecordLikeTypeWithLazinator = (RecordLikeTypeWithLazinator) CloneOrChange_RecordLikeTypeWithLazinator(_MyRecordLikeTypeWithLazinator, l => l.RemoveBufferInHierarchy(), true);
                                    }
                                    /*Location7102*/if (updateStoredBuffer)
                                    {
                                        /*Location7103*/_RecordLikeContainer_EndByteIndex = writer.Position - startPosition;
                                        /*Location7104*/}
                                        /*Location7105*/}
                                        /*Location7106*/
                                        /* Conversion of supported collections and tuples */
                                        /*Location7107*/
                                        private static MismatchedRecordLikeType ConvertFromBytes_MismatchedRecordLikeType(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default;
                                            }
                                            ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                            
                                            int bytesSoFar = 0;
                                            /*Location7108*/
                                            int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                            /*Location7109*/
                                            string item2 = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
                                            /*Location7110*/
                                            var tupleType = new MismatchedRecordLikeType(item1, item2);
                                            
                                            return tupleType;
                                        }
                                        
                                        private static void ConvertToBytes_MismatchedRecordLikeType(ref BinaryBufferWriter writer, MismatchedRecordLikeType itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            /*Location7111*/
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
                                            /*Location7112*/
                                            EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, itemToConvert.Name);
                                            /*Location7113*/}
                                            /*Location7114*/
                                            private static MismatchedRecordLikeType CloneOrChange_MismatchedRecordLikeType(MismatchedRecordLikeType itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                            {
                                                return new MismatchedRecordLikeType((int) (itemToConvert.Age),(string) (itemToConvert.Name));
                                            }
                                            /*Location7115*/
                                            private static RecordLikeClass ConvertFromBytes_RecordLikeClass(LazinatorMemory storage)
                                            {
                                                if (storage.Length == 0)
                                                {
                                                    return default;
                                                }
                                                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                
                                                int bytesSoFar = 0;
                                                /*Location7116*/
                                                int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                                /*Location7117*/
                                                Example item2 = default(Example);
                                                int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                                if (lengthCollectionMember_item2 != 0)
                                                {
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                    item2 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                                                }
                                                bytesSoFar += lengthCollectionMember_item2;
                                                /*Location7118*/
                                                var tupleType = new RecordLikeClass(item1, item2);
                                                
                                                return tupleType;
                                            }
                                            
                                            private static void ConvertToBytes_RecordLikeClass(ref BinaryBufferWriter writer, RecordLikeClass itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                            {
                                                /*Location7119*/if (itemToConvert == null)
                                                {
                                                    return;
                                                }
                                                /*Location7120*/
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
                                                /*Location7121*/
                                                if (itemToConvert.Example == null)
                                                {
                                                    writer.Write((uint)0);
                                                }
                                                else
                                                {
                                                    void actionExample(ref BinaryBufferWriter w) => itemToConvert.Example.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, actionExample);
                                                };
                                                /*Location7122*/}
                                                /*Location7123*/
                                                private static RecordLikeClass CloneOrChange_RecordLikeClass(RecordLikeClass itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    if (itemToConvert == null)
                                                    {
                                                        return default(RecordLikeClass);
                                                    }
                                                    
                                                    return new RecordLikeClass((int) (itemToConvert?.Age ?? default),(Example) (cloneOrChangeFunc((itemToConvert?.Example))));
                                                }
                                                /*Location7124*/
                                                private static RecordLikeType ConvertFromBytes_RecordLikeType(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default;
                                                    }
                                                    ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                    
                                                    int bytesSoFar = 0;
                                                    /*Location7125*/
                                                    int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                                    /*Location7126*/
                                                    string item2 = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
                                                    /*Location7127*/
                                                    var tupleType = new RecordLikeType(item1, item2);
                                                    
                                                    return tupleType;
                                                }
                                                
                                                private static void ConvertToBytes_RecordLikeType(ref BinaryBufferWriter writer, RecordLikeType itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    /*Location7128*/
                                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
                                                    /*Location7129*/
                                                    EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, itemToConvert.Name);
                                                    /*Location7130*/}
                                                    /*Location7131*/
                                                    private static RecordLikeType CloneOrChange_RecordLikeType(RecordLikeType itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                    {
                                                        return new RecordLikeType((int) (itemToConvert.Age),(string) (itemToConvert.Name));
                                                    }
                                                    /*Location7132*/
                                                    private static RecordLikeTypeWithLazinator ConvertFromBytes_RecordLikeTypeWithLazinator(LazinatorMemory storage)
                                                    {
                                                        if (storage.Length == 0)
                                                        {
                                                            return default;
                                                        }
                                                        ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                        
                                                        int bytesSoFar = 0;
                                                        /*Location7133*/
                                                        int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                                        /*Location7134*/
                                                        string item2 = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
                                                        /*Location7135*/
                                                        Example item3 = default(Example);
                                                        int lengthCollectionMember_item3 = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember_item3 != 0)
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item3);
                                                            item3 = DeserializationFactory.Instance.CreateBasedOnType<Example>(childData);
                                                        }
                                                        bytesSoFar += lengthCollectionMember_item3;
                                                        /*Location7136*/
                                                        ExampleStructWithoutClass item4 = default(ExampleStructWithoutClass);
                                                        int lengthCollectionMember_item4 = span.ToInt32(ref bytesSoFar);
                                                        if (lengthCollectionMember_item4 != 0)
                                                        {
                                                            LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item4);
                                                            item4 = new ExampleStructWithoutClass();
                                                            item4.DeserializeLazinator(childData);;
                                                        }
                                                        bytesSoFar += lengthCollectionMember_item4;
                                                        /*Location7137*/
                                                        var tupleType = new RecordLikeTypeWithLazinator(item1, item2, item3, item4);
                                                        
                                                        return tupleType;
                                                    }
                                                    
                                                    private static void ConvertToBytes_RecordLikeTypeWithLazinator(ref BinaryBufferWriter writer, RecordLikeTypeWithLazinator itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                    {
                                                        /*Location7138*/
                                                        CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Age);
                                                        /*Location7139*/
                                                        EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, itemToConvert.Name);
                                                        /*Location7140*/
                                                        if (itemToConvert.Example == null)
                                                        {
                                                            writer.Write((uint)0);
                                                        }
                                                        else
                                                        {
                                                            void actionExample(ref BinaryBufferWriter w) => itemToConvert.Example.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                            WriteToBinaryWithIntLengthPrefix(ref writer, actionExample);
                                                        };
                                                        /*Location7141*/
                                                        void actionExampleStruct(ref BinaryBufferWriter w) => itemToConvert.ExampleStruct.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, actionExampleStruct);
                                                        /*Location7142*/}
                                                        /*Location7143*/
                                                        private static RecordLikeTypeWithLazinator CloneOrChange_RecordLikeTypeWithLazinator(RecordLikeTypeWithLazinator itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                        {
                                                            return new RecordLikeTypeWithLazinator((int) (itemToConvert.Age),(string) (itemToConvert.Name),(Example) (cloneOrChangeFunc((itemToConvert.Example))),(ExampleStructWithoutClass) (cloneOrChangeFunc((itemToConvert.ExampleStruct))));
                                                        }
                                                        /*Location7144*/
                                                    }
                                                }
