/*Location7790*//*Location7775*///aa79db05-57a6-62fa-8f6f-0ae8e5586479
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.Tuples
{/*Location7776*/
    using Lazinator.Attributes;/*Location7777*/
    using Lazinator.Buffers;/*Location7778*/
    using Lazinator.Core;/*Location7779*/
    using Lazinator.Exceptions;/*Location7780*/
    using Lazinator.Support;/*Location7781*/
    using LazinatorTests.Examples;/*Location7782*/
    using System;/*Location7783*/
    using System.Buffers;/*Location7784*/
    using System.Collections.Generic;/*Location7785*/
    using System.Diagnostics;/*Location7786*/
    using System.IO;/*Location7787*/
    using System.Linq;/*Location7788*/
    using System.Runtime.InteropServices;/*Location7789*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class NestedTuple : ILazinator
    {
        /*Location7791*/public bool IsStruct => false;
        
        /*Location7792*//* Property definitions */
        
        /*Location7793*/        protected int _MyNestedTuple_ByteIndex;
        /*Location7794*/private int _NestedTuple_EndByteIndex;
        /*Location7795*/protected virtual int _MyNestedTuple_ByteLength => _NestedTuple_EndByteIndex - _MyNestedTuple_ByteIndex;
        
        /*Location7796*/
        protected Tuple<uint?, (ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)), NonLazinatorClass> _MyNestedTuple;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Tuple<uint?, (ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)), NonLazinatorClass> MyNestedTuple
        {
            get
            {
                if (!_MyNestedTuple_Accessed)
                {
                    Lazinate_MyNestedTuple();
                }
                IsDirty = true; 
                return _MyNestedTuple;
            }
            set
            {
                IsDirty = true;
                DescendantIsDirty = true;
                _MyNestedTuple = value;
                _MyNestedTuple_Accessed = true;
            }
        }
        protected bool _MyNestedTuple_Accessed;
        private void Lazinate_MyNestedTuple()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _MyNestedTuple = default(Tuple<uint?, (ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)), NonLazinatorClass>);
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _MyNestedTuple_ByteIndex, _MyNestedTuple_ByteLength, false, false, null);
                _MyNestedTuple = ConvertFromBytes_Tuple_Guint_C63_c_C32_PExampleChild_c_C32_Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p_p_c_C32NonLazinatorClass_g(childData);
            }
            
            _MyNestedTuple_Accessed = true;
        }
        
        /*Location7798*/
        /* Serialization, deserialization, and object relationships */
        
        public NestedTuple(IncludeChildrenMode originalIncludeChildrenMode)
        {
            OriginalIncludeChildrenMode = originalIncludeChildrenMode;
        }
        
        public NestedTuple(LazinatorMemory serializedBytes, ILazinator parent = null)
        {
            LazinatorParents = new LazinatorParentsCollection(parent);
            DeserializeLazinator(serializedBytes);
            HasChanged = false;
            DescendantHasChanged = false;
        }
        
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            NestedTuple clone;
            if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
            {
                clone = new NestedTuple(includeChildrenMode);
                clone.LazinatorObjectVersion = LazinatorObjectVersion;
                clone = (NestedTuple)AssignCloneProperties(clone, includeChildrenMode);
            }
            else
            {
                LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, false, this);
                clone = new NestedTuple(bytes);
            }
            return clone;
        }
        
        public virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
        {
            clone.FreeInMemoryObjects();
            NestedTuple typedClone = (NestedTuple) clone;
            /*Location7797*/typedClone.MyNestedTuple = CloneOrChange_Tuple_Guint_C63_c_C32_PExampleChild_c_C32_Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p_p_c_C32NonLazinatorClass_g(MyNestedTuple, l => l?.CloneLazinator(includeChildrenMode, CloneBufferOptions.NoBuffer), false);
            
            return typedClone;
        }
        
        public virtual bool HasChanged { get; set; }
        
        protected bool _IsDirty;
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        protected bool _DescendantHasChanged;
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        protected bool _DescendantIsDirty;
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        /*Location7799*/
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location7800*/public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            /*Location7801*/yield break;
        }
        /*Location7802*/
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location7803*/yield return ("MyNestedTuple", (object)MyNestedTuple);
            /*Location7804*/yield break;
        }
        /*Location7805*/
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location7806*/if ((!exploreOnlyDeserializedChildren && MyNestedTuple != null) || (_MyNestedTuple_Accessed && _MyNestedTuple != null))
            {
                _MyNestedTuple = (Tuple<uint?, (ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)), NonLazinatorClass>) CloneOrChange_Tuple_Guint_C63_c_C32_PExampleChild_c_C32_Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p_p_c_C32NonLazinatorClass_g(_MyNestedTuple, l => l?.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true), true);
            }
            /*Location7807*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location7808*/
        public virtual void FreeInMemoryObjects()
        {
            _MyNestedTuple = default;
            _MyNestedTuple_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
        }
        /*Location7809*/
        /* Conversion */
        
        public virtual int LazinatorUniqueID => 1024;
        
        protected virtual bool ContainsOpenGenericParameters => false;
        public virtual LazinatorGenericIDType LazinatorGenericID => default;
        
        
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location7810*/public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location7811*/_MyNestedTuple_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location7812*/_NestedTuple_EndByteIndex = bytesSoFar;
            /*Location7813*/        }
            
            /*Location7814*/public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location7815*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location7816*/int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location7817*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location7818*/}
                    /*Location7819*/}
                    /*Location7820*/
                    public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location7821*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location7822*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location7823*/}
                                /*Location7824*//*Location7825*/
                            }
                            else
                            {
                                ThrowHelper.ThrowCannotUpdateStoredBuffer();
                            }
                            /*Location7826*/
                            var newBuffer = writer.Slice(startPosition, length);
                            LazinatorMemoryStorage = newBuffer;
                            /*Location7827*/}
                            /*Location7828*/
                            protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                            {
                                /*Location7829*/if (_MyNestedTuple_Accessed && _MyNestedTuple != null)
                                {
                                    _MyNestedTuple = (Tuple<uint?, (ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)), NonLazinatorClass>) CloneOrChange_Tuple_Guint_C63_c_C32_PExampleChild_c_C32_Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p_p_c_C32NonLazinatorClass_g(_MyNestedTuple, l => l.RemoveBufferInHierarchy(), true);
                                }
                                /*Location7830*/}
                                
                                /*Location7831*/
                                protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                {
                                    int startPosition = writer.Position;
                                    int startOfObjectPosition = 0;
                                    // header information
                                    /*Location7832*/if (includeUniqueID)
                                    {
                                        if (!ContainsOpenGenericParameters)
                                        {
                                            CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                        }
                                        else
                                        {
                                            WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                                        }
                                    }
                                    /*Location7833*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                    CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                    writer.Write((byte)includeChildrenMode);
                                    /*Location7834*/// write properties
                                    /*Location7835*/startOfObjectPosition = writer.Position;
                                    /*Location7836*/if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_MyNestedTuple_Accessed)
                                    {
                                        var deserialized = MyNestedTuple;
                                    }
                                    /*Location7837*/WriteNonLazinatorObject(
                                    nonLazinatorObject: _MyNestedTuple, isBelievedDirty: _MyNestedTuple_Accessed || (includeChildrenMode != OriginalIncludeChildrenMode),
                                    isAccessed: _MyNestedTuple_Accessed, writer: ref writer,
                                    getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MyNestedTuple_ByteIndex, _MyNestedTuple_ByteLength, false, false, null),
                                    verifyCleanness: false,
                                    binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                    ConvertToBytes_Tuple_Guint_C63_c_C32_PExampleChild_c_C32_Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p_p_c_C32NonLazinatorClass_g(ref w, _MyNestedTuple,
                                    includeChildrenMode, v, updateStoredBuffer));
                                    /*Location7838*/if (updateStoredBuffer)
                                    {
                                        _MyNestedTuple_ByteIndex = startOfObjectPosition - startPosition;if (_MyNestedTuple_Accessed && _MyNestedTuple != null)
                                        {
                                            _MyNestedTuple = (Tuple<uint?, (ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)), NonLazinatorClass>) CloneOrChange_Tuple_Guint_C63_c_C32_PExampleChild_c_C32_Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p_p_c_C32NonLazinatorClass_g(_MyNestedTuple, l => l.RemoveBufferInHierarchy(), true);
                                        }
                                        
                                    }
                                    /*Location7839*/if (updateStoredBuffer)
                                    {
                                        /*Location7840*/_NestedTuple_EndByteIndex = writer.Position - startPosition;
                                        /*Location7841*/}
                                        /*Location7842*/}
                                        /*Location7843*/
                                        /* Conversion of supported collections and tuples */
                                        /*Location7844*/
                                        private static Tuple<uint?, (ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)), NonLazinatorClass> ConvertFromBytes_Tuple_Guint_C63_c_C32_PExampleChild_c_C32_Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p_p_c_C32NonLazinatorClass_g(LazinatorMemory storage)
                                        {
                                            if (storage.Length == 0)
                                            {
                                                return default;
                                            }
                                            ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                            
                                            int bytesSoFar = 0;
                                            /*Location7845*/
                                            uint? item1 = span.ToDecompressedNullableUint(ref bytesSoFar);
                                            /*Location7846*/
                                            (ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)) item2 = default((ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)));
                                            int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                            if (lengthCollectionMember_item2 != 0)
                                            {
                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                item2 = ConvertFromBytes__PExampleChild_c_C32_Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p_p(childData);
                                            }
                                            bytesSoFar += lengthCollectionMember_item2;
                                            /*Location7847*/
                                            NonLazinatorClass item3 = default(NonLazinatorClass);
                                            int lengthCollectionMember_item3 = span.ToInt32(ref bytesSoFar);
                                            if (lengthCollectionMember_item3 != 0)
                                            {
                                                LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item3);
                                                item3 = NonLazinatorDirectConverter.ConvertFromBytes_NonLazinatorClass(childData);
                                            }
                                            bytesSoFar += lengthCollectionMember_item3;
                                            /*Location7848*/
                                            var tupleType = new Tuple<uint?, (ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)), NonLazinatorClass>(item1, item2, item3);
                                            
                                            return tupleType;
                                        }
                                        
                                        private static void ConvertToBytes_Tuple_Guint_C63_c_C32_PExampleChild_c_C32_Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p_p_c_C32NonLazinatorClass_g(ref BinaryBufferWriter writer, Tuple<uint?, (ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)), NonLazinatorClass> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                        {
                                            /*Location7849*/if (itemToConvert == null)
                                            {
                                                return;
                                            }
                                            /*Location7850*/
                                            CompressedIntegralTypes.WriteCompressedNullableUint(ref writer, itemToConvert.Item1);
                                            /*Location7851*/
                                            void actionItem2(ref BinaryBufferWriter w) => ConvertToBytes__PExampleChild_c_C32_Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p_p(ref w, itemToConvert.Item2, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                            WriteToBinaryWithIntLengthPrefix(ref writer, actionItem2);
                                            /*Location7852*/
                                            if (itemToConvert.Item3 == null)
                                            {
                                                writer.Write((uint)0);
                                            }
                                            else
                                            {
                                                void actionItem3(ref BinaryBufferWriter w) => NonLazinatorDirectConverter.ConvertToBytes_NonLazinatorClass(ref w, itemToConvert.Item3, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                WriteToBinaryWithIntLengthPrefix(ref writer, actionItem3);
                                            }
                                            /*Location7853*/}
                                            /*Location7854*/
                                            private static Tuple<uint?, (ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)), NonLazinatorClass> CloneOrChange_Tuple_Guint_C63_c_C32_PExampleChild_c_C32_Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p_p_c_C32NonLazinatorClass_g(Tuple<uint?, (ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)), NonLazinatorClass> itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                            {
                                                if (itemToConvert == null)
                                                {
                                                    return default(Tuple<uint?, (ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)), NonLazinatorClass>);
                                                }
                                                
                                                return new Tuple<uint?, (ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)), NonLazinatorClass>((uint?) (itemToConvert?.Item1),((ExampleChild, (uint, (int a, string b)?, Tuple<short, long>))) CloneOrChange__PExampleChild_c_C32_Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p_p((itemToConvert?.Item2 ?? default), cloneOrChangeFunc, avoidCloningIfPossible),(NonLazinatorClass) (itemToConvert?.Item3));
                                            }
                                            /*Location7855*/
                                            private static (ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)) ConvertFromBytes__PExampleChild_c_C32_Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p_p(LazinatorMemory storage)
                                            {
                                                if (storage.Length == 0)
                                                {
                                                    return default;
                                                }
                                                ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                
                                                int bytesSoFar = 0;
                                                /*Location7856*/
                                                ExampleChild item1 = default(ExampleChild);
                                                int lengthCollectionMember_item1 = span.ToInt32(ref bytesSoFar);
                                                if (lengthCollectionMember_item1 != 0)
                                                {
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item1);
                                                    item1 = DeserializationFactory.Instance.CreateBasedOnType<ExampleChild>(childData);
                                                }
                                                bytesSoFar += lengthCollectionMember_item1;
                                                /*Location7857*/
                                                (uint, (int a, string b)?, Tuple<short, long>) item2 = default((uint, (int a, string b)?, Tuple<short, long>));
                                                int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                                if (lengthCollectionMember_item2 != 0)
                                                {
                                                    LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                    item2 = ConvertFromBytes__Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p(childData);
                                                }
                                                bytesSoFar += lengthCollectionMember_item2;
                                                /*Location7858*/
                                                var tupleType = (item1, item2);
                                                
                                                return tupleType;
                                            }
                                            
                                            private static void ConvertToBytes__PExampleChild_c_C32_Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p_p(ref BinaryBufferWriter writer, (ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)) itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                            {
                                                /*Location7859*/
                                                if (itemToConvert.Item1 == null)
                                                {
                                                    writer.Write((uint)0);
                                                }
                                                else
                                                {
                                                    void actionItem1(ref BinaryBufferWriter w) => itemToConvert.Item1.SerializeExistingBuffer(ref w, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                    WriteToBinaryWithIntLengthPrefix(ref writer, actionItem1);
                                                };
                                                /*Location7860*/
                                                void actionItem2(ref BinaryBufferWriter w) => ConvertToBytes__Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p(ref w, itemToConvert.Item2, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                WriteToBinaryWithIntLengthPrefix(ref writer, actionItem2);
                                                /*Location7861*/}
                                                /*Location7862*/
                                                private static (ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)) CloneOrChange__PExampleChild_c_C32_Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p_p((ExampleChild, (uint, (int a, string b)?, Tuple<short, long>)) itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                {
                                                    return ((ExampleChild) (cloneOrChangeFunc((itemToConvert.Item1))),((uint, (int a, string b)?, Tuple<short, long>)) CloneOrChange__Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p((itemToConvert.Item2), cloneOrChangeFunc, avoidCloningIfPossible));
                                                }
                                                /*Location7863*/
                                                private static (uint, (int a, string b)?, Tuple<short, long>) ConvertFromBytes__Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p(LazinatorMemory storage)
                                                {
                                                    if (storage.Length == 0)
                                                    {
                                                        return default;
                                                    }
                                                    ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                    
                                                    int bytesSoFar = 0;
                                                    /*Location7864*/
                                                    uint item1 = span.ToDecompressedUint(ref bytesSoFar);
                                                    /*Location7865*/
                                                    (int a, string b)? item2 = default((int a, string b)?);
                                                    int lengthCollectionMember_item2 = span.ToInt32(ref bytesSoFar);
                                                    if (lengthCollectionMember_item2 != 0)
                                                    {
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item2);
                                                        item2 = ConvertFromBytes__Pint_C32a_c_C32string_C32b_p_C63(childData);
                                                    }
                                                    bytesSoFar += lengthCollectionMember_item2;
                                                    /*Location7866*/
                                                    Tuple<short, long> item3 = default(Tuple<short, long>);
                                                    int lengthCollectionMember_item3 = span.ToInt32(ref bytesSoFar);
                                                    if (lengthCollectionMember_item3 != 0)
                                                    {
                                                        LazinatorMemory childData = storage.Slice(bytesSoFar, lengthCollectionMember_item3);
                                                        item3 = ConvertFromBytes_Tuple_Gshort_c_C32long_g(childData);
                                                    }
                                                    bytesSoFar += lengthCollectionMember_item3;
                                                    /*Location7867*/
                                                    var tupleType = (item1, item2, item3);
                                                    
                                                    return tupleType;
                                                }
                                                
                                                private static void ConvertToBytes__Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p(ref BinaryBufferWriter writer, (uint, (int a, string b)?, Tuple<short, long>) itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                {
                                                    /*Location7868*/
                                                    CompressedIntegralTypes.WriteCompressedUint(ref writer, itemToConvert.Item1);
                                                    /*Location7869*/
                                                    if (itemToConvert.Item2 == null)
                                                    {
                                                        writer.Write((uint)0);
                                                    }
                                                    else
                                                    {
                                                        void actionItem2(ref BinaryBufferWriter w) => ConvertToBytes__Pint_C32a_c_C32string_C32b_p_C63(ref w, itemToConvert.Item2, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, actionItem2);
                                                    }
                                                    /*Location7870*/
                                                    if (itemToConvert.Item3 == null)
                                                    {
                                                        writer.Write((uint)0);
                                                    }
                                                    else
                                                    {
                                                        void actionItem3(ref BinaryBufferWriter w) => ConvertToBytes_Tuple_Gshort_c_C32long_g(ref w, itemToConvert.Item3, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                                                        WriteToBinaryWithIntLengthPrefix(ref writer, actionItem3);
                                                    }
                                                    /*Location7871*/}
                                                    /*Location7872*/
                                                    private static (uint, (int a, string b)?, Tuple<short, long>) CloneOrChange__Puint_c_C32_Pint_C32a_c_C32string_C32b_p_C63_c_C32Tuple_Gshort_c_C32long_g_p((uint, (int a, string b)?, Tuple<short, long>) itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                    {
                                                        return ((uint) (itemToConvert.Item1),((int a, string b)?) CloneOrChange__Pint_C32a_c_C32string_C32b_p_C63((itemToConvert.Item2), cloneOrChangeFunc, avoidCloningIfPossible),(Tuple<short, long>) CloneOrChange_Tuple_Gshort_c_C32long_g((itemToConvert.Item3), cloneOrChangeFunc, avoidCloningIfPossible));
                                                    }
                                                    /*Location7873*/
                                                    private static (int a, string b)? ConvertFromBytes__Pint_C32a_c_C32string_C32b_p_C63(LazinatorMemory storage)
                                                    {
                                                        if (storage.Length == 0)
                                                        {
                                                            return default;
                                                        }
                                                        ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                        
                                                        int bytesSoFar = 0;
                                                        /*Location7874*/
                                                        int item1 = span.ToDecompressedInt(ref bytesSoFar);
                                                        /*Location7875*/
                                                        string item2 = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
                                                        /*Location7876*/
                                                        var tupleType = (item1, item2);
                                                        
                                                        return tupleType;
                                                    }
                                                    
                                                    private static void ConvertToBytes__Pint_C32a_c_C32string_C32b_p_C63(ref BinaryBufferWriter writer, (int a, string b)? itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                    {
                                                        /*Location7877*/if (itemToConvert == null)
                                                        {
                                                            return;
                                                        }
                                                        /*Location7878*/
                                                        CompressedIntegralTypes.WriteCompressedInt(ref writer, itemToConvert.Value.Item1);
                                                        /*Location7879*/
                                                        EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, itemToConvert.Value.Item2);
                                                        /*Location7880*/}
                                                        /*Location7881*/
                                                        private static (int a, string b)? CloneOrChange__Pint_C32a_c_C32string_C32b_p_C63((int a, string b)? itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                        {
                                                            if (itemToConvert == null)
                                                            {
                                                                return default((int a, string b)?);
                                                            }
                                                            
                                                            return ((int) (itemToConvert?.Item1 ?? default),(string) (itemToConvert?.Item2 ?? default));
                                                        }
                                                        /*Location7882*/
                                                        private static Tuple<short, long> ConvertFromBytes_Tuple_Gshort_c_C32long_g(LazinatorMemory storage)
                                                        {
                                                            if (storage.Length == 0)
                                                            {
                                                                return default;
                                                            }
                                                            ReadOnlySpan<byte> span = storage.ReadOnlySpan;
                                                            
                                                            int bytesSoFar = 0;
                                                            /*Location7883*/
                                                            short item1 = span.ToDecompressedShort(ref bytesSoFar);
                                                            /*Location7884*/
                                                            long item2 = span.ToDecompressedLong(ref bytesSoFar);
                                                            /*Location7885*/
                                                            var tupleType = new Tuple<short, long>(item1, item2);
                                                            
                                                            return tupleType;
                                                        }
                                                        
                                                        private static void ConvertToBytes_Tuple_Gshort_c_C32long_g(ref BinaryBufferWriter writer, Tuple<short, long> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                                        {
                                                            /*Location7886*/if (itemToConvert == null)
                                                            {
                                                                return;
                                                            }
                                                            /*Location7887*/
                                                            CompressedIntegralTypes.WriteCompressedShort(ref writer, itemToConvert.Item1);
                                                            /*Location7888*/
                                                            CompressedIntegralTypes.WriteCompressedLong(ref writer, itemToConvert.Item2);
                                                            /*Location7889*/}
                                                            /*Location7890*/
                                                            private static Tuple<short, long> CloneOrChange_Tuple_Gshort_c_C32long_g(Tuple<short, long> itemToConvert, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                                            {
                                                                if (itemToConvert == null)
                                                                {
                                                                    return default(Tuple<short, long>);
                                                                }
                                                                
                                                                return new Tuple<short, long>((short) (itemToConvert?.Item1 ?? default),(long) (itemToConvert?.Item2 ?? default));
                                                            }
                                                            /*Location7891*/
                                                        }
                                                    }
