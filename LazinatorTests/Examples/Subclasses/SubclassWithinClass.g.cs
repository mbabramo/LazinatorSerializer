//9c16394e-9044-15dc-6d38-c6fe62f19826
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.121
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LazinatorTests.Examples.Subclasses
{
    using Lazinator.Attributes;
    using Lazinator.Buffers;
    using Lazinator.Core;
    using Lazinator.Exceptions;
    using Lazinator.Support;
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Runtime.InteropServices;
    using static Lazinator.Core.LazinatorUtilities;
    
    public partial class ClassWithSubclass
    {
        [Autogenerated]
        public partial class SubclassWithinClass : ILazinator
        {
            /* Serialization, deserialization, and object relationships */
            
            protected ILazinator _LazinatorParentClass;
            public SubclassWithinClass() : base()
            {
            }
            
            public virtual ILazinator LazinatorParentClass 
            { 
                get => _LazinatorParentClass;
                set
                {
                    _LazinatorParentClass = value;
                    if (value != null && (IsDirty || DescendantIsDirty))
                    {
                        value.DescendantIsDirty = true;
                    }
                }
            }
            
            protected IncludeChildrenMode OriginalIncludeChildrenMode;
            
            public virtual int Deserialize()
            {
                ResetAccessedProperties();
                int bytesSoFar = 0;
                ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
                if (span.Length == 0)
                {
                    return 0;
                }
                
                LazinatorGenericID = GetGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
                
                int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
                
                int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
                
                OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
                
                ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
                return bytesSoFar;
            }
            
            public virtual MemoryInBuffer SerializeNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness)
            {
                return EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, true, verifyCleanness, IsDirty, DescendantIsDirty, false, LazinatorObjectBytes, (StreamManuallyDelegate) EncodeToNewBuffer);
            }
            
            protected virtual MemoryInBuffer EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness) => LazinatorUtilities.EncodeToNewBinaryBufferWriter(this, includeChildrenMode, verifyCleanness);
            
            public virtual ILazinator CloneLazinator()
            {
                return CloneLazinator(OriginalIncludeChildrenMode);
            }
            
            public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode)
            {
                MemoryInBuffer bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, false, IsDirty, DescendantIsDirty, false, LazinatorObjectBytes, (StreamManuallyDelegate)EncodeToNewBuffer);
                var clone = new SubclassWithinClass()
                {
                    LazinatorParentClass = LazinatorParentClass,
                    OriginalIncludeChildrenMode = includeChildrenMode,
                    HierarchyBytes = bytes,
                };
                clone.LazinatorParentClass = null;
                return clone;
            }
            
            protected bool _IsDirty;
            public virtual bool IsDirty
            {
                [DebuggerStepThrough]
                get => _IsDirty;
                [DebuggerStepThrough]
                set
                {
                    if (_IsDirty != value)
                    {
                        _IsDirty = value;
                        if (_IsDirty)
                        {
                            InformParentOfDirtiness();
                        }
                    }
                }
            }
            
            public virtual InformParentOfDirtinessDelegate InformParentOfDirtinessDelegate { get; set; }
            public virtual void InformParentOfDirtiness()
            {
                if (InformParentOfDirtinessDelegate == null)
                {
                    if (LazinatorParentClass != null)
                    {
                        LazinatorParentClass.DescendantIsDirty = true;
                    }
                }
                else
                {
                    InformParentOfDirtinessDelegate();
                }
            }
            
            protected bool _DescendantIsDirty;
            public virtual bool DescendantIsDirty
            {
                [DebuggerStepThrough]
                get => _DescendantIsDirty;
                [DebuggerStepThrough]
                set
                {
                    if (_DescendantIsDirty != value)
                    {
                        _DescendantIsDirty = value;
                        if (_DescendantIsDirty && LazinatorParentClass != null)
                        {
                            LazinatorParentClass.DescendantIsDirty = true;
                        }
                    }
                }
            }
            
            private MemoryInBuffer _HierarchyBytes;
            public virtual MemoryInBuffer HierarchyBytes
            {
                set
                {
                    _HierarchyBytes = value;
                    LazinatorObjectBytes = value.FilledMemory;
                }
            }
            
            protected ReadOnlyMemory<byte> _LazinatorObjectBytes;
            public virtual ReadOnlyMemory<byte> LazinatorObjectBytes
            {
                get => _LazinatorObjectBytes;
                set
                {
                    _LazinatorObjectBytes = value;
                    int length = Deserialize();
                    _LazinatorObjectBytes = _LazinatorObjectBytes.Slice(0, length);
                }
            }
            
            public virtual void LazinatorConvertToBytes()
            {
                if (!IsDirty && !DescendantIsDirty && _LazinatorObjectBytes.Length > 0)
                {
                    return;
                }
                MemoryInBuffer bytes = EncodeOrRecycleToNewBuffer(IncludeChildrenMode.IncludeAllChildren, OriginalIncludeChildrenMode, false, false, IsDirty, DescendantIsDirty, false, LazinatorObjectBytes, (StreamManuallyDelegate)EncodeToNewBuffer);
                _LazinatorObjectBytes = bytes.FilledMemory;
            }
            
            public virtual int GetByteLength()
            {
                LazinatorConvertToBytes();
                return _LazinatorObjectBytes.Length;
            }
            
            public virtual uint GetBinaryHashCode32()
            {
                LazinatorConvertToBytes();
                return FarmhashByteSpans.Hash32(LazinatorObjectBytes.Span);
            }
            
            public virtual ulong GetBinaryHashCode64()
            {
                LazinatorConvertToBytes();
                return FarmhashByteSpans.Hash64(LazinatorObjectBytes.Span);
            }
            
            public virtual Guid GetBinaryHashCode128()
            {
                LazinatorConvertToBytes();
                return FarmhashByteSpans.Hash128(LazinatorObjectBytes.Span);
            }
            
            /* Property definitions */
            
            
            private string _StringWithinSubclass;
            public string StringWithinSubclass
            {
                get
                {
                    return _StringWithinSubclass;
                }
                set
                {
                    IsDirty = true;
                    _StringWithinSubclass = value;
                }
            }
            
            public IEnumerable<ILazinator> GetDirtyNodes() => GetDirtyNodes(null, null, false);
            
            public IEnumerable<ILazinator> GetDirtyNodes(Func<ILazinator, bool> exploreCriterion, Func<ILazinator, bool> yieldCriterion, bool onlyHighestDirty)
            {
                if (IsDirty)
                {
                    bool yield = (yieldCriterion == null) ? true : yieldCriterion(this);
                    if (yield)
                    {
                        yield return this;
                        if (onlyHighestDirty)
                        {
                            yield break;
                        }
                    }
                }
                bool explore = (exploreCriterion == null) ? true : exploreCriterion(this);
                if (explore && DescendantIsDirty)
                {
                    foreach (ILazinator dirty in GetDirtyNodes_Helper(exploreCriterion, yieldCriterion, onlyHighestDirty))
                    {
                        yield return dirty;
                    }
                }
            }
            
            protected virtual IEnumerable<ILazinator> GetDirtyNodes_Helper(Func<ILazinator, bool> exploreCriterion, Func<ILazinator, bool> yieldCriterion, bool onlyHighestDirty)
            {
                yield break;
            }
            
            protected virtual void ResetAccessedProperties()
            {
                
            }
            
            /* Conversion */
            
            public virtual int LazinatorUniqueID => 258;
            
            protected virtual bool ContainsOpenGenericParameters => false;
            protected virtual LazinatorGenericIDType _LazinatorGenericID { get; set; }
            public virtual LazinatorGenericIDType LazinatorGenericID
            {
                get => default;
                set { }
            }
            
            public virtual int LazinatorObjectVersion { get; set; } = 0;
            
            
            public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
            {
                ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
                _StringWithinSubclass = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
            }
            
            public virtual void SerializeExistingBuffer(BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                int startPosition = writer.Position;
                WritePropertiesIntoBuffer(writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                if (updateStoredBuffer)
                {
                    
                    _IsDirty = false;
                    _DescendantIsDirty = false;
                    
                    _LazinatorObjectBytes = writer.Slice(startPosition);
                }
            }
            protected virtual void WritePropertiesIntoBuffer(BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
            {
                // header information
                if (includeUniqueID)
                {
                    if (LazinatorGenericID.IsEmpty)
                    {
                        CompressedIntegralTypes.WriteCompressedInt(writer, LazinatorUniqueID);
                    }
                    else
                    {
                        WriteLazinatorGenericID(writer, LazinatorGenericID);
                    }
                }
                CompressedIntegralTypes.WriteCompressedInt(writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                CompressedIntegralTypes.WriteCompressedInt(writer, LazinatorObjectVersion);
                writer.Write((byte)includeChildrenMode);
                // write properties
                EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(writer, _StringWithinSubclass);
            }
            
        }
        
    }
}
