/*Location8393*//*Location8379*///1c783a4a-a9a5-6e90-9750-6d16f6a5709a
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorTests.Examples.Subclasses
{/*Location8380*/
    using Lazinator.Attributes;/*Location8381*/
    using Lazinator.Buffers;/*Location8382*/
    using Lazinator.Core;/*Location8383*/
    using Lazinator.Exceptions;/*Location8384*/
    using Lazinator.Support;/*Location8385*/
    using System;/*Location8386*/
    using System.Buffers;/*Location8387*/
    using System.Collections.Generic;/*Location8388*/
    using System.Diagnostics;/*Location8389*/
    using System.IO;/*Location8390*/
    using System.Linq;/*Location8391*/
    using System.Runtime.InteropServices;/*Location8392*/
    using static Lazinator.Core.LazinatorUtilities;
    
    public partial class ClassWithSubclass
    {
        [Autogenerated]
        public partial class SubclassWithinClass : ILazinator
        {
            /*Location8394*/public bool IsStruct => false;
            
            /*Location8395*//* Property definitions */
            
            
            /*Location8396*/
            protected string _StringWithinSubclass;
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public string StringWithinSubclass
            {
                get
                {
                    return _StringWithinSubclass;
                }
                set
                {
                    IsDirty = true;
                    _StringWithinSubclass = value;
                }
            }
            /*Location8398*/
            /* Serialization, deserialization, and object relationships */
            
            public SubclassWithinClass(IncludeChildrenMode originalIncludeChildrenMode)
            {
                OriginalIncludeChildrenMode = originalIncludeChildrenMode;
            }
            
            public SubclassWithinClass(LazinatorMemory serializedBytes, ILazinator parent = null)
            {
                LazinatorParents = new LazinatorParentsCollection(parent);
                DeserializeLazinator(serializedBytes);
                HasChanged = false;
                DescendantHasChanged = false;
            }
            
            public virtual LazinatorParentsCollection LazinatorParents { get; set; }
            
            public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
            
            public virtual int Deserialize()
            {
                FreeInMemoryObjects();
                int bytesSoFar = 0;
                ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
                if (span.Length == 0)
                {
                    return 0;
                }
                
                ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
                
                int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
                
                int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
                
                OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
                
                ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
                return bytesSoFar;
            }
            
            public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
            {
                if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
                {
                    return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
                }
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                return writer.LazinatorMemory;
            }
            
            protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
            {
                int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
                BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
                SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
                return writer.LazinatorMemory;
            }
            
            public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
            {
                SubclassWithinClass clone;
                if (cloneBufferOptions == CloneBufferOptions.NoBuffer)
                {
                    clone = new SubclassWithinClass(includeChildrenMode);
                    clone.LazinatorObjectVersion = LazinatorObjectVersion;
                    clone = (SubclassWithinClass)AssignCloneProperties(clone, includeChildrenMode);
                }
                else
                {
                    LazinatorMemory bytes = EncodeOrRecycleToNewBuffer(includeChildrenMode, OriginalIncludeChildrenMode, false, IsDirty, DescendantIsDirty, false, LazinatorMemoryStorage, false, this);
                    clone = new SubclassWithinClass(bytes);
                }
                return clone;
            }
            
            public virtual ILazinator AssignCloneProperties(ILazinator clone, IncludeChildrenMode includeChildrenMode)
            {
                clone.FreeInMemoryObjects();
                SubclassWithinClass typedClone = (SubclassWithinClass) clone;
                /*Location8397*/typedClone.StringWithinSubclass = StringWithinSubclass;
                
                return typedClone;
            }
            
            public virtual bool HasChanged { get; set; }
            
            protected bool _IsDirty;
            public virtual bool IsDirty
            {
                [DebuggerStepThrough]
                get => _IsDirty|| LazinatorObjectBytes.Length == 0;
                [DebuggerStepThrough]
                set
                {
                    if (_IsDirty != value)
                    {
                        _IsDirty = value;
                        if (_IsDirty)
                        {
                            LazinatorParents.InformParentsOfDirtiness();
                            HasChanged = true;
                        }
                    }
                }
            }
            
            protected bool _DescendantHasChanged;
            public virtual bool DescendantHasChanged
            {
                [DebuggerStepThrough]
                get => _DescendantHasChanged;
                [DebuggerStepThrough]
                set
                {
                    _DescendantHasChanged = value;
                }
            }
            
            protected bool _DescendantIsDirty;
            public virtual bool DescendantIsDirty
            {
                [DebuggerStepThrough]
                get => _DescendantIsDirty;
                [DebuggerStepThrough]
                set
                {
                    if (_DescendantIsDirty != value)
                    {
                        _DescendantIsDirty = value;
                        if (_DescendantIsDirty)
                        {
                            LazinatorParents.InformParentsOfDirtiness();
                            _DescendantHasChanged = true;
                        }
                    }
                }
            }
            
            public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
            {
                LazinatorMemoryStorage = serializedBytes;
                int length = Deserialize();
                if (length != LazinatorMemoryStorage.Length)
                {
                    LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
                }
            }
            
            public virtual LazinatorMemory LazinatorMemoryStorage
            {
                get;
                set;
            }
            protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
            
            public virtual void UpdateStoredBuffer()
            {
                if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                {
                    return;
                }
                var previousBuffer = LazinatorMemoryStorage;
                if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
                {
                    LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
                }
                else
                {
                    BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                    writer.Write(LazinatorMemoryStorage.Span);
                    LazinatorMemoryStorage = writer.LazinatorMemory;
                }
                OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
                if (!LazinatorParents.Any())
                {
                    previousBuffer.Dispose();
                }
            }
            
            public virtual int GetByteLength()
            {
                UpdateStoredBuffer();
                return LazinatorObjectBytes.Length;
            }
            
            public virtual bool NonBinaryHash32 => false;
            
            /*Location8399*/
            public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
            {
                bool match = (matchCriterion == null) ? true : matchCriterion(this);
                bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
                if (match)
                {
                    yield return this;
                }
                if (explore)
                {
                    foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                    {
                        yield return item.descendant;
                    }
                }
            }
            
            /*Location8400*/public virtual IEnumerable<(string propertyName, ILazinator descendant)> EnumerateLazinatorDescendants(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
            {
                /*Location8401*/yield break;
            }
            /*Location8402*/
            
            public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
            {
                /*Location8403*/yield return ("StringWithinSubclass", (object)StringWithinSubclass);
                /*Location8404*/yield break;
            }
            /*Location8405*/
            public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
            {
                /*Location8406*/if (changeThisLevel && changeFunc != null)
                {
                    return changeFunc(this);
                }
                return this;
            }
            /*Location8407*/
            public virtual void FreeInMemoryObjects()
            {
                
                IsDirty = false;
                DescendantIsDirty = false;
                HasChanged = false;
                DescendantHasChanged = false;
            }
            /*Location8408*/
            /* Conversion */
            
            public virtual int LazinatorUniqueID => 1058;
            
            protected virtual bool ContainsOpenGenericParameters => false;
            public virtual LazinatorGenericIDType LazinatorGenericID => default;
            
            
            public virtual int LazinatorObjectVersion { get; set; } = 0;
            
            
            /*Location8409*/public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
            {
                ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
                /*Location8410*/_StringWithinSubclass = span.ToString_VarIntLengthUtf8(ref bytesSoFar);
                /*Location8411*/        }
                
                /*Location8412*/public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                {
                    /*Location8413*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                    {
                        updateStoredBuffer = false;
                    }
                    /*Location8414*/int startPosition = writer.Position;
                    WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                    /*Location8415*/if (updateStoredBuffer)
                    {
                        UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                        /*Location8416*/}
                        /*Location8417*/}
                        /*Location8418*/
                        public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                        {
                            /*Location8419*/_IsDirty = false;
                            if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                            {
                                _DescendantIsDirty = false;/*Location8420*/
                                if (updateDeserializedChildren)
                                {
                                    UpdateDeserializedChildren(ref writer, startPosition);
                                    /*Location8421*/}
                                    /*Location8422*//*Location8423*/
                                }
                                else
                                {
                                    ThrowHelper.ThrowCannotUpdateStoredBuffer();
                                }
                                /*Location8424*/
                                var newBuffer = writer.Slice(startPosition, length);
                                LazinatorMemoryStorage = newBuffer;
                                /*Location8425*/}
                                /*Location8426*/
                                protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                                {
                                    /*Location8427*/}
                                    
                                    /*Location8428*/
                                    protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                                    {
                                        // header information
                                        /*Location8429*/if (includeUniqueID)
                                        {
                                            if (!ContainsOpenGenericParameters)
                                            {
                                                CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                            }
                                            else
                                            {
                                                WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                                            }
                                        }
                                        /*Location8430*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                        CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                        writer.Write((byte)includeChildrenMode);
                                        /*Location8431*/// write properties
                                        /*Location8432*/EncodeCharAndString.WriteStringUtf8WithVarIntPrefix(ref writer, _StringWithinSubclass);
                                        /*Location8433*/}
                                        /*Location8434*/
                                    }
                                    /*Location8435*/
                                }
                            }
