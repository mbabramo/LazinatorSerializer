using System.Collections.Generic;

namespace Lazinator.CodeDescription
{
    public static class PrimitiveReadWriteMethodNames
    {
        public static readonly Dictionary<string, string> ReadNames = new Dictionary<string, string>()
        {
            { "bool", $"ToBoolean" },
            { "byte", $"ToByte" },
            { "sbyte", $"ToSByte" },
            { "char", $"ToChar" },
            { "decimal", $"ToDecompressedDecimal" },
            { "float", $"ToSingle" },
            { "double", $"ToDouble" },
            { "short", $"ToDecompressedInt16" },
            { "ushort", $"ToDecompressedUInt16" },
            { "int", $"ToDecompressedInt32" },
            { "uint", $"ToDecompressedUInt32" },
            { "long", $"ToDecompressedInt64" },
            { "ulong", $"ToDecompressedUInt64" },
            { "TimeSpan", $"ToDecompressedTimeSpan" },
            { "DateTime", $"ToDecompressedDateTime" },
            { "Guid", $"ToGuid" },
            { "string", $"ToString_BrotliCompressedWithLength" },
            { "bool?", $"ToDecompressedNullableBool" },
            { "byte?", $"ToDecompressedNullableByte" },
            { "sbyte?", $"ToDecompressedNullableSByte" },
            { "char?", $"ToNullableChar" },
            { "decimal?", $"ToDecompressedNullableDecimal" },
            { "float?", $"ToNullableSingle" },
            { "double?", $"ToNullableDouble" },
            { "short?", $"ToDecompressedNullableInt16" },
            { "ushort?", $"ToDecompressedNullableUInt16" },
            { "int?", $"ToDecompressedNullableInt32" },
            { "uint?", $"ToDecompressedNullableUInt32" },
            { "long?", $"ToDecompressedNullableInt64" },
            { "ulong?", $"ToDecompressedNullableUInt64" },
            { "TimeSpan?", $"ToDecompressedNullableTimeSpan" },
            { "DateTime?", $"ToDecompressedNullableDateTime" },
            { "Guid?", $"ToNullableGuid" },
            { "string?", $"ToString_BrotliCompressedWithLength" },
        };


        public static readonly Dictionary<string, string> WriteNames = new Dictionary<string, string>()
        {
            { "bool", $"WriteUncompressedPrimitives.WriteBool" },
            { "byte", $"WriteUncompressedPrimitives.WriteByte" },
            { "sbyte", $"WriteUncompressedPrimitives.WriteSByte" },
            { "char", $"EncodeCharAndString.WriteCharInTwoBytes" },
            { "decimal", $"CompressedDecimal.WriteCompressedDecimal" },
            { "float", $"WriteUncompressedPrimitives.WriteSingle" },
            { "double", $"WriteUncompressedPrimitives.WriteDouble" },
            { "short", $"CompressedIntegralTypes.WriteCompressedShort" },
            { "ushort", $"CompressedIntegralTypes.WriteCompressedUShort" },
            { "int", $"CompressedIntegralTypes.WriteCompressedInt" },
            { "uint", $"CompressedIntegralTypes.WriteCompressedUInt" },
            { "long", $"CompressedIntegralTypes.WriteCompressedLong" },
            { "ulong", $"CompressedIntegralTypes.WriteCompressedULong" },
            { "TimeSpan", $"CompressedIntegralTypes.WriteCompressedTimeSpan" },
            { "DateTime", $"CompressedIntegralTypes.WriteCompressedDateTime" },
            { "Guid", $"WriteUncompressedPrimitives.WriteGuid" },
            { "string", $"EncodeCharAndString.WriteBrotliCompressedWithIntPrefix" },
            { "bool?", $"CompressedIntegralTypes.WriteCompressedNullableBool" },
            { "byte?", $"CompressedIntegralTypes.WriteCompressedNullableByte" },
            { "sbyte?", $"CompressedIntegralTypes.WriteCompressedNullableSByte" },
            { "char?", $"EncodeCharAndString.WriteNullableChar" },
            { "decimal?", $"CompressedDecimal.WriteCompressedNullableDecimal" },
            { "float?", $"WriteUncompressedPrimitives.WriteNullableSingle" },
            { "double?", $"WriteUncompressedPrimitives.WriteNullableDouble" },
            { "short?", $"CompressedIntegralTypes.WriteCompressedNullableShort" },
            { "ushort?", $"CompressedIntegralTypes.WriteCompressedNullableUShort" },
            { "int?", $"CompressedIntegralTypes.WriteCompressedNullableInt" },
            { "uint?", $"CompressedIntegralTypes.WriteCompressedNullableUInt" },
            { "long?", $"CompressedIntegralTypes.WriteCompressedNullableLong" },
            { "ulong?", $"CompressedIntegralTypes.WriteCompressedNullableULong" },
            { "TimeSpan?", $"CompressedIntegralTypes.WriteCompressedNullableTimeSpan" },
            { "DateTime?", $"CompressedIntegralTypes.WriteCompressedNullableDateTime" },
            { "Guid?", $"WriteUncompressedPrimitives.WriteNullableGuid" },
            { "string?", $"EncodeCharAndString.WriteBrotliCompressedWithIntPrefix" },
        };

        public static readonly Dictionary<string, string> ReadNamesUncompressed = new Dictionary<string, string>()
        {
            { "bool", $"ToBoolean" },
            { "byte", $"ToByte" },
            { "sbyte", $"ToSByte" },
            { "char", $"ToChar" },
            { "decimal", $"ToDecimal" },
            { "float", $"ToSingle" },
            { "double", $"ToDouble" },
            { "short", $"ToInt16" },
            { "ushort", $"ToUInt16" },
            { "int", $"ToInt32" },
            { "uint", $"ToUInt32" },
            { "long", $"ToInt64" },
            { "ulong", $"ToUInt64" },
            { "TimeSpan", $"ToTimeSpan" },
            { "DateTime", $"ToDateTime" },
            { "Guid", $"ToGuid" },
            { "string", $"ToString_VarIntLengthUtf8" },
            { "bool?", $"ToNullableBool" },
            { "byte?", $"ToNullableByte" },
            { "sbyte?", $"ToNullableSByte" },
            { "char?", $"ToNullableChar" },
            { "decimal?", $"ToNullableDecimal" },
            { "float?", $"ToNullableSingle" },
            { "double?", $"ToNullableDouble" },
            { "short?", $"ToNullableInt16" },
            { "ushort?", $"ToNullableUInt16" },
            { "int?", $"ToNullableInt32" },
            { "uint?", $"ToNullableUInt32" },
            { "long?", $"ToNullableInt64" },
            { "ulong?", $"ToNullableUInt64" },
            { "TimeSpan?", $"ToNullableTimeSpan" },
            { "DateTime?", $"ToNullableDateTime" },
            { "Guid?", $"ToNullableGuid" },
            { "string?", $"ToString_VarIntLengthUtf8" },
        };


        public static readonly Dictionary<string, string> WriteNamesUncompressed = new Dictionary<string, string>()
        {
            { "bool", $"WriteUncompressedPrimitives.WriteBool" },
            { "byte", $"WriteUncompressedPrimitives.WriteByte" },
            { "sbyte", $"WriteUncompressedPrimitives.WriteSByte" },
            { "char", $"EncodeCharAndString.WriteCharInTwoBytes" },
            { "decimal", $"WriteUncompressedPrimitives.WriteDecimal" },
            { "float", $"WriteUncompressedPrimitives.WriteSingle" },
            { "double", $"WriteUncompressedPrimitives.WriteDouble" },
            { "short", $"WriteUncompressedPrimitives.WriteShort" },
            { "ushort", $"WriteUncompressedPrimitives.WriteUShort" },
            { "int", $"WriteUncompressedPrimitives.WriteInt" },
            { "uint", $"WriteUncompressedPrimitives.WriteUInt" },
            { "long", $"WriteUncompressedPrimitives.WriteLong" },
            { "ulong", $"WriteUncompressedPrimitives.WriteULong" },
            { "TimeSpan", $"WriteUncompressedPrimitives.WriteTimeSpan" },
            { "DateTime", $"WriteUncompressedPrimitives.WriteDateTime" },
            { "Guid", $"WriteUncompressedPrimitives.WriteGuid" },
            { "string", $"EncodeCharAndString.WriteStringUtf8WithVarIntPrefix" },
            { "bool?", $"WriteUncompressedPrimitives.WriteNullableBool" },
            { "byte?", $"WriteUncompressedPrimitives.WriteNullableByte" },
            { "sbyte?", $"WriteUncompressedPrimitives.WriteNullableSByte" },
            { "char?", $"EncodeCharAndString.WriteNullableChar" },
            { "decimal?", $"WriteUncompressedPrimitives.WriteNullableDecimal" },
            { "float?", $"WriteUncompressedPrimitives.WriteNullableSingle" },
            { "double?", $"WriteUncompressedPrimitives.WriteNullableDouble" },
            { "short?", $"WriteUncompressedPrimitives.WriteNullableShort" },
            { "ushort?", $"WriteUncompressedPrimitives.WriteNullableUShort" },
            { "int?", $"WriteUncompressedPrimitives.WriteNullableInt" },
            { "uint?", $"WriteUncompressedPrimitives.WriteNullableUInt" },
            { "long?", $"WriteUncompressedPrimitives.WriteNullableLong" },
            { "ulong?", $"WriteUncompressedPrimitives.WriteNullableULong" },
            { "TimeSpan?", $"WriteUncompressedPrimitives.WriteNullableTimeSpan" },
            { "DateTime?", $"WriteUncompressedPrimitives.WriteNullableDateTime" },
            { "Guid?", $"WriteUncompressedPrimitives.WriteNullableGuid" },
            { "string?", $"EncodeCharAndString.WriteStringUtf8WithVarIntPrefix" },
        };
    }
}
