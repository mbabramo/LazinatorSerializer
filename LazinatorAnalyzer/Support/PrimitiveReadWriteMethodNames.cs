using System.Collections.Generic;

namespace Lazinator.CodeDescription
{
    public static class PrimitiveReadWriteMethodNames
    {
        public static readonly Dictionary<string, string> ReadNames = new Dictionary<string, string>()
        {
            { "bool", $"ToBoolean" },
            { "byte", $"ToByte" },
            { "sbyte", $"ToSByte" },
            { "char", $"ToChar" },
            { "decimal", $"ToDecompressedDecimal" },
            { "float", $"ToSingle" },
            { "double", $"ToDouble" },
            { "short", $"ToDecompressedShort" },
            { "ushort", $"ToDecompressedUshort" },
            { "int", $"ToDecompressedInt" },
            { "uint", $"ToDecompressedUint" },
            { "long", $"ToDecompressedLong" },
            { "ulong", $"ToDecompressedUlong" },
            { "TimeSpan", $"ToDecompressedTimeSpan" },
            { "DateTime", $"ToDecompressedDateTime" },
            { "Guid", $"ToGuid" },
            { "string", $"ToString_BrotliCompressedWithLength" },
            { "bool?", $"ToDecompressedNullableBool" },
            { "byte?", $"ToDecompressedNullableByte" },
            { "sbyte?", $"ToDecompressedNullableSByte" },
            { "char?", $"ToNullableChar" },
            { "decimal?", $"ToDecompressedNullableDecimal" },
            { "float?", $"ToNullableSingle" },
            { "double?", $"ToNullableDouble" },
            { "short?", $"ToDecompressedNullableShort" },
            { "ushort?", $"ToDecompressedNullableUshort" },
            { "int?", $"ToDecompressedNullableInt" },
            { "uint?", $"ToDecompressedNullableUint" },
            { "long?", $"ToDecompressedNullableLong" },
            { "ulong?", $"ToDecompressedNullableUlong" },
            { "TimeSpan?", $"ToDecompressedNullableTimeSpan" },
            { "DateTime?", $"ToDecompressedNullableDateTime" },
            { "Guid?", $"ToNullableGuid" },
            { "string?", $"ToString_BrotliCompressedWithLength" },
        };


        public static readonly Dictionary<string, string> WriteNames = new Dictionary<string, string>()
        {
            { "bool", $"WriteUncompressedPrimitives.WriteBool" },
            { "byte", $"WriteUncompressedPrimitives.WriteByte" },
            { "sbyte", $"WriteUncompressedPrimitives.WriteSByte" },
            { "char", $"EncodeCharAndString.WriteCharInTwoBytes" },
            { "decimal", $"CompressedDecimal.WriteCompressedDecimal" },
            { "float", $"WriteUncompressedPrimitives.WriteSingle" },
            { "double", $"WriteUncompressedPrimitives.WriteDouble" },
            { "short", $"CompressedIntegralTypes.WriteCompressedShort" },
            { "ushort", $"CompressedIntegralTypes.WriteCompressedUshort" },
            { "int", $"CompressedIntegralTypes.WriteCompressedInt" },
            { "uint", $"CompressedIntegralTypes.WriteCompressedUint" },
            { "long", $"CompressedIntegralTypes.WriteCompressedLong" },
            { "ulong", $"CompressedIntegralTypes.WriteCompressedUlong" },
            { "TimeSpan", $"CompressedIntegralTypes.WriteCompressedTimeSpan" },
            { "DateTime", $"CompressedIntegralTypes.WriteCompressedDateTime" },
            { "Guid", $"WriteUncompressedPrimitives.WriteGuid" },
            { "string", $"EncodeCharAndString.WriteBrotliCompressedWithIntPrefix" },
            { "bool?", $"CompressedIntegralTypes.WriteCompressedNullableBool" },
            { "byte?", $"CompressedIntegralTypes.WriteCompressedNullableByte" },
            { "sbyte?", $"CompressedIntegralTypes.WriteCompressedNullableSByte" },
            { "char?", $"EncodeCharAndString.WriteNullableChar" },
            { "decimal?", $"CompressedDecimal.WriteCompressedNullableDecimal" },
            { "float?", $"WriteUncompressedPrimitives.WriteNullableSingle" },
            { "double?", $"WriteUncompressedPrimitives.WriteNullableDouble" },
            { "short?", $"CompressedIntegralTypes.WriteCompressedNullableShort" },
            { "ushort?", $"CompressedIntegralTypes.WriteCompressedNullableUshort" },
            { "int?", $"CompressedIntegralTypes.WriteCompressedNullableInt" },
            { "uint?", $"CompressedIntegralTypes.WriteCompressedNullableUint" },
            { "long?", $"CompressedIntegralTypes.WriteCompressedNullableLong" },
            { "ulong?", $"CompressedIntegralTypes.WriteCompressedNullableUlong" },
            { "TimeSpan?", $"CompressedIntegralTypes.WriteCompressedNullableTimeSpan" },
            { "DateTime?", $"CompressedIntegralTypes.WriteCompressedNullableDateTime" },
            { "Guid?", $"WriteUncompressedPrimitives.WriteNullableGuid" },
            { "string?", $"EncodeCharAndString.WriteBrotliCompressedWithIntPrefix" },
        };

        public static readonly Dictionary<string, string> ReadNamesUncompressed = new Dictionary<string, string>()
        {
            { "bool", $"ToBoolean" },
            { "byte", $"ToByte" },
            { "sbyte", $"ToSByte" },
            { "char", $"ToChar" },
            { "decimal", $"ToDecimal" },
            { "float", $"ToSingle" },
            { "double", $"ToDouble" },
            { "short", $"ToShort" },
            { "ushort", $"ToUshort" },
            { "int", $"ToInt" },
            { "uint", $"ToUint" },
            { "long", $"ToLong" },
            { "ulong", $"ToUlong" },
            { "TimeSpan", $"ToTimeSpan" },
            { "DateTime", $"ToDateTime" },
            { "Guid", $"ToGuid" },
            { "string", $"ToString_VarIntLengthUtf8" },
            { "bool?", $"ToNullableBool" },
            { "byte?", $"ToNullableByte" },
            { "sbyte?", $"ToNullableSByte" },
            { "char?", $"ToNullableChar" },
            { "decimal?", $"ToNullableDecimal" },
            { "float?", $"ToNullableSingle" },
            { "double?", $"ToNullableDouble" },
            { "short?", $"ToNullableShort" },
            { "ushort?", $"ToNullableUshort" },
            { "int?", $"ToNullableInt" },
            { "uint?", $"ToNullableUint" },
            { "long?", $"ToNullableLong" },
            { "ulong?", $"ToNullableUlong" },
            { "TimeSpan?", $"ToNullableTimeSpan" },
            { "DateTime?", $"ToNullableDateTime" },
            { "Guid?", $"ToNullableGuid" },
            { "string?", $"ToString_VarIntLengthUtf8" },
        };


        public static readonly Dictionary<string, string> WriteNamesUncompressed = new Dictionary<string, string>()
        {
            { "bool", $"WriteUncompressedPrimitives.WriteBool" },
            { "byte", $"WriteUncompressedPrimitives.WriteByte" },
            { "sbyte", $"WriteUncompressedPrimitives.WriteSByte" },
            { "char", $"EncodeCharAndString.WriteCharInTwoBytes" },
            { "decimal", $"WriteUncompressedPrimitives.WriteDecimal" },
            { "float", $"WriteUncompressedPrimitives.WriteSingle" },
            { "double", $"WriteUncompressedPrimitives.WriteDouble" },
            { "short", $"WriteUncompressedPrimitives.WriteShort" },
            { "ushort", $"WriteUncompressedPrimitives.WriteUshort" },
            { "int", $"WriteUncompressedPrimitives.WriteInt" },
            { "uint", $"WriteUncompressedPrimitives.WriteUint" },
            { "long", $"WriteUncompressedPrimitives.WriteLong" },
            { "ulong", $"WriteUncompressedPrimitives.WriteUlong" },
            { "TimeSpan", $"WriteUncompressedPrimitives.WriteTimeSpan" },
            { "DateTime", $"WriteUncompressedPrimitives.WriteDateTime" },
            { "Guid", $"WriteUncompressedPrimitives.WriteGuid" },
            { "string", $"EncodeCharAndString.WriteStringUtf8WithVarIntPrefix" },
            { "bool?", $"WriteUncompressedPrimitives.WriteNullableBool" },
            { "byte?", $"WriteUncompressedPrimitives.WriteNullableByte" },
            { "sbyte?", $"WriteUncompressedPrimitives.WriteNullableSByte" },
            { "char?", $"EncodeCharAndString.WriteNullableChar" },
            { "decimal?", $"WriteUncompressedPrimitives.WriteNullableDecimal" },
            { "float?", $"WriteUncompressedPrimitives.WriteNullableSingle" },
            { "double?", $"WriteUncompressedPrimitives.WriteNullableDouble" },
            { "short?", $"WriteUncompressedPrimitives.WriteNullableShort" },
            { "ushort?", $"WriteUncompressedPrimitives.WriteNullableUshort" },
            { "int?", $"WriteUncompressedPrimitives.WriteNullableInt" },
            { "uint?", $"WriteUncompressedPrimitives.WriteNullableUint" },
            { "long?", $"WriteUncompressedPrimitives.WriteNullableLong" },
            { "ulong?", $"WriteUncompressedPrimitives.WriteNullableUlong" },
            { "TimeSpan?", $"WriteUncompressedPrimitives.WriteNullableTimeSpan" },
            { "DateTime?", $"WriteUncompressedPrimitives.WriteNullableDateTime" },
            { "Guid?", $"WriteUncompressedPrimitives.WriteNullableGuid" },
            { "string?", $"EncodeCharAndString.WriteStringUtf8WithVarIntPrefix" },
        };
    }
}
