/*Location8332*//*Location8318*///f6b67d7f-7731-dbc6-5f6d-44aab810d8e7
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorCollections
{/*Location8319*/
    using Lazinator.Attributes;/*Location8320*/
    using Lazinator.Buffers;/*Location8321*/
    using Lazinator.Core;/*Location8322*/
    using Lazinator.Exceptions;/*Location8323*/
    using Lazinator.Support;/*Location8324*/
    using System;/*Location8325*/
    using System.Buffers;/*Location8326*/
    using System.Collections.Generic;/*Location8327*/
    using System.Diagnostics;/*Location8328*/
    using System.IO;/*Location8329*/
    using System.Linq;/*Location8330*/
    using System.Runtime.InteropServices;/*Location8331*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class LazinatorSortedList<T> : LazinatorList<T>, ILazinator
    {
        /*Location8333*//* Property definitions */
        
        
        /*Location8334*/        /* Clone overrides */
        
        public LazinatorSortedList(LazinatorConstructorEnum constructorEnum) : base(constructorEnum)
        {
        }
        
        public LazinatorSortedList(LazinatorMemory serializedBytes, ILazinator parent = null) : base(serializedBytes, parent)
        {
        }
        
        public override ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            var clone = new LazinatorSortedList<T>(LazinatorConstructorEnum.LazinatorConstructor)
            {
                OriginalIncludeChildrenMode = includeChildrenMode
            };
            clone = CompleteClone(this, clone, includeChildrenMode, cloneBufferOptions);
            return clone;
        }
        
        /* Properties */
        /*Location8335*/
        
        public override IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            foreach (var inheritedYield in base.EnumerateNonLazinatorProperties())
            {
                yield return inheritedYield;
            }
            /*Location8336*/yield break;
        }
        /*Location8337*/
        public override ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            base.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, false);
            /*Location8338*/if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location8339*/
        public override void FreeInMemoryObjects()
        {
            base.FreeInMemoryObjects();
            
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
            OnFreeInMemoryObjects();
        }
        /*Location8340*/
        /* Conversion */
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override int LazinatorUniqueID => 219;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override bool ContainsOpenGenericParameters => true;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override LazinatorGenericIDType LazinatorGenericID => LazinatorGenericIDType.GetCachedForType<LazinatorSortedList<T>>(() => DeserializationFactory.Instance.GetUniqueIDListForGenericType(219, new Type[] { typeof(T) }));
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public override int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location8341*/public override void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            base.ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location8342*/        }
            
            /*Location8343*/public override void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location8344*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location8345*/PreSerialization(verifyCleanness, updateStoredBuffer);
                int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location8346*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location8347*/}
                    /*Location8348*/}
                    /*Location8349*/
                    public override void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location8350*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location8351*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location8352*/OnUpdateDeserializedChildren(ref writer, startPosition);
                            }
                            /*Location8353*//*Location8354*/
                        }
                        else
                        {
                            ThrowHelper.ThrowCannotUpdateStoredBuffer();
                        }
                        /*Location8355*/
                        var newBuffer = writer.Slice(startPosition, length);
                        LazinatorMemoryStorage = newBuffer;
                        /*Location8356*/}
                        /*Location8357*/
                        protected override void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                        {
                            base.UpdateDeserializedChildren(ref writer, startPosition);
                            /*Location8358*/}
                            
                            /*Location8359*/
                            protected override void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                            {
                                base.WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, includeUniqueID);
                                /*Location8360*/// write properties
                                /*Location8361*/OnPropertiesWritten(updateStoredBuffer);
                                /*Location8362*/}
                                /*Location8363*/
                            }
                        }
