/*Location8011*//*Location7996*///e457ab57-c41b-ffae-1a68-a50aec08df6c
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Lazinator tool, version 0.1.0.380
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable disable
namespace LazinatorCollections
{/*Location7997*/
    using Lazinator.Attributes;/*Location7998*/
    using Lazinator.Buffers;/*Location7999*/
    using Lazinator.Core;/*Location8000*/
    using Lazinator.Exceptions;/*Location8001*/
    using Lazinator.Support;/*Location8002*/
    using LazinatorCollections.OffsetList;/*Location8003*/
    using System;/*Location8004*/
    using System.Buffers;/*Location8005*/
    using System.Collections.Generic;/*Location8006*/
    using System.Diagnostics;/*Location8007*/
    using System.IO;/*Location8008*/
    using System.Linq;/*Location8009*/
    using System.Runtime.InteropServices;/*Location8010*/
    using static Lazinator.Core.LazinatorUtilities;
    
    [Autogenerated]
    public partial class LazinatorList<T> : ILazinator
    {
        /*Location8012*/[DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public bool IsStruct => false;
        
        /*Location8013*//* Property definitions */
        
        /*Location8014*/        protected int _MainListSerialized_ByteIndex;
        /*Location8015*/        protected int _Offsets_ByteIndex;
        /*Location8016*/protected virtual int _MainListSerialized_ByteLength => _Offsets_ByteIndex - _MainListSerialized_ByteIndex;
        /*Location8017*/private int _LazinatorList_T_EndByteIndex;
        /*Location8018*/protected virtual int _Offsets_ByteLength => _LazinatorList_T_EndByteIndex - _Offsets_ByteIndex;
        
        /*Location8019*/
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _AllowDuplicates;
        public bool AllowDuplicates
        {
            [DebuggerStepThrough]
            get
            {
                return _AllowDuplicates;
            }
            [DebuggerStepThrough]
            protected set
            {
                IsDirty = true;
                _AllowDuplicates = value;
            }
        }
        /*Location8020*/public ReadOnlyMemory<byte> MainListSerialized
        {
            get => throw new NotImplementedException(); // placeholder only
            set => throw new NotImplementedException(); // placeholder only
        }
        /*Location8021*/
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected LazinatorOffsetList _Offsets;
        protected LazinatorOffsetList Offsets
        {
            [DebuggerStepThrough]
            get
            {
                if (!_Offsets_Accessed)
                {
                    Lazinate_Offsets();
                } 
                return _Offsets;
            }
            [DebuggerStepThrough]
            set
            {
                if (_Offsets != null)
                {
                    _Offsets.LazinatorParents = _Offsets.LazinatorParents.WithRemoved(this);
                }
                if (value != null)
                {
                    value.LazinatorParents = value.LazinatorParents.WithAdded(this);
                }
                
                IsDirty = true;
                DescendantIsDirty = true;
                _Offsets = value;
                _Offsets_Accessed = true;
            }
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _Offsets_Accessed;
        private void Lazinate_Offsets()
        {
            if (LazinatorObjectBytes.Length == 0)
            {
                _Offsets = null;
            }
            else
            {
                LazinatorMemory childData = GetChildSlice(LazinatorMemoryStorage, _Offsets_ByteIndex, _Offsets_ByteLength, false, false, null);
                
                _Offsets = DeserializationFactory.Instance.CreateBaseOrDerivedType(200, () => new LazinatorOffsetList(LazinatorConstructorEnum.LazinatorConstructor), childData, this); 
            }
            
            _Offsets_Accessed = true;
        }
        
        /*Location8024*/
        /* Serialization, deserialization, and object relationships */
        
        public LazinatorList(LazinatorConstructorEnum constructorEnum)
        {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual LazinatorParentsCollection LazinatorParents { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual IncludeChildrenMode OriginalIncludeChildrenMode { get; set; }
        
        public virtual int Deserialize()
        {
            FreeInMemoryObjects();
            int bytesSoFar = 0;
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            if (span.Length == 0)
            {
                return 0;
            }
            
            ReadGenericIDIfApplicable(ContainsOpenGenericParameters, LazinatorUniqueID, span, ref bytesSoFar);
            
            int lazinatorLibraryVersion = span.ToDecompressedInt(ref bytesSoFar);
            
            int serializedVersionNumber = span.ToDecompressedInt(ref bytesSoFar);
            
            OriginalIncludeChildrenMode = (IncludeChildrenMode)span.ToByte(ref bytesSoFar);
            
            ConvertFromBytesAfterHeader(OriginalIncludeChildrenMode, serializedVersionNumber, ref bytesSoFar);
            PostDeserialization();
            return bytesSoFar;
        }
        
        public virtual LazinatorMemory SerializeLazinator(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            if (LazinatorMemoryStorage.IsEmpty || includeChildrenMode != OriginalIncludeChildrenMode || (verifyCleanness || IsDirty || (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && DescendantIsDirty)))
            {
                return EncodeToNewBuffer(includeChildrenMode, verifyCleanness, updateStoredBuffer);
            }
            BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
            writer.Write(LazinatorMemoryStorage.Span);
            return writer.LazinatorMemory;
        }
        
        protected virtual LazinatorMemory EncodeToNewBuffer(IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer) 
        {
            int bufferSize = LazinatorMemoryStorage.Length == 0 ? ExpandableBytes.DefaultMinBufferSize : LazinatorMemoryStorage.Length;
            BinaryBufferWriter writer = new BinaryBufferWriter(bufferSize);
            SerializeExistingBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer);
            return writer.LazinatorMemory;
        }
        
        public virtual ILazinator CloneLazinator(IncludeChildrenMode includeChildrenMode = IncludeChildrenMode.IncludeAllChildren, CloneBufferOptions cloneBufferOptions = CloneBufferOptions.IndependentBuffers)
        {
            var clone = new LazinatorList<T>(LazinatorConstructorEnum.LazinatorConstructor)
            {
                OriginalIncludeChildrenMode = includeChildrenMode
            };
            clone = CompleteClone(this, clone, includeChildrenMode, cloneBufferOptions);
            return clone;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual bool HasChanged { get; set; }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _IsDirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual bool IsDirty
        {
            [DebuggerStepThrough]
            get => _IsDirty|| LazinatorObjectBytes.Length == 0;
            [DebuggerStepThrough]
            set
            {
                if (_IsDirty != value)
                {
                    _IsDirty = value;
                    if (_IsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        HasChanged = true;
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _DescendantHasChanged;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual bool DescendantHasChanged
        {
            [DebuggerStepThrough]
            get => _DescendantHasChanged;
            [DebuggerStepThrough]
            set
            {
                _DescendantHasChanged = value;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected bool _DescendantIsDirty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual bool DescendantIsDirty
        {
            [DebuggerStepThrough]
            get => _DescendantIsDirty;
            [DebuggerStepThrough]
            set
            {
                if (_DescendantIsDirty != value)
                {
                    _DescendantIsDirty = value;
                    if (_DescendantIsDirty)
                    {
                        LazinatorParents.InformParentsOfDirtiness();
                        _DescendantHasChanged = true;
                    }
                }
            }
        }
        
        public virtual void DeserializeLazinator(LazinatorMemory serializedBytes)
        {
            LazinatorMemoryStorage = serializedBytes;
            int length = Deserialize();
            if (length != LazinatorMemoryStorage.Length)
            {
                LazinatorMemoryStorage = LazinatorMemoryStorage.Slice(0, length);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual LazinatorMemory LazinatorMemoryStorage
        {
            get;
            set;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual ReadOnlyMemory<byte> LazinatorObjectBytes => LazinatorMemoryStorage.IsEmpty ? LazinatorMemory.EmptyReadOnlyMemory : LazinatorMemoryStorage.Memory;
        
        public virtual void UpdateStoredBuffer()
        {
            if (!IsDirty && !DescendantIsDirty && LazinatorObjectBytes.Length > 0 && OriginalIncludeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
            {
                return;
            }
            var previousBuffer = LazinatorMemoryStorage;
            if (LazinatorMemoryStorage.IsEmpty || IncludeChildrenMode.IncludeAllChildren != OriginalIncludeChildrenMode || (IsDirty || DescendantIsDirty))
            {
                LazinatorMemoryStorage = EncodeToNewBuffer(IncludeChildrenMode.IncludeAllChildren, false, true);
            }
            else
            {
                BinaryBufferWriter writer = new BinaryBufferWriter(LazinatorMemoryStorage.Length);
                writer.Write(LazinatorMemoryStorage.Span);
                LazinatorMemoryStorage = writer.LazinatorMemory;
            }
            OriginalIncludeChildrenMode = IncludeChildrenMode.IncludeAllChildren;
            if (!LazinatorParents.Any())
            {
                previousBuffer.Dispose();
            }
        }
        
        public virtual int GetByteLength()
        {
            UpdateStoredBuffer();
            return LazinatorObjectBytes.Length;
        }
        
        public virtual bool NonBinaryHash32 => false;
        
        /*Location8025*/
        public IEnumerable<ILazinator> EnumerateLazinatorNodes(Func<ILazinator, bool> matchCriterion, bool stopExploringBelowMatch, Func<ILazinator, bool> exploreCriterion, bool exploreOnlyDeserializedChildren, bool enumerateNulls)
        {
            bool match = (matchCriterion == null) ? true : matchCriterion(this);
            bool explore = (!match || !stopExploringBelowMatch) && ((exploreCriterion == null) ? true : exploreCriterion(this));
            if (match)
            {
                yield return this;
            }
            if (explore)
            {
                foreach (var item in EnumerateLazinatorDescendants(matchCriterion, stopExploringBelowMatch, exploreCriterion, exploreOnlyDeserializedChildren, enumerateNulls))
                {
                    yield return item.descendant;
                }
            }
        }
        
        /*Location8026*/
        
        public virtual IEnumerable<(string propertyName, object descendant)> EnumerateNonLazinatorProperties()
        {
            /*Location8027*/yield return ("AllowDuplicates", (object)AllowDuplicates);
            /*Location8028*/yield break;
        }
        /*Location8029*/
        public virtual ILazinator ForEachLazinator(Func<ILazinator, ILazinator> changeFunc, bool exploreOnlyDeserializedChildren, bool changeThisLevel)
        {
            /*Location8030*/if ((!exploreOnlyDeserializedChildren && Offsets != null) || (_Offsets_Accessed && _Offsets != null))
            {
                _Offsets = (LazinatorOffsetList) _Offsets.ForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, true);
            }
            /*Location8031*/OnForEachLazinator(changeFunc, exploreOnlyDeserializedChildren, changeThisLevel);
            if (changeThisLevel && changeFunc != null)
            {
                return changeFunc(this);
            }
            return this;
        }
        /*Location8032*/
        public virtual void FreeInMemoryObjects()
        {
            _Offsets = default;
            _Offsets_Accessed = false;
            IsDirty = false;
            DescendantIsDirty = false;
            HasChanged = false;
            DescendantHasChanged = false;
            OnFreeInMemoryObjects();
        }
        /*Location8033*/
        /* Conversion */
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual int LazinatorUniqueID => 201;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual bool ContainsOpenGenericParameters => true;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual LazinatorGenericIDType LazinatorGenericID => LazinatorGenericIDType.GetCachedForType<LazinatorList<T>>(() => DeserializationFactory.Instance.GetUniqueIDListForGenericType(201, new Type[] { typeof(T) }));
        
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public virtual int LazinatorObjectVersion { get; set; } = 0;
        
        
        /*Location8034*/public virtual void ConvertFromBytesAfterHeader(IncludeChildrenMode includeChildrenMode, int serializedVersionNumber, ref int bytesSoFar)
        {
            ReadOnlySpan<byte> span = LazinatorObjectBytes.Span;
            /*Location8035*/_AllowDuplicates = span.ToBoolean(ref bytesSoFar);
            /*Location8036*/_MainListSerialized_ByteIndex = bytesSoFar;
            bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            /*Location8037*/_Offsets_ByteIndex = bytesSoFar;
            if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
            {
                bytesSoFar = span.ToInt32(ref bytesSoFar) + bytesSoFar;
            }
            
            /*Location8038*/_LazinatorList_T_EndByteIndex = bytesSoFar;
            /*Location8039*/        }
            
            /*Location8040*/public virtual void SerializeExistingBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
            {
                /*Location8041*/if (includeChildrenMode != IncludeChildrenMode.IncludeAllChildren)
                {
                    updateStoredBuffer = false;
                }
                /*Location8042*/PreSerialization(verifyCleanness, updateStoredBuffer);
                int startPosition = writer.Position;
                WritePropertiesIntoBuffer(ref writer, includeChildrenMode, verifyCleanness, updateStoredBuffer, true);
                /*Location8043*/if (updateStoredBuffer)
                {
                    UpdateStoredBuffer(ref writer, startPosition, writer.Position - startPosition, includeChildrenMode, false);
                    /*Location8044*/}
                    /*Location8045*/}
                    /*Location8046*/
                    public virtual void UpdateStoredBuffer(ref BinaryBufferWriter writer, int startPosition, int length, IncludeChildrenMode includeChildrenMode, bool updateDeserializedChildren)
                    {
                        /*Location8047*/_IsDirty = false;
                        if (includeChildrenMode == IncludeChildrenMode.IncludeAllChildren)
                        {
                            _DescendantIsDirty = false;/*Location8048*/
                            if (updateDeserializedChildren)
                            {
                                UpdateDeserializedChildren(ref writer, startPosition);
                                /*Location8049*/OnUpdateDeserializedChildren(ref writer, startPosition);
                            }
                            /*Location8050*//*Location8051*/
                        }
                        else
                        {
                            ThrowHelper.ThrowCannotUpdateStoredBuffer();
                        }
                        /*Location8052*/
                        var newBuffer = writer.Slice(startPosition, length);
                        LazinatorMemoryStorage = newBuffer;
                        /*Location8053*/}
                        /*Location8054*/
                        protected virtual void UpdateDeserializedChildren(ref BinaryBufferWriter writer, int startPosition)
                        {
                            /*Location8055*/if (_Offsets_Accessed && _Offsets != null)
                            {
                                Offsets.UpdateStoredBuffer(ref writer, startPosition + _Offsets_ByteIndex + sizeof(int), _Offsets_ByteLength - sizeof(int), IncludeChildrenMode.IncludeAllChildren, true);
                            }
                            
                            /*Location8056*/}
                            
                            /*Location8057*/
                            protected virtual void WritePropertiesIntoBuffer(ref BinaryBufferWriter writer, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer, bool includeUniqueID)
                            {
                                int startPosition = writer.Position;
                                int startOfObjectPosition = 0;
                                // header information
                                /*Location8058*/if (includeUniqueID)
                                {
                                    if (!ContainsOpenGenericParameters)
                                    {
                                        CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorUniqueID);
                                    }
                                    else
                                    {
                                        WriteLazinatorGenericID(ref writer, LazinatorGenericID);
                                    }
                                }
                                /*Location8059*/CompressedIntegralTypes.WriteCompressedInt(ref writer, Lazinator.Support.LazinatorVersionInfo.LazinatorIntVersion);
                                CompressedIntegralTypes.WriteCompressedInt(ref writer, LazinatorObjectVersion);
                                writer.Write((byte)includeChildrenMode);
                                /*Location8060*/// write properties
                                /*Location8061*/WriteUncompressedPrimitives.WriteBool(ref writer, _AllowDuplicates);
                                /*Location8062*/startOfObjectPosition = writer.Position;
                                /*Location8063*/WriteNonLazinatorObject(
                                nonLazinatorObject: default, isBelievedDirty: true,
                                isAccessed: true, writer: ref writer,
                                getChildSliceForFieldFn: () => GetChildSlice(LazinatorMemoryStorage, _MainListSerialized_ByteIndex, _MainListSerialized_ByteLength, false, false, null),
                                verifyCleanness: false,
                                binaryWriterAction: (ref BinaryBufferWriter w, bool v) =>
                                WriteMainList(ref w, default,
                                includeChildrenMode, v, updateStoredBuffer));
                                /*Location8064*/if (updateStoredBuffer)
                                {
                                    _MainListSerialized_ByteIndex = startOfObjectPosition - startPosition;
                                }
                                /*Location8065*/startOfObjectPosition = writer.Position;
                                /*Location8066*/if (includeChildrenMode != IncludeChildrenMode.ExcludeAllChildren && includeChildrenMode != IncludeChildrenMode.IncludeOnlyIncludableChildren)
                                {
                                    if ((includeChildrenMode != IncludeChildrenMode.IncludeAllChildren || includeChildrenMode != OriginalIncludeChildrenMode) && !_Offsets_Accessed)
                                    {
                                        var deserialized = Offsets;
                                    }
                                    WriteChild(ref writer, ref _Offsets, includeChildrenMode, _Offsets_Accessed, () => GetChildSlice(LazinatorMemoryStorage, _Offsets_ByteIndex, _Offsets_ByteLength, false, false, null), verifyCleanness, updateStoredBuffer, false, false, this);
                                }
                                
                                /*Location8067*/if (updateStoredBuffer)
                                {
                                    _Offsets_ByteIndex = startOfObjectPosition - startPosition;
                                }
                                /*Location8068*/if (updateStoredBuffer)
                                {
                                    /*Location8069*/_LazinatorList_T_EndByteIndex = writer.Position - startPosition;
                                    /*Location8070*/}
                                    /*Location8071*/OnPropertiesWritten(updateStoredBuffer);
                                    /*Location8072*/}
                                    /*Location8073*/
                                    /* Conversion of supported collections and tuples */
                                    /*Location8074*/
                                    private static ReadOnlyMemory<byte> ConvertFromBytes_ReadOnlyMemory_Gbyte_g(LazinatorMemory storage)
                                    {
                                        /*Location8075*/return storage.Memory.ToArray();
                                    }/*Location8076*/
                                    
                                    private static void ConvertToBytes_ReadOnlyMemory_Gbyte_g(ref BinaryBufferWriter writer, ReadOnlyMemory<byte> itemToConvert, IncludeChildrenMode includeChildrenMode, bool verifyCleanness, bool updateStoredBuffer)
                                    {
                                        /*Location8077*/writer.Write(itemToConvert.Span);
                                    }
                                    /*Location8078*/
                                    private static ReadOnlyMemory<byte> CloneOrChange_ReadOnlyMemory_Gbyte_g(ReadOnlyMemory<byte> itemToClone, Func<ILazinator, ILazinator> cloneOrChangeFunc, bool avoidCloningIfPossible)
                                    {
                                        int collectionLength = itemToClone.Length;
                                        Memory<byte> collection = new Memory<byte>(new byte[collectionLength]);
                                        var collectionAsSpan = collection.Span;
                                        var itemToCloneSpan = itemToClone.Span;
                                        int itemToCloneCount = itemToCloneSpan.Length;
                                        for (int itemIndex = 0; itemIndex < itemToCloneCount; itemIndex++)
                                        {
                                            var itemCopied = (byte) itemToCloneSpan[itemIndex];
                                            collectionAsSpan[itemIndex] = itemCopied;
                                        }
                                        return collection;
                                    }
                                    /*Location8079*/
                                }
                            }
